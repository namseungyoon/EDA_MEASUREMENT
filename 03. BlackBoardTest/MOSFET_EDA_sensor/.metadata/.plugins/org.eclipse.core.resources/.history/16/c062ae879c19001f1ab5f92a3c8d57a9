/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dac.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define fs					100//hz

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
float ms = 0;
uint8_t sec = 0;
uint16_t min = 0;
uint16_t ms_idx = 0;

uint16_t ADC_value[2] = {0,};
float fetEDA_LPF = 0;
float fetEDA_HPF = 0;

uint16_t DAC_value = 0;


// feedback register varibles
float fetEDA_Rfeed[2] = {1000000, 100000};
int Rfeed_i = 0;

// mosfet variables
float fetEDA_Vin = 0.0;
float fetEDA_Vgs = 0.0;
float fetEDA_Vth = 0.5;
float fetEDA_Vout[2][4096] = {0.0, };
float fetEDA_Ids_LUT[2][4096] = {0,};
float fetEDA_Ids[4096] = {0,};

uint16_t middle_DAC_value = 0;
uint16_t end_DAC_value = 0;
uint16_t start_DAC_value = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_DAC_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  DAC_value = 1900;
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_value);
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

  MOSFET_EDA_Measure_Ids();


  HAL_TIM_Base_Start_IT(&htim3);
  HAL_ADC_Start_DMA(&hadc1, &ADC_value[0], 2);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	HAL_UART_Transmit(&huart2, ptr, len, 20);

	return len;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM3)
	{
		fetEDA_LPF = (float)ADC_value[0]/4096 * 3;
		fetEDA_Vin = (float)ADC_value[1]/4096 * 3;
		printf("%dm %.2fs. fetEDA_LPF = %.4fv, fetEDA_Vin = %.4fv\r\n", min, sec+ms, fetEDA_LPF, fetEDA_Vin);

		ms = (float)ms_idx/fs;

		if(ms_idx >= fs)
		{
			ms_idx = 0;
			sec++;

			if(sec >= 60)
			{
				sec = 0;
				min++;
			}
		}
		ms_idx++;
	}
}

void MOSFET_EDA_Measure_Ids(void)
{
	// 1) Measurement Ids for 1Mohm, 100kohm Rfeed
	for (Rfeed_i = 0; Rfeed_i<2; Rfeed_i++)
	{
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
		HAL_Delay(1000);
		if (Rfeed_i == 0)
		{
			// 1Mohm
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
		}
	    else if (Rfeed_i == 1)
	    {
		    // 100kohm
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	    }
	    for (DAC_value = 0; DAC_value < 4096; DAC_value++)
	    {
	    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_value);
	    	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
	    	HAL_Delay(1);
	    	fetEDA_Vgs = (float)DAC_value / 4096 * 3;

	    	/* EDA value ADC */
	    	fetEDA_LPF  = ( (float)ADC_value[0] / 4096 ) * 3;
	    	fetEDA_Vin  = ( (float)ADC_value[1] / 4096 ) * 3;

	    	fetEDA_Vout[Rfeed_i][DAC_value] = fetEDA_LPF;
	    	if (fetEDA_Vout[Rfeed_i][DAC_value] <= 2.85 & Rfeed_i == 0)
	    	{
	    		middle_DAC_value = DAC_value;
	    	}
	    	else if (fetEDA_Vout[Rfeed_i][DAC_value] <= 2.85 & Rfeed_i == 1)
	    	{
	    		end_DAC_value = DAC_value;
	    	}

	    	/* Calculation Ids(uA) */
	    	fetEDA_Ids_LUT[Rfeed_i][DAC_value] = (fetEDA_Vout[Rfeed_i][DAC_value] - fetEDA_Vin) * 1000000 / fetEDA_Rfeed[Rfeed_i];

	    	if (fetEDA_Ids_LUT[Rfeed_i][DAC_value] < 0)
			{
	    		fetEDA_Ids_LUT[Rfeed_i][DAC_value] = fetEDA_Ids_LUT[Rfeed_i][DAC_value-1];
			}

//			printf("[%d][%d] Ids_LUT = %f\tTemp = %f\tHumi = %f\r\n", Rfeed_i, DAC_value, Ids_LUT[Rfeed_i][DAC_value], Temps[Rfeed_i][DAC_value], Humis[Rfeed_i][DAC_value]);

	    	printf("DAC = %d\tRfeed = %.0fohm\tVout = %f\tIds_LUT = %f\r\n", DAC_value, fetEDA_Rfeed[Rfeed_i], fetEDA_Vout[Rfeed_i][DAC_value], fetEDA_Ids_LUT[Rfeed_i][DAC_value]);


	    }
	}

	// 2) Extract Ids for need part
//	Ids_i = 0;
	start_DAC_value = (fetEDA_Vth / 3) * 4096;
	for (Rfeed_i=0; Rfeed_i<2; Rfeed_i++)
	{
		for (DAC_value = start_DAC_value; DAC_value<middle_DAC_value; DAC_value++)
		{
			fetEDA_Ids[DAC_value] = fetEDA_Ids_LUT[Rfeed_i][DAC_value];
		}
		start_DAC_value = middle_DAC_value;
		middle_DAC_value = end_DAC_value;
	}

	float min_DAC_value_float = (fetEDA_Vth / 3) * 4096;


//	for(int i = 0; i < 4096; i++)
//	{
//		printf("%f, ", Ids[i]);
//		if( (i % 10) == 9)
//		{
//			printf("\r\n");
//		}
//	}

//	printf("start DAC value = %d\tend DAC value = %d\r\n", *min_DAC_value, *max_DAC_value);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

