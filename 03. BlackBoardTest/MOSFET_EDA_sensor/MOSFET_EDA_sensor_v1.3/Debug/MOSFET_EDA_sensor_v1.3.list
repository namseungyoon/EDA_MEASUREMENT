
MOSFET_EDA_sensor_v1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800d2a0  0800d2a0  0001d2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d810  0800d810  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d810  0800d810  0001d810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d818  0800d818  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d818  0800d818  0001d818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d81c  0800d81c  0001d81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000184d8  200001f8  0800da18  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200186d0  0800da18  000286d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb48  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044b9  00000000  00000000  0003bdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  00040270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d5  00000000  00000000  00041980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b405  00000000  00000000  00042b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021aa4  00000000  00000000  0006df5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd779  00000000  00000000  0008f9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007740  00000000  00000000  0018d178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  001948b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d284 	.word	0x0800d284

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800d284 	.word	0x0800d284

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HDC1080_initialize>:

#include <HDC1080.h>
#include <stdio.h>

void HDC1080_initialize(I2C_HandleTypeDef* hi2c_x,Temp_Reso Temperature_Resolution_x_bit,Humi_Reso Humidity_Resolution_x_bit)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af04      	add	r7, sp, #16
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
 800103c:	4613      	mov	r3, r2
 800103e:	70bb      	strb	r3, [r7, #2]
	 * Default:   Temperature resolution = 14 bit,
	 *            Humidity resolution = 14 bit
	 */

	/* Set the acquisition mode to measure both temperature and humidity by setting Bit[12] to 1 */
	uint16_t config_reg_value=0x1000;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	81fb      	strh	r3, [r7, #14]
	uint8_t data_send[2];

	if(Temperature_Resolution_x_bit == Temperature_Resolution_11_bit)
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d103      	bne.n	8001054 <HDC1080_initialize+0x24>
	{
		config_reg_value |= (1<<10); //11 bit
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	81fb      	strh	r3, [r7, #14]
	}

	switch(Humidity_Resolution_x_bit)
 8001054:	78bb      	ldrb	r3, [r7, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d002      	beq.n	8001060 <HDC1080_initialize+0x30>
 800105a:	2b02      	cmp	r3, #2
 800105c:	d005      	beq.n	800106a <HDC1080_initialize+0x3a>
 800105e:	e009      	b.n	8001074 <HDC1080_initialize+0x44>
	{
	case Humidity_Resolution_11_bit:
		config_reg_value|= (1<<8);
 8001060:	89fb      	ldrh	r3, [r7, #14]
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	81fb      	strh	r3, [r7, #14]
		break;
 8001068:	e004      	b.n	8001074 <HDC1080_initialize+0x44>
	case Humidity_Resolution_8_bit:
		config_reg_value|= (1<<9);
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001070:	81fb      	strh	r3, [r7, #14]
		break;
 8001072:	bf00      	nop
	}

	data_send[0]= (config_reg_value>>8);
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	733b      	strb	r3, [r7, #12]
	data_send[1]= (config_reg_value&0x00ff);
 800107e:	89fb      	ldrh	r3, [r7, #14]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(hi2c_x,HDC_1080_Address<<1,HDC1080_Configuration,I2C_MEMADD_SIZE_8BIT,data_send,2,1000);
 8001084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2302      	movs	r3, #2
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	2202      	movs	r2, #2
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f004 f8e6 	bl	800526c <HAL_I2C_Mem_Write>
//	printf(HDC1080_testConnection() ? "Temp,Humi sensor(HDC1080) connection successful\r\n" : "Temp,Humi sensor(HDC1080) connection failed\r\n");

}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HDC1080_Measurement>:


uint8_t HDC1080_Measurement(I2C_HandleTypeDef* hi2c_x,float* temperature, float* humidity)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	uint8_t receive_data[4];
	uint16_t temp_x,humi_x;
	uint8_t send_data = HDC1080_Temperature;
 80010b4:	2300      	movs	r3, #0
 80010b6:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(hi2c_x,HDC_1080_Address<<1,&send_data,1,1000);
 80010b8:	f107 0217 	add.w	r2, r7, #23
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f003 fee6 	bl	8004e98 <HAL_I2C_Master_Transmit>

	/* Delay here 15ms for conversion compelete.
	 * Note: datasheet say maximum is 7ms, but when delay=7ms, the read value is not correct
	 */
	HAL_Delay(15);
 80010cc:	200f      	movs	r0, #15
 80010ce:	f002 f9a5 	bl	800341c <HAL_Delay>

	/* Read temperature and humidity */
	HAL_I2C_Master_Receive(hi2c_x,HDC_1080_Address<<1,receive_data,4,1000);
 80010d2:	f107 0218 	add.w	r2, r7, #24
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2304      	movs	r3, #4
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f003 ffcd 	bl	8005080 <HAL_I2C_Master_Receive>

	temp_x =((receive_data[0]<<8)|receive_data[1]);
 80010e6:	7e3b      	ldrb	r3, [r7, #24]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7e7b      	ldrb	r3, [r7, #25]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	83fb      	strh	r3, [r7, #30]
	humi_x =((receive_data[2]<<8)|receive_data[3]);
 80010f6:	7ebb      	ldrb	r3, [r7, #26]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7efb      	ldrb	r3, [r7, #27]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21b      	sxth	r3, r3
 8001104:	83bb      	strh	r3, [r7, #28]

	*temperature = ((temp_x/65536.0)*165.0)-40.0;
 8001106:	8bfb      	ldrh	r3, [r7, #30]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa2b 	bl	8000564 <__aeabi_i2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HDC1080_Measurement+0xf0>)
 8001114:	f7ff fbba 	bl	800088c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	a31b      	add	r3, pc, #108	; (adr r3, 8001190 <HDC1080_Measurement+0xe8>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa87 	bl	8000638 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HDC1080_Measurement+0xf4>)
 8001138:	f7ff f8c6 	bl	80002c8 <__aeabi_dsub>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fd70 	bl	8000c28 <__aeabi_d2f>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	601a      	str	r2, [r3, #0]
	*humidity = ((humi_x/65536.0)*100.0);
 800114e:	8bbb      	ldrh	r3, [r7, #28]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa07 	bl	8000564 <__aeabi_i2d>
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HDC1080_Measurement+0xf0>)
 800115c:	f7ff fb96 	bl	800088c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HDC1080_Measurement+0xf8>)
 800116e:	f7ff fa63 	bl	8000638 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fd55 	bl	8000c28 <__aeabi_d2f>
 800117e:	4602      	mov	r2, r0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	601a      	str	r2, [r3, #0]

	return 0;
 8001184:	2300      	movs	r3, #0

}
 8001186:	4618      	mov	r0, r3
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	4064a000 	.word	0x4064a000
 8001198:	40f00000 	.word	0x40f00000
 800119c:	40440000 	.word	0x40440000
 80011a0:	40590000 	.word	0x40590000
 80011a4:	00000000 	.word	0x00000000

080011a8 <MOSFET_EDA_Measure_Ids>:
float Humis[2][4096] = {0.0, };
float avg_Temp = 0.0;
float avg_Humi = 0.0;

void MOSFET_EDA_Measure_Ids(float Ids[], uint16_t* min_DAC_value, uint16_t* max_DAC_value)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	HDC1080_initialize(&hi2c2,Temperature_Resolution_14_bit,Humidity_Resolution_14_bit);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	485d      	ldr	r0, [pc, #372]	; (8001330 <MOSFET_EDA_Measure_Ids+0x188>)
 80011ba:	f7ff ff39 	bl	8001030 <HDC1080_initialize>

	// 1) Measurement Ids for 1Mohm, 100kohm Rfeed
	for (Rfeed_i = 0; Rfeed_i<2; Rfeed_i++)
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <MOSFET_EDA_Measure_Ids+0x18c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e153      	b.n	800146e <MOSFET_EDA_Measure_Ids+0x2c6>
	{
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80011c6:	2300      	movs	r3, #0
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	485a      	ldr	r0, [pc, #360]	; (8001338 <MOSFET_EDA_Measure_Ids+0x190>)
 80011ce:	f003 f820 	bl	8004212 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80011d2:	2100      	movs	r1, #0
 80011d4:	4858      	ldr	r0, [pc, #352]	; (8001338 <MOSFET_EDA_Measure_Ids+0x190>)
 80011d6:	f002 ffca 	bl	800416e <HAL_DAC_Start>
		HAL_Delay(1000);
 80011da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011de:	f002 f91d 	bl	800341c <HAL_Delay>
		if (Rfeed_i == 0)
 80011e2:	4b54      	ldr	r3, [pc, #336]	; (8001334 <MOSFET_EDA_Measure_Ids+0x18c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10c      	bne.n	8001204 <MOSFET_EDA_Measure_Ids+0x5c>
		{
			// 1Mohm
			HAL_GPIO_WritePin(EDA_MUX_SET1_GPIO_Port, EDA_MUX_SET1_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f0:	4852      	ldr	r0, [pc, #328]	; (800133c <MOSFET_EDA_Measure_Ids+0x194>)
 80011f2:	f003 fda7 	bl	8004d44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EDA_MUX_SET2_GPIO_Port, EDA_MUX_SET2_Pin, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fc:	484f      	ldr	r0, [pc, #316]	; (800133c <MOSFET_EDA_Measure_Ids+0x194>)
 80011fe:	f003 fda1 	bl	8004d44 <HAL_GPIO_WritePin>
 8001202:	e00f      	b.n	8001224 <MOSFET_EDA_Measure_Ids+0x7c>
		}
	    else if (Rfeed_i == 1)
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <MOSFET_EDA_Measure_Ids+0x18c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d10b      	bne.n	8001224 <MOSFET_EDA_Measure_Ids+0x7c>
	    {
		    // 100kohm
		    HAL_GPIO_WritePin(EDA_MUX_SET1_GPIO_Port, EDA_MUX_SET1_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001212:	484a      	ldr	r0, [pc, #296]	; (800133c <MOSFET_EDA_Measure_Ids+0x194>)
 8001214:	f003 fd96 	bl	8004d44 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(EDA_MUX_SET2_GPIO_Port, EDA_MUX_SET2_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121e:	4847      	ldr	r0, [pc, #284]	; (800133c <MOSFET_EDA_Measure_Ids+0x194>)
 8001220:	f003 fd90 	bl	8004d44 <HAL_GPIO_WritePin>
	    }
	    for (DAC_value = 0; DAC_value < 4096; DAC_value++)
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <MOSFET_EDA_Measure_Ids+0x198>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
 800122a:	e115      	b.n	8001458 <MOSFET_EDA_Measure_Ids+0x2b0>
	    {
	    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_value);
 800122c:	4b44      	ldr	r3, [pc, #272]	; (8001340 <MOSFET_EDA_Measure_Ids+0x198>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	4840      	ldr	r0, [pc, #256]	; (8001338 <MOSFET_EDA_Measure_Ids+0x190>)
 8001236:	f002 ffec 	bl	8004212 <HAL_DAC_SetValue>
	    	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800123a:	2100      	movs	r1, #0
 800123c:	483e      	ldr	r0, [pc, #248]	; (8001338 <MOSFET_EDA_Measure_Ids+0x190>)
 800123e:	f002 ff96 	bl	800416e <HAL_DAC_Start>
	    	HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f002 f8ea 	bl	800341c <HAL_Delay>
	    	Vgs = (float)DAC_value / 4096 * 3.3;
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <MOSFET_EDA_Measure_Ids+0x198>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001254:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001344 <MOSFET_EDA_Measure_Ids+0x19c>
 8001258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125c:	ee16 0a90 	vmov	r0, s13
 8001260:	f7ff f992 	bl	8000588 <__aeabi_f2d>
 8001264:	a330      	add	r3, pc, #192	; (adr r3, 8001328 <MOSFET_EDA_Measure_Ids+0x180>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9e5 	bl	8000638 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcd7 	bl	8000c28 <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <MOSFET_EDA_Measure_Ids+0x1a0>)
 800127e:	6013      	str	r3, [r2, #0]

	    	/* measure ADC value */
	    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_value, 4);
 8001280:	2204      	movs	r2, #4
 8001282:	4932      	ldr	r1, [pc, #200]	; (800134c <MOSFET_EDA_Measure_Ids+0x1a4>)
 8001284:	4832      	ldr	r0, [pc, #200]	; (8001350 <MOSFET_EDA_Measure_Ids+0x1a8>)
 8001286:	f002 fa41 	bl	800370c <HAL_ADC_Start_DMA>

	    	/* EDA value ADC */
	    	EDA_LPF_ADC  = ( (float)ADC_value[0] / 4096 ) * 3.3;
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <MOSFET_EDA_Measure_Ids+0x1a4>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001296:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001344 <MOSFET_EDA_Measure_Ids+0x19c>
 800129a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800129e:	ee16 0a90 	vmov	r0, s13
 80012a2:	f7ff f971 	bl	8000588 <__aeabi_f2d>
 80012a6:	a320      	add	r3, pc, #128	; (adr r3, 8001328 <MOSFET_EDA_Measure_Ids+0x180>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9c4 	bl	8000638 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fcb6 	bl	8000c28 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a25      	ldr	r2, [pc, #148]	; (8001354 <MOSFET_EDA_Measure_Ids+0x1ac>)
 80012c0:	6013      	str	r3, [r2, #0]
	    	Vout[Rfeed_i][DAC_value] = EDA_LPF_ADC;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MOSFET_EDA_Measure_Ids+0x18c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <MOSFET_EDA_Measure_Ids+0x198>)
 80012c8:	8812      	ldrh	r2, [r2, #0]
 80012ca:	4610      	mov	r0, r2
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <MOSFET_EDA_Measure_Ids+0x1ac>)
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4921      	ldr	r1, [pc, #132]	; (8001358 <MOSFET_EDA_Measure_Ids+0x1b0>)
 80012d2:	031b      	lsls	r3, r3, #12
 80012d4:	4403      	add	r3, r0
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	601a      	str	r2, [r3, #0]
	    	if (Vout[Rfeed_i][DAC_value] <= 3.25 & Rfeed_i == 0)
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MOSFET_EDA_Measure_Ids+0x18c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <MOSFET_EDA_Measure_Ids+0x198>)
 80012e2:	8812      	ldrh	r2, [r2, #0]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <MOSFET_EDA_Measure_Ids+0x1b0>)
 80012e8:	031b      	lsls	r3, r3, #12
 80012ea:	440b      	add	r3, r1
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eeb0 7a0a 	vmov.f32	s14, #10	; 0x40500000  3.250
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	bf94      	ite	ls
 8001302:	2301      	movls	r3, #1
 8001304:	2300      	movhi	r3, #0
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MOSFET_EDA_Measure_Ids+0x18c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4013      	ands	r3, r2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d020      	beq.n	8001360 <MOSFET_EDA_Measure_Ids+0x1b8>
	    	{
	    		middle_DAC_value = DAC_value;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MOSFET_EDA_Measure_Ids+0x198>)
 8001320:	881a      	ldrh	r2, [r3, #0]
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MOSFET_EDA_Measure_Ids+0x1b4>)
 8001324:	801a      	strh	r2, [r3, #0]
 8001326:	e040      	b.n	80013aa <MOSFET_EDA_Measure_Ids+0x202>
 8001328:	66666666 	.word	0x66666666
 800132c:	400a6666 	.word	0x400a6666
 8001330:	20010348 	.word	0x20010348
 8001334:	20000220 	.word	0x20000220
 8001338:	200102e0 	.word	0x200102e0
 800133c:	40022000 	.word	0x40022000
 8001340:	20000224 	.word	0x20000224
 8001344:	45800000 	.word	0x45800000
 8001348:	2000022c 	.word	0x2000022c
 800134c:	20000214 	.word	0x20000214
 8001350:	20010238 	.word	0x20010238
 8001354:	2000021c 	.word	0x2000021c
 8001358:	20000230 	.word	0x20000230
 800135c:	20000226 	.word	0x20000226
	    	}
	    	else if (Vout[Rfeed_i][DAC_value] <= 3.25 & Rfeed_i == 1)
 8001360:	4b8b      	ldr	r3, [pc, #556]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a8b      	ldr	r2, [pc, #556]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	4611      	mov	r1, r2
 800136a:	4a8b      	ldr	r2, [pc, #556]	; (8001598 <MOSFET_EDA_Measure_Ids+0x3f0>)
 800136c:	031b      	lsls	r3, r3, #12
 800136e:	440b      	add	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eeb0 7a0a 	vmov.f32	s14, #10	; 0x40500000  3.250
 800137c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	bf94      	ite	ls
 8001386:	2301      	movls	r3, #1
 8001388:	2300      	movhi	r3, #0
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b80      	ldr	r3, [pc, #512]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	bf0c      	ite	eq
 8001394:	2301      	moveq	r3, #1
 8001396:	2300      	movne	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4013      	ands	r3, r2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <MOSFET_EDA_Measure_Ids+0x202>
	    	{
	    		end_DAC_value = DAC_value;
 80013a2:	4b7c      	ldr	r3, [pc, #496]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	4b7d      	ldr	r3, [pc, #500]	; (800159c <MOSFET_EDA_Measure_Ids+0x3f4>)
 80013a8:	801a      	strh	r2, [r3, #0]
	    	}

	    	/* Calculation Ids(uA) */
	    	Ids_LUT[Rfeed_i][DAC_value] = (Vout[Rfeed_i][DAC_value] - Vin) * 1000000 / Rfeed[Rfeed_i];
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a79      	ldr	r2, [pc, #484]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4a78      	ldr	r2, [pc, #480]	; (8001598 <MOSFET_EDA_Measure_Ids+0x3f0>)
 80013b6:	031b      	lsls	r3, r3, #12
 80013b8:	440b      	add	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <MOSFET_EDA_Measure_Ids+0x3f8>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013cc:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80015a4 <MOSFET_EDA_Measure_Ids+0x3fc>
 80013d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013d4:	4b6e      	ldr	r3, [pc, #440]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a73      	ldr	r2, [pc, #460]	; (80015a8 <MOSFET_EDA_Measure_Ids+0x400>)
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6b      	ldr	r2, [pc, #428]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	4611      	mov	r1, r2
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	4a6e      	ldr	r2, [pc, #440]	; (80015ac <MOSFET_EDA_Measure_Ids+0x404>)
 80013f2:	031b      	lsls	r3, r3, #12
 80013f4:	440b      	add	r3, r1
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	edc3 7a00 	vstr	s15, [r3]

	    	if (Ids_LUT[Rfeed_i][DAC_value] < 0)
 80013fe:	4b64      	ldr	r3, [pc, #400]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a64      	ldr	r2, [pc, #400]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 8001404:	8812      	ldrh	r2, [r2, #0]
 8001406:	4611      	mov	r1, r2
 8001408:	4a68      	ldr	r2, [pc, #416]	; (80015ac <MOSFET_EDA_Measure_Ids+0x404>)
 800140a:	031b      	lsls	r3, r3, #12
 800140c:	440b      	add	r3, r1
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d515      	bpl.n	800144c <MOSFET_EDA_Measure_Ids+0x2a4>
			{
	    		Ids_LUT[Rfeed_i][DAC_value] = Ids_LUT[Rfeed_i][DAC_value-1];
 8001420:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4859      	ldr	r0, [pc, #356]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 8001430:	8800      	ldrh	r0, [r0, #0]
 8001432:	4604      	mov	r4, r0
 8001434:	485d      	ldr	r0, [pc, #372]	; (80015ac <MOSFET_EDA_Measure_Ids+0x404>)
 8001436:	0309      	lsls	r1, r1, #12
 8001438:	440a      	add	r2, r1
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4402      	add	r2, r0
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	495a      	ldr	r1, [pc, #360]	; (80015ac <MOSFET_EDA_Measure_Ids+0x404>)
 8001442:	031b      	lsls	r3, r3, #12
 8001444:	4423      	add	r3, r4
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	601a      	str	r2, [r3, #0]
	    for (DAC_value = 0; DAC_value < 4096; DAC_value++)
 800144c:	4b51      	ldr	r3, [pc, #324]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001460:	f4ff aee4 	bcc.w	800122c <MOSFET_EDA_Measure_Ids+0x84>
	for (Rfeed_i = 0; Rfeed_i<2; Rfeed_i++)
 8001464:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	4a49      	ldr	r2, [pc, #292]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	f77f aea7 	ble.w	80011c6 <MOSFET_EDA_Measure_Ids+0x1e>
	    }
	}

	// 2) Extract Ids for need area
//	Ids_i = 0;
	start_DAC_value = (Vth / 3.3) * 4096;
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <MOSFET_EDA_Measure_Ids+0x408>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f883 	bl	8000588 <__aeabi_f2d>
 8001482:	a341      	add	r3, pc, #260	; (adr r3, 8001588 <MOSFET_EDA_Measure_Ids+0x3e0>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff fa00 	bl	800088c <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <MOSFET_EDA_Measure_Ids+0x40c>)
 800149a:	f7ff f8cd 	bl	8000638 <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fb9f 	bl	8000be8 <__aeabi_d2uiz>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <MOSFET_EDA_Measure_Ids+0x410>)
 80014b0:	801a      	strh	r2, [r3, #0]
	/* measure HDC1080 value */
	HDC1080_Measurement(&hi2c2, (float*)&temp, (float*)&humi);
 80014b2:	4a42      	ldr	r2, [pc, #264]	; (80015bc <MOSFET_EDA_Measure_Ids+0x414>)
 80014b4:	4942      	ldr	r1, [pc, #264]	; (80015c0 <MOSFET_EDA_Measure_Ids+0x418>)
 80014b6:	4843      	ldr	r0, [pc, #268]	; (80015c4 <MOSFET_EDA_Measure_Ids+0x41c>)
 80014b8:	f7ff fdf6 	bl	80010a8 <HDC1080_Measurement>
//	printf("DAC_value\tIds(T%.2f)\r\n", temp);
	for (Rfeed_i=0; Rfeed_i<2; Rfeed_i++)
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e02e      	b.n	8001522 <MOSFET_EDA_Measure_Ids+0x37a>
	{
		for (DAC_value = start_DAC_value; DAC_value<middle_DAC_value; DAC_value++)
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MOSFET_EDA_Measure_Ids+0x410>)
 80014c6:	881a      	ldrh	r2, [r3, #0]
 80014c8:	4b32      	ldr	r3, [pc, #200]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	e016      	b.n	80014fc <MOSFET_EDA_Measure_Ids+0x354>
		{
			Ids[DAC_value] = Ids_LUT[Rfeed_i][DAC_value];
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	440b      	add	r3, r1
 80014e2:	4932      	ldr	r1, [pc, #200]	; (80015ac <MOSFET_EDA_Measure_Ids+0x404>)
 80014e4:	0312      	lsls	r2, r2, #12
 80014e6:	4402      	add	r2, r0
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	440a      	add	r2, r1
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	601a      	str	r2, [r3, #0]
		for (DAC_value = start_DAC_value; DAC_value<middle_DAC_value; DAC_value++)
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80014fa:	801a      	strh	r2, [r3, #0]
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <MOSFET_EDA_Measure_Ids+0x3ec>)
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <MOSFET_EDA_Measure_Ids+0x420>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d3e2      	bcc.n	80014ce <MOSFET_EDA_Measure_Ids+0x326>
//			printf("%d\t%f\r\n", DAC_value, Ids[DAC_value]);
//			printf("%d. Ids = %fuA\tTemp = %fC\tHumi = %f%%\r\n", DAC_value, Ids[DAC_value], Temps[Rfeed_i][DAC_value], Humis[Rfeed_i][DAC_value]);
//			Ids  _i++;
		}
		start_DAC_value = middle_DAC_value;
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <MOSFET_EDA_Measure_Ids+0x420>)
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <MOSFET_EDA_Measure_Ids+0x410>)
 800150e:	801a      	strh	r2, [r3, #0]
		middle_DAC_value = end_DAC_value;
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <MOSFET_EDA_Measure_Ids+0x3f4>)
 8001512:	881a      	ldrh	r2, [r3, #0]
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <MOSFET_EDA_Measure_Ids+0x420>)
 8001516:	801a      	strh	r2, [r3, #0]
	for (Rfeed_i=0; Rfeed_i<2; Rfeed_i++)
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MOSFET_EDA_Measure_Ids+0x3e8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	ddcc      	ble.n	80014c4 <MOSFET_EDA_Measure_Ids+0x31c>
	}

	float min_DAC_value_float = (Vth / 3.3) * 4096;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <MOSFET_EDA_Measure_Ids+0x408>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f82a 	bl	8000588 <__aeabi_f2d>
 8001534:	a314      	add	r3, pc, #80	; (adr r3, 8001588 <MOSFET_EDA_Measure_Ids+0x3e0>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff f9a7 	bl	800088c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MOSFET_EDA_Measure_Ids+0x40c>)
 800154c:	f7ff f874 	bl	8000638 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fb66 	bl	8000c28 <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	617b      	str	r3, [r7, #20]
	*min_DAC_value = (uint16_t)min_DAC_value_float;
 8001560:	edd7 7a05 	vldr	s15, [r7, #20]
 8001564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001568:	ee17 3a90 	vmov	r3, s15
 800156c:	b29a      	uxth	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	801a      	strh	r2, [r3, #0]
	*max_DAC_value = end_DAC_value;
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MOSFET_EDA_Measure_Ids+0x3f4>)
 8001574:	881a      	ldrh	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	801a      	strh	r2, [r3, #0]
//			printf("\r\n");
//		}
//	}

//	printf("start DAC value = %d\tend DAC value = %d\r\n", *min_DAC_value, *max_DAC_value);
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	66666666 	.word	0x66666666
 800158c:	400a6666 	.word	0x400a6666
 8001590:	20000220 	.word	0x20000220
 8001594:	20000224 	.word	0x20000224
 8001598:	20000230 	.word	0x20000230
 800159c:	20000228 	.word	0x20000228
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	49742400 	.word	0x49742400
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20008230 	.word	0x20008230
 80015b0:	20000008 	.word	0x20000008
 80015b4:	40b00000 	.word	0x40b00000
 80015b8:	2000022a 	.word	0x2000022a
 80015bc:	20010234 	.word	0x20010234
 80015c0:	20010230 	.word	0x20010230
 80015c4:	20010348 	.word	0x20010348
 80015c8:	20000226 	.word	0x20000226
 80015cc:	00000000 	.word	0x00000000

080015d0 <MOSFET_EDA_Calibration_Ids>:

void MOSFET_EDA_Calibration_Ids(float Ids[], uint16_t min_DAC_value, uint16_t max_DAC_value, float Ids_[], float parameter[], float* tmp)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08d      	sub	sp, #52	; 0x34
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	817b      	strh	r3, [r7, #10]
 80015de:	4613      	mov	r3, r2
 80015e0:	813b      	strh	r3, [r7, #8]
	uint16_t size = max_DAC_value - min_DAC_value;
 80015e2:	893a      	ldrh	r2, [r7, #8]
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	83fb      	strh	r3, [r7, #30]

	float* ln_Ids_temp = (float*)malloc(size * sizeof(float));
 80015ea:	8bfb      	ldrh	r3, [r7, #30]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 f8e0 	bl	80087b4 <malloc>
 80015f4:	4603      	mov	r3, r0
 80015f6:	61bb      	str	r3, [r7, #24]


	for(int Ids_i = min_DAC_value; Ids_i < max_DAC_value; Ids_i++)
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	e01c      	b.n	8001638 <MOSFET_EDA_Calibration_Ids+0x68>
	{
		ln_Ids_temp[Ids_i-min_DAC_value] = log(Ids[Ids_i]);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ffbd 	bl	8000588 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	ec43 2b10 	vmov	d0, r2, r3
 8001616:	f00b fa7b 	bl	800cb10 <log>
 800161a:	ec51 0b10 	vmov	r0, r1, d0
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	18d4      	adds	r4, r2, r3
 800162a:	f7ff fafd 	bl	8000c28 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	6023      	str	r3, [r4, #0]
	for(int Ids_i = min_DAC_value; Ids_i < max_DAC_value; Ids_i++)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	893b      	ldrh	r3, [r7, #8]
 800163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163c:	429a      	cmp	r2, r3
 800163e:	dbde      	blt.n	80015fe <MOSFET_EDA_Calibration_Ids+0x2e>
//		printf("* Ids_temp[%d] = %f\tIds[%d] = %f\r\n", (Ids_i-min_DAC_value), Ids_temp[Ids_i-min_DAC_value], Ids_i, Ids[Ids_i]);
	}
	/* Least square method */
	Least_square_method(ln_Ids_temp, size, 5, ln_Ids_temp, parameter);
 8001640:	8bf9      	ldrh	r1, [r7, #30]
 8001642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2205      	movs	r2, #5
 800164a:	69b8      	ldr	r0, [r7, #24]
 800164c:	f000 f8ae 	bl	80017ac <Least_square_method>


	/* measure HDC1080 value */
	HDC1080_Measurement(&hi2c2, (float*)&temp, (float*)&humi);
 8001650:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <MOSFET_EDA_Calibration_Ids+0x128>)
 8001652:	492a      	ldr	r1, [pc, #168]	; (80016fc <MOSFET_EDA_Calibration_Ids+0x12c>)
 8001654:	482a      	ldr	r0, [pc, #168]	; (8001700 <MOSFET_EDA_Calibration_Ids+0x130>)
 8001656:	f7ff fd27 	bl	80010a8 <HDC1080_Measurement>

//	printf("Vgs\tIds\tIds_(T%.2f)\r\n", temp);
//	printf(" Ids_(T%.2f)\r\n", temp);
	*tmp = temp;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MOSFET_EDA_Calibration_Ids+0x12c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001660:	601a      	str	r2, [r3, #0]

	for(int Ids_i = min_DAC_value; Ids_i < max_DAC_value; Ids_i++)
 8001662:	897b      	ldrh	r3, [r7, #10]
 8001664:	623b      	str	r3, [r7, #32]
 8001666:	e036      	b.n	80016d6 <MOSFET_EDA_Calibration_Ids+0x106>
	{
		Ids_[Ids_i] = exp(ln_Ids_temp[Ids_i - min_DAC_value]);
 8001668:	897b      	ldrh	r3, [r7, #10]
 800166a:	6a3a      	ldr	r2, [r7, #32]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4413      	add	r3, r2
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff86 	bl	8000588 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	ec43 2b10 	vmov	d0, r2, r3
 8001684:	f00b f9fc 	bl	800ca80 <exp>
 8001688:	ec51 0b10 	vmov	r0, r1, d0
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	18d4      	adds	r4, r2, r3
 8001694:	f7ff fac8 	bl	8000c28 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	6023      	str	r3, [r4, #0]
		float Vgs = (float)Ids_i/4096 * 3.3;
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001704 <MOSFET_EDA_Calibration_Ids+0x134>
 80016aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ae:	ee16 0a90 	vmov	r0, s13
 80016b2:	f7fe ff69 	bl	8000588 <__aeabi_f2d>
 80016b6:	a30e      	add	r3, pc, #56	; (adr r3, 80016f0 <MOSFET_EDA_Calibration_Ids+0x120>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ffbc 	bl	8000638 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff faae 	bl	8000c28 <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	617b      	str	r3, [r7, #20]
	for(int Ids_i = min_DAC_value; Ids_i < max_DAC_value; Ids_i++)
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	3301      	adds	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	893b      	ldrh	r3, [r7, #8]
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbc4      	blt.n	8001668 <MOSFET_EDA_Calibration_Ids+0x98>
//		printf("%f\r\n", Ids_[Ids_i]);

//		printf("** Ids[%d] = %f\tIds_[%d] = %f\r\n", Ids_i, Ids[Ids_i], Ids_i, Ids_[Ids_i]);
	}
//	Least_square_method(float signal[], int n_signal, int degree, float signal_[])
	free(ln_Ids_temp);
 80016de:	69b8      	ldr	r0, [r7, #24]
 80016e0:	f007 f870 	bl	80087c4 <free>
}
 80016e4:	bf00      	nop
 80016e6:	372c      	adds	r7, #44	; 0x2c
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	f3af 8000 	nop.w
 80016f0:	66666666 	.word	0x66666666
 80016f4:	400a6666 	.word	0x400a6666
 80016f8:	20010234 	.word	0x20010234
 80016fc:	20010230 	.word	0x20010230
 8001700:	20010348 	.word	0x20010348
 8001704:	45800000 	.word	0x45800000

08001708 <MOSFET_EDA_Get>:

	HAL_Delay(100);
}

void MOSFET_EDA_Get(float* EDA_LPF_Vout, float* EDA_HPF_Vout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	/* measure ADC value */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_value, 4);
 8001712:	2204      	movs	r2, #4
 8001714:	4922      	ldr	r1, [pc, #136]	; (80017a0 <MOSFET_EDA_Get+0x98>)
 8001716:	4823      	ldr	r0, [pc, #140]	; (80017a4 <MOSFET_EDA_Get+0x9c>)
 8001718:	f001 fff8 	bl	800370c <HAL_ADC_Start_DMA>

	/* EDA value ADC */
	*EDA_LPF_Vout  = ( (float)ADC_value[0] / 4096 ) * 3.3;
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <MOSFET_EDA_Get+0x98>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001728:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80017a8 <MOSFET_EDA_Get+0xa0>
 800172c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001730:	ee16 0a90 	vmov	r0, s13
 8001734:	f7fe ff28 	bl	8000588 <__aeabi_f2d>
 8001738:	a317      	add	r3, pc, #92	; (adr r3, 8001798 <MOSFET_EDA_Get+0x90>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff7b 	bl	8000638 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa6d 	bl	8000c28 <__aeabi_d2f>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
	*EDA_HPF_Vout  = ( (float)ADC_value[1] / 4096 ) * 3.3;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MOSFET_EDA_Get+0x98>)
 8001756:	885b      	ldrh	r3, [r3, #2]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001760:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80017a8 <MOSFET_EDA_Get+0xa0>
 8001764:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001768:	ee16 0a90 	vmov	r0, s13
 800176c:	f7fe ff0c 	bl	8000588 <__aeabi_f2d>
 8001770:	a309      	add	r3, pc, #36	; (adr r3, 8001798 <MOSFET_EDA_Get+0x90>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff5f 	bl	8000638 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff fa51 	bl	8000c28 <__aeabi_d2f>
 8001786:	4602      	mov	r2, r0
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	f3af 8000 	nop.w
 8001798:	66666666 	.word	0x66666666
 800179c:	400a6666 	.word	0x400a6666
 80017a0:	20000214 	.word	0x20000214
 80017a4:	20010238 	.word	0x20010238
 80017a8:	45800000 	.word	0x45800000

080017ac <Least_square_method>:

#include "Math_func.h"
#include <stdlib.h>

void Least_square_method(float signal[], int n_signal, int degree, float signal_[], float parameter[])
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	; 0x50
 80017b0:	af04      	add	r7, sp, #16
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
	float **A = allocate_2d_array(n_signal, (degree+1));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	4619      	mov	r1, r3
 80017c0:	68b8      	ldr	r0, [r7, #8]
 80017c2:	f000 fbb9 	bl	8001f38 <allocate_2d_array>
 80017c6:	6338      	str	r0, [r7, #48]	; 0x30
	float **AT = allocate_2d_array((degree+1), n_signal);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3301      	adds	r3, #1
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fbb2 	bl	8001f38 <allocate_2d_array>
 80017d4:	62f8      	str	r0, [r7, #44]	; 0x2c
	float **ATA = allocate_2d_array((degree+1), (degree+1));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3301      	adds	r3, #1
 80017de:	4619      	mov	r1, r3
 80017e0:	4610      	mov	r0, r2
 80017e2:	f000 fba9 	bl	8001f38 <allocate_2d_array>
 80017e6:	62b8      	str	r0, [r7, #40]	; 0x28
	float **ATAI = allocate_2d_array((degree+1), (degree+1));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f000 fba0 	bl	8001f38 <allocate_2d_array>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24
	float **ATAIAT = allocate_2d_array((degree+1), n_signal);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fb99 	bl	8001f38 <allocate_2d_array>
 8001806:	6238      	str	r0, [r7, #32]

	float **B = allocate_2d_array(n_signal, 1);
 8001808:	2101      	movs	r1, #1
 800180a:	68b8      	ldr	r0, [r7, #8]
 800180c:	f000 fb94 	bl	8001f38 <allocate_2d_array>
 8001810:	61f8      	str	r0, [r7, #28]
	float **X = allocate_2d_array((degree+1), 1);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3301      	adds	r3, #1
 8001816:	2101      	movs	r1, #1
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fb8d 	bl	8001f38 <allocate_2d_array>
 800181e:	61b8      	str	r0, [r7, #24]

	float **B_ = allocate_2d_array(n_signal, 1);
 8001820:	2101      	movs	r1, #1
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f000 fb88 	bl	8001f38 <allocate_2d_array>
 8001828:	6178      	str	r0, [r7, #20]

	float x = 0;
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < n_signal; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001834:	e06c      	b.n	8001910 <Least_square_method+0x164>
	{
		x = (float)i;
 8001836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001840:	edc7 7a04 	vstr	s15, [r7, #16]

		A[i][5] = x * x * x * x * x;
 8001844:	edd7 7a04 	vldr	s15, [r7, #16]
 8001848:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800184c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001854:	edd7 7a04 	vldr	s15, [r7, #16]
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001862:	4413      	add	r3, r2
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3314      	adds	r3, #20
 8001868:	edd7 7a04 	vldr	s15, [r7, #16]
 800186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001870:	edc3 7a00 	vstr	s15, [r3]
		A[i][4] = x * x * x * x;
 8001874:	edd7 7a04 	vldr	s15, [r7, #16]
 8001878:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800187c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3310      	adds	r3, #16
 8001890:	edd7 7a04 	vldr	s15, [r7, #16]
 8001894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001898:	edc3 7a00 	vstr	s15, [r3]
		A[i][3] = x * x * x;
 800189c:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018aa:	4413      	add	r3, r2
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	330c      	adds	r3, #12
 80018b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b8:	edc3 7a00 	vstr	s15, [r3]
		A[i][2] = x * x;
 80018bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3308      	adds	r3, #8
 80018c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018d0:	edc3 7a00 	vstr	s15, [r3]
		A[i][1] = x;
 80018d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018da:	4413      	add	r3, r2
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3304      	adds	r3, #4
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	601a      	str	r2, [r3, #0]
		A[i][0] = 1;
 80018e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ea:	4413      	add	r3, r2
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018f2:	601a      	str	r2, [r3, #0]

		B[i][0] = signal[i];
 80018f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	441a      	add	r2, r3
 80018fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	69f9      	ldr	r1, [r7, #28]
 8001902:	440b      	add	r3, r1
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < n_signal; i++)
 800190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190c:	3301      	adds	r3, #1
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	db8e      	blt.n	8001836 <Least_square_method+0x8a>
	* AX = B
	* X = A^(-1)B
	*   = ( A^(T)A )^(-1)A^(T)B
	*/

	transpose_matrix(n_signal, (degree+1), A, AT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	1c59      	adds	r1, r3, #1
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f000 f899 	bl	8001a58 <transpose_matrix>
//	print_matrix((degree+1), n_signal, AT);

	multiply_matrices((degree+1), n_signal, AT, n_signal, (degree+1), A, ATA);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	1c58      	adds	r0, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001930:	9202      	str	r2, [sp, #8]
 8001932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	f000 f8bf 	bl	8001ac0 <multiply_matrices>
//	print_matrix((degree+1), (degree+1), ATA);

	inverse_matrix((degree+1), ATA, ATAI);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f922 	bl	8001b94 <inverse_matrix>
//	print_matrix((degree+1), (degree+1), ATAI);

	multiply_matrices((degree+1), (degree+1), ATAI, (degree+1), n_signal, AT, ATAIAT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	1c58      	adds	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	1c59      	adds	r1, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	f000 f8a8 	bl	8001ac0 <multiply_matrices>
//	print_matrix((degree+1), n_signal, ATAIAT);

	multiply_matrices((degree+1), n_signal, ATAIAT, n_signal, 1, B, X);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1c58      	adds	r0, r3, #1
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2301      	movs	r3, #1
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	6a3a      	ldr	r2, [r7, #32]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	f000 f89b 	bl	8001ac0 <multiply_matrices>
//	print_matrix((degree+1), 1, X);

	multiply_matrices(n_signal, (degree+1), A, (degree+1), 1, X, B_);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	1c59      	adds	r1, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	2301      	movs	r3, #1
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	4613      	mov	r3, r2
 80019a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a2:	68b8      	ldr	r0, [r7, #8]
 80019a4:	f000 f88c 	bl	8001ac0 <multiply_matrices>
//	print_matrix(n_signal, 1, B_);

	for(int i = 0; i < n_signal; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ac:	e00d      	b.n	80019ca <Least_square_method+0x21e>
	{
		signal_[i] = B_[i][0];
 80019ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4413      	add	r3, r2
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	440b      	add	r3, r1
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < n_signal; i++)
 80019c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c6:	3301      	adds	r3, #1
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbed      	blt.n	80019ae <Least_square_method+0x202>
	}
	for(int i = 0; i < degree+1; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
 80019d6:	e00d      	b.n	80019f4 <Least_square_method+0x248>
	{
		parameter[i] = X[i][0];
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4413      	add	r3, r2
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019e8:	440b      	add	r3, r1
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < degree+1; i++)
 80019ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f0:	3301      	adds	r3, #1
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	429a      	cmp	r2, r3
 80019fa:	daed      	bge.n	80019d8 <Least_square_method+0x22c>
	}
	free_allocate_2d_array(A, n_signal);
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a00:	f000 faf8 	bl	8001ff4 <free_allocate_2d_array>
	free_allocate_2d_array(AT, (degree+1));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a0c:	f000 faf2 	bl	8001ff4 <free_allocate_2d_array>
	free_allocate_2d_array(ATA, (degree+1));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4619      	mov	r1, r3
 8001a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a18:	f000 faec 	bl	8001ff4 <free_allocate_2d_array>
	free_allocate_2d_array(ATAI, (degree+1));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4619      	mov	r1, r3
 8001a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a24:	f000 fae6 	bl	8001ff4 <free_allocate_2d_array>
	free_allocate_2d_array(ATAIAT, (degree+1));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6a38      	ldr	r0, [r7, #32]
 8001a30:	f000 fae0 	bl	8001ff4 <free_allocate_2d_array>
	free_allocate_2d_array(B, n_signal);
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	69f8      	ldr	r0, [r7, #28]
 8001a38:	f000 fadc 	bl	8001ff4 <free_allocate_2d_array>
	free_allocate_2d_array(X, (degree+1));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4619      	mov	r1, r3
 8001a42:	69b8      	ldr	r0, [r7, #24]
 8001a44:	f000 fad6 	bl	8001ff4 <free_allocate_2d_array>
	free_allocate_2d_array(B_, n_signal);
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f000 fad2 	bl	8001ff4 <free_allocate_2d_array>

}
 8001a50:	bf00      	nop
 8001a52:	3740      	adds	r7, #64	; 0x40
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <transpose_matrix>:

void transpose_matrix(int rows, int cols, float **mat_a, float **mat_a_t)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
    int i, j;

    for (i = 0; i < rows; i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e01e      	b.n	8001aaa <transpose_matrix+0x52>
    {
        for (j = 0; j < cols; j++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e014      	b.n	8001a9c <transpose_matrix+0x44>
        {
        	mat_a_t[j][i] = mat_a[i][j]; // Swap rows and columns to assign
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	441a      	add	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	440b      	add	r3, r1
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	601a      	str	r2, [r3, #0]
        for (j = 0; j < cols; j++)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbe6      	blt.n	8001a72 <transpose_matrix+0x1a>
    for (i = 0; i < rows; i++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbdc      	blt.n	8001a6c <transpose_matrix+0x14>
        }
    }
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <multiply_matrices>:

// Function to calculate the product of two matrices
void multiply_matrices(int rows1, int cols1, float **mat_a, int rows2, int cols2, float **mat_b, float **mat_ab)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
    int i, j, k;

    if (cols1 != rows2)
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d003      	beq.n	8001ade <multiply_matrices+0x1e>
    {
        printf("Error: Number of columns in the first matrix must be equal to the number of rows in the second matrix.\n");
 8001ad6:	482e      	ldr	r0, [pc, #184]	; (8001b90 <multiply_matrices+0xd0>)
 8001ad8:	f008 fa94 	bl	800a004 <puts>
        return;
 8001adc:	e054      	b.n	8001b88 <multiply_matrices+0xc8>
    }

    for (i = 0; i < rows1; i++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e04d      	b.n	8001b80 <multiply_matrices+0xc0>
    {
        for (j = 0; j < cols2; j++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	e043      	b.n	8001b72 <multiply_matrices+0xb2>
        {
        	mat_ab[i][j] = 0; // Initialize the result matrix
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af0:	4413      	add	r3, r2
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
            for (k = 0; k < cols1; k++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e02e      	b.n	8001b64 <multiply_matrices+0xa4>
            {
            	mat_ab[i][j] += mat_a[i][k] * mat_b[k][j]; // Matrix multiplication
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b0c:	4413      	add	r3, r2
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	edd3 6a00 	vldr	s13, [r3]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b34:	4413      	add	r3, r2
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	edc3 7a00 	vstr	s15, [r3]
            for (k = 0; k < cols1; k++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbcc      	blt.n	8001b06 <multiply_matrices+0x46>
        for (j = 0; j < cols2; j++)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dbb7      	blt.n	8001aea <multiply_matrices+0x2a>
    for (i = 0; i < rows1; i++)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbad      	blt.n	8001ae4 <multiply_matrices+0x24>
            }
        }
    }
}
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800d2a0 	.word	0x0800d2a0

08001b94 <inverse_matrix>:

// Function to calculate the inverse of a matrix
void inverse_matrix(int N, float **mat_a, float **mat_a_inv)
{
 8001b94:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b98:	b09c      	sub	sp, #112	; 0x70
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ba0:	627a      	str	r2, [r7, #36]	; 0x24
 8001ba2:	466b      	mov	r3, sp
 8001ba4:	461e      	mov	r6, r3
	float temp[N][2*N]; // Matrix combining the original matrix and the identity matrix
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	0059      	lsls	r1, r3, #1
 8001baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bac:	1e4b      	subs	r3, r1, #1
 8001bae:	647b      	str	r3, [r7, #68]	; 0x44
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	016b      	lsls	r3, r5, #5
 8001bc2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001bc6:	0162      	lsls	r2, r4, #5
 8001bc8:	460b      	mov	r3, r1
 8001bca:	009d      	lsls	r5, r3, #2
 8001bcc:	1e43      	subs	r3, r0, #1
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61ba      	str	r2, [r7, #24]
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	4602      	mov	r2, r0
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613a      	str	r2, [r7, #16]
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	fb02 f203 	mul.w	r2, r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	69bc      	ldr	r4, [r7, #24]
 8001bec:	fb04 f303 	mul.w	r3, r4, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693c      	ldr	r4, [r7, #16]
 8001bf6:	fba2 ab04 	umull	sl, fp, r2, r4
 8001bfa:	445b      	add	r3, fp
 8001bfc:	469b      	mov	fp, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001c0a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001c0e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001c12:	460a      	mov	r2, r1
 8001c14:	2300      	movs	r3, #0
 8001c16:	603a      	str	r2, [r7, #0]
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001c26:	465b      	mov	r3, fp
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	fb02 f203 	mul.w	r2, r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4654      	mov	r4, sl
 8001c32:	fb04 f303 	mul.w	r3, r4, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	4652      	mov	r2, sl
 8001c3a:	68bc      	ldr	r4, [r7, #8]
 8001c3c:	fba2 8904 	umull	r8, r9, r2, r4
 8001c40:	444b      	add	r3, r9
 8001c42:	4699      	mov	r9, r3
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001c50:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001c54:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	3307      	adds	r3, #7
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	ebad 0d03 	sub.w	sp, sp, r3
 8001c6c:	466b      	mov	r3, sp
 8001c6e:	3303      	adds	r3, #3
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
	float factor;

    // Initialize the temp matrix
    for (int i = 0; i < N; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c7a:	e044      	b.n	8001d06 <inverse_matrix+0x172>
    {
        for (int j = 0; j < 2*N; j++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c80:	e039      	b.n	8001cf6 <inverse_matrix+0x162>
        {
            if (j < N)
 8001c82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c86:	429a      	cmp	r2, r3
 8001c88:	da13      	bge.n	8001cb2 <inverse_matrix+0x11e>
            {
                temp[i][j] = mat_a[i][j];
 8001c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c90:	4413      	add	r3, r2
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	441a      	add	r2, r3
 8001c9a:	08ab      	lsrs	r3, r5, #2
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ca0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ca2:	fb03 f000 	mul.w	r0, r3, r0
 8001ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ca8:	4403      	add	r3, r0
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e01e      	b.n	8001cf0 <inverse_matrix+0x15c>
            }
            else
            {
                if (j - N == i)
 8001cb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d10c      	bne.n	8001cd8 <inverse_matrix+0x144>
                {
                    temp[i][j] = 1; // Initialize the identity matrix part
 8001cbe:	08ab      	lsrs	r3, r5, #2
 8001cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cc2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc4:	fb03 f101 	mul.w	r1, r3, r1
 8001cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cca:	440b      	add	r3, r1
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e00b      	b.n	8001cf0 <inverse_matrix+0x15c>
                }
                else
                {
                    temp[i][j] = 0;
 8001cd8:	08ab      	lsrs	r3, r5, #2
 8001cda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cdc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cde:	fb03 f101 	mul.w	r1, r3, r1
 8001ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ce4:	440b      	add	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 2*N; j++)
 8001cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbc0      	blt.n	8001c82 <inverse_matrix+0xee>
    for (int i = 0; i < N; i++)
 8001d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d02:	3301      	adds	r3, #1
 8001d04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dbb6      	blt.n	8001c7c <inverse_matrix+0xe8>
            }
        }
    }

    // Gaussian elimination
    for (int i = 0; i < N; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	667b      	str	r3, [r7, #100]	; 0x64
 8001d12:	e0dc      	b.n	8001ece <inverse_matrix+0x33a>
    {
        // If the diagonal element is 0, swap rows
        if (temp[i][i] == 0)
 8001d14:	08ab      	lsrs	r3, r5, #2
 8001d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d18:	3301      	adds	r3, #1
 8001d1a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d150      	bne.n	8001dd4 <inverse_matrix+0x240>
        {
            for (int j = i + 1; j < N; j++)
 8001d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d34:	3301      	adds	r3, #1
 8001d36:	663b      	str	r3, [r7, #96]	; 0x60
 8001d38:	e048      	b.n	8001dcc <inverse_matrix+0x238>
            {
                if (temp[j][i] != 0)
 8001d3a:	08ab      	lsrs	r3, r5, #2
 8001d3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d40:	fb03 f101 	mul.w	r1, r3, r1
 8001d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d46:	440b      	add	r3, r1
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	d035      	beq.n	8001dc6 <inverse_matrix+0x232>
                {
                    // Swap rows
                    for (int k = 0; k < 2*N; k++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d5e:	e02c      	b.n	8001dba <inverse_matrix+0x226>
                    {
                    	float temp_swap = temp[i][k];
 8001d60:	08ab      	lsrs	r3, r5, #2
 8001d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d64:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d66:	fb03 f101 	mul.w	r1, r3, r1
 8001d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6c:	440b      	add	r3, r1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	63bb      	str	r3, [r7, #56]	; 0x38
                        temp[i][k] = temp[j][k];
 8001d76:	08aa      	lsrs	r2, r5, #2
 8001d78:	08ab      	lsrs	r3, r5, #2
 8001d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d7c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001d7e:	fb02 f000 	mul.w	r0, r2, r0
 8001d82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d84:	4402      	add	r2, r0
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	440a      	add	r2, r1
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d8e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d90:	fb03 f000 	mul.w	r0, r3, r0
 8001d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d96:	4403      	add	r3, r0
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	601a      	str	r2, [r3, #0]
                        temp[j][k] = temp_swap;
 8001d9e:	08ab      	lsrs	r3, r5, #2
 8001da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001da2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001da4:	fb03 f101 	mul.w	r1, r3, r1
 8001da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001daa:	440b      	add	r3, r1
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001db2:	601a      	str	r2, [r3, #0]
                    for (int k = 0; k < 2*N; k++)
 8001db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db6:	3301      	adds	r3, #1
 8001db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbcd      	blt.n	8001d60 <inverse_matrix+0x1cc>
                    }
                    break;
 8001dc4:	e006      	b.n	8001dd4 <inverse_matrix+0x240>
            for (int j = i + 1; j < N; j++)
 8001dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dc8:	3301      	adds	r3, #1
 8001dca:	663b      	str	r3, [r7, #96]	; 0x60
 8001dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbb2      	blt.n	8001d3a <inverse_matrix+0x1a6>
                }
            }
        }
        // Make the diagonal element 1
        factor = temp[i][i];
 8001dd4:	08ab      	lsrs	r3, r5, #2
 8001dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dd8:	3301      	adds	r3, #1
 8001dda:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
        for (int j = 0; j < 2*N; j++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dec:	e01c      	b.n	8001e28 <inverse_matrix+0x294>
        {
            temp[i][j] /= factor;
 8001dee:	08ab      	lsrs	r3, r5, #2
 8001df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001df4:	fb03 f101 	mul.w	r1, r3, r1
 8001df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfa:	440b      	add	r3, r1
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	edd3 6a00 	vldr	s13, [r3]
 8001e04:	08ab      	lsrs	r3, r5, #2
 8001e06:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001e12:	fb03 f101 	mul.w	r1, r3, r1
 8001e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e18:	440b      	add	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 2*N; j++)
 8001e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e24:	3301      	adds	r3, #1
 8001e26:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbdd      	blt.n	8001dee <inverse_matrix+0x25a>
        }
        // Make other elements in the same column 0
        for (int j = 0; j < N; j++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	657b      	str	r3, [r7, #84]	; 0x54
 8001e36:	e043      	b.n	8001ec0 <inverse_matrix+0x32c>
        {
            if (i != j)
 8001e38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d03c      	beq.n	8001eba <inverse_matrix+0x326>
            {
                factor = temp[j][i];
 8001e40:	08ab      	lsrs	r3, r5, #2
 8001e42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e46:	fb03 f101 	mul.w	r1, r3, r1
 8001e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e4c:	440b      	add	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
                for (int k = 0; k < 2*N; k++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	653b      	str	r3, [r7, #80]	; 0x50
 8001e5a:	e029      	b.n	8001eb0 <inverse_matrix+0x31c>
                {
                    temp[j][k] -= factor * temp[i][k];
 8001e5c:	08ab      	lsrs	r3, r5, #2
 8001e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e62:	fb03 f101 	mul.w	r1, r3, r1
 8001e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e68:	440b      	add	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	08ab      	lsrs	r3, r5, #2
 8001e74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e76:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001e78:	fb03 f101 	mul.w	r1, r3, r1
 8001e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7e:	440b      	add	r3, r1
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	08ab      	lsrs	r3, r5, #2
 8001e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e9a:	fb03 f101 	mul.w	r1, r3, r1
 8001e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea0:	440b      	add	r3, r1
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2*N; k++)
 8001eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eac:	3301      	adds	r3, #1
 8001eae:	653b      	str	r3, [r7, #80]	; 0x50
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbd0      	blt.n	8001e5c <inverse_matrix+0x2c8>
        for (int j = 0; j < N; j++)
 8001eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8001ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbb7      	blt.n	8001e38 <inverse_matrix+0x2a4>
    for (int i = 0; i < N; i++)
 8001ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eca:	3301      	adds	r3, #1
 8001ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8001ece:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	f6ff af1e 	blt.w	8001d14 <inverse_matrix+0x180>
            }
        }
    }

    // Extract the inverse matrix
    for (int i = 0; i < N; i++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	e021      	b.n	8001f22 <inverse_matrix+0x38e>
    {
        for (int j = 0; j < N; j++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ee2:	e017      	b.n	8001f14 <inverse_matrix+0x380>
        {
        	mat_a_inv[i][j] = temp[i][j+N];
 8001ee4:	08a8      	lsrs	r0, r5, #2
 8001ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	441a      	add	r2, r3
 8001eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ef2:	440b      	add	r3, r1
 8001ef4:	6819      	ldr	r1, [r3, #0]
 8001ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001efe:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f00:	fb04 f000 	mul.w	r0, r4, r0
 8001f04:	4402      	add	r2, r0
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	440a      	add	r2, r1
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++)
 8001f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f10:	3301      	adds	r3, #1
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbe3      	blt.n	8001ee4 <inverse_matrix+0x350>
    for (int i = 0; i < N; i++)
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1e:	3301      	adds	r3, #1
 8001f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dbd9      	blt.n	8001ede <inverse_matrix+0x34a>
 8001f2a:	46b5      	mov	sp, r6
        }
    }
}
 8001f2c:	bf00      	nop
 8001f2e:	3770      	adds	r7, #112	; 0x70
 8001f30:	46bd      	mov	sp, r7
 8001f32:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f36:	4770      	bx	lr

08001f38 <allocate_2d_array>:
        printf("\r\n");
    }
}

float **allocate_2d_array(int rows, int cols)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    // Dynamic memory allocation for the 2D array
    float **matrix = (float **)malloc(rows * sizeof(float *));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 fc34 	bl	80087b4 <malloc>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60bb      	str	r3, [r7, #8]
    if (matrix == NULL)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d105      	bne.n	8001f62 <allocate_2d_array+0x2a>
    {
        printf("Memory allocation error\r\n");
 8001f56:	4826      	ldr	r0, [pc, #152]	; (8001ff0 <allocate_2d_array+0xb8>)
 8001f58:	f008 f854 	bl	800a004 <puts>
        exit(1);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f006 f941 	bl	80081e4 <exit>
    }

    for (int i = 0; i < rows; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e01a      	b.n	8001f9e <allocate_2d_array+0x66>
    {
        matrix[i] = (float *)malloc(cols * sizeof(float));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	0099      	lsls	r1, r3, #2
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	18d4      	adds	r4, r2, r3
 8001f74:	4608      	mov	r0, r1
 8001f76:	f006 fc1d 	bl	80087b4 <malloc>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6023      	str	r3, [r4, #0]
        if (matrix[i] == NULL)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	4413      	add	r3, r2
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <allocate_2d_array+0x60>
        {
            printf("Memory allocation error\r\n");
 8001f8c:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <allocate_2d_array+0xb8>)
 8001f8e:	f008 f839 	bl	800a004 <puts>
            exit(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f006 f926 	bl	80081e4 <exit>
    for (int i = 0; i < rows; i++)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbe0      	blt.n	8001f68 <allocate_2d_array+0x30>
        }
    }

    // Initialization and assignment of values to the array
    for (int i = 0; i < rows; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e017      	b.n	8001fdc <allocate_2d_array+0xa4>
    {
        for (int j = 0; j < cols; j++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e00d      	b.n	8001fce <allocate_2d_array+0x96>
        {
            matrix[i][j] = 0;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4413      	add	r3, r2
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < cols; j++)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbed      	blt.n	8001fb2 <allocate_2d_array+0x7a>
    for (int i = 0; i < rows; i++)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbe3      	blt.n	8001fac <allocate_2d_array+0x74>
        }
    }

    return matrix;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	0800d310 	.word	0x0800d310

08001ff4 <free_allocate_2d_array>:


void free_allocate_2d_array(float** array, int rows) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    // Free each row
    for (int i = 0; i < rows; i++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e00a      	b.n	800201a <free_allocate_2d_array+0x26>
        free(array[i]);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f006 fbd8 	bl	80087c4 <free>
    for (int i = 0; i < rows; i++) {
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3301      	adds	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	dbf0      	blt.n	8002004 <free_allocate_2d_array+0x10>
    }

    // Free the array of row pointers
    free(array);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f006 fbce 	bl	80087c4 <free>
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <MX_ADC1_Init+0xec>)
 8002044:	4a36      	ldr	r2, [pc, #216]	; (8002120 <MX_ADC1_Init+0xf0>)
 8002046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <MX_ADC1_Init+0xec>)
 800204a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800204e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002050:	4b32      	ldr	r3, [pc, #200]	; (800211c <MX_ADC1_Init+0xec>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <MX_ADC1_Init+0xec>)
 8002058:	2201      	movs	r2, #1
 800205a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <MX_ADC1_Init+0xec>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <MX_ADC1_Init+0xec>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <MX_ADC1_Init+0xec>)
 800206c:	2200      	movs	r2, #0
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002070:	4b2a      	ldr	r3, [pc, #168]	; (800211c <MX_ADC1_Init+0xec>)
 8002072:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <MX_ADC1_Init+0xf4>)
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <MX_ADC1_Init+0xec>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <MX_ADC1_Init+0xec>)
 800207e:	2204      	movs	r2, #4
 8002080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <MX_ADC1_Init+0xec>)
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <MX_ADC1_Init+0xec>)
 800208c:	2201      	movs	r2, #1
 800208e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002090:	4822      	ldr	r0, [pc, #136]	; (800211c <MX_ADC1_Init+0xec>)
 8002092:	f001 f9e7 	bl	8003464 <HAL_ADC_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800209c:	f000 fe62 	bl	8002d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80020a8:	2304      	movs	r3, #4
 80020aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	481a      	ldr	r0, [pc, #104]	; (800211c <MX_ADC1_Init+0xec>)
 80020b2:	f001 fc4d 	bl	8003950 <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020bc:	f000 fe52 	bl	8002d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020c0:	2305      	movs	r3, #5
 80020c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c8:	463b      	mov	r3, r7
 80020ca:	4619      	mov	r1, r3
 80020cc:	4813      	ldr	r0, [pc, #76]	; (800211c <MX_ADC1_Init+0xec>)
 80020ce:	f001 fc3f 	bl	8003950 <HAL_ADC_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020d8:	f000 fe44 	bl	8002d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020dc:	2308      	movs	r3, #8
 80020de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020e0:	2303      	movs	r3, #3
 80020e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	480c      	ldr	r0, [pc, #48]	; (800211c <MX_ADC1_Init+0xec>)
 80020ea:	f001 fc31 	bl	8003950 <HAL_ADC_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80020f4:	f000 fe36 	bl	8002d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80020f8:	2309      	movs	r3, #9
 80020fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_ADC1_Init+0xec>)
 8002106:	f001 fc23 	bl	8003950 <HAL_ADC_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002110:	f000 fe28 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20010238 	.word	0x20010238
 8002120:	40012000 	.word	0x40012000
 8002124:	0f000001 	.word	0x0f000001

08002128 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3d      	ldr	r2, [pc, #244]	; (800223c <HAL_ADC_MspInit+0x114>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d173      	bne.n	8002232 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_ADC_MspInit+0x118>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a3c      	ldr	r2, [pc, #240]	; (8002240 <HAL_ADC_MspInit+0x118>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_ADC_MspInit+0x118>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <HAL_ADC_MspInit+0x118>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a36      	ldr	r2, [pc, #216]	; (8002240 <HAL_ADC_MspInit+0x118>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_ADC_MspInit+0x118>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_ADC_MspInit+0x118>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_ADC_MspInit+0x118>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_ADC_MspInit+0x118>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = EDA_LPF_Pin|EDA_HPF_Pin;
 8002192:	2322      	movs	r3, #34	; 0x22
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002196:	2303      	movs	r3, #3
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4827      	ldr	r0, [pc, #156]	; (8002244 <HAL_ADC_MspInit+0x11c>)
 80021a6:	f002 fc21 	bl	80049ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_V_Pin|BAT_V_Pin;
 80021aa:	2303      	movs	r3, #3
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ae:	2303      	movs	r3, #3
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4822      	ldr	r0, [pc, #136]	; (8002248 <HAL_ADC_MspInit+0x120>)
 80021be:	f002 fc15 	bl	80049ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021c4:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_ADC_MspInit+0x128>)
 80021c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_ADC_MspInit+0x124>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_ADC_MspInit+0x124>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002206:	4811      	ldr	r0, [pc, #68]	; (800224c <HAL_ADC_MspInit+0x124>)
 8002208:	f002 f878 	bl	80042fc <HAL_DMA_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8002212:	f000 fda7 	bl	8002d64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_ADC_MspInit+0x124>)
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_ADC_MspInit+0x124>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2012      	movs	r0, #18
 8002228:	f001 ff49 	bl	80040be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800222c:	2012      	movs	r0, #18
 800222e:	f001 ff62 	bl	80040f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40012000 	.word	0x40012000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	20010280 	.word	0x20010280
 8002250:	40026410 	.word	0x40026410

08002254 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <MX_DAC_Init+0x4c>)
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <MX_DAC_Init+0x50>)
 8002266:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_DAC_Init+0x4c>)
 800226a:	f001 ff5e 	bl	800412a <HAL_DAC_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002274:	f000 fd76 	bl	8002d64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002278:	2300      	movs	r3, #0
 800227a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002280:	463b      	mov	r3, r7
 8002282:	2200      	movs	r2, #0
 8002284:	4619      	mov	r1, r3
 8002286:	4806      	ldr	r0, [pc, #24]	; (80022a0 <MX_DAC_Init+0x4c>)
 8002288:	f001 ffe8 	bl	800425c <HAL_DAC_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002292:	f000 fd67 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200102e0 	.word	0x200102e0
 80022a4:	40007400 	.word	0x40007400

080022a8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_DAC_MspInit+0x74>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d123      	bne.n	8002312 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_DAC_MspInit+0x78>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_DAC_MspInit+0x78>)
 80022d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_DAC_MspInit+0x78>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_DAC_MspInit+0x78>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_DAC_MspInit+0x78>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_DAC_MspInit+0x78>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = EDA_DAC_Pin;
 80022fa:	2310      	movs	r3, #16
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fe:	2303      	movs	r3, #3
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EDA_DAC_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <HAL_DAC_MspInit+0x7c>)
 800230e:	f002 fb6d 	bl	80049ec <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40007400 	.word	0x40007400
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000

08002328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_DMA_Init+0x38>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <MX_DMA_Init+0x38>)
 8002334:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_DMA_Init+0x38>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2038      	movs	r0, #56	; 0x38
 800234c:	f001 feb7 	bl	80040be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002350:	2038      	movs	r0, #56	; 0x38
 8002352:	f001 fed0 	bl	80040f6 <HAL_NVIC_EnableIRQ>

}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	4b60      	ldr	r3, [pc, #384]	; (80024fc <MX_GPIO_Init+0x198>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a5f      	ldr	r2, [pc, #380]	; (80024fc <MX_GPIO_Init+0x198>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <MX_GPIO_Init+0x198>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <MX_GPIO_Init+0x198>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a59      	ldr	r2, [pc, #356]	; (80024fc <MX_GPIO_Init+0x198>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <MX_GPIO_Init+0x198>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023aa:	4b54      	ldr	r3, [pc, #336]	; (80024fc <MX_GPIO_Init+0x198>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a53      	ldr	r2, [pc, #332]	; (80024fc <MX_GPIO_Init+0x198>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <MX_GPIO_Init+0x198>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023c2:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <MX_GPIO_Init+0x198>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <MX_GPIO_Init+0x198>)
 80023c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <MX_GPIO_Init+0x198>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <MX_GPIO_Init+0x198>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a47      	ldr	r2, [pc, #284]	; (80024fc <MX_GPIO_Init+0x198>)
 80023e0:	f043 0320 	orr.w	r3, r3, #32
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b45      	ldr	r3, [pc, #276]	; (80024fc <MX_GPIO_Init+0x198>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <MX_GPIO_Init+0x198>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a41      	ldr	r2, [pc, #260]	; (80024fc <MX_GPIO_Init+0x198>)
 80023f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <MX_GPIO_Init+0x198>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EDA_MUX_SET1_GPIO_Port, EDA_MUX_SET1_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002410:	483b      	ldr	r0, [pc, #236]	; (8002500 <MX_GPIO_Init+0x19c>)
 8002412:	f002 fc97 	bl	8004d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EDA_MUX_SET2_GPIO_Port, EDA_MUX_SET2_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800241c:	4838      	ldr	r0, [pc, #224]	; (8002500 <MX_GPIO_Init+0x19c>)
 800241e:	f002 fc91 	bl	8004d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	2140      	movs	r1, #64	; 0x40
 8002426:	4837      	ldr	r0, [pc, #220]	; (8002504 <MX_GPIO_Init+0x1a0>)
 8002428:	f002 fc8c 	bl	8004d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RGB_Blue_LED_Pin|RGB_Red_LED_Pin|RGB_Green_LED_Pin, GPIO_PIN_SET);
 800242c:	2201      	movs	r2, #1
 800242e:	2170      	movs	r1, #112	; 0x70
 8002430:	4835      	ldr	r0, [pc, #212]	; (8002508 <MX_GPIO_Init+0x1a4>)
 8002432:	f002 fc87 	bl	8004d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CHK_Pin;
 8002436:	2310      	movs	r3, #16
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_CHK_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	4830      	ldr	r0, [pc, #192]	; (800250c <MX_GPIO_Init+0x1a8>)
 800244a:	f002 facf 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = EDA_MUX_SET1_Pin|EDA_MUX_SET2_Pin;
 800244e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4826      	ldr	r0, [pc, #152]	; (8002500 <MX_GPIO_Init+0x19c>)
 8002468:	f002 fac0 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_CHK_Pin;
 800246c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_CHK_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	481f      	ldr	r0, [pc, #124]	; (8002500 <MX_GPIO_Init+0x19c>)
 8002482:	f002 fab3 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AFE_ADC_RDY_Pin;
 8002486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800248a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AFE_ADC_RDY_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	4818      	ldr	r0, [pc, #96]	; (8002500 <MX_GPIO_Init+0x19c>)
 800249e:	f002 faa5 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4619      	mov	r1, r3
 80024b8:	4812      	ldr	r0, [pc, #72]	; (8002504 <MX_GPIO_Init+0x1a0>)
 80024ba:	f002 fa97 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = RGB_Blue_LED_Pin|RGB_Red_LED_Pin|RGB_Green_LED_Pin;
 80024be:	2370      	movs	r3, #112	; 0x70
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	4619      	mov	r1, r3
 80024d4:	480c      	ldr	r0, [pc, #48]	; (8002508 <MX_GPIO_Init+0x1a4>)
 80024d6:	f002 fa89 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = BAT_CHK3_Pin|BAT_CHK1_Pin|BAT_CHK2_Pin;
 80024da:	2307      	movs	r3, #7
 80024dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	4806      	ldr	r0, [pc, #24]	; (8002508 <MX_GPIO_Init+0x1a4>)
 80024ee:	f002 fa7d 	bl	80049ec <HAL_GPIO_Init>

}
 80024f2:	bf00      	nop
 80024f4:	3730      	adds	r7, #48	; 0x30
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40022000 	.word	0x40022000
 8002504:	40021400 	.word	0x40021400
 8002508:	40022400 	.word	0x40022400
 800250c:	40020400 	.word	0x40020400

08002510 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_I2C1_Init+0x74>)
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <MX_I2C1_Init+0x78>)
 8002518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_I2C1_Init+0x74>)
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <MX_I2C1_Init+0x7c>)
 800251e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_I2C1_Init+0x74>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_I2C1_Init+0x74>)
 8002528:	2201      	movs	r2, #1
 800252a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_I2C1_Init+0x74>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <MX_I2C1_Init+0x74>)
 8002534:	2200      	movs	r2, #0
 8002536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_I2C1_Init+0x74>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <MX_I2C1_Init+0x74>)
 8002540:	2200      	movs	r2, #0
 8002542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <MX_I2C1_Init+0x74>)
 8002546:	2200      	movs	r2, #0
 8002548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <MX_I2C1_Init+0x74>)
 800254c:	f002 fc14 	bl	8004d78 <HAL_I2C_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002556:	f000 fc05 	bl	8002d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800255a:	2100      	movs	r1, #0
 800255c:	4809      	ldr	r0, [pc, #36]	; (8002584 <MX_I2C1_Init+0x74>)
 800255e:	f003 fa59 	bl	8005a14 <HAL_I2CEx_ConfigAnalogFilter>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002568:	f000 fbfc 	bl	8002d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800256c:	2100      	movs	r1, #0
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_I2C1_Init+0x74>)
 8002570:	f003 fa9b 	bl	8005aaa <HAL_I2CEx_ConfigDigitalFilter>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800257a:	f000 fbf3 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200102f4 	.word	0x200102f4
 8002588:	40005400 	.word	0x40005400
 800258c:	00303d5b 	.word	0x00303d5b

08002590 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_I2C2_Init+0x74>)
 8002596:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <MX_I2C2_Init+0x78>)
 8002598:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_I2C2_Init+0x74>)
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <MX_I2C2_Init+0x7c>)
 800259e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_I2C2_Init+0x74>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <MX_I2C2_Init+0x74>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_I2C2_Init+0x74>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <MX_I2C2_Init+0x74>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <MX_I2C2_Init+0x74>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MX_I2C2_Init+0x74>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MX_I2C2_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025ca:	480e      	ldr	r0, [pc, #56]	; (8002604 <MX_I2C2_Init+0x74>)
 80025cc:	f002 fbd4 	bl	8004d78 <HAL_I2C_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80025d6:	f000 fbc5 	bl	8002d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025da:	2100      	movs	r1, #0
 80025dc:	4809      	ldr	r0, [pc, #36]	; (8002604 <MX_I2C2_Init+0x74>)
 80025de:	f003 fa19 	bl	8005a14 <HAL_I2CEx_ConfigAnalogFilter>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025e8:	f000 fbbc 	bl	8002d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025ec:	2100      	movs	r1, #0
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_I2C2_Init+0x74>)
 80025f0:	f003 fa5b 	bl	8005aaa <HAL_I2CEx_ConfigDigitalFilter>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80025fa:	f000 fbb3 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20010348 	.word	0x20010348
 8002608:	40005800 	.word	0x40005800
 800260c:	00303d5b 	.word	0x00303d5b

08002610 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <MX_I2C3_Init+0x74>)
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <MX_I2C3_Init+0x78>)
 8002618:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <MX_I2C3_Init+0x74>)
 800261c:	4a1b      	ldr	r2, [pc, #108]	; (800268c <MX_I2C3_Init+0x7c>)
 800261e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_I2C3_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <MX_I2C3_Init+0x74>)
 8002628:	2201      	movs	r2, #1
 800262a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_I2C3_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <MX_I2C3_Init+0x74>)
 8002634:	2200      	movs	r2, #0
 8002636:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <MX_I2C3_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <MX_I2C3_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_I2C3_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800264a:	480e      	ldr	r0, [pc, #56]	; (8002684 <MX_I2C3_Init+0x74>)
 800264c:	f002 fb94 	bl	8004d78 <HAL_I2C_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002656:	f000 fb85 	bl	8002d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800265a:	2100      	movs	r1, #0
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <MX_I2C3_Init+0x74>)
 800265e:	f003 f9d9 	bl	8005a14 <HAL_I2CEx_ConfigAnalogFilter>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002668:	f000 fb7c 	bl	8002d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800266c:	2100      	movs	r1, #0
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_I2C3_Init+0x74>)
 8002670:	f003 fa1b 	bl	8005aaa <HAL_I2CEx_ConfigDigitalFilter>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800267a:	f000 fb73 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2001039c 	.word	0x2001039c
 8002688:	40005c00 	.word	0x40005c00
 800268c:	00303d5b 	.word	0x00303d5b

08002690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0ae      	sub	sp, #184	; 0xb8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a8:	f107 0320 	add.w	r3, r7, #32
 80026ac:	2284      	movs	r2, #132	; 0x84
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f007 fcc1 	bl	800a038 <memset>
  if(i2cHandle->Instance==I2C1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a66      	ldr	r2, [pc, #408]	; (8002854 <HAL_I2C_MspInit+0x1c4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d13e      	bne.n	800273e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026cc:	f107 0320 	add.w	r3, r7, #32
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 ff01 	bl	80064d8 <HAL_RCCEx_PeriphCLKConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80026dc:	f000 fb42 	bl	8002d64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e0:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4a5c      	ldr	r2, [pc, #368]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	6313      	str	r3, [r2, #48]	; 0x30
 80026ec:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_AFE_IMU_Pin|I2C1_SDL_AFE_IMU_Pin;
 80026f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002700:	2312      	movs	r3, #18
 8002702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002712:	2304      	movs	r3, #4
 8002714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800271c:	4619      	mov	r1, r3
 800271e:	484f      	ldr	r0, [pc, #316]	; (800285c <HAL_I2C_MspInit+0x1cc>)
 8002720:	f002 f964 	bl	80049ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002724:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a4b      	ldr	r2, [pc, #300]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 800272a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800273c:	e086      	b.n	800284c <HAL_I2C_MspInit+0x1bc>
  else if(i2cHandle->Instance==I2C2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a47      	ldr	r2, [pc, #284]	; (8002860 <HAL_I2C_MspInit+0x1d0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d13e      	bne.n	80027c6 <HAL_I2C_MspInit+0x136>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800274c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002754:	f107 0320 	add.w	r3, r7, #32
 8002758:	4618      	mov	r0, r3
 800275a:	f003 febd 	bl	80064d8 <HAL_RCCEx_PeriphCLKConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002764:	f000 fafe 	bl	8002d64 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002768:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	6313      	str	r3, [r2, #48]	; 0x30
 8002774:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = I2C2_SCL_ENV_Pin|I2C2_SDA_ENV_Pin;
 8002780:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002788:	2312      	movs	r3, #18
 800278a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800279a:	2304      	movs	r3, #4
 800279c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027a4:	4619      	mov	r1, r3
 80027a6:	482d      	ldr	r0, [pc, #180]	; (800285c <HAL_I2C_MspInit+0x1cc>)
 80027a8:	f002 f920 	bl	80049ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a29      	ldr	r2, [pc, #164]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80027b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
}
 80027c4:	e042      	b.n	800284c <HAL_I2C_MspInit+0x1bc>
  else if(i2cHandle->Instance==I2C3)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a26      	ldr	r2, [pc, #152]	; (8002864 <HAL_I2C_MspInit+0x1d4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d13d      	bne.n	800284c <HAL_I2C_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80027d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027dc:	f107 0320 	add.w	r3, r7, #32
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fe79 	bl	80064d8 <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_I2C_MspInit+0x160>
      Error_Handler();
 80027ec:	f000 faba 	bl	8002d64 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80027f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_SKT_Pin|I2C3_SDA_SKT_Pin;
 8002808:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800280c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002810:	2312      	movs	r3, #18
 8002812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002822:	2304      	movs	r3, #4
 8002824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002828:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800282c:	4619      	mov	r1, r3
 800282e:	480e      	ldr	r0, [pc, #56]	; (8002868 <HAL_I2C_MspInit+0x1d8>)
 8002830:	f002 f8dc 	bl	80049ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 800283a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800283e:	6413      	str	r3, [r2, #64]	; 0x40
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_I2C_MspInit+0x1c8>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
}
 800284c:	bf00      	nop
 800284e:	37b8      	adds	r7, #184	; 0xb8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40005400 	.word	0x40005400
 8002858:	40023800 	.word	0x40023800
 800285c:	40020400 	.word	0x40020400
 8002860:	40005800 	.word	0x40005800
 8002864:	40005c00 	.word	0x40005c00
 8002868:	40021c00 	.word	0x40021c00
 800286c:	00000000 	.word	0x00000000

08002870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002876:	f000 fd74 	bl	8003362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800287a:	f000 f923 	bl	8002ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800287e:	f7ff fd71 	bl	8002364 <MX_GPIO_Init>
  MX_DMA_Init();
 8002882:	f7ff fd51 	bl	8002328 <MX_DMA_Init>
  MX_SPI5_Init();
 8002886:	f000 fa73 	bl	8002d70 <MX_SPI5_Init>
  MX_FATFS_Init();
 800288a:	f005 fbe5 	bl	8008058 <MX_FATFS_Init>
  MX_ADC1_Init();
 800288e:	f7ff fbcf 	bl	8002030 <MX_ADC1_Init>
  MX_DAC_Init();
 8002892:	f7ff fcdf 	bl	8002254 <MX_DAC_Init>
  MX_I2C1_Init();
 8002896:	f7ff fe3b 	bl	8002510 <MX_I2C1_Init>
  MX_I2C2_Init();
 800289a:	f7ff fe79 	bl	8002590 <MX_I2C2_Init>
  MX_I2C3_Init();
 800289e:	f7ff feb7 	bl	8002610 <MX_I2C3_Init>
  MX_TIM3_Init();
 80028a2:	f000 fc0f 	bl	80030c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80028a6:	f000 fc81 	bl	80031ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  while(1)
  {
	  MOSFET_EDA_Measure_Ids(Ids, &min_DAC_value, &max_DAC_value);
 80028aa:	4a7d      	ldr	r2, [pc, #500]	; (8002aa0 <main+0x230>)
 80028ac:	497d      	ldr	r1, [pc, #500]	; (8002aa4 <main+0x234>)
 80028ae:	487e      	ldr	r0, [pc, #504]	; (8002aa8 <main+0x238>)
 80028b0:	f7fe fc7a 	bl	80011a8 <MOSFET_EDA_Measure_Ids>
	  MOSFET_EDA_Calibration_Ids(Ids, min_DAC_value, max_DAC_value, Ids_, parameter, &tmp);
 80028b4:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <main+0x234>)
 80028b6:	8819      	ldrh	r1, [r3, #0]
 80028b8:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <main+0x230>)
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	4b7b      	ldr	r3, [pc, #492]	; (8002aac <main+0x23c>)
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <main+0x240>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <main+0x244>)
 80028c6:	4878      	ldr	r0, [pc, #480]	; (8002aa8 <main+0x238>)
 80028c8:	f7fe fe82 	bl	80015d0 <MOSFET_EDA_Calibration_Ids>
	  printf("DAC_value\tVgs\tT:%.2f\r\n", tmp);
 80028cc:	4b77      	ldr	r3, [pc, #476]	; (8002aac <main+0x23c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe59 	bl	8000588 <__aeabi_f2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4877      	ldr	r0, [pc, #476]	; (8002ab8 <main+0x248>)
 80028dc:	f007 fb2c 	bl	8009f38 <iprintf>
	  for(int i=min_DAC_value; i<1500; i++)
 80028e0:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <main+0x234>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e0cf      	b.n	8002a88 <main+0x218>
	  {
		  float Vgs = (float)i / 4096 * 3.3;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f2:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002abc <main+0x24c>
 80028f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028fa:	ee16 0a90 	vmov	r0, s13
 80028fe:	f7fd fe43 	bl	8000588 <__aeabi_f2d>
 8002902:	a365      	add	r3, pc, #404	; (adr r3, 8002a98 <main+0x228>)
 8002904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002908:	f7fd fe96 	bl	8000638 <__aeabi_dmul>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	f7fe f988 	bl	8000c28 <__aeabi_d2f>
 8002918:	4603      	mov	r3, r0
 800291a:	60bb      	str	r3, [r7, #8]
		  float ln_Ids_ = (parameter[5]*i*i*i*i*i) + (parameter[4]*i*i*i*i) + (parameter[3]*i*i*i) + (parameter[2]*i*i) + (parameter[1]*i) + (parameter[0]);
 800291c:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <main+0x240>)
 800291e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002968:	4b51      	ldr	r3, [pc, #324]	; (8002ab0 <main+0x240>)
 800296a:	edd3 6a04 	vldr	s13, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002978:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002994:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <main+0x240>)
 80029ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	ee07 3a90 	vmov	s15, r3
 80029c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <main+0x240>)
 80029e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a04:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <main+0x240>)
 8002a06:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a1c:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <main+0x240>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	edc7 7a01 	vstr	s15, [r7, #4]
		  Ids_[i] = exp(ln_Ids_);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fd fdac 	bl	8000588 <__aeabi_f2d>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	ec43 2b10 	vmov	d0, r2, r3
 8002a38:	f00a f822 	bl	800ca80 <exp>
 8002a3c:	ec53 2b10 	vmov	r2, r3, d0
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7fe f8f0 	bl	8000c28 <__aeabi_d2f>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	491a      	ldr	r1, [pc, #104]	; (8002ab4 <main+0x244>)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	601a      	str	r2, [r3, #0]
		  printf("%d\t%f\t%f\r\n", i, Vgs, Ids_[i]);
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f7fd fd97 	bl	8000588 <__aeabi_f2d>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	460d      	mov	r5, r1
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <main+0x244>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd8d 	bl	8000588 <__aeabi_f2d>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	e9cd 2300 	strd	r2, r3, [sp]
 8002a76:	4622      	mov	r2, r4
 8002a78:	462b      	mov	r3, r5
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	4810      	ldr	r0, [pc, #64]	; (8002ac0 <main+0x250>)
 8002a7e:	f007 fa5b 	bl	8009f38 <iprintf>
	  for(int i=min_DAC_value; i<1500; i++)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3301      	adds	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f240 52db 	movw	r2, #1499	; 0x5db
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f77f af2a 	ble.w	80028e8 <main+0x78>
  {
 8002a94:	e709      	b.n	80028aa <main+0x3a>
 8002a96:	bf00      	nop
 8002a98:	66666666 	.word	0x66666666
 8002a9c:	400a6666 	.word	0x400a6666
 8002aa0:	20018422 	.word	0x20018422
 8002aa4:	20018420 	.word	0x20018420
 8002aa8:	20010408 	.word	0x20010408
 8002aac:	200103fc 	.word	0x200103fc
 8002ab0:	20018408 	.word	0x20018408
 8002ab4:	20014408 	.word	0x20014408
 8002ab8:	0800d32c 	.word	0x0800d32c
 8002abc:	45800000 	.word	0x45800000
 8002ac0:	0800d344 	.word	0x0800d344

08002ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b094      	sub	sp, #80	; 0x50
 8002ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aca:	f107 0320 	add.w	r3, r7, #32
 8002ace:	2230      	movs	r2, #48	; 0x30
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f007 fab0 	bl	800a038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <SystemClock_Config+0xd0>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <SystemClock_Config+0xd0>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <SystemClock_Config+0xd0>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <SystemClock_Config+0xd4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <SystemClock_Config+0xd4>)
 8002b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <SystemClock_Config+0xd4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b26:	2301      	movs	r3, #1
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b40:	2302      	movs	r3, #2
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b44:	2302      	movs	r3, #2
 8002b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b48:	f107 0320 	add.w	r3, r7, #32
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 fff9 	bl	8005b44 <HAL_RCC_OscConfig>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002b58:	f000 f904 	bl	8002d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b60:	2302      	movs	r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002b68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2104      	movs	r1, #4
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fa86 	bl	800608c <HAL_RCC_ClockConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002b86:	f000 f8ed 	bl	8002d64 <Error_Handler>
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3750      	adds	r7, #80	; 0x50
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40007000 	.word	0x40007000

08002b9c <_write>:

/* USER CODE BEGIN 4 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 20);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	2314      	movs	r3, #20
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <_write+0x24>)
 8002bb2:	f004 fdc9 	bl	8007748 <HAL_UART_Transmit>

	return len;
 8002bb6:	687b      	ldr	r3, [r7, #4]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200184e4 	.word	0x200184e4

08002bc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc8:	b08f      	sub	sp, #60	; 0x3c
 8002bca:	af0a      	add	r7, sp, #40	; 0x28
 8002bcc:	60f8      	str	r0, [r7, #12]
	if(htim->Instance == TIM3)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a56      	ldr	r2, [pc, #344]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	f040 80a4 	bne.w	8002d22 <HAL_TIM_PeriodElapsedCallback+0x15e>
	{
		ms = (float)ms_idx/fs;
 8002bda:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8002d34 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bee:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002bf0:	edc3 7a00 	vstr	s15, [r3]

		/* get EDA value ADC */
		MOSFET_EDA_Get(&EDA_LPF_Vout, &EDA_HPF_Vout);
 8002bf4:	4951      	ldr	r1, [pc, #324]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002bf6:	4852      	ldr	r0, [pc, #328]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002bf8:	f7fe fd86 	bl	8001708 <MOSFET_EDA_Get>

		/* Calculate EDA uS */
		EDA = Ids[set_DAC_value] / (EDA_LPF_Vout - 0.5);
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fcbd 	bl	8000588 <__aeabi_f2d>
 8002c0e:	4604      	mov	r4, r0
 8002c10:	460d      	mov	r5, r1
 8002c12:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fcb6 	bl	8000588 <__aeabi_f2d>
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002c22:	f7fd fb51 	bl	80002c8 <__aeabi_dsub>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fe2d 	bl	800088c <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd fff5 	bl	8000c28 <__aeabi_d2f>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4a43      	ldr	r2, [pc, #268]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002c42:	6013      	str	r3, [r2, #0]
		EDA_ohm = 1/EDA;
 8002c44:	4b42      	ldr	r3, [pc, #264]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002c46:	ed93 7a00 	vldr	s14, [r3]
 8002c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c52:	4b40      	ldr	r3, [pc, #256]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002c54:	edc3 7a00 	vstr	s15, [r3]

		printf("%dm %.3fs\tEDA_LPF_ADC = %fv\tEDA = %fuS(%fMohm)\tIds = %fuA\tDAC_value = %d\r\n", min, sec+ms, EDA_LPF_Vout, EDA, EDA_ohm, Ids[set_DAC_value], set_DAC_value);
 8002c58:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	461e      	mov	r6, r3
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c6c:	edd3 7a00 	vldr	s15, [r3]
 8002c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c74:	ee17 0a90 	vmov	r0, s15
 8002c78:	f7fd fc86 	bl	8000588 <__aeabi_f2d>
 8002c7c:	e9c7 0100 	strd	r0, r1, [r7]
 8002c80:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fc7f 	bl	8000588 <__aeabi_f2d>
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	460d      	mov	r5, r1
 8002c8e:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc78 	bl	8000588 <__aeabi_f2d>
 8002c98:	4680      	mov	r8, r0
 8002c9a:	4689      	mov	r9, r1
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc71 	bl	8000588 <__aeabi_f2d>
 8002ca6:	4682      	mov	sl, r0
 8002ca8:	468b      	mov	fp, r1
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc66 	bl	8000588 <__aeabi_f2d>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4920      	ldr	r1, [pc, #128]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002cc2:	8809      	ldrh	r1, [r1, #0]
 8002cc4:	9108      	str	r1, [sp, #32]
 8002cc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002cca:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002cce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002cd2:	e9cd 4500 	strd	r4, r5, [sp]
 8002cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cda:	4631      	mov	r1, r6
 8002cdc:	4820      	ldr	r0, [pc, #128]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002cde:	f007 f92b 	bl	8009f38 <iprintf>

		if(ms_idx >= fs)
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce8:	d915      	bls.n	8002d16 <HAL_TIM_PeriodElapsedCallback+0x152>
		{
			ms_idx = 0;
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	801a      	strh	r2, [r3, #0]
			sec++;
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002cfa:	701a      	strb	r2, [r3, #0]

			if(sec >= 60)
 8002cfc:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b3b      	cmp	r3, #59	; 0x3b
 8002d02:	d908      	bls.n	8002d16 <HAL_TIM_PeriodElapsedCallback+0x152>
			{
				sec = 0;
 8002d04:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
				min++;
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002d14:	801a      	strh	r2, [r3, #0]
			}
		}
		ms_idx++;
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002d20:	801a      	strh	r2, [r3, #0]
	}
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	200103f8 	.word	0x200103f8
 8002d34:	43000000 	.word	0x43000000
 8002d38:	200103f0 	.word	0x200103f0
 8002d3c:	2001842c 	.word	0x2001842c
 8002d40:	20018428 	.word	0x20018428
 8002d44:	20018424 	.word	0x20018424
 8002d48:	20010408 	.word	0x20010408
 8002d4c:	3fe00000 	.word	0x3fe00000
 8002d50:	20010400 	.word	0x20010400
 8002d54:	20010404 	.word	0x20010404
 8002d58:	200103f6 	.word	0x200103f6
 8002d5c:	200103f4 	.word	0x200103f4
 8002d60:	0800d350 	.word	0x0800d350

08002d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d68:	b672      	cpsid	i
}
 8002d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <Error_Handler+0x8>
	...

08002d70 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <MX_SPI5_Init+0x78>)
 8002d78:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d80:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002d8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d8e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002da6:	2208      	movs	r2, #8
 8002da8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002dca:	2208      	movs	r2, #8
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_SPI5_Init+0x74>)
 8002dd0:	f003 ff72 	bl	8006cb8 <HAL_SPI_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002dda:	f7ff ffc3 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20018430 	.word	0x20018430
 8002de8:	40015000 	.word	0x40015000

08002dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_SPI_MspInit+0x7c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d128      	bne.n	8002e60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_SPI_MspInit+0x80>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <HAL_SPI_MspInit+0x80>)
 8002e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_SPI_MspInit+0x80>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_SPI_MspInit+0x80>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <HAL_SPI_MspInit+0x80>)
 8002e2c:	f043 0320 	orr.w	r3, r3, #32
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_SPI_MspInit+0x80>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8002e3e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e50:	2305      	movs	r3, #5
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <HAL_SPI_MspInit+0x84>)
 8002e5c:	f001 fdc6 	bl	80049ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40015000 	.word	0x40015000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40021400 	.word	0x40021400

08002e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_MspInit+0x44>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_MspInit+0x44>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <MemManage_Handler+0x4>

08002ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 fa68 	bl	80033dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <ADC_IRQHandler+0x10>)
 8002f16:	f000 fae9 	bl	80034ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20010238 	.word	0x20010238

08002f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <TIM3_IRQHandler+0x10>)
 8002f2a:	f003 ffc7 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20018498 	.word	0x20018498

08002f38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <DMA2_Stream0_IRQHandler+0x10>)
 8002f3e:	f001 faeb 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20010280 	.word	0x20010280

08002f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_kill>:

int _kill(int pid, int sig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f66:	f007 f883 	bl	800a070 <__errno>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_exit>:

void _exit (int status)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffe7 	bl	8002f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f8e:	e7fe      	b.n	8002f8e <_exit+0x12>

08002f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e00a      	b.n	8002fb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fa2:	f3af 8000 	nop.w
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	b2ca      	uxtb	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbf0      	blt.n	8002fa2 <_read+0x12>
  }

  return len;
 8002fc0:	687b      	ldr	r3, [r7, #4]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ff2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_isatty>:

int _isatty(int file)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <_sbrk+0x5c>)
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <_sbrk+0x60>)
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <_sbrk+0x64>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <_sbrk+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d207      	bcs.n	8003074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003064:	f007 f804 	bl	800a070 <__errno>
 8003068:	4603      	mov	r3, r0
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003072:	e009      	b.n	8003088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <_sbrk+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <_sbrk+0x64>)
 8003084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20050000 	.word	0x20050000
 8003094:	00000400 	.word	0x00000400
 8003098:	20018494 	.word	0x20018494
 800309c:	200186d0 	.word	0x200186d0

080030a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <SystemInit+0x20>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <SystemInit+0x20>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ca:	f107 0310 	add.w	r3, r7, #16
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <MX_TIM3_Init+0x94>)
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <MX_TIM3_Init+0x98>)
 80030e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <MX_TIM3_Init+0x94>)
 80030ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <MX_TIM3_Init+0x94>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 249;
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <MX_TIM3_Init+0x94>)
 80030f8:	22f9      	movs	r2, #249	; 0xf9
 80030fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <MX_TIM3_Init+0x94>)
 80030fe:	2200      	movs	r2, #0
 8003100:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003102:	4b15      	ldr	r3, [pc, #84]	; (8003158 <MX_TIM3_Init+0x94>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003108:	4813      	ldr	r0, [pc, #76]	; (8003158 <MX_TIM3_Init+0x94>)
 800310a:	f003 fe80 	bl	8006e0e <HAL_TIM_Base_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003114:	f7ff fe26 	bl	8002d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	4619      	mov	r1, r3
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <MX_TIM3_Init+0x94>)
 8003126:	f003 ffe9 	bl	80070fc <HAL_TIM_ConfigClockSource>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003130:	f7ff fe18 	bl	8002d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_TIM3_Init+0x94>)
 8003142:	f004 fa07 	bl	8007554 <HAL_TIMEx_MasterConfigSynchronization>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800314c:	f7ff fe0a 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003150:	bf00      	nop
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20018498 	.word	0x20018498
 800315c:	40000400 	.word	0x40000400

08003160 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <HAL_TIM_Base_MspInit+0x44>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d113      	bne.n	800319a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_TIM_Base_MspInit+0x48>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <HAL_TIM_Base_MspInit+0x48>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_TIM_Base_MspInit+0x48>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	201d      	movs	r0, #29
 8003190:	f000 ff95 	bl	80040be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003194:	201d      	movs	r0, #29
 8003196:	f000 ffae 	bl	80040f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40023800 	.word	0x40023800

080031ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <MX_USART1_UART_Init+0x5c>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <MX_USART1_UART_Init+0x58>)
 80031f0:	f004 fa5c 	bl	80076ac <HAL_UART_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80031fa:	f7ff fdb3 	bl	8002d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	200184e4 	.word	0x200184e4
 8003208:	40011000 	.word	0x40011000

0800320c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0ac      	sub	sp, #176	; 0xb0
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003224:	f107 0318 	add.w	r3, r7, #24
 8003228:	2284      	movs	r2, #132	; 0x84
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f006 ff03 	bl	800a038 <memset>
  if(uartHandle->Instance==USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a32      	ldr	r2, [pc, #200]	; (8003300 <HAL_UART_MspInit+0xf4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d15c      	bne.n	80032f6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800323c:	2340      	movs	r3, #64	; 0x40
 800323e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8003240:	2302      	movs	r3, #2
 8003242:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003244:	f107 0318 	add.w	r3, r7, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f945 	bl	80064d8 <HAL_RCCEx_PeriphCLKConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003254:	f7ff fd86 	bl	8002d64 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003258:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_UART_MspInit+0xf8>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	4a29      	ldr	r2, [pc, #164]	; (8003304 <HAL_UART_MspInit+0xf8>)
 800325e:	f043 0310 	orr.w	r3, r3, #16
 8003262:	6453      	str	r3, [r2, #68]	; 0x44
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_UART_MspInit+0xf8>)
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_UART_MspInit+0xf8>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a23      	ldr	r2, [pc, #140]	; (8003304 <HAL_UART_MspInit+0xf8>)
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <HAL_UART_MspInit+0xf8>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_UART_MspInit+0xf8>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_UART_MspInit+0xf8>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_UART_MspInit+0xf8>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b2:	2303      	movs	r3, #3
 80032b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b8:	2307      	movs	r3, #7
 80032ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032c2:	4619      	mov	r1, r3
 80032c4:	4810      	ldr	r0, [pc, #64]	; (8003308 <HAL_UART_MspInit+0xfc>)
 80032c6:	f001 fb91 	bl	80049ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032de:	2303      	movs	r3, #3
 80032e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032e4:	2307      	movs	r3, #7
 80032e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032ee:	4619      	mov	r1, r3
 80032f0:	4806      	ldr	r0, [pc, #24]	; (800330c <HAL_UART_MspInit+0x100>)
 80032f2:	f001 fb7b 	bl	80049ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80032f6:	bf00      	nop
 80032f8:	37b0      	adds	r7, #176	; 0xb0
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40011000 	.word	0x40011000
 8003304:	40023800 	.word	0x40023800
 8003308:	40020400 	.word	0x40020400
 800330c:	40020000 	.word	0x40020000

08003310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003314:	480d      	ldr	r0, [pc, #52]	; (800334c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003316:	490e      	ldr	r1, [pc, #56]	; (8003350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800331a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800331c:	e002      	b.n	8003324 <LoopCopyDataInit>

0800331e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003322:	3304      	adds	r3, #4

08003324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003328:	d3f9      	bcc.n	800331e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800332c:	4c0b      	ldr	r4, [pc, #44]	; (800335c <LoopFillZerobss+0x26>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003330:	e001      	b.n	8003336 <LoopFillZerobss>

08003332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003334:	3204      	adds	r2, #4

08003336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003338:	d3fb      	bcc.n	8003332 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800333a:	f7ff feb1 	bl	80030a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800333e:	f006 fe9d 	bl	800a07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003342:	f7ff fa95 	bl	8002870 <main>
  bx  lr    
 8003346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003348:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800334c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003350:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003354:	0800d820 	.word	0x0800d820
  ldr r2, =_sbss
 8003358:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800335c:	200186d0 	.word	0x200186d0

08003360 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003360:	e7fe      	b.n	8003360 <CAN1_RX0_IRQHandler>

08003362 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003366:	2003      	movs	r0, #3
 8003368:	f000 fe9e 	bl	80040a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800336c:	200f      	movs	r0, #15
 800336e:	f000 f805 	bl	800337c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003372:	f7ff fd7f 	bl	8002e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_InitTick+0x54>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_InitTick+0x58>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	4619      	mov	r1, r3
 800338e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003392:	fbb3 f3f1 	udiv	r3, r3, r1
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	4618      	mov	r0, r3
 800339c:	f000 feb9 	bl	8004112 <HAL_SYSTICK_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00e      	b.n	80033c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d80a      	bhi.n	80033c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b0:	2200      	movs	r2, #0
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033b8:	f000 fe81 	bl	80040be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033bc:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <HAL_InitTick+0x5c>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e000      	b.n	80033c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000010 	.word	0x20000010
 80033d4:	20000018 	.word	0x20000018
 80033d8:	20000014 	.word	0x20000014

080033dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_IncTick+0x20>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_IncTick+0x24>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4413      	add	r3, r2
 80033ec:	4a04      	ldr	r2, [pc, #16]	; (8003400 <HAL_IncTick+0x24>)
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000018 	.word	0x20000018
 8003400:	2001856c 	.word	0x2001856c

08003404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return uwTick;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_GetTick+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	2001856c 	.word	0x2001856c

0800341c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff ffee 	bl	8003404 <HAL_GetTick>
 8003428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003434:	d005      	beq.n	8003442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_Delay+0x44>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003442:	bf00      	nop
 8003444:	f7ff ffde 	bl	8003404 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	429a      	cmp	r2, r3
 8003452:	d8f7      	bhi.n	8003444 <HAL_Delay+0x28>
  {
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000018 	.word	0x20000018

08003464 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e031      	b.n	80034de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fe fe50 	bl	8002128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_ADC_Init+0x84>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	f043 0202 	orr.w	r2, r3, #2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fba2 	bl	8003bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f023 0303 	bic.w	r3, r3, #3
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
 80034ce:	e001      	b.n	80034d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	ffffeefd 	.word	0xffffeefd

080034ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d049      	beq.n	80035b6 <HAL_ADC_IRQHandler+0xca>
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d046      	beq.n	80035b6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12b      	bne.n	80035a6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	d127      	bne.n	80035a6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800356e:	2b00      	cmp	r3, #0
 8003570:	d119      	bne.n	80035a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0220 	bic.w	r2, r2, #32
 8003580:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9aa 	bl	8003900 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0212 	mvn.w	r2, #18
 80035b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d057      	beq.n	800367c <HAL_ADC_IRQHandler+0x190>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d054      	beq.n	800367c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d139      	bne.n	800366c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003610:	2b00      	cmp	r3, #0
 8003612:	d12b      	bne.n	800366c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800361e:	2b00      	cmp	r3, #0
 8003620:	d124      	bne.n	800366c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11d      	bne.n	800366c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003634:	2b00      	cmp	r3, #0
 8003636:	d119      	bne.n	800366c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003646:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fc41 	bl	8003ef4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 020c 	mvn.w	r2, #12
 800367a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <HAL_ADC_IRQHandler+0x1d6>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d014      	beq.n	80036c2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10d      	bne.n	80036c2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f938 	bl	8003928 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0201 	mvn.w	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_ADC_IRQHandler+0x218>
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d012      	beq.n	8003704 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0220 	mvn.w	r2, #32
 80036f2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f921 	bl	800393c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0220 	mvn.w	r2, #32
 8003702:	601a      	str	r2, [r3, #0]
  }
}
 8003704:	bf00      	nop
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_ADC_Start_DMA+0x1e>
 8003726:	2302      	movs	r3, #2
 8003728:	e0d4      	b.n	80038d4 <HAL_ADC_Start_DMA+0x1c8>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d018      	beq.n	8003772 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003750:	4b62      	ldr	r3, [pc, #392]	; (80038dc <HAL_ADC_Start_DMA+0x1d0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a62      	ldr	r2, [pc, #392]	; (80038e0 <HAL_ADC_Start_DMA+0x1d4>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0c9a      	lsrs	r2, r3, #18
 800375c:	4613      	mov	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003764:	e002      	b.n	800376c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3b01      	subs	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f9      	bne.n	8003766 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 809c 	bne.w	80038ba <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_ADC_Start_DMA+0x1d8>)
 8003788:	4013      	ands	r3, r2
 800378a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d106      	bne.n	80037cc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f023 0206 	bic.w	r2, r3, #6
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
 80037ca:	e002      	b.n	80037d2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	4a42      	ldr	r2, [pc, #264]	; (80038e8 <HAL_ADC_Start_DMA+0x1dc>)
 80037e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	4a41      	ldr	r2, [pc, #260]	; (80038ec <HAL_ADC_Start_DMA+0x1e0>)
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	4a40      	ldr	r2, [pc, #256]	; (80038f0 <HAL_ADC_Start_DMA+0x1e4>)
 80037f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800380a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	334c      	adds	r3, #76	; 0x4c
 8003826:	4619      	mov	r1, r3
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f000 fe14 	bl	8004458 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <HAL_ADC_Start_DMA+0x1e8>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10f      	bne.n	800385c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d143      	bne.n	80038d2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	e03a      	b.n	80038d2 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a25      	ldr	r2, [pc, #148]	; (80038f8 <HAL_ADC_Start_DMA+0x1ec>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10e      	bne.n	8003884 <HAL_ADC_Start_DMA+0x178>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003882:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_ADC_Start_DMA+0x1e8>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	d120      	bne.n	80038d2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_ADC_Start_DMA+0x1f0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d11b      	bne.n	80038d2 <HAL_ADC_Start_DMA+0x1c6>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d114      	bne.n	80038d2 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	e00b      	b.n	80038d2 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0210 	orr.w	r2, r3, #16
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000010 	.word	0x20000010
 80038e0:	431bde83 	.word	0x431bde83
 80038e4:	fffff8fe 	.word	0xfffff8fe
 80038e8:	08003df1 	.word	0x08003df1
 80038ec:	08003eab 	.word	0x08003eab
 80038f0:	08003ec7 	.word	0x08003ec7
 80038f4:	40012300 	.word	0x40012300
 80038f8:	40012000 	.word	0x40012000
 80038fc:	40012200 	.word	0x40012200

08003900 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1c>
 8003968:	2302      	movs	r3, #2
 800396a:	e136      	b.n	8003bda <HAL_ADC_ConfigChannel+0x28a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b09      	cmp	r3, #9
 800397a:	d93a      	bls.n	80039f2 <HAL_ADC_ConfigChannel+0xa2>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003984:	d035      	beq.n	80039f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68d9      	ldr	r1, [r3, #12]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	3b1e      	subs	r3, #30
 800399c:	2207      	movs	r2, #7
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	400a      	ands	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a8d      	ldr	r2, [pc, #564]	; (8003be8 <HAL_ADC_ConfigChannel+0x298>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10a      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68d9      	ldr	r1, [r3, #12]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	061a      	lsls	r2, r3, #24
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ca:	e035      	b.n	8003a38 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68d9      	ldr	r1, [r3, #12]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4618      	mov	r0, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4403      	add	r3, r0
 80039e4:	3b1e      	subs	r3, #30
 80039e6:	409a      	lsls	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039f0:	e022      	b.n	8003a38 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6919      	ldr	r1, [r3, #16]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	4613      	mov	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	2207      	movs	r2, #7
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	400a      	ands	r2, r1
 8003a14:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6919      	ldr	r1, [r3, #16]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4403      	add	r3, r0
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d824      	bhi.n	8003a8a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b05      	subs	r3, #5
 8003a52:	221f      	movs	r2, #31
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	400a      	ands	r2, r1
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	3b05      	subs	r3, #5
 8003a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34
 8003a88:	e04c      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d824      	bhi.n	8003adc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b23      	subs	r3, #35	; 0x23
 8003aa4:	221f      	movs	r2, #31
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3b23      	subs	r3, #35	; 0x23
 8003ace:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8003ada:	e023      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	3b41      	subs	r3, #65	; 0x41
 8003aee:	221f      	movs	r2, #31
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43da      	mvns	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	400a      	ands	r2, r1
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	3b41      	subs	r3, #65	; 0x41
 8003b18:	fa00 f203 	lsl.w	r2, r0, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_ADC_ConfigChannel+0x29c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10a      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1f4>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b36:	d105      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b38:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a2c      	ldr	r2, [pc, #176]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b3e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b42:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a28      	ldr	r2, [pc, #160]	; (8003bec <HAL_ADC_ConfigChannel+0x29c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10f      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x21e>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b12      	cmp	r3, #18
 8003b54:	d10b      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003b56:	4b26      	ldr	r3, [pc, #152]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a25      	ldr	r2, [pc, #148]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b60:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b62:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_ADC_ConfigChannel+0x29c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d12b      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x280>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_ADC_ConfigChannel+0x298>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <HAL_ADC_ConfigChannel+0x23a>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b11      	cmp	r3, #17
 8003b88:	d122      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b94:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ba0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <HAL_ADC_ConfigChannel+0x298>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d111      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_ADC_ConfigChannel+0x2a4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <HAL_ADC_ConfigChannel+0x2a8>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0c9a      	lsrs	r2, r3, #18
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bc2:	e002      	b.n	8003bca <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f9      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	10000012 	.word	0x10000012
 8003bec:	40012000 	.word	0x40012000
 8003bf0:	40012300 	.word	0x40012300
 8003bf4:	20000010 	.word	0x20000010
 8003bf8:	431bde83 	.word	0x431bde83

08003bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c04:	4b78      	ldr	r3, [pc, #480]	; (8003de8 <ADC_Init+0x1ec>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a77      	ldr	r2, [pc, #476]	; (8003de8 <ADC_Init+0x1ec>)
 8003c0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c0e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c10:	4b75      	ldr	r3, [pc, #468]	; (8003de8 <ADC_Init+0x1ec>)
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4973      	ldr	r1, [pc, #460]	; (8003de8 <ADC_Init+0x1ec>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	021a      	lsls	r2, r3, #8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6899      	ldr	r1, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	4a58      	ldr	r2, [pc, #352]	; (8003dec <ADC_Init+0x1f0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d022      	beq.n	8003cd6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	e00f      	b.n	8003cf6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0202 	bic.w	r2, r2, #2
 8003d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	005a      	lsls	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01b      	beq.n	8003d5c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	035a      	lsls	r2, r3, #13
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	e007      	b.n	8003d6c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	051a      	lsls	r2, r3, #20
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6899      	ldr	r1, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dae:	025a      	lsls	r2, r3, #9
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6899      	ldr	r1, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	029a      	lsls	r2, r3, #10
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40012300 	.word	0x40012300
 8003dec:	0f000001 	.word	0x0f000001

08003df0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d13c      	bne.n	8003e84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d12b      	bne.n	8003e7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d127      	bne.n	8003e7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d006      	beq.n	8003e48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d119      	bne.n	8003e7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0220 	bic.w	r2, r2, #32
 8003e56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fd3f 	bl	8003900 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e82:	e00e      	b.n	8003ea2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fd53 	bl	800393c <HAL_ADC_ErrorCallback>
}
 8003e96:	e004      	b.n	8003ea2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fd2b 	bl	8003914 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2240      	movs	r2, #64	; 0x40
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f043 0204 	orr.w	r2, r3, #4
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff fd28 	bl	800393c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <__NVIC_SetPriorityGrouping+0x40>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f24:	4013      	ands	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <__NVIC_SetPriorityGrouping+0x40>)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	60d3      	str	r3, [r2, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000ed00 	.word	0xe000ed00
 8003f4c:	05fa0000 	.word	0x05fa0000

08003f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <__NVIC_GetPriorityGrouping+0x18>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	0a1b      	lsrs	r3, r3, #8
 8003f5a:	f003 0307 	and.w	r3, r3, #7
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	db0b      	blt.n	8003f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4907      	ldr	r1, [pc, #28]	; (8003fa4 <__NVIC_EnableIRQ+0x38>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	e000e100 	.word	0xe000e100

08003fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	db0a      	blt.n	8003fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	490c      	ldr	r1, [pc, #48]	; (8003ff4 <__NVIC_SetPriority+0x4c>)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	0112      	lsls	r2, r2, #4
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	440b      	add	r3, r1
 8003fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd0:	e00a      	b.n	8003fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <__NVIC_SetPriority+0x50>)
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	3b04      	subs	r3, #4
 8003fe0:	0112      	lsls	r2, r2, #4
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	761a      	strb	r2, [r3, #24]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000e100 	.word	0xe000e100
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f1c3 0307 	rsb	r3, r3, #7
 8004016:	2b04      	cmp	r3, #4
 8004018:	bf28      	it	cs
 800401a:	2304      	movcs	r3, #4
 800401c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3304      	adds	r3, #4
 8004022:	2b06      	cmp	r3, #6
 8004024:	d902      	bls.n	800402c <NVIC_EncodePriority+0x30>
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3b03      	subs	r3, #3
 800402a:	e000      	b.n	800402e <NVIC_EncodePriority+0x32>
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	401a      	ands	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	43d9      	mvns	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004054:	4313      	orrs	r3, r2
         );
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3b01      	subs	r3, #1
 8004070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004074:	d301      	bcc.n	800407a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004076:	2301      	movs	r3, #1
 8004078:	e00f      	b.n	800409a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <SysTick_Config+0x40>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3b01      	subs	r3, #1
 8004080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004082:	210f      	movs	r1, #15
 8004084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004088:	f7ff ff8e 	bl	8003fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <SysTick_Config+0x40>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004092:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <SysTick_Config+0x40>)
 8004094:	2207      	movs	r2, #7
 8004096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	e000e010 	.word	0xe000e010

080040a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff29 	bl	8003f08 <__NVIC_SetPriorityGrouping>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	4603      	mov	r3, r0
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040d0:	f7ff ff3e 	bl	8003f50 <__NVIC_GetPriorityGrouping>
 80040d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	6978      	ldr	r0, [r7, #20]
 80040dc:	f7ff ff8e 	bl	8003ffc <NVIC_EncodePriority>
 80040e0:	4602      	mov	r2, r0
 80040e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ff5d 	bl	8003fa8 <__NVIC_SetPriority>
}
 80040ee:	bf00      	nop
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	4603      	mov	r3, r0
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff31 	bl	8003f6c <__NVIC_EnableIRQ>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ffa2 	bl	8004064 <SysTick_Config>
 8004120:	4603      	mov	r3, r0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e014      	b.n	8004166 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	791b      	ldrb	r3, [r3, #4]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fe f8ab 	bl	80022a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	795b      	ldrb	r3, [r3, #5]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_DAC_Start+0x16>
 8004180:	2302      	movs	r3, #2
 8004182:	e040      	b.n	8004206 <HAL_DAC_Start+0x98>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80041b8:	2b3c      	cmp	r3, #60	; 0x3c
 80041ba:	d11d      	bne.n	80041f8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	e014      	b.n	80041f8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	213c      	movs	r1, #60	; 0x3c
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d107      	bne.n	80041f8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0202 	orr.w	r2, r2, #2
 80041f6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004212:	b480      	push	{r7}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	3308      	adds	r3, #8
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e004      	b.n	8004246 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	3314      	adds	r3, #20
 8004244:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	461a      	mov	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	795b      	ldrb	r3, [r3, #5]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_DAC_ConfigChannel+0x18>
 8004270:	2302      	movs	r3, #2
 8004272:	e03c      	b.n	80042ee <HAL_DAC_ConfigChannel+0x92>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2202      	movs	r2, #2
 800427e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4013      	ands	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	22c0      	movs	r2, #192	; 0xc0
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43da      	mvns	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	400a      	ands	r2, r1
 80042de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7ff f87c 	bl	8003404 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e099      	b.n	800444c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004338:	e00f      	b.n	800435a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800433a:	f7ff f863 	bl	8003404 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b05      	cmp	r3, #5
 8004346:	d908      	bls.n	800435a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2203      	movs	r2, #3
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e078      	b.n	800444c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e8      	bne.n	800433a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_DMA_Init+0x158>)
 8004374:	4013      	ands	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	4313      	orrs	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d117      	bne.n	800441e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fa77 	bl	80048f4 <DMA_CheckFifoParam>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800441a:	2301      	movs	r3, #1
 800441c:	e016      	b.n	800444c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa2e 	bl	8004888 <DMA_CalcBaseAndBitshift>
 800442c:	4603      	mov	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	f010803f 	.word	0xf010803f

08004458 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_DMA_Start_IT+0x26>
 800447a:	2302      	movs	r3, #2
 800447c:	e048      	b.n	8004510 <HAL_DMA_Start_IT+0xb8>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d137      	bne.n	8004502 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f9c0 	bl	800482c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	223f      	movs	r2, #63	; 0x3f
 80044b2:	409a      	lsls	r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0216 	orr.w	r2, r2, #22
 80044c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0208 	orr.w	r2, r2, #8
 80044ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e005      	b.n	800450e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800450a:	2302      	movs	r3, #2
 800450c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004524:	4b8e      	ldr	r3, [pc, #568]	; (8004760 <HAL_DMA_IRQHandler+0x248>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a8e      	ldr	r2, [pc, #568]	; (8004764 <HAL_DMA_IRQHandler+0x24c>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	2208      	movs	r2, #8
 8004544:	409a      	lsls	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01a      	beq.n	8004584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	2208      	movs	r2, #8
 8004572:	409a      	lsls	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f043 0201 	orr.w	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	2204      	movs	r2, #4
 80045c0:	409a      	lsls	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	2204      	movs	r2, #4
 80045de:	409a      	lsls	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f043 0204 	orr.w	r2, r3, #4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	2210      	movs	r2, #16
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d043      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03c      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	2210      	movs	r2, #16
 8004614:	409a      	lsls	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d018      	beq.n	800465a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d024      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	e01f      	b.n	8004688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
 8004658:	e016      	b.n	8004688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d107      	bne.n	8004678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0208 	bic.w	r2, r2, #8
 8004676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2220      	movs	r2, #32
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 808f 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8087 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	2220      	movs	r2, #32
 80046b0:	409a      	lsls	r2, r3
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d136      	bne.n	8004730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0216 	bic.w	r2, r2, #22
 80046d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_DMA_IRQHandler+0x1da>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004706:	223f      	movs	r2, #63	; 0x3f
 8004708:	409a      	lsls	r2, r3
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	2b00      	cmp	r3, #0
 8004724:	d07e      	beq.n	8004824 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
        }
        return;
 800472e:	e079      	b.n	8004824 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01d      	beq.n	800477a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	2b00      	cmp	r3, #0
 8004752:	d031      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e02c      	b.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
 800475e:	bf00      	nop
 8004760:	20000010 	.word	0x20000010
 8004764:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d023      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
 8004778:	e01e      	b.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10f      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0210 	bic.w	r2, r2, #16
 8004796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d032      	beq.n	8004826 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d022      	beq.n	8004812 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2205      	movs	r2, #5
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d307      	bcc.n	8004800 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f2      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x2cc>
 80047fe:	e000      	b.n	8004802 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004800:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
 8004822:	e000      	b.n	8004826 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004824:	bf00      	nop
    }
  }
}
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d108      	bne.n	800486c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800486a:	e007      	b.n	800487c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	3b10      	subs	r3, #16
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <DMA_CalcBaseAndBitshift+0x60>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048a2:	4a12      	ldr	r2, [pc, #72]	; (80048ec <DMA_CalcBaseAndBitshift+0x64>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d908      	bls.n	80048c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <DMA_CalcBaseAndBitshift+0x68>)
 80048be:	4013      	ands	r3, r2
 80048c0:	1d1a      	adds	r2, r3, #4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	659a      	str	r2, [r3, #88]	; 0x58
 80048c6:	e006      	b.n	80048d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <DMA_CalcBaseAndBitshift+0x68>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	aaaaaaab 	.word	0xaaaaaaab
 80048ec:	0800d3b4 	.word	0x0800d3b4
 80048f0:	fffffc00 	.word	0xfffffc00

080048f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11f      	bne.n	800494e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b03      	cmp	r3, #3
 8004912:	d856      	bhi.n	80049c2 <DMA_CheckFifoParam+0xce>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <DMA_CheckFifoParam+0x28>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	0800492d 	.word	0x0800492d
 8004920:	0800493f 	.word	0x0800493f
 8004924:	0800492d 	.word	0x0800492d
 8004928:	080049c3 	.word	0x080049c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d046      	beq.n	80049c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800493c:	e043      	b.n	80049c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004946:	d140      	bne.n	80049ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494c:	e03d      	b.n	80049ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004956:	d121      	bne.n	800499c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b03      	cmp	r3, #3
 800495c:	d837      	bhi.n	80049ce <DMA_CheckFifoParam+0xda>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <DMA_CheckFifoParam+0x70>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004975 	.word	0x08004975
 8004968:	0800497b 	.word	0x0800497b
 800496c:	08004975 	.word	0x08004975
 8004970:	0800498d 	.word	0x0800498d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e030      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d025      	beq.n	80049d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498a:	e022      	b.n	80049d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004994:	d11f      	bne.n	80049d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800499a:	e01c      	b.n	80049d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d903      	bls.n	80049aa <DMA_CheckFifoParam+0xb6>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d003      	beq.n	80049b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049a8:	e018      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
      break;
 80049ae:	e015      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00e      	beq.n	80049da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	e00b      	b.n	80049da <DMA_CheckFifoParam+0xe6>
      break;
 80049c2:	bf00      	nop
 80049c4:	e00a      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049c6:	bf00      	nop
 80049c8:	e008      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049ca:	bf00      	nop
 80049cc:	e006      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049ce:	bf00      	nop
 80049d0:	e004      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;   
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <DMA_CheckFifoParam+0xe8>
      break;
 80049da:	bf00      	nop
    }
  } 
  
  return status; 
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop

080049ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	e175      	b.n	8004cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	f040 8164 	bne.w	8004cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d005      	beq.n	8004a42 <HAL_GPIO_Init+0x56>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d130      	bne.n	8004aa4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a78:	2201      	movs	r2, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 0201 	and.w	r2, r3, #1
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d017      	beq.n	8004ae0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	2203      	movs	r2, #3
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d123      	bne.n	8004b34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	08da      	lsrs	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3208      	adds	r2, #8
 8004af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	220f      	movs	r2, #15
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	08da      	lsrs	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3208      	adds	r2, #8
 8004b2e:	69b9      	ldr	r1, [r7, #24]
 8004b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2203      	movs	r2, #3
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0203 	and.w	r2, r3, #3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80be 	beq.w	8004cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b76:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	4a65      	ldr	r2, [pc, #404]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b80:	6453      	str	r3, [r2, #68]	; 0x44
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <HAL_GPIO_Init+0x324>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b8e:	4a61      	ldr	r2, [pc, #388]	; (8004d14 <HAL_GPIO_Init+0x328>)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	3302      	adds	r3, #2
 8004b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	220f      	movs	r2, #15
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	; (8004d18 <HAL_GPIO_Init+0x32c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d037      	beq.n	8004c2a <HAL_GPIO_Init+0x23e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a57      	ldr	r2, [pc, #348]	; (8004d1c <HAL_GPIO_Init+0x330>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d031      	beq.n	8004c26 <HAL_GPIO_Init+0x23a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a56      	ldr	r2, [pc, #344]	; (8004d20 <HAL_GPIO_Init+0x334>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d02b      	beq.n	8004c22 <HAL_GPIO_Init+0x236>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a55      	ldr	r2, [pc, #340]	; (8004d24 <HAL_GPIO_Init+0x338>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d025      	beq.n	8004c1e <HAL_GPIO_Init+0x232>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a54      	ldr	r2, [pc, #336]	; (8004d28 <HAL_GPIO_Init+0x33c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01f      	beq.n	8004c1a <HAL_GPIO_Init+0x22e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a53      	ldr	r2, [pc, #332]	; (8004d2c <HAL_GPIO_Init+0x340>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d019      	beq.n	8004c16 <HAL_GPIO_Init+0x22a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a52      	ldr	r2, [pc, #328]	; (8004d30 <HAL_GPIO_Init+0x344>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_GPIO_Init+0x226>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a51      	ldr	r2, [pc, #324]	; (8004d34 <HAL_GPIO_Init+0x348>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00d      	beq.n	8004c0e <HAL_GPIO_Init+0x222>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a50      	ldr	r2, [pc, #320]	; (8004d38 <HAL_GPIO_Init+0x34c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <HAL_GPIO_Init+0x21e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a4f      	ldr	r2, [pc, #316]	; (8004d3c <HAL_GPIO_Init+0x350>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_GPIO_Init+0x21a>
 8004c02:	2309      	movs	r3, #9
 8004c04:	e012      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c06:	230a      	movs	r3, #10
 8004c08:	e010      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	e00e      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c0e:	2307      	movs	r3, #7
 8004c10:	e00c      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c12:	2306      	movs	r3, #6
 8004c14:	e00a      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c16:	2305      	movs	r3, #5
 8004c18:	e008      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	e006      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e004      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e002      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	f002 0203 	and.w	r2, r2, #3
 8004c32:	0092      	lsls	r2, r2, #2
 8004c34:	4093      	lsls	r3, r2
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c3c:	4935      	ldr	r1, [pc, #212]	; (8004d14 <HAL_GPIO_Init+0x328>)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c4a:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c6e:	4a34      	ldr	r2, [pc, #208]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c74:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c98:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c9e:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <HAL_GPIO_Init+0x354>)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b0f      	cmp	r3, #15
 8004cfc:	f67f ae86 	bls.w	8004a0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3724      	adds	r7, #36	; 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40013800 	.word	0x40013800
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	40020400 	.word	0x40020400
 8004d20:	40020800 	.word	0x40020800
 8004d24:	40020c00 	.word	0x40020c00
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40021400 	.word	0x40021400
 8004d30:	40021800 	.word	0x40021800
 8004d34:	40021c00 	.word	0x40021c00
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40022400 	.word	0x40022400
 8004d40:	40013c00 	.word	0x40013c00

08004d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
 8004d50:	4613      	mov	r3, r2
 8004d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d54:	787b      	ldrb	r3, [r7, #1]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d60:	e003      	b.n	8004d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d62:	887b      	ldrh	r3, [r7, #2]
 8004d64:	041a      	lsls	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	619a      	str	r2, [r3, #24]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e07f      	b.n	8004e8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd fc76 	bl	8002690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0201 	bic.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d107      	bne.n	8004df2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dee:	609a      	str	r2, [r3, #8]
 8004df0:	e006      	b.n	8004e00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d104      	bne.n	8004e12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HAL_I2C_Init+0x11c>)
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69d9      	ldr	r1, [r3, #28]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	02008000 	.word	0x02008000

08004e98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	817b      	strh	r3, [r7, #10]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	f040 80da 	bne.w	800506e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_I2C_Master_Transmit+0x30>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e0d3      	b.n	8005070 <HAL_I2C_Master_Transmit+0x1d8>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fe fa98 	bl	8003404 <HAL_GetTick>
 8004ed4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2319      	movs	r3, #25
 8004edc:	2201      	movs	r2, #1
 8004ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fb4e 	bl	8005584 <I2C_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0be      	b.n	8005070 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2221      	movs	r2, #33	; 0x21
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2210      	movs	r2, #16
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	893a      	ldrh	r2, [r7, #8]
 8004f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2bff      	cmp	r3, #255	; 0xff
 8004f22:	d90e      	bls.n	8004f42 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	22ff      	movs	r2, #255	; 0xff
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	8979      	ldrh	r1, [r7, #10]
 8004f32:	4b51      	ldr	r3, [pc, #324]	; (8005078 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fd38 	bl	80059b0 <I2C_TransferConfig>
 8004f40:	e06c      	b.n	800501c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	4b48      	ldr	r3, [pc, #288]	; (8005078 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fd27 	bl	80059b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f62:	e05b      	b.n	800501c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	6a39      	ldr	r1, [r7, #32]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fb4b 	bl	8005604 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e07b      	b.n	8005070 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d034      	beq.n	800501c <HAL_I2C_Master_Transmit+0x184>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d130      	bne.n	800501c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fadd 	bl	8005584 <I2C_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e04d      	b.n	8005070 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2bff      	cmp	r3, #255	; 0xff
 8004fdc:	d90e      	bls.n	8004ffc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	22ff      	movs	r2, #255	; 0xff
 8004fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	8979      	ldrh	r1, [r7, #10]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fcdb 	bl	80059b0 <I2C_TransferConfig>
 8004ffa:	e00f      	b.n	800501c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500a:	b2da      	uxtb	r2, r3
 800500c:	8979      	ldrh	r1, [r7, #10]
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fcca 	bl	80059b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d19e      	bne.n	8004f64 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fb2a 	bl	8005684 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e01a      	b.n	8005070 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2220      	movs	r2, #32
 8005040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_I2C_Master_Transmit+0x1e4>)
 800504e:	400b      	ands	r3, r1
 8005050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e000      	b.n	8005070 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
  }
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	80002000 	.word	0x80002000
 800507c:	fe00e800 	.word	0xfe00e800

08005080 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	461a      	mov	r2, r3
 800508c:	460b      	mov	r3, r1
 800508e:	817b      	strh	r3, [r7, #10]
 8005090:	4613      	mov	r3, r2
 8005092:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b20      	cmp	r3, #32
 800509e:	f040 80db 	bne.w	8005258 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_I2C_Master_Receive+0x30>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e0d4      	b.n	800525a <HAL_I2C_Master_Receive+0x1da>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050b8:	f7fe f9a4 	bl	8003404 <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2319      	movs	r3, #25
 80050c4:	2201      	movs	r2, #1
 80050c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fa5a 	bl	8005584 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0bf      	b.n	800525a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2222      	movs	r2, #34	; 0x22
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2210      	movs	r2, #16
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	893a      	ldrh	r2, [r7, #8]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	2bff      	cmp	r3, #255	; 0xff
 800510a:	d90e      	bls.n	800512a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	22ff      	movs	r2, #255	; 0xff
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	b2da      	uxtb	r2, r3
 8005118:	8979      	ldrh	r1, [r7, #10]
 800511a:	4b52      	ldr	r3, [pc, #328]	; (8005264 <HAL_I2C_Master_Receive+0x1e4>)
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fc44 	bl	80059b0 <I2C_TransferConfig>
 8005128:	e06d      	b.n	8005206 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	b2da      	uxtb	r2, r3
 800513a:	8979      	ldrh	r1, [r7, #10]
 800513c:	4b49      	ldr	r3, [pc, #292]	; (8005264 <HAL_I2C_Master_Receive+0x1e4>)
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 fc33 	bl	80059b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800514a:	e05c      	b.n	8005206 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	6a39      	ldr	r1, [r7, #32]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fad3 	bl	80056fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e07c      	b.n	800525a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d034      	beq.n	8005206 <HAL_I2C_Master_Receive+0x186>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d130      	bne.n	8005206 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f9e8 	bl	8005584 <I2C_WaitOnFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e04d      	b.n	800525a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2bff      	cmp	r3, #255	; 0xff
 80051c6:	d90e      	bls.n	80051e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	22ff      	movs	r2, #255	; 0xff
 80051cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	8979      	ldrh	r1, [r7, #10]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fbe6 	bl	80059b0 <I2C_TransferConfig>
 80051e4:	e00f      	b.n	8005206 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	8979      	ldrh	r1, [r7, #10]
 80051f8:	2300      	movs	r3, #0
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fbd5 	bl	80059b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d19d      	bne.n	800514c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	6a39      	ldr	r1, [r7, #32]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fa35 	bl	8005684 <I2C_WaitOnSTOPFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e01a      	b.n	800525a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2220      	movs	r2, #32
 800522a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <HAL_I2C_Master_Receive+0x1e8>)
 8005238:	400b      	ands	r3, r1
 800523a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e000      	b.n	800525a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	80002400 	.word	0x80002400
 8005268:	fe00e800 	.word	0xfe00e800

0800526c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	461a      	mov	r2, r3
 800527a:	4603      	mov	r3, r0
 800527c:	817b      	strh	r3, [r7, #10]
 800527e:	460b      	mov	r3, r1
 8005280:	813b      	strh	r3, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b20      	cmp	r3, #32
 8005290:	f040 80f9 	bne.w	8005486 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x34>
 800529a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0ed      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_I2C_Mem_Write+0x4e>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e0e6      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052c2:	f7fe f89f 	bl	8003404 <HAL_GetTick>
 80052c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2319      	movs	r3, #25
 80052ce:	2201      	movs	r2, #1
 80052d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f955 	bl	8005584 <I2C_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0d1      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2221      	movs	r2, #33	; 0x21
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2240      	movs	r2, #64	; 0x40
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800530c:	88f8      	ldrh	r0, [r7, #6]
 800530e:	893a      	ldrh	r2, [r7, #8]
 8005310:	8979      	ldrh	r1, [r7, #10]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	4603      	mov	r3, r0
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f8b9 	bl	8005494 <I2C_RequestMemoryWrite>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0a9      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	2bff      	cmp	r3, #255	; 0xff
 800533c:	d90e      	bls.n	800535c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	22ff      	movs	r2, #255	; 0xff
 8005342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005348:	b2da      	uxtb	r2, r3
 800534a:	8979      	ldrh	r1, [r7, #10]
 800534c:	2300      	movs	r3, #0
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fb2b 	bl	80059b0 <I2C_TransferConfig>
 800535a:	e00f      	b.n	800537c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536a:	b2da      	uxtb	r2, r3
 800536c:	8979      	ldrh	r1, [r7, #10]
 800536e:	2300      	movs	r3, #0
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fb1a 	bl	80059b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f93f 	bl	8005604 <I2C_WaitOnTXISFlagUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e07b      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	781a      	ldrb	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d034      	beq.n	8005434 <HAL_I2C_Mem_Write+0x1c8>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d130      	bne.n	8005434 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	; 0x80
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f8d1 	bl	8005584 <I2C_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e04d      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2bff      	cmp	r3, #255	; 0xff
 80053f4:	d90e      	bls.n	8005414 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	b2da      	uxtb	r2, r3
 8005402:	8979      	ldrh	r1, [r7, #10]
 8005404:	2300      	movs	r3, #0
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 facf 	bl	80059b0 <I2C_TransferConfig>
 8005412:	e00f      	b.n	8005434 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005422:	b2da      	uxtb	r2, r3
 8005424:	8979      	ldrh	r1, [r7, #10]
 8005426:	2300      	movs	r3, #0
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fabe 	bl	80059b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d19e      	bne.n	800537c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f91e 	bl	8005684 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e01a      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2220      	movs	r2, #32
 8005458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_I2C_Mem_Write+0x224>)
 8005466:	400b      	ands	r3, r1
 8005468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e000      	b.n	8005488 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	fe00e800 	.word	0xfe00e800

08005494 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	460b      	mov	r3, r1
 80054a8:	813b      	strh	r3, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	8979      	ldrh	r1, [r7, #10]
 80054b4:	4b20      	ldr	r3, [pc, #128]	; (8005538 <I2C_RequestMemoryWrite+0xa4>)
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 fa77 	bl	80059b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	69b9      	ldr	r1, [r7, #24]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f89c 	bl	8005604 <I2C_WaitOnTXISFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e02c      	b.n	8005530 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	629a      	str	r2, [r3, #40]	; 0x28
 80054e6:	e015      	b.n	8005514 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	69b9      	ldr	r1, [r7, #24]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f882 	bl	8005604 <I2C_WaitOnTXISFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e012      	b.n	8005530 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800550a:	893b      	ldrh	r3, [r7, #8]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2200      	movs	r2, #0
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 f830 	bl	8005584 <I2C_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	80002000 	.word	0x80002000

0800553c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b02      	cmp	r3, #2
 8005550:	d103      	bne.n	800555a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d007      	beq.n	8005578 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	619a      	str	r2, [r3, #24]
  }
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005594:	e022      	b.n	80055dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800559c:	d01e      	beq.n	80055dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fd ff31 	bl	8003404 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d113      	bne.n	80055dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b8:	f043 0220 	orr.w	r2, r3, #32
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e00f      	b.n	80055fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d0cd      	beq.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005610:	e02c      	b.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f8ea 	bl	80057f0 <I2C_IsErrorOccurred>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e02a      	b.n	800567c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800562c:	d01e      	beq.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fd fee9 	bl	8003404 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d113      	bne.n	800566c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	f043 0220 	orr.w	r2, r3, #32
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b02      	cmp	r3, #2
 8005678:	d1cb      	bne.n	8005612 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005690:	e028      	b.n	80056e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f8aa 	bl	80057f0 <I2C_IsErrorOccurred>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e026      	b.n	80056f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fd fead 	bl	8003404 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d113      	bne.n	80056e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e007      	b.n	80056f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d1cf      	bne.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005708:	e064      	b.n	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f86e 	bl	80057f0 <I2C_IsErrorOccurred>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e062      	b.n	80057e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b20      	cmp	r3, #32
 800572a:	d138      	bne.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d105      	bne.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e04e      	b.n	80057e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d107      	bne.n	8005764 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2210      	movs	r2, #16
 800575a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2204      	movs	r2, #4
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
 8005762:	e002      	b.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2220      	movs	r2, #32
 8005770:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800577e:	400b      	ands	r3, r1
 8005780:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e022      	b.n	80057e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fd fe31 	bl	8003404 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10f      	bne.n	80057d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e007      	b.n	80057e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d193      	bne.n	800570a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	fe00e800 	.word	0xfe00e800

080057f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	d068      	beq.n	80058ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2210      	movs	r2, #16
 8005822:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005824:	e049      	b.n	80058ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582c:	d045      	beq.n	80058ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800582e:	f7fd fde9 	bl	8003404 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	d302      	bcc.n	8005844 <I2C_IsErrorOccurred+0x54>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d13a      	bne.n	80058ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005856:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005866:	d121      	bne.n	80058ac <I2C_IsErrorOccurred+0xbc>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800586e:	d01d      	beq.n	80058ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	2b20      	cmp	r3, #32
 8005874:	d01a      	beq.n	80058ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005884:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005886:	f7fd fdbd 	bl	8003404 <HAL_GetTick>
 800588a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800588c:	e00e      	b.n	80058ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800588e:	f7fd fdb9 	bl	8003404 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b19      	cmp	r3, #25
 800589a:	d907      	bls.n	80058ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	f043 0320 	orr.w	r3, r3, #32
 80058a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80058aa:	e006      	b.n	80058ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d1e9      	bne.n	800588e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d003      	beq.n	80058d0 <I2C_IsErrorOccurred+0xe0>
 80058c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0aa      	beq.n	8005826 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2220      	movs	r2, #32
 80058de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	f043 0304 	orr.w	r3, r3, #4
 80058e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005910:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f043 0308 	orr.w	r3, r3, #8
 8005928:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	f043 0302 	orr.w	r3, r3, #2
 800594a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800595c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01c      	beq.n	800599e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fde9 	bl	800553c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <I2C_IsErrorOccurred+0x1bc>)
 8005976:	400b      	ands	r3, r1
 8005978:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	431a      	orrs	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800599e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3728      	adds	r7, #40	; 0x28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	fe00e800 	.word	0xfe00e800

080059b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	817b      	strh	r3, [r7, #10]
 80059be:	4613      	mov	r3, r2
 80059c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059c2:	897b      	ldrh	r3, [r7, #10]
 80059c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059c8:	7a7b      	ldrb	r3, [r7, #9]
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	4313      	orrs	r3, r2
 80059da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	0d5b      	lsrs	r3, r3, #21
 80059ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059ee:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <I2C_TransferConfig+0x60>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	43db      	mvns	r3, r3
 80059f4:	ea02 0103 	and.w	r1, r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	03ff63ff 	.word	0x03ff63ff

08005a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d138      	bne.n	8005a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e032      	b.n	8005a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d139      	bne.n	8005b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e033      	b.n	8005b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2224      	movs	r2, #36	; 0x24
 8005ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0201 	bic.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e291      	b.n	800607e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 8087 	beq.w	8005c76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b68:	4b96      	ldr	r3, [pc, #600]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 030c 	and.w	r3, r3, #12
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d00c      	beq.n	8005b8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b74:	4b93      	ldr	r3, [pc, #588]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 030c 	and.w	r3, r3, #12
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d112      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x62>
 8005b80:	4b90      	ldr	r3, [pc, #576]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8c:	d10b      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8e:	4b8d      	ldr	r3, [pc, #564]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d06c      	beq.n	8005c74 <HAL_RCC_OscConfig+0x130>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d168      	bne.n	8005c74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e26b      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bae:	d106      	bne.n	8005bbe <HAL_RCC_OscConfig+0x7a>
 8005bb0:	4b84      	ldr	r3, [pc, #528]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a83      	ldr	r2, [pc, #524]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e02e      	b.n	8005c1c <HAL_RCC_OscConfig+0xd8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10c      	bne.n	8005be0 <HAL_RCC_OscConfig+0x9c>
 8005bc6:	4b7f      	ldr	r3, [pc, #508]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a7e      	ldr	r2, [pc, #504]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	4b7c      	ldr	r3, [pc, #496]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7b      	ldr	r2, [pc, #492]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e01d      	b.n	8005c1c <HAL_RCC_OscConfig+0xd8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be8:	d10c      	bne.n	8005c04 <HAL_RCC_OscConfig+0xc0>
 8005bea:	4b76      	ldr	r3, [pc, #472]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a75      	ldr	r2, [pc, #468]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	4b73      	ldr	r3, [pc, #460]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a72      	ldr	r2, [pc, #456]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e00b      	b.n	8005c1c <HAL_RCC_OscConfig+0xd8>
 8005c04:	4b6f      	ldr	r3, [pc, #444]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a6e      	ldr	r2, [pc, #440]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	4b6c      	ldr	r3, [pc, #432]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a6b      	ldr	r2, [pc, #428]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d013      	beq.n	8005c4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fd fbee 	bl	8003404 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c2c:	f7fd fbea 	bl	8003404 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	; 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e21f      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3e:	4b61      	ldr	r3, [pc, #388]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0xe8>
 8005c4a:	e014      	b.n	8005c76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fd fbda 	bl	8003404 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c54:	f7fd fbd6 	bl	8003404 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b64      	cmp	r3, #100	; 0x64
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e20b      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c66:	4b57      	ldr	r3, [pc, #348]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <HAL_RCC_OscConfig+0x110>
 8005c72:	e000      	b.n	8005c76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d069      	beq.n	8005d56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c82:	4b50      	ldr	r3, [pc, #320]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c8e:	4b4d      	ldr	r3, [pc, #308]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d11c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x190>
 8005c9a:	4b4a      	ldr	r3, [pc, #296]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d116      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ca6:	4b47      	ldr	r3, [pc, #284]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_RCC_OscConfig+0x17a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d001      	beq.n	8005cbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e1df      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cbe:	4b41      	ldr	r3, [pc, #260]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	493d      	ldr	r1, [pc, #244]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd2:	e040      	b.n	8005d56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d023      	beq.n	8005d24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cdc:	4b39      	ldr	r3, [pc, #228]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a38      	ldr	r2, [pc, #224]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fb8c 	bl	8003404 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf0:	f7fd fb88 	bl	8003404 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1bd      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d02:	4b30      	ldr	r3, [pc, #192]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0e:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4929      	ldr	r1, [pc, #164]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]
 8005d22:	e018      	b.n	8005d56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fd fb68 	bl	8003404 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d38:	f7fd fb64 	bl	8003404 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e199      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d038      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d019      	beq.n	8005d9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6e:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d76:	f7fd fb45 	bl	8003404 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d7e:	f7fd fb41 	bl	8003404 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e176      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCC_OscConfig+0x23a>
 8005d9c:	e01a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da2:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005daa:	f7fd fb2b 	bl	8003404 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db0:	e00a      	b.n	8005dc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db2:	f7fd fb27 	bl	8003404 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d903      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e15c      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
 8005dc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc8:	4b91      	ldr	r3, [pc, #580]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1ee      	bne.n	8005db2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80a4 	beq.w	8005f2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005de2:	4b8b      	ldr	r3, [pc, #556]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dee:	4b88      	ldr	r3, [pc, #544]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	4a87      	ldr	r2, [pc, #540]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dfa:	4b85      	ldr	r3, [pc, #532]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e0a:	4b82      	ldr	r3, [pc, #520]	; (8006014 <HAL_RCC_OscConfig+0x4d0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d118      	bne.n	8005e48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005e16:	4b7f      	ldr	r3, [pc, #508]	; (8006014 <HAL_RCC_OscConfig+0x4d0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7e      	ldr	r2, [pc, #504]	; (8006014 <HAL_RCC_OscConfig+0x4d0>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e22:	f7fd faef 	bl	8003404 <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fd faeb 	bl	8003404 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b64      	cmp	r3, #100	; 0x64
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e120      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e3c:	4b75      	ldr	r3, [pc, #468]	; (8006014 <HAL_RCC_OscConfig+0x4d0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d106      	bne.n	8005e5e <HAL_RCC_OscConfig+0x31a>
 8005e50:	4b6f      	ldr	r3, [pc, #444]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	4a6e      	ldr	r2, [pc, #440]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5c:	e02d      	b.n	8005eba <HAL_RCC_OscConfig+0x376>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x33c>
 8005e66:	4b6a      	ldr	r3, [pc, #424]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	4a69      	ldr	r2, [pc, #420]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	6713      	str	r3, [r2, #112]	; 0x70
 8005e72:	4b67      	ldr	r3, [pc, #412]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	4a66      	ldr	r2, [pc, #408]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7e:	e01c      	b.n	8005eba <HAL_RCC_OscConfig+0x376>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b05      	cmp	r3, #5
 8005e86:	d10c      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x35e>
 8005e88:	4b61      	ldr	r3, [pc, #388]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a60      	ldr	r2, [pc, #384]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e8e:	f043 0304 	orr.w	r3, r3, #4
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
 8005e94:	4b5e      	ldr	r3, [pc, #376]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	4a5d      	ldr	r2, [pc, #372]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea0:	e00b      	b.n	8005eba <HAL_RCC_OscConfig+0x376>
 8005ea2:	4b5b      	ldr	r3, [pc, #364]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	4a5a      	ldr	r2, [pc, #360]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	6713      	str	r3, [r2, #112]	; 0x70
 8005eae:	4b58      	ldr	r3, [pc, #352]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	4a57      	ldr	r2, [pc, #348]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005eb4:	f023 0304 	bic.w	r3, r3, #4
 8005eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d015      	beq.n	8005eee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec2:	f7fd fa9f 	bl	8003404 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fd fa9b 	bl	8003404 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e0ce      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	4b4b      	ldr	r3, [pc, #300]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0ee      	beq.n	8005eca <HAL_RCC_OscConfig+0x386>
 8005eec:	e014      	b.n	8005f18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eee:	f7fd fa89 	bl	8003404 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef4:	e00a      	b.n	8005f0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef6:	f7fd fa85 	bl	8003404 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e0b8      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0c:	4b40      	ldr	r3, [pc, #256]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1ee      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d105      	bne.n	8005f2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f1e:	4b3c      	ldr	r3, [pc, #240]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4a3b      	ldr	r2, [pc, #236]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80a4 	beq.w	800607c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f34:	4b36      	ldr	r3, [pc, #216]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 030c 	and.w	r3, r3, #12
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d06b      	beq.n	8006018 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d149      	bne.n	8005fdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f48:	4b31      	ldr	r3, [pc, #196]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a30      	ldr	r2, [pc, #192]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f54:	f7fd fa56 	bl	8003404 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5c:	f7fd fa52 	bl	8003404 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e087      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6e:	4b28      	ldr	r3, [pc, #160]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69da      	ldr	r2, [r3, #28]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	019b      	lsls	r3, r3, #6
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	3b01      	subs	r3, #1
 8005f94:	041b      	lsls	r3, r3, #16
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	061b      	lsls	r3, r3, #24
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005fa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fa6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa8:	4b19      	ldr	r3, [pc, #100]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a18      	ldr	r2, [pc, #96]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb4:	f7fd fa26 	bl	8003404 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fbc:	f7fd fa22 	bl	8003404 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e057      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f0      	beq.n	8005fbc <HAL_RCC_OscConfig+0x478>
 8005fda:	e04f      	b.n	800607c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8005fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fd fa0c 	bl	8003404 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fd fa08 	bl	8003404 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e03d      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	4b03      	ldr	r3, [pc, #12]	; (8006010 <HAL_RCC_OscConfig+0x4cc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4ac>
 800600e:	e035      	b.n	800607c <HAL_RCC_OscConfig+0x538>
 8006010:	40023800 	.word	0x40023800
 8006014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x544>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d028      	beq.n	8006078 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d121      	bne.n	8006078 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603e:	429a      	cmp	r2, r3
 8006040:	d11a      	bne.n	8006078 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006048:	4013      	ands	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800604e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006050:	4293      	cmp	r3, r2
 8006052:	d111      	bne.n	8006078 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	3b01      	subs	r3, #1
 8006062:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006064:	429a      	cmp	r2, r3
 8006066:	d107      	bne.n	8006078 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800

0800608c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0d0      	b.n	8006246 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060a4:	4b6a      	ldr	r3, [pc, #424]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d910      	bls.n	80060d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b2:	4b67      	ldr	r3, [pc, #412]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 020f 	bic.w	r2, r3, #15
 80060ba:	4965      	ldr	r1, [pc, #404]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c2:	4b63      	ldr	r3, [pc, #396]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d001      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0b8      	b.n	8006246 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060ec:	4b59      	ldr	r3, [pc, #356]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4a58      	ldr	r2, [pc, #352]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 80060f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006104:	4b53      	ldr	r3, [pc, #332]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4a52      	ldr	r2, [pc, #328]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 800610a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800610e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006110:	4b50      	ldr	r3, [pc, #320]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	494d      	ldr	r1, [pc, #308]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d040      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d107      	bne.n	8006146 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006136:	4b47      	ldr	r3, [pc, #284]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d115      	bne.n	800616e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e07f      	b.n	8006246 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d107      	bne.n	800615e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800614e:	4b41      	ldr	r3, [pc, #260]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e073      	b.n	8006246 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800615e:	4b3d      	ldr	r3, [pc, #244]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e06b      	b.n	8006246 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800616e:	4b39      	ldr	r3, [pc, #228]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f023 0203 	bic.w	r2, r3, #3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4936      	ldr	r1, [pc, #216]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 800617c:	4313      	orrs	r3, r2
 800617e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006180:	f7fd f940 	bl	8003404 <HAL_GetTick>
 8006184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006186:	e00a      	b.n	800619e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006188:	f7fd f93c 	bl	8003404 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	; 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e053      	b.n	8006246 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619e:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 020c 	and.w	r2, r3, #12
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d1eb      	bne.n	8006188 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d210      	bcs.n	80061e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061be:	4b24      	ldr	r3, [pc, #144]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 020f 	bic.w	r2, r3, #15
 80061c6:	4922      	ldr	r1, [pc, #136]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ce:	4b20      	ldr	r3, [pc, #128]	; (8006250 <HAL_RCC_ClockConfig+0x1c4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d001      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e032      	b.n	8006246 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061ec:	4b19      	ldr	r3, [pc, #100]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4916      	ldr	r1, [pc, #88]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	490e      	ldr	r1, [pc, #56]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800621e:	f000 f821 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8006222:	4602      	mov	r2, r0
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <HAL_RCC_ClockConfig+0x1c8>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	490a      	ldr	r1, [pc, #40]	; (8006258 <HAL_RCC_ClockConfig+0x1cc>)
 8006230:	5ccb      	ldrb	r3, [r1, r3]
 8006232:	fa22 f303 	lsr.w	r3, r2, r3
 8006236:	4a09      	ldr	r2, [pc, #36]	; (800625c <HAL_RCC_ClockConfig+0x1d0>)
 8006238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <HAL_RCC_ClockConfig+0x1d4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7fd f89c 	bl	800337c <HAL_InitTick>

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40023c00 	.word	0x40023c00
 8006254:	40023800 	.word	0x40023800
 8006258:	0800d39c 	.word	0x0800d39c
 800625c:	20000010 	.word	0x20000010
 8006260:	20000014 	.word	0x20000014

08006264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006268:	b094      	sub	sp, #80	; 0x50
 800626a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	647b      	str	r3, [r7, #68]	; 0x44
 8006270:	2300      	movs	r3, #0
 8006272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006274:	2300      	movs	r3, #0
 8006276:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800627c:	4b79      	ldr	r3, [pc, #484]	; (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 030c 	and.w	r3, r3, #12
 8006284:	2b08      	cmp	r3, #8
 8006286:	d00d      	beq.n	80062a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006288:	2b08      	cmp	r3, #8
 800628a:	f200 80e1 	bhi.w	8006450 <HAL_RCC_GetSysClockFreq+0x1ec>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_RCC_GetSysClockFreq+0x34>
 8006292:	2b04      	cmp	r3, #4
 8006294:	d003      	beq.n	800629e <HAL_RCC_GetSysClockFreq+0x3a>
 8006296:	e0db      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006298:	4b73      	ldr	r3, [pc, #460]	; (8006468 <HAL_RCC_GetSysClockFreq+0x204>)
 800629a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800629c:	e0db      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800629e:	4b73      	ldr	r3, [pc, #460]	; (800646c <HAL_RCC_GetSysClockFreq+0x208>)
 80062a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062a2:	e0d8      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062a4:	4b6f      	ldr	r3, [pc, #444]	; (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062ae:	4b6d      	ldr	r3, [pc, #436]	; (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d063      	beq.n	8006382 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ba:	4b6a      	ldr	r3, [pc, #424]	; (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	099b      	lsrs	r3, r3, #6
 80062c0:	2200      	movs	r2, #0
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062cc:	633b      	str	r3, [r7, #48]	; 0x30
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
 80062d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062d6:	4622      	mov	r2, r4
 80062d8:	462b      	mov	r3, r5
 80062da:	f04f 0000 	mov.w	r0, #0
 80062de:	f04f 0100 	mov.w	r1, #0
 80062e2:	0159      	lsls	r1, r3, #5
 80062e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062e8:	0150      	lsls	r0, r2, #5
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4621      	mov	r1, r4
 80062f0:	1a51      	subs	r1, r2, r1
 80062f2:	6139      	str	r1, [r7, #16]
 80062f4:	4629      	mov	r1, r5
 80062f6:	eb63 0301 	sbc.w	r3, r3, r1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006308:	4659      	mov	r1, fp
 800630a:	018b      	lsls	r3, r1, #6
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006312:	4651      	mov	r1, sl
 8006314:	018a      	lsls	r2, r1, #6
 8006316:	4651      	mov	r1, sl
 8006318:	ebb2 0801 	subs.w	r8, r2, r1
 800631c:	4659      	mov	r1, fp
 800631e:	eb63 0901 	sbc.w	r9, r3, r1
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800632e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006336:	4690      	mov	r8, r2
 8006338:	4699      	mov	r9, r3
 800633a:	4623      	mov	r3, r4
 800633c:	eb18 0303 	adds.w	r3, r8, r3
 8006340:	60bb      	str	r3, [r7, #8]
 8006342:	462b      	mov	r3, r5
 8006344:	eb49 0303 	adc.w	r3, r9, r3
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006356:	4629      	mov	r1, r5
 8006358:	024b      	lsls	r3, r1, #9
 800635a:	4621      	mov	r1, r4
 800635c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006360:	4621      	mov	r1, r4
 8006362:	024a      	lsls	r2, r1, #9
 8006364:	4610      	mov	r0, r2
 8006366:	4619      	mov	r1, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636a:	2200      	movs	r2, #0
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
 800636e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006374:	f7fa fca8 	bl	8000cc8 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4613      	mov	r3, r2
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006380:	e058      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006382:	4b38      	ldr	r3, [pc, #224]	; (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	2200      	movs	r2, #0
 800638a:	4618      	mov	r0, r3
 800638c:	4611      	mov	r1, r2
 800638e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	2300      	movs	r3, #0
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800639c:	4642      	mov	r2, r8
 800639e:	464b      	mov	r3, r9
 80063a0:	f04f 0000 	mov.w	r0, #0
 80063a4:	f04f 0100 	mov.w	r1, #0
 80063a8:	0159      	lsls	r1, r3, #5
 80063aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ae:	0150      	lsls	r0, r2, #5
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4641      	mov	r1, r8
 80063b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ba:	4649      	mov	r1, r9
 80063bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063d4:	ebb2 040a 	subs.w	r4, r2, sl
 80063d8:	eb63 050b 	sbc.w	r5, r3, fp
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	00eb      	lsls	r3, r5, #3
 80063e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ea:	00e2      	lsls	r2, r4, #3
 80063ec:	4614      	mov	r4, r2
 80063ee:	461d      	mov	r5, r3
 80063f0:	4643      	mov	r3, r8
 80063f2:	18e3      	adds	r3, r4, r3
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	464b      	mov	r3, r9
 80063f8:	eb45 0303 	adc.w	r3, r5, r3
 80063fc:	607b      	str	r3, [r7, #4]
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800640a:	4629      	mov	r1, r5
 800640c:	028b      	lsls	r3, r1, #10
 800640e:	4621      	mov	r1, r4
 8006410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006414:	4621      	mov	r1, r4
 8006416:	028a      	lsls	r2, r1, #10
 8006418:	4610      	mov	r0, r2
 800641a:	4619      	mov	r1, r3
 800641c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800641e:	2200      	movs	r2, #0
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	61fa      	str	r2, [r7, #28]
 8006424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006428:	f7fa fc4e 	bl	8000cc8 <__aeabi_uldivmod>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4613      	mov	r3, r2
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006434:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <HAL_RCC_GetSysClockFreq+0x200>)
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	3301      	adds	r3, #1
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800644e:	e002      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_RCC_GetSysClockFreq+0x204>)
 8006452:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006458:	4618      	mov	r0, r3
 800645a:	3750      	adds	r7, #80	; 0x50
 800645c:	46bd      	mov	sp, r7
 800645e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006462:	bf00      	nop
 8006464:	40023800 	.word	0x40023800
 8006468:	00f42400 	.word	0x00f42400
 800646c:	007a1200 	.word	0x007a1200

08006470 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <HAL_RCC_GetHCLKFreq+0x14>)
 8006476:	681b      	ldr	r3, [r3, #0]
}
 8006478:	4618      	mov	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000010 	.word	0x20000010

08006488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800648c:	f7ff fff0 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 8006490:	4602      	mov	r2, r0
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	0a9b      	lsrs	r3, r3, #10
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	4903      	ldr	r1, [pc, #12]	; (80064ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800649e:	5ccb      	ldrb	r3, [r1, r3]
 80064a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40023800 	.word	0x40023800
 80064ac:	0800d3ac 	.word	0x0800d3ac

080064b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064b4:	f7ff ffdc 	bl	8006470 <HAL_RCC_GetHCLKFreq>
 80064b8:	4602      	mov	r2, r0
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	0b5b      	lsrs	r3, r3, #13
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	4903      	ldr	r1, [pc, #12]	; (80064d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064c6:	5ccb      	ldrb	r3, [r1, r3]
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40023800 	.word	0x40023800
 80064d4:	0800d3ac 	.word	0x0800d3ac

080064d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d012      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006500:	4b69      	ldr	r3, [pc, #420]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	4a68      	ldr	r2, [pc, #416]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800650a:	6093      	str	r3, [r2, #8]
 800650c:	4b66      	ldr	r3, [pc, #408]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	4964      	ldr	r1, [pc, #400]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006516:	4313      	orrs	r3, r2
 8006518:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006522:	2301      	movs	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d017      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006532:	4b5d      	ldr	r3, [pc, #372]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	4959      	ldr	r1, [pc, #356]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006550:	d101      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800655e:	2301      	movs	r3, #1
 8006560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d017      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800656e:	4b4e      	ldr	r3, [pc, #312]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006574:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	494a      	ldr	r1, [pc, #296]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658c:	d101      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800658e:	2301      	movs	r3, #1
 8006590:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800659a:	2301      	movs	r3, #1
 800659c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 808b 	beq.w	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065bc:	4b3a      	ldr	r3, [pc, #232]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	4a39      	ldr	r2, [pc, #228]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c6:	6413      	str	r3, [r2, #64]	; 0x40
 80065c8:	4b37      	ldr	r3, [pc, #220]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d4:	4b35      	ldr	r3, [pc, #212]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a34      	ldr	r2, [pc, #208]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e0:	f7fc ff10 	bl	8003404 <HAL_GetTick>
 80065e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e8:	f7fc ff0c 	bl	8003404 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	; 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e357      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065fa:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d035      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	429a      	cmp	r2, r3
 8006622:	d02e      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006624:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800662e:	4b1e      	ldr	r3, [pc, #120]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663a:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006646:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b01      	cmp	r3, #1
 8006656:	d114      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fc fed4 	bl	8003404 <HAL_GetTick>
 800665c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665e:	e00a      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006660:	f7fc fed0 	bl	8003404 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	; 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e319      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ee      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800668e:	d111      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800669e:	400b      	ands	r3, r1
 80066a0:	4901      	ldr	r1, [pc, #4]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]
 80066a6:	e00b      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80066a8:	40023800 	.word	0x40023800
 80066ac:	40007000 	.word	0x40007000
 80066b0:	0ffffcff 	.word	0x0ffffcff
 80066b4:	4baa      	ldr	r3, [pc, #680]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4aa9      	ldr	r2, [pc, #676]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066be:	6093      	str	r3, [r2, #8]
 80066c0:	4ba7      	ldr	r3, [pc, #668]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066cc:	49a4      	ldr	r1, [pc, #656]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d010      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066de:	4ba0      	ldr	r3, [pc, #640]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e4:	4a9e      	ldr	r2, [pc, #632]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066ee:	4b9c      	ldr	r3, [pc, #624]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	4999      	ldr	r1, [pc, #612]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800670c:	4b94      	ldr	r3, [pc, #592]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671a:	4991      	ldr	r1, [pc, #580]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800672e:	4b8c      	ldr	r3, [pc, #560]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800673c:	4988      	ldr	r1, [pc, #544]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006750:	4b83      	ldr	r3, [pc, #524]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	4980      	ldr	r1, [pc, #512]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006772:	4b7b      	ldr	r3, [pc, #492]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006778:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006780:	4977      	ldr	r1, [pc, #476]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006794:	4b72      	ldr	r3, [pc, #456]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f023 0203 	bic.w	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	496f      	ldr	r1, [pc, #444]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067b6:	4b6a      	ldr	r3, [pc, #424]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067bc:	f023 020c 	bic.w	r2, r3, #12
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c4:	4966      	ldr	r1, [pc, #408]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067d8:	4b61      	ldr	r3, [pc, #388]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e6:	495e      	ldr	r1, [pc, #376]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067fa:	4b59      	ldr	r3, [pc, #356]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006808:	4955      	ldr	r1, [pc, #340]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800681c:	4b50      	ldr	r3, [pc, #320]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682a:	494d      	ldr	r1, [pc, #308]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800683e:	4b48      	ldr	r3, [pc, #288]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006844:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	4944      	ldr	r1, [pc, #272]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006860:	4b3f      	ldr	r3, [pc, #252]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686e:	493c      	ldr	r1, [pc, #240]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006882:	4b37      	ldr	r3, [pc, #220]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006890:	4933      	ldr	r1, [pc, #204]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068a4:	4b2e      	ldr	r3, [pc, #184]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b2:	492b      	ldr	r1, [pc, #172]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d011      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068c6:	4b26      	ldr	r3, [pc, #152]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d4:	4922      	ldr	r1, [pc, #136]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e4:	d101      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80068e6:	2301      	movs	r3, #1
 80068e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006906:	4b16      	ldr	r3, [pc, #88]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006914:	4912      	ldr	r1, [pc, #72]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006928:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006938:	4909      	ldr	r1, [pc, #36]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d006      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80d9 	beq.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006954:	4b02      	ldr	r3, [pc, #8]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a01      	ldr	r2, [pc, #4]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800695a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800695e:	e001      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006960:	40023800 	.word	0x40023800
 8006964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006966:	f7fc fd4d 	bl	8003404 <HAL_GetTick>
 800696a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800696c:	e008      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800696e:	f7fc fd49 	bl	8003404 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b64      	cmp	r3, #100	; 0x64
 800697a:	d901      	bls.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e194      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006980:	4b6c      	ldr	r3, [pc, #432]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f0      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d021      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069a0:	4b64      	ldr	r3, [pc, #400]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069ae:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	019a      	lsls	r2, r3, #6
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	061b      	lsls	r3, r3, #24
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	071b      	lsls	r3, r3, #28
 80069d4:	4957      	ldr	r1, [pc, #348]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f0:	d00a      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a06:	d129      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a08:	4b4a      	ldr	r3, [pc, #296]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0e:	0c1b      	lsrs	r3, r3, #16
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a16:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1c:	0f1b      	lsrs	r3, r3, #28
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	019a      	lsls	r2, r3, #6
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	071b      	lsls	r3, r3, #28
 8006a3c:	493d      	ldr	r1, [pc, #244]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4a:	f023 021f 	bic.w	r2, r3, #31
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4937      	ldr	r1, [pc, #220]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01d      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a68:	4b32      	ldr	r3, [pc, #200]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6e:	0e1b      	lsrs	r3, r3, #24
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a76:	4b2f      	ldr	r3, [pc, #188]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7c:	0f1b      	lsrs	r3, r3, #28
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	019a      	lsls	r2, r3, #6
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	431a      	orrs	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	071b      	lsls	r3, r3, #28
 8006a9c:	4925      	ldr	r1, [pc, #148]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	019a      	lsls	r2, r3, #6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	071b      	lsls	r3, r3, #28
 8006acc:	4919      	ldr	r1, [pc, #100]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae0:	f7fc fc90 	bl	8003404 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ae8:	f7fc fc8c 	bl	8003404 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	; 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e0d7      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 80cd 	bne.w	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1a:	f7fc fc73 	bl	8003404 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b20:	e00a      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b22:	f7fc fc6f 	bl	8003404 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b64      	cmp	r3, #100	; 0x64
 8006b2e:	d903      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0ba      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006b34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b38:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b44:	d0ed      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02e      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d12a      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b82:	0f1b      	lsrs	r3, r3, #28
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	019a      	lsls	r2, r3, #6
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	4944      	ldr	r1, [pc, #272]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	493d      	ldr	r1, [pc, #244]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d022      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd8:	d11d      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	0e1b      	lsrs	r3, r3, #24
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006be8:	4b32      	ldr	r3, [pc, #200]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	0f1b      	lsrs	r3, r3, #28
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	019a      	lsls	r2, r3, #6
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	041b      	lsls	r3, r3, #16
 8006c02:	431a      	orrs	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	4929      	ldr	r1, [pc, #164]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d028      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c30:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	019a      	lsls	r2, r3, #6
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	071b      	lsls	r3, r3, #28
 8006c56:	4917      	ldr	r1, [pc, #92]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4911      	ldr	r1, [pc, #68]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c74:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c80:	f7fc fbc0 	bl	8003404 <HAL_GetTick>
 8006c84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c88:	f7fc fbbc 	bl	8003404 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	; 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e007      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca6:	d1ef      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800

08006cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e09d      	b.n	8006e06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d108      	bne.n	8006ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cda:	d009      	beq.n	8006cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	61da      	str	r2, [r3, #28]
 8006ce2:	e005      	b.n	8006cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fc f86e 	bl	8002dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d30:	d902      	bls.n	8006d38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e002      	b.n	8006d3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d46:	d007      	beq.n	8006d58 <HAL_SPI_Init+0xa0>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d50:	d002      	beq.n	8006d58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9a:	ea42 0103 	orr.w	r1, r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	f003 0204 	and.w	r2, r3, #4
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f003 0310 	and.w	r3, r3, #16
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006dd4:	ea42 0103 	orr.w	r1, r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e049      	b.n	8006eb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fc f993 	bl	8003160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f000 fa47 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0202 	mvn.w	r2, #2
 8006ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9d0 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9c2 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9d3 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0204 	mvn.w	r2, #4
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9a6 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f998 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9a9 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0208 	mvn.w	r2, #8
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2204      	movs	r2, #4
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f97c 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f96e 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f97f 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d122      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d11b      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0210 	mvn.w	r2, #16
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f952 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f944 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f955 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0201 	mvn.w	r2, #1
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fb fdc2 	bl	8002bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fb0c 	bl	8007684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	d10e      	bne.n	800709a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d107      	bne.n	800709a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 faff 	bl	8007698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d10e      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d107      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f903 	bl	80072cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d10e      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d107      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f06f 0220 	mvn.w	r2, #32
 80070ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fabf 	bl	8007670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_TIM_ConfigClockSource+0x1c>
 8007114:	2302      	movs	r3, #2
 8007116:	e0b4      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x186>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	4b56      	ldr	r3, [pc, #344]	; (800728c <HAL_TIM_ConfigClockSource+0x190>)
 8007134:	4013      	ands	r3, r2
 8007136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007150:	d03e      	beq.n	80071d0 <HAL_TIM_ConfigClockSource+0xd4>
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007156:	f200 8087 	bhi.w	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715e:	f000 8086 	beq.w	800726e <HAL_TIM_ConfigClockSource+0x172>
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007166:	d87f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007168:	2b70      	cmp	r3, #112	; 0x70
 800716a:	d01a      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0xa6>
 800716c:	2b70      	cmp	r3, #112	; 0x70
 800716e:	d87b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007170:	2b60      	cmp	r3, #96	; 0x60
 8007172:	d050      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x11a>
 8007174:	2b60      	cmp	r3, #96	; 0x60
 8007176:	d877      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007178:	2b50      	cmp	r3, #80	; 0x50
 800717a:	d03c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0xfa>
 800717c:	2b50      	cmp	r3, #80	; 0x50
 800717e:	d873      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d058      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x13a>
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	d86f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007188:	2b30      	cmp	r3, #48	; 0x30
 800718a:	d064      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 800718c:	2b30      	cmp	r3, #48	; 0x30
 800718e:	d86b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d060      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d867      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d05c      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 800719c:	2b10      	cmp	r3, #16
 800719e:	d05a      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15a>
 80071a0:	e062      	b.n	8007268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071b2:	f000 f9af 	bl	8007514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	609a      	str	r2, [r3, #8]
      break;
 80071ce:	e04f      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e0:	f000 f998 	bl	8007514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071f2:	609a      	str	r2, [r3, #8]
      break;
 80071f4:	e03c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007202:	461a      	mov	r2, r3
 8007204:	f000 f90c 	bl	8007420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2150      	movs	r1, #80	; 0x50
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f965 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8007214:	e02c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007222:	461a      	mov	r2, r3
 8007224:	f000 f92b 	bl	800747e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2160      	movs	r1, #96	; 0x60
 800722e:	4618      	mov	r0, r3
 8007230:	f000 f955 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8007234:	e01c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007242:	461a      	mov	r2, r3
 8007244:	f000 f8ec 	bl	8007420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2140      	movs	r1, #64	; 0x40
 800724e:	4618      	mov	r0, r3
 8007250:	f000 f945 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8007254:	e00c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f000 f93c 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8007266:	e003      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	e000      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800726e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	fffeff88 	.word	0xfffeff88

08007290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a40      	ldr	r2, [pc, #256]	; (80073f4 <TIM_Base_SetConfig+0x114>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a3d      	ldr	r2, [pc, #244]	; (80073f8 <TIM_Base_SetConfig+0x118>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a3c      	ldr	r2, [pc, #240]	; (80073fc <TIM_Base_SetConfig+0x11c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a3b      	ldr	r2, [pc, #236]	; (8007400 <TIM_Base_SetConfig+0x120>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a3a      	ldr	r2, [pc, #232]	; (8007404 <TIM_Base_SetConfig+0x124>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a2f      	ldr	r2, [pc, #188]	; (80073f4 <TIM_Base_SetConfig+0x114>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d02b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007340:	d027      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2c      	ldr	r2, [pc, #176]	; (80073f8 <TIM_Base_SetConfig+0x118>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d023      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2b      	ldr	r2, [pc, #172]	; (80073fc <TIM_Base_SetConfig+0x11c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2a      	ldr	r2, [pc, #168]	; (8007400 <TIM_Base_SetConfig+0x120>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a29      	ldr	r2, [pc, #164]	; (8007404 <TIM_Base_SetConfig+0x124>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d017      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a28      	ldr	r2, [pc, #160]	; (8007408 <TIM_Base_SetConfig+0x128>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a27      	ldr	r2, [pc, #156]	; (800740c <TIM_Base_SetConfig+0x12c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a26      	ldr	r2, [pc, #152]	; (8007410 <TIM_Base_SetConfig+0x130>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a25      	ldr	r2, [pc, #148]	; (8007414 <TIM_Base_SetConfig+0x134>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a24      	ldr	r2, [pc, #144]	; (8007418 <TIM_Base_SetConfig+0x138>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a23      	ldr	r2, [pc, #140]	; (800741c <TIM_Base_SetConfig+0x13c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a0a      	ldr	r2, [pc, #40]	; (80073f4 <TIM_Base_SetConfig+0x114>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d003      	beq.n	80073d8 <TIM_Base_SetConfig+0xf8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <TIM_Base_SetConfig+0x124>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d103      	bne.n	80073e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	615a      	str	r2, [r3, #20]
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40000400 	.word	0x40000400
 80073fc:	40000800 	.word	0x40000800
 8007400:	40000c00 	.word	0x40000c00
 8007404:	40010400 	.word	0x40010400
 8007408:	40014000 	.word	0x40014000
 800740c:	40014400 	.word	0x40014400
 8007410:	40014800 	.word	0x40014800
 8007414:	40001800 	.word	0x40001800
 8007418:	40001c00 	.word	0x40001c00
 800741c:	40002000 	.word	0x40002000

08007420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f023 0201 	bic.w	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800744a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f023 030a 	bic.w	r3, r3, #10
 800745c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	621a      	str	r2, [r3, #32]
}
 8007472:	bf00      	nop
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800747e:	b480      	push	{r7}
 8007480:	b087      	sub	sp, #28
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0210 	bic.w	r2, r3, #16
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	031b      	lsls	r3, r3, #12
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	621a      	str	r2, [r3, #32]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f043 0307 	orr.w	r3, r3, #7
 8007500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800752e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	021a      	lsls	r2, r3, #8
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	431a      	orrs	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4313      	orrs	r3, r2
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	609a      	str	r2, [r3, #8]
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007568:	2302      	movs	r3, #2
 800756a:	e06d      	b.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a30      	ldr	r2, [pc, #192]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a2f      	ldr	r2, [pc, #188]	; (8007658 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d108      	bne.n	80075b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a20      	ldr	r2, [pc, #128]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d022      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075de:	d01d      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1d      	ldr	r2, [pc, #116]	; (800765c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d018      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1c      	ldr	r2, [pc, #112]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d013      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1a      	ldr	r2, [pc, #104]	; (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00e      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d009      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a15      	ldr	r2, [pc, #84]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d10c      	bne.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	4313      	orrs	r3, r2
 800762c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	40010000 	.word	0x40010000
 8007658:	40010400 	.word	0x40010400
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40014000 	.word	0x40014000
 800766c:	40001800 	.word	0x40001800

08007670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e040      	b.n	8007740 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fb fd9c 	bl	800320c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2224      	movs	r2, #36	; 0x24
 80076d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8b0 	bl	8007850 <UART_SetConfig>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e022      	b.n	8007740 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb08 	bl	8007d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fb8f 	bl	8007e5c <UART_CheckIdleState>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775c:	2b20      	cmp	r3, #32
 800775e:	d171      	bne.n	8007844 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_UART_Transmit+0x24>
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e06a      	b.n	8007846 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2221      	movs	r2, #33	; 0x21
 800777c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800777e:	f7fb fe41 	bl	8003404 <HAL_GetTick>
 8007782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	88fa      	ldrh	r2, [r7, #6]
 8007788:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	88fa      	ldrh	r2, [r7, #6]
 8007790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779c:	d108      	bne.n	80077b0 <HAL_UART_Transmit+0x68>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	e003      	b.n	80077b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077b8:	e02c      	b.n	8007814 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2200      	movs	r2, #0
 80077c2:	2180      	movs	r1, #128	; 0x80
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fb80 	bl	8007eca <UART_WaitOnFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e038      	b.n	8007846 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	3302      	adds	r3, #2
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	e007      	b.n	8007802 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	781a      	ldrb	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	3301      	adds	r3, #1
 8007800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1cc      	bne.n	80077ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2200      	movs	r2, #0
 8007828:	2140      	movs	r1, #64	; 0x40
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fb4d 	bl	8007eca <UART_WaitOnFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e005      	b.n	8007846 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	e000      	b.n	8007846 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007844:	2302      	movs	r3, #2
  }
}
 8007846:	4618      	mov	r0, r3
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4ba6      	ldr	r3, [pc, #664]	; (8007b14 <UART_SetConfig+0x2c4>)
 800787c:	4013      	ands	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6812      	ldr	r2, [r2, #0]
 8007882:	6979      	ldr	r1, [r7, #20]
 8007884:	430b      	orrs	r3, r1
 8007886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	430a      	orrs	r2, r1
 80078c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a94      	ldr	r2, [pc, #592]	; (8007b18 <UART_SetConfig+0x2c8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d120      	bne.n	800790e <UART_SetConfig+0xbe>
 80078cc:	4b93      	ldr	r3, [pc, #588]	; (8007b1c <UART_SetConfig+0x2cc>)
 80078ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d816      	bhi.n	8007908 <UART_SetConfig+0xb8>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <UART_SetConfig+0x90>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	080078fd 	.word	0x080078fd
 80078e8:	080078f7 	.word	0x080078f7
 80078ec:	08007903 	.word	0x08007903
 80078f0:	2301      	movs	r3, #1
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e150      	b.n	8007b98 <UART_SetConfig+0x348>
 80078f6:	2302      	movs	r3, #2
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e14d      	b.n	8007b98 <UART_SetConfig+0x348>
 80078fc:	2304      	movs	r3, #4
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e14a      	b.n	8007b98 <UART_SetConfig+0x348>
 8007902:	2308      	movs	r3, #8
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e147      	b.n	8007b98 <UART_SetConfig+0x348>
 8007908:	2310      	movs	r3, #16
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	e144      	b.n	8007b98 <UART_SetConfig+0x348>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a83      	ldr	r2, [pc, #524]	; (8007b20 <UART_SetConfig+0x2d0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d132      	bne.n	800797e <UART_SetConfig+0x12e>
 8007918:	4b80      	ldr	r3, [pc, #512]	; (8007b1c <UART_SetConfig+0x2cc>)
 800791a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791e:	f003 030c 	and.w	r3, r3, #12
 8007922:	2b0c      	cmp	r3, #12
 8007924:	d828      	bhi.n	8007978 <UART_SetConfig+0x128>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <UART_SetConfig+0xdc>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007961 	.word	0x08007961
 8007930:	08007979 	.word	0x08007979
 8007934:	08007979 	.word	0x08007979
 8007938:	08007979 	.word	0x08007979
 800793c:	0800796d 	.word	0x0800796d
 8007940:	08007979 	.word	0x08007979
 8007944:	08007979 	.word	0x08007979
 8007948:	08007979 	.word	0x08007979
 800794c:	08007967 	.word	0x08007967
 8007950:	08007979 	.word	0x08007979
 8007954:	08007979 	.word	0x08007979
 8007958:	08007979 	.word	0x08007979
 800795c:	08007973 	.word	0x08007973
 8007960:	2300      	movs	r3, #0
 8007962:	77fb      	strb	r3, [r7, #31]
 8007964:	e118      	b.n	8007b98 <UART_SetConfig+0x348>
 8007966:	2302      	movs	r3, #2
 8007968:	77fb      	strb	r3, [r7, #31]
 800796a:	e115      	b.n	8007b98 <UART_SetConfig+0x348>
 800796c:	2304      	movs	r3, #4
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e112      	b.n	8007b98 <UART_SetConfig+0x348>
 8007972:	2308      	movs	r3, #8
 8007974:	77fb      	strb	r3, [r7, #31]
 8007976:	e10f      	b.n	8007b98 <UART_SetConfig+0x348>
 8007978:	2310      	movs	r3, #16
 800797a:	77fb      	strb	r3, [r7, #31]
 800797c:	e10c      	b.n	8007b98 <UART_SetConfig+0x348>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a68      	ldr	r2, [pc, #416]	; (8007b24 <UART_SetConfig+0x2d4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d120      	bne.n	80079ca <UART_SetConfig+0x17a>
 8007988:	4b64      	ldr	r3, [pc, #400]	; (8007b1c <UART_SetConfig+0x2cc>)
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007992:	2b30      	cmp	r3, #48	; 0x30
 8007994:	d013      	beq.n	80079be <UART_SetConfig+0x16e>
 8007996:	2b30      	cmp	r3, #48	; 0x30
 8007998:	d814      	bhi.n	80079c4 <UART_SetConfig+0x174>
 800799a:	2b20      	cmp	r3, #32
 800799c:	d009      	beq.n	80079b2 <UART_SetConfig+0x162>
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d810      	bhi.n	80079c4 <UART_SetConfig+0x174>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <UART_SetConfig+0x15c>
 80079a6:	2b10      	cmp	r3, #16
 80079a8:	d006      	beq.n	80079b8 <UART_SetConfig+0x168>
 80079aa:	e00b      	b.n	80079c4 <UART_SetConfig+0x174>
 80079ac:	2300      	movs	r3, #0
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e0f2      	b.n	8007b98 <UART_SetConfig+0x348>
 80079b2:	2302      	movs	r3, #2
 80079b4:	77fb      	strb	r3, [r7, #31]
 80079b6:	e0ef      	b.n	8007b98 <UART_SetConfig+0x348>
 80079b8:	2304      	movs	r3, #4
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	e0ec      	b.n	8007b98 <UART_SetConfig+0x348>
 80079be:	2308      	movs	r3, #8
 80079c0:	77fb      	strb	r3, [r7, #31]
 80079c2:	e0e9      	b.n	8007b98 <UART_SetConfig+0x348>
 80079c4:	2310      	movs	r3, #16
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e0e6      	b.n	8007b98 <UART_SetConfig+0x348>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a56      	ldr	r2, [pc, #344]	; (8007b28 <UART_SetConfig+0x2d8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d120      	bne.n	8007a16 <UART_SetConfig+0x1c6>
 80079d4:	4b51      	ldr	r3, [pc, #324]	; (8007b1c <UART_SetConfig+0x2cc>)
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079de:	2bc0      	cmp	r3, #192	; 0xc0
 80079e0:	d013      	beq.n	8007a0a <UART_SetConfig+0x1ba>
 80079e2:	2bc0      	cmp	r3, #192	; 0xc0
 80079e4:	d814      	bhi.n	8007a10 <UART_SetConfig+0x1c0>
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d009      	beq.n	80079fe <UART_SetConfig+0x1ae>
 80079ea:	2b80      	cmp	r3, #128	; 0x80
 80079ec:	d810      	bhi.n	8007a10 <UART_SetConfig+0x1c0>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <UART_SetConfig+0x1a8>
 80079f2:	2b40      	cmp	r3, #64	; 0x40
 80079f4:	d006      	beq.n	8007a04 <UART_SetConfig+0x1b4>
 80079f6:	e00b      	b.n	8007a10 <UART_SetConfig+0x1c0>
 80079f8:	2300      	movs	r3, #0
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e0cc      	b.n	8007b98 <UART_SetConfig+0x348>
 80079fe:	2302      	movs	r3, #2
 8007a00:	77fb      	strb	r3, [r7, #31]
 8007a02:	e0c9      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a04:	2304      	movs	r3, #4
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e0c6      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e0c3      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a10:	2310      	movs	r3, #16
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e0c0      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a44      	ldr	r2, [pc, #272]	; (8007b2c <UART_SetConfig+0x2dc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d125      	bne.n	8007a6c <UART_SetConfig+0x21c>
 8007a20:	4b3e      	ldr	r3, [pc, #248]	; (8007b1c <UART_SetConfig+0x2cc>)
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a2e:	d017      	beq.n	8007a60 <UART_SetConfig+0x210>
 8007a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a34:	d817      	bhi.n	8007a66 <UART_SetConfig+0x216>
 8007a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3a:	d00b      	beq.n	8007a54 <UART_SetConfig+0x204>
 8007a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a40:	d811      	bhi.n	8007a66 <UART_SetConfig+0x216>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <UART_SetConfig+0x1fe>
 8007a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4a:	d006      	beq.n	8007a5a <UART_SetConfig+0x20a>
 8007a4c:	e00b      	b.n	8007a66 <UART_SetConfig+0x216>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	77fb      	strb	r3, [r7, #31]
 8007a52:	e0a1      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a54:	2302      	movs	r3, #2
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e09e      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a5a:	2304      	movs	r3, #4
 8007a5c:	77fb      	strb	r3, [r7, #31]
 8007a5e:	e09b      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a60:	2308      	movs	r3, #8
 8007a62:	77fb      	strb	r3, [r7, #31]
 8007a64:	e098      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a66:	2310      	movs	r3, #16
 8007a68:	77fb      	strb	r3, [r7, #31]
 8007a6a:	e095      	b.n	8007b98 <UART_SetConfig+0x348>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a2f      	ldr	r2, [pc, #188]	; (8007b30 <UART_SetConfig+0x2e0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d125      	bne.n	8007ac2 <UART_SetConfig+0x272>
 8007a76:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <UART_SetConfig+0x2cc>)
 8007a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a84:	d017      	beq.n	8007ab6 <UART_SetConfig+0x266>
 8007a86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a8a:	d817      	bhi.n	8007abc <UART_SetConfig+0x26c>
 8007a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a90:	d00b      	beq.n	8007aaa <UART_SetConfig+0x25a>
 8007a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a96:	d811      	bhi.n	8007abc <UART_SetConfig+0x26c>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <UART_SetConfig+0x254>
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa0:	d006      	beq.n	8007ab0 <UART_SetConfig+0x260>
 8007aa2:	e00b      	b.n	8007abc <UART_SetConfig+0x26c>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e076      	b.n	8007b98 <UART_SetConfig+0x348>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	77fb      	strb	r3, [r7, #31]
 8007aae:	e073      	b.n	8007b98 <UART_SetConfig+0x348>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	77fb      	strb	r3, [r7, #31]
 8007ab4:	e070      	b.n	8007b98 <UART_SetConfig+0x348>
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e06d      	b.n	8007b98 <UART_SetConfig+0x348>
 8007abc:	2310      	movs	r3, #16
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e06a      	b.n	8007b98 <UART_SetConfig+0x348>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1b      	ldr	r2, [pc, #108]	; (8007b34 <UART_SetConfig+0x2e4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d138      	bne.n	8007b3e <UART_SetConfig+0x2ee>
 8007acc:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <UART_SetConfig+0x2cc>)
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ad6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ada:	d017      	beq.n	8007b0c <UART_SetConfig+0x2bc>
 8007adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ae0:	d82a      	bhi.n	8007b38 <UART_SetConfig+0x2e8>
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae6:	d00b      	beq.n	8007b00 <UART_SetConfig+0x2b0>
 8007ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aec:	d824      	bhi.n	8007b38 <UART_SetConfig+0x2e8>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <UART_SetConfig+0x2aa>
 8007af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af6:	d006      	beq.n	8007b06 <UART_SetConfig+0x2b6>
 8007af8:	e01e      	b.n	8007b38 <UART_SetConfig+0x2e8>
 8007afa:	2300      	movs	r3, #0
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e04b      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b00:	2302      	movs	r3, #2
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	e048      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b06:	2304      	movs	r3, #4
 8007b08:	77fb      	strb	r3, [r7, #31]
 8007b0a:	e045      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	77fb      	strb	r3, [r7, #31]
 8007b10:	e042      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b12:	bf00      	nop
 8007b14:	efff69f3 	.word	0xefff69f3
 8007b18:	40011000 	.word	0x40011000
 8007b1c:	40023800 	.word	0x40023800
 8007b20:	40004400 	.word	0x40004400
 8007b24:	40004800 	.word	0x40004800
 8007b28:	40004c00 	.word	0x40004c00
 8007b2c:	40005000 	.word	0x40005000
 8007b30:	40011400 	.word	0x40011400
 8007b34:	40007800 	.word	0x40007800
 8007b38:	2310      	movs	r3, #16
 8007b3a:	77fb      	strb	r3, [r7, #31]
 8007b3c:	e02c      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a72      	ldr	r2, [pc, #456]	; (8007d0c <UART_SetConfig+0x4bc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d125      	bne.n	8007b94 <UART_SetConfig+0x344>
 8007b48:	4b71      	ldr	r3, [pc, #452]	; (8007d10 <UART_SetConfig+0x4c0>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b56:	d017      	beq.n	8007b88 <UART_SetConfig+0x338>
 8007b58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b5c:	d817      	bhi.n	8007b8e <UART_SetConfig+0x33e>
 8007b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b62:	d00b      	beq.n	8007b7c <UART_SetConfig+0x32c>
 8007b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b68:	d811      	bhi.n	8007b8e <UART_SetConfig+0x33e>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <UART_SetConfig+0x326>
 8007b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b72:	d006      	beq.n	8007b82 <UART_SetConfig+0x332>
 8007b74:	e00b      	b.n	8007b8e <UART_SetConfig+0x33e>
 8007b76:	2300      	movs	r3, #0
 8007b78:	77fb      	strb	r3, [r7, #31]
 8007b7a:	e00d      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	77fb      	strb	r3, [r7, #31]
 8007b80:	e00a      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b82:	2304      	movs	r3, #4
 8007b84:	77fb      	strb	r3, [r7, #31]
 8007b86:	e007      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	77fb      	strb	r3, [r7, #31]
 8007b8c:	e004      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b8e:	2310      	movs	r3, #16
 8007b90:	77fb      	strb	r3, [r7, #31]
 8007b92:	e001      	b.n	8007b98 <UART_SetConfig+0x348>
 8007b94:	2310      	movs	r3, #16
 8007b96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba0:	d15b      	bne.n	8007c5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ba2:	7ffb      	ldrb	r3, [r7, #31]
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d828      	bhi.n	8007bfa <UART_SetConfig+0x3aa>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <UART_SetConfig+0x360>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bdd 	.word	0x08007bdd
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	08007bfb 	.word	0x08007bfb
 8007bc0:	08007beb 	.word	0x08007beb
 8007bc4:	08007bfb 	.word	0x08007bfb
 8007bc8:	08007bfb 	.word	0x08007bfb
 8007bcc:	08007bfb 	.word	0x08007bfb
 8007bd0:	08007bf3 	.word	0x08007bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd4:	f7fe fc58 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 8007bd8:	61b8      	str	r0, [r7, #24]
        break;
 8007bda:	e013      	b.n	8007c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bdc:	f7fe fc68 	bl	80064b0 <HAL_RCC_GetPCLK2Freq>
 8007be0:	61b8      	str	r0, [r7, #24]
        break;
 8007be2:	e00f      	b.n	8007c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007be4:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <UART_SetConfig+0x4c4>)
 8007be6:	61bb      	str	r3, [r7, #24]
        break;
 8007be8:	e00c      	b.n	8007c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bea:	f7fe fb3b 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8007bee:	61b8      	str	r0, [r7, #24]
        break;
 8007bf0:	e008      	b.n	8007c04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf6:	61bb      	str	r3, [r7, #24]
        break;
 8007bf8:	e004      	b.n	8007c04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	77bb      	strb	r3, [r7, #30]
        break;
 8007c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d074      	beq.n	8007cf4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	005a      	lsls	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	085b      	lsrs	r3, r3, #1
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b0f      	cmp	r3, #15
 8007c24:	d916      	bls.n	8007c54 <UART_SetConfig+0x404>
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c2c:	d212      	bcs.n	8007c54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f023 030f 	bic.w	r3, r3, #15
 8007c36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	89fb      	ldrh	r3, [r7, #14]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	89fa      	ldrh	r2, [r7, #14]
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	e04f      	b.n	8007cf4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	77bb      	strb	r3, [r7, #30]
 8007c58:	e04c      	b.n	8007cf4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c5a:	7ffb      	ldrb	r3, [r7, #31]
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d828      	bhi.n	8007cb2 <UART_SetConfig+0x462>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <UART_SetConfig+0x418>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c8d 	.word	0x08007c8d
 8007c6c:	08007c95 	.word	0x08007c95
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007cb3 	.word	0x08007cb3
 8007c78:	08007ca3 	.word	0x08007ca3
 8007c7c:	08007cb3 	.word	0x08007cb3
 8007c80:	08007cb3 	.word	0x08007cb3
 8007c84:	08007cb3 	.word	0x08007cb3
 8007c88:	08007cab 	.word	0x08007cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c8c:	f7fe fbfc 	bl	8006488 <HAL_RCC_GetPCLK1Freq>
 8007c90:	61b8      	str	r0, [r7, #24]
        break;
 8007c92:	e013      	b.n	8007cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c94:	f7fe fc0c 	bl	80064b0 <HAL_RCC_GetPCLK2Freq>
 8007c98:	61b8      	str	r0, [r7, #24]
        break;
 8007c9a:	e00f      	b.n	8007cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	; (8007d14 <UART_SetConfig+0x4c4>)
 8007c9e:	61bb      	str	r3, [r7, #24]
        break;
 8007ca0:	e00c      	b.n	8007cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca2:	f7fe fadf 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8007ca6:	61b8      	str	r0, [r7, #24]
        break;
 8007ca8:	e008      	b.n	8007cbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cae:	61bb      	str	r3, [r7, #24]
        break;
 8007cb0:	e004      	b.n	8007cbc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cba:	bf00      	nop
    }

    if (pclk != 0U)
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	085a      	lsrs	r2, r3, #1
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	441a      	add	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b0f      	cmp	r3, #15
 8007cda:	d909      	bls.n	8007cf0 <UART_SetConfig+0x4a0>
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d205      	bcs.n	8007cf0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60da      	str	r2, [r3, #12]
 8007cee:	e001      	b.n	8007cf4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d00:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3720      	adds	r7, #32
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40007c00 	.word	0x40007c00
 8007d10:	40023800 	.word	0x40023800
 8007d14:	00f42400 	.word	0x00f42400

08007d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01a      	beq.n	8007e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e16:	d10a      	bne.n	8007e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e6c:	f7fb faca 	bl	8003404 <HAL_GetTick>
 8007e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d10e      	bne.n	8007e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f81b 	bl	8007eca <UART_WaitOnFlagUntilTimeout>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e011      	b.n	8007ec2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b09c      	sub	sp, #112	; 0x70
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	603b      	str	r3, [r7, #0]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eda:	e0a7      	b.n	800802c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee2:	f000 80a3 	beq.w	800802c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ee6:	f7fb fa8d 	bl	8003404 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d302      	bcc.n	8007efc <UART_WaitOnFlagUntilTimeout+0x32>
 8007ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d13f      	bne.n	8007f7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f10:	667b      	str	r3, [r7, #100]	; 0x64
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e6      	bne.n	8007efc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3308      	adds	r3, #8
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	663b      	str	r3, [r7, #96]	; 0x60
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e5      	bne.n	8007f2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e068      	b.n	800804e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d050      	beq.n	800802c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f98:	d148      	bne.n	800802c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fa2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e6      	bne.n	8007fa4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f023 0301 	bic.w	r3, r3, #1
 8007fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ff6:	623a      	str	r2, [r7, #32]
 8007ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	69f9      	ldr	r1, [r7, #28]
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	61bb      	str	r3, [r7, #24]
   return(result);
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2220      	movs	r2, #32
 8008014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2220      	movs	r2, #32
 800801c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e010      	b.n	800804e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69da      	ldr	r2, [r3, #28]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4013      	ands	r3, r2
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	429a      	cmp	r2, r3
 800803a:	bf0c      	ite	eq
 800803c:	2301      	moveq	r3, #1
 800803e:	2300      	movne	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	429a      	cmp	r2, r3
 8008048:	f43f af48 	beq.w	8007edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3770      	adds	r7, #112	; 0x70
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800805c:	4904      	ldr	r1, [pc, #16]	; (8008070 <MX_FATFS_Init+0x18>)
 800805e:	4805      	ldr	r0, [pc, #20]	; (8008074 <MX_FATFS_Init+0x1c>)
 8008060:	f000 f8b0 	bl	80081c4 <FATFS_LinkDriver>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	4b03      	ldr	r3, [pc, #12]	; (8008078 <MX_FATFS_Init+0x20>)
 800806a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800806c:	bf00      	nop
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20018574 	.word	0x20018574
 8008074:	2000001c 	.word	0x2000001c
 8008078:	20018570 	.word	0x20018570

0800807c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <USER_initialize+0x24>)
 8008088:	2201      	movs	r2, #1
 800808a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800808c:	4b04      	ldr	r3, [pc, #16]	; (80080a0 <USER_initialize+0x24>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008092:	4618      	mov	r0, r3
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20000019 	.word	0x20000019

080080a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80080ae:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <USER_status+0x24>)
 80080b0:	2201      	movs	r2, #1
 80080b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80080b4:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <USER_status+0x24>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20000019 	.word	0x20000019

080080cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80080dc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80080fa:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	603a      	str	r2, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
 8008114:	460b      	mov	r3, r1
 8008116:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	73fb      	strb	r3, [r7, #15]
    return res;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
	...

0800812c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800813a:	2301      	movs	r3, #1
 800813c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008142:	4b1f      	ldr	r3, [pc, #124]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 8008144:	7a5b      	ldrb	r3, [r3, #9]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d131      	bne.n	80081b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800814c:	4b1c      	ldr	r3, [pc, #112]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 800814e:	7a5b      	ldrb	r3, [r3, #9]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	461a      	mov	r2, r3
 8008154:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 8008156:	2100      	movs	r1, #0
 8008158:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800815a:	4b19      	ldr	r3, [pc, #100]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 800815c:	7a5b      	ldrb	r3, [r3, #9]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800816a:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 800816c:	7a5b      	ldrb	r3, [r3, #9]
 800816e:	b2db      	uxtb	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 8008174:	4413      	add	r3, r2
 8008176:	79fa      	ldrb	r2, [r7, #7]
 8008178:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800817a:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 800817c:	7a5b      	ldrb	r3, [r3, #9]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	b2d1      	uxtb	r1, r2
 8008184:	4a0e      	ldr	r2, [pc, #56]	; (80081c0 <FATFS_LinkDriverEx+0x94>)
 8008186:	7251      	strb	r1, [r2, #9]
 8008188:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800818a:	7dbb      	ldrb	r3, [r7, #22]
 800818c:	3330      	adds	r3, #48	; 0x30
 800818e:	b2da      	uxtb	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	3301      	adds	r3, #1
 8008198:	223a      	movs	r2, #58	; 0x3a
 800819a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	3302      	adds	r3, #2
 80081a0:	222f      	movs	r2, #47	; 0x2f
 80081a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	3303      	adds	r3, #3
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20018578 	.word	0x20018578

080081c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081ce:	2200      	movs	r2, #0
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff ffaa 	bl	800812c <FATFS_LinkDriverEx>
 80081d8:	4603      	mov	r3, r0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <exit>:
 80081e4:	b508      	push	{r3, lr}
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <exit+0x1c>)
 80081e8:	4604      	mov	r4, r0
 80081ea:	b113      	cbz	r3, 80081f2 <exit+0xe>
 80081ec:	2100      	movs	r1, #0
 80081ee:	f3af 8000 	nop.w
 80081f2:	4b04      	ldr	r3, [pc, #16]	; (8008204 <exit+0x20>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	b103      	cbz	r3, 80081fa <exit+0x16>
 80081f8:	4798      	blx	r3
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7fa febe 	bl	8002f7c <_exit>
 8008200:	00000000 	.word	0x00000000
 8008204:	200186c4 	.word	0x200186c4

08008208 <__cvt>:
 8008208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	ec55 4b10 	vmov	r4, r5, d0
 8008210:	2d00      	cmp	r5, #0
 8008212:	460e      	mov	r6, r1
 8008214:	4619      	mov	r1, r3
 8008216:	462b      	mov	r3, r5
 8008218:	bfbb      	ittet	lt
 800821a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800821e:	461d      	movlt	r5, r3
 8008220:	2300      	movge	r3, #0
 8008222:	232d      	movlt	r3, #45	; 0x2d
 8008224:	700b      	strb	r3, [r1, #0]
 8008226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008228:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800822c:	4691      	mov	r9, r2
 800822e:	f023 0820 	bic.w	r8, r3, #32
 8008232:	bfbc      	itt	lt
 8008234:	4622      	movlt	r2, r4
 8008236:	4614      	movlt	r4, r2
 8008238:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800823c:	d005      	beq.n	800824a <__cvt+0x42>
 800823e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008242:	d100      	bne.n	8008246 <__cvt+0x3e>
 8008244:	3601      	adds	r6, #1
 8008246:	2102      	movs	r1, #2
 8008248:	e000      	b.n	800824c <__cvt+0x44>
 800824a:	2103      	movs	r1, #3
 800824c:	ab03      	add	r3, sp, #12
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	ab02      	add	r3, sp, #8
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	ec45 4b10 	vmov	d0, r4, r5
 8008258:	4653      	mov	r3, sl
 800825a:	4632      	mov	r2, r6
 800825c:	f001 ffdc 	bl	800a218 <_dtoa_r>
 8008260:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008264:	4607      	mov	r7, r0
 8008266:	d102      	bne.n	800826e <__cvt+0x66>
 8008268:	f019 0f01 	tst.w	r9, #1
 800826c:	d022      	beq.n	80082b4 <__cvt+0xac>
 800826e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008272:	eb07 0906 	add.w	r9, r7, r6
 8008276:	d110      	bne.n	800829a <__cvt+0x92>
 8008278:	783b      	ldrb	r3, [r7, #0]
 800827a:	2b30      	cmp	r3, #48	; 0x30
 800827c:	d10a      	bne.n	8008294 <__cvt+0x8c>
 800827e:	2200      	movs	r2, #0
 8008280:	2300      	movs	r3, #0
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	f7f8 fc3f 	bl	8000b08 <__aeabi_dcmpeq>
 800828a:	b918      	cbnz	r0, 8008294 <__cvt+0x8c>
 800828c:	f1c6 0601 	rsb	r6, r6, #1
 8008290:	f8ca 6000 	str.w	r6, [sl]
 8008294:	f8da 3000 	ldr.w	r3, [sl]
 8008298:	4499      	add	r9, r3
 800829a:	2200      	movs	r2, #0
 800829c:	2300      	movs	r3, #0
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f8 fc31 	bl	8000b08 <__aeabi_dcmpeq>
 80082a6:	b108      	cbz	r0, 80082ac <__cvt+0xa4>
 80082a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80082ac:	2230      	movs	r2, #48	; 0x30
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	454b      	cmp	r3, r9
 80082b2:	d307      	bcc.n	80082c4 <__cvt+0xbc>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082b8:	1bdb      	subs	r3, r3, r7
 80082ba:	4638      	mov	r0, r7
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	b004      	add	sp, #16
 80082c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c4:	1c59      	adds	r1, r3, #1
 80082c6:	9103      	str	r1, [sp, #12]
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	e7f0      	b.n	80082ae <__cvt+0xa6>

080082cc <__exponent>:
 80082cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ce:	4603      	mov	r3, r0
 80082d0:	2900      	cmp	r1, #0
 80082d2:	bfb8      	it	lt
 80082d4:	4249      	neglt	r1, r1
 80082d6:	f803 2b02 	strb.w	r2, [r3], #2
 80082da:	bfb4      	ite	lt
 80082dc:	222d      	movlt	r2, #45	; 0x2d
 80082de:	222b      	movge	r2, #43	; 0x2b
 80082e0:	2909      	cmp	r1, #9
 80082e2:	7042      	strb	r2, [r0, #1]
 80082e4:	dd2a      	ble.n	800833c <__exponent+0x70>
 80082e6:	f10d 0207 	add.w	r2, sp, #7
 80082ea:	4617      	mov	r7, r2
 80082ec:	260a      	movs	r6, #10
 80082ee:	4694      	mov	ip, r2
 80082f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80082f4:	fb06 1415 	mls	r4, r6, r5, r1
 80082f8:	3430      	adds	r4, #48	; 0x30
 80082fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80082fe:	460c      	mov	r4, r1
 8008300:	2c63      	cmp	r4, #99	; 0x63
 8008302:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008306:	4629      	mov	r1, r5
 8008308:	dcf1      	bgt.n	80082ee <__exponent+0x22>
 800830a:	3130      	adds	r1, #48	; 0x30
 800830c:	f1ac 0402 	sub.w	r4, ip, #2
 8008310:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008314:	1c41      	adds	r1, r0, #1
 8008316:	4622      	mov	r2, r4
 8008318:	42ba      	cmp	r2, r7
 800831a:	d30a      	bcc.n	8008332 <__exponent+0x66>
 800831c:	f10d 0209 	add.w	r2, sp, #9
 8008320:	eba2 020c 	sub.w	r2, r2, ip
 8008324:	42bc      	cmp	r4, r7
 8008326:	bf88      	it	hi
 8008328:	2200      	movhi	r2, #0
 800832a:	4413      	add	r3, r2
 800832c:	1a18      	subs	r0, r3, r0
 800832e:	b003      	add	sp, #12
 8008330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008332:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008336:	f801 5f01 	strb.w	r5, [r1, #1]!
 800833a:	e7ed      	b.n	8008318 <__exponent+0x4c>
 800833c:	2330      	movs	r3, #48	; 0x30
 800833e:	3130      	adds	r1, #48	; 0x30
 8008340:	7083      	strb	r3, [r0, #2]
 8008342:	70c1      	strb	r1, [r0, #3]
 8008344:	1d03      	adds	r3, r0, #4
 8008346:	e7f1      	b.n	800832c <__exponent+0x60>

08008348 <_printf_float>:
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	ed2d 8b02 	vpush	{d8}
 8008350:	b08d      	sub	sp, #52	; 0x34
 8008352:	460c      	mov	r4, r1
 8008354:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008358:	4616      	mov	r6, r2
 800835a:	461f      	mov	r7, r3
 800835c:	4605      	mov	r5, r0
 800835e:	f001 fe73 	bl	800a048 <_localeconv_r>
 8008362:	f8d0 a000 	ldr.w	sl, [r0]
 8008366:	4650      	mov	r0, sl
 8008368:	f7f7 ffa2 	bl	80002b0 <strlen>
 800836c:	2300      	movs	r3, #0
 800836e:	930a      	str	r3, [sp, #40]	; 0x28
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	9305      	str	r3, [sp, #20]
 8008374:	f8d8 3000 	ldr.w	r3, [r8]
 8008378:	f894 b018 	ldrb.w	fp, [r4, #24]
 800837c:	3307      	adds	r3, #7
 800837e:	f023 0307 	bic.w	r3, r3, #7
 8008382:	f103 0208 	add.w	r2, r3, #8
 8008386:	f8c8 2000 	str.w	r2, [r8]
 800838a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800838e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008392:	9307      	str	r3, [sp, #28]
 8008394:	f8cd 8018 	str.w	r8, [sp, #24]
 8008398:	ee08 0a10 	vmov	s16, r0
 800839c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80083a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a4:	4b9e      	ldr	r3, [pc, #632]	; (8008620 <_printf_float+0x2d8>)
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083aa:	f7f8 fbdf 	bl	8000b6c <__aeabi_dcmpun>
 80083ae:	bb88      	cbnz	r0, 8008414 <_printf_float+0xcc>
 80083b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b4:	4b9a      	ldr	r3, [pc, #616]	; (8008620 <_printf_float+0x2d8>)
 80083b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083ba:	f7f8 fbb9 	bl	8000b30 <__aeabi_dcmple>
 80083be:	bb48      	cbnz	r0, 8008414 <_printf_float+0xcc>
 80083c0:	2200      	movs	r2, #0
 80083c2:	2300      	movs	r3, #0
 80083c4:	4640      	mov	r0, r8
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7f8 fba8 	bl	8000b1c <__aeabi_dcmplt>
 80083cc:	b110      	cbz	r0, 80083d4 <_printf_float+0x8c>
 80083ce:	232d      	movs	r3, #45	; 0x2d
 80083d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d4:	4a93      	ldr	r2, [pc, #588]	; (8008624 <_printf_float+0x2dc>)
 80083d6:	4b94      	ldr	r3, [pc, #592]	; (8008628 <_printf_float+0x2e0>)
 80083d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083dc:	bf94      	ite	ls
 80083de:	4690      	movls	r8, r2
 80083e0:	4698      	movhi	r8, r3
 80083e2:	2303      	movs	r3, #3
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	9b05      	ldr	r3, [sp, #20]
 80083e8:	f023 0304 	bic.w	r3, r3, #4
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	f04f 0900 	mov.w	r9, #0
 80083f2:	9700      	str	r7, [sp, #0]
 80083f4:	4633      	mov	r3, r6
 80083f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80083f8:	4621      	mov	r1, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 fa8a 	bl	8008914 <_printf_common>
 8008400:	3001      	adds	r0, #1
 8008402:	f040 8090 	bne.w	8008526 <_printf_float+0x1de>
 8008406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800840a:	b00d      	add	sp, #52	; 0x34
 800840c:	ecbd 8b02 	vpop	{d8}
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	4640      	mov	r0, r8
 800841a:	4649      	mov	r1, r9
 800841c:	f7f8 fba6 	bl	8000b6c <__aeabi_dcmpun>
 8008420:	b140      	cbz	r0, 8008434 <_printf_float+0xec>
 8008422:	464b      	mov	r3, r9
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfbc      	itt	lt
 8008428:	232d      	movlt	r3, #45	; 0x2d
 800842a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800842e:	4a7f      	ldr	r2, [pc, #508]	; (800862c <_printf_float+0x2e4>)
 8008430:	4b7f      	ldr	r3, [pc, #508]	; (8008630 <_printf_float+0x2e8>)
 8008432:	e7d1      	b.n	80083d8 <_printf_float+0x90>
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800843a:	9206      	str	r2, [sp, #24]
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	d13f      	bne.n	80084c0 <_printf_float+0x178>
 8008440:	2306      	movs	r3, #6
 8008442:	6063      	str	r3, [r4, #4]
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	6861      	ldr	r1, [r4, #4]
 8008448:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800844c:	2300      	movs	r3, #0
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	ab0a      	add	r3, sp, #40	; 0x28
 8008452:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008456:	ab09      	add	r3, sp, #36	; 0x24
 8008458:	ec49 8b10 	vmov	d0, r8, r9
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	6022      	str	r2, [r4, #0]
 8008460:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff fecf 	bl	8008208 <__cvt>
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800846e:	2b47      	cmp	r3, #71	; 0x47
 8008470:	4680      	mov	r8, r0
 8008472:	d108      	bne.n	8008486 <_printf_float+0x13e>
 8008474:	1cc8      	adds	r0, r1, #3
 8008476:	db02      	blt.n	800847e <_printf_float+0x136>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	4299      	cmp	r1, r3
 800847c:	dd41      	ble.n	8008502 <_printf_float+0x1ba>
 800847e:	f1ab 0302 	sub.w	r3, fp, #2
 8008482:	fa5f fb83 	uxtb.w	fp, r3
 8008486:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800848a:	d820      	bhi.n	80084ce <_printf_float+0x186>
 800848c:	3901      	subs	r1, #1
 800848e:	465a      	mov	r2, fp
 8008490:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008494:	9109      	str	r1, [sp, #36]	; 0x24
 8008496:	f7ff ff19 	bl	80082cc <__exponent>
 800849a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849c:	1813      	adds	r3, r2, r0
 800849e:	2a01      	cmp	r2, #1
 80084a0:	4681      	mov	r9, r0
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	dc02      	bgt.n	80084ac <_printf_float+0x164>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	07d2      	lsls	r2, r2, #31
 80084aa:	d501      	bpl.n	80084b0 <_printf_float+0x168>
 80084ac:	3301      	adds	r3, #1
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d09c      	beq.n	80083f2 <_printf_float+0xaa>
 80084b8:	232d      	movs	r3, #45	; 0x2d
 80084ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084be:	e798      	b.n	80083f2 <_printf_float+0xaa>
 80084c0:	9a06      	ldr	r2, [sp, #24]
 80084c2:	2a47      	cmp	r2, #71	; 0x47
 80084c4:	d1be      	bne.n	8008444 <_printf_float+0xfc>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1bc      	bne.n	8008444 <_printf_float+0xfc>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7b9      	b.n	8008442 <_printf_float+0xfa>
 80084ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084d2:	d118      	bne.n	8008506 <_printf_float+0x1be>
 80084d4:	2900      	cmp	r1, #0
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	dd0b      	ble.n	80084f2 <_printf_float+0x1aa>
 80084da:	6121      	str	r1, [r4, #16]
 80084dc:	b913      	cbnz	r3, 80084e4 <_printf_float+0x19c>
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	07d0      	lsls	r0, r2, #31
 80084e2:	d502      	bpl.n	80084ea <_printf_float+0x1a2>
 80084e4:	3301      	adds	r3, #1
 80084e6:	440b      	add	r3, r1
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80084ec:	f04f 0900 	mov.w	r9, #0
 80084f0:	e7de      	b.n	80084b0 <_printf_float+0x168>
 80084f2:	b913      	cbnz	r3, 80084fa <_printf_float+0x1b2>
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	07d2      	lsls	r2, r2, #31
 80084f8:	d501      	bpl.n	80084fe <_printf_float+0x1b6>
 80084fa:	3302      	adds	r3, #2
 80084fc:	e7f4      	b.n	80084e8 <_printf_float+0x1a0>
 80084fe:	2301      	movs	r3, #1
 8008500:	e7f2      	b.n	80084e8 <_printf_float+0x1a0>
 8008502:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008508:	4299      	cmp	r1, r3
 800850a:	db05      	blt.n	8008518 <_printf_float+0x1d0>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	6121      	str	r1, [r4, #16]
 8008510:	07d8      	lsls	r0, r3, #31
 8008512:	d5ea      	bpl.n	80084ea <_printf_float+0x1a2>
 8008514:	1c4b      	adds	r3, r1, #1
 8008516:	e7e7      	b.n	80084e8 <_printf_float+0x1a0>
 8008518:	2900      	cmp	r1, #0
 800851a:	bfd4      	ite	le
 800851c:	f1c1 0202 	rsble	r2, r1, #2
 8008520:	2201      	movgt	r2, #1
 8008522:	4413      	add	r3, r2
 8008524:	e7e0      	b.n	80084e8 <_printf_float+0x1a0>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	055a      	lsls	r2, r3, #21
 800852a:	d407      	bmi.n	800853c <_printf_float+0x1f4>
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	4642      	mov	r2, r8
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	d12c      	bne.n	8008594 <_printf_float+0x24c>
 800853a:	e764      	b.n	8008406 <_printf_float+0xbe>
 800853c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008540:	f240 80e0 	bls.w	8008704 <_printf_float+0x3bc>
 8008544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008548:	2200      	movs	r2, #0
 800854a:	2300      	movs	r3, #0
 800854c:	f7f8 fadc 	bl	8000b08 <__aeabi_dcmpeq>
 8008550:	2800      	cmp	r0, #0
 8008552:	d034      	beq.n	80085be <_printf_float+0x276>
 8008554:	4a37      	ldr	r2, [pc, #220]	; (8008634 <_printf_float+0x2ec>)
 8008556:	2301      	movs	r3, #1
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f af51 	beq.w	8008406 <_printf_float+0xbe>
 8008564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008568:	429a      	cmp	r2, r3
 800856a:	db02      	blt.n	8008572 <_printf_float+0x22a>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	07d8      	lsls	r0, r3, #31
 8008570:	d510      	bpl.n	8008594 <_printf_float+0x24c>
 8008572:	ee18 3a10 	vmov	r3, s16
 8008576:	4652      	mov	r2, sl
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af41 	beq.w	8008406 <_printf_float+0xbe>
 8008584:	f04f 0800 	mov.w	r8, #0
 8008588:	f104 091a 	add.w	r9, r4, #26
 800858c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858e:	3b01      	subs	r3, #1
 8008590:	4543      	cmp	r3, r8
 8008592:	dc09      	bgt.n	80085a8 <_printf_float+0x260>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	079b      	lsls	r3, r3, #30
 8008598:	f100 8107 	bmi.w	80087aa <_printf_float+0x462>
 800859c:	68e0      	ldr	r0, [r4, #12]
 800859e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a0:	4298      	cmp	r0, r3
 80085a2:	bfb8      	it	lt
 80085a4:	4618      	movlt	r0, r3
 80085a6:	e730      	b.n	800840a <_printf_float+0xc2>
 80085a8:	2301      	movs	r3, #1
 80085aa:	464a      	mov	r2, r9
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b8      	blx	r7
 80085b2:	3001      	adds	r0, #1
 80085b4:	f43f af27 	beq.w	8008406 <_printf_float+0xbe>
 80085b8:	f108 0801 	add.w	r8, r8, #1
 80085bc:	e7e6      	b.n	800858c <_printf_float+0x244>
 80085be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc39      	bgt.n	8008638 <_printf_float+0x2f0>
 80085c4:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <_printf_float+0x2ec>)
 80085c6:	2301      	movs	r3, #1
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f af19 	beq.w	8008406 <_printf_float+0xbe>
 80085d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80085d8:	4313      	orrs	r3, r2
 80085da:	d102      	bne.n	80085e2 <_printf_float+0x29a>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	d5d8      	bpl.n	8008594 <_printf_float+0x24c>
 80085e2:	ee18 3a10 	vmov	r3, s16
 80085e6:	4652      	mov	r2, sl
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f af09 	beq.w	8008406 <_printf_float+0xbe>
 80085f4:	f04f 0900 	mov.w	r9, #0
 80085f8:	f104 0a1a 	add.w	sl, r4, #26
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	425b      	negs	r3, r3
 8008600:	454b      	cmp	r3, r9
 8008602:	dc01      	bgt.n	8008608 <_printf_float+0x2c0>
 8008604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008606:	e792      	b.n	800852e <_printf_float+0x1e6>
 8008608:	2301      	movs	r3, #1
 800860a:	4652      	mov	r2, sl
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f aef7 	beq.w	8008406 <_printf_float+0xbe>
 8008618:	f109 0901 	add.w	r9, r9, #1
 800861c:	e7ee      	b.n	80085fc <_printf_float+0x2b4>
 800861e:	bf00      	nop
 8008620:	7fefffff 	.word	0x7fefffff
 8008624:	0800d3bc 	.word	0x0800d3bc
 8008628:	0800d3c0 	.word	0x0800d3c0
 800862c:	0800d3c4 	.word	0x0800d3c4
 8008630:	0800d3c8 	.word	0x0800d3c8
 8008634:	0800d3cc 	.word	0x0800d3cc
 8008638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800863a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800863c:	429a      	cmp	r2, r3
 800863e:	bfa8      	it	ge
 8008640:	461a      	movge	r2, r3
 8008642:	2a00      	cmp	r2, #0
 8008644:	4691      	mov	r9, r2
 8008646:	dc37      	bgt.n	80086b8 <_printf_float+0x370>
 8008648:	f04f 0b00 	mov.w	fp, #0
 800864c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008650:	f104 021a 	add.w	r2, r4, #26
 8008654:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008656:	9305      	str	r3, [sp, #20]
 8008658:	eba3 0309 	sub.w	r3, r3, r9
 800865c:	455b      	cmp	r3, fp
 800865e:	dc33      	bgt.n	80086c8 <_printf_float+0x380>
 8008660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008664:	429a      	cmp	r2, r3
 8008666:	db3b      	blt.n	80086e0 <_printf_float+0x398>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	07da      	lsls	r2, r3, #31
 800866c:	d438      	bmi.n	80086e0 <_printf_float+0x398>
 800866e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008672:	eba2 0903 	sub.w	r9, r2, r3
 8008676:	9b05      	ldr	r3, [sp, #20]
 8008678:	1ad2      	subs	r2, r2, r3
 800867a:	4591      	cmp	r9, r2
 800867c:	bfa8      	it	ge
 800867e:	4691      	movge	r9, r2
 8008680:	f1b9 0f00 	cmp.w	r9, #0
 8008684:	dc35      	bgt.n	80086f2 <_printf_float+0x3aa>
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800868e:	f104 0a1a 	add.w	sl, r4, #26
 8008692:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008696:	1a9b      	subs	r3, r3, r2
 8008698:	eba3 0309 	sub.w	r3, r3, r9
 800869c:	4543      	cmp	r3, r8
 800869e:	f77f af79 	ble.w	8008594 <_printf_float+0x24c>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4652      	mov	r2, sl
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f aeaa 	beq.w	8008406 <_printf_float+0xbe>
 80086b2:	f108 0801 	add.w	r8, r8, #1
 80086b6:	e7ec      	b.n	8008692 <_printf_float+0x34a>
 80086b8:	4613      	mov	r3, r2
 80086ba:	4631      	mov	r1, r6
 80086bc:	4642      	mov	r2, r8
 80086be:	4628      	mov	r0, r5
 80086c0:	47b8      	blx	r7
 80086c2:	3001      	adds	r0, #1
 80086c4:	d1c0      	bne.n	8008648 <_printf_float+0x300>
 80086c6:	e69e      	b.n	8008406 <_printf_float+0xbe>
 80086c8:	2301      	movs	r3, #1
 80086ca:	4631      	mov	r1, r6
 80086cc:	4628      	mov	r0, r5
 80086ce:	9205      	str	r2, [sp, #20]
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	f43f ae97 	beq.w	8008406 <_printf_float+0xbe>
 80086d8:	9a05      	ldr	r2, [sp, #20]
 80086da:	f10b 0b01 	add.w	fp, fp, #1
 80086de:	e7b9      	b.n	8008654 <_printf_float+0x30c>
 80086e0:	ee18 3a10 	vmov	r3, s16
 80086e4:	4652      	mov	r2, sl
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	d1be      	bne.n	800866e <_printf_float+0x326>
 80086f0:	e689      	b.n	8008406 <_printf_float+0xbe>
 80086f2:	9a05      	ldr	r2, [sp, #20]
 80086f4:	464b      	mov	r3, r9
 80086f6:	4442      	add	r2, r8
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	d1c1      	bne.n	8008686 <_printf_float+0x33e>
 8008702:	e680      	b.n	8008406 <_printf_float+0xbe>
 8008704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008706:	2a01      	cmp	r2, #1
 8008708:	dc01      	bgt.n	800870e <_printf_float+0x3c6>
 800870a:	07db      	lsls	r3, r3, #31
 800870c:	d53a      	bpl.n	8008784 <_printf_float+0x43c>
 800870e:	2301      	movs	r3, #1
 8008710:	4642      	mov	r2, r8
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	f43f ae74 	beq.w	8008406 <_printf_float+0xbe>
 800871e:	ee18 3a10 	vmov	r3, s16
 8008722:	4652      	mov	r2, sl
 8008724:	4631      	mov	r1, r6
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	f43f ae6b 	beq.w	8008406 <_printf_float+0xbe>
 8008730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008734:	2200      	movs	r2, #0
 8008736:	2300      	movs	r3, #0
 8008738:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800873c:	f7f8 f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 8008740:	b9d8      	cbnz	r0, 800877a <_printf_float+0x432>
 8008742:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008746:	f108 0201 	add.w	r2, r8, #1
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	d10e      	bne.n	8008772 <_printf_float+0x42a>
 8008754:	e657      	b.n	8008406 <_printf_float+0xbe>
 8008756:	2301      	movs	r3, #1
 8008758:	4652      	mov	r2, sl
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	f43f ae50 	beq.w	8008406 <_printf_float+0xbe>
 8008766:	f108 0801 	add.w	r8, r8, #1
 800876a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876c:	3b01      	subs	r3, #1
 800876e:	4543      	cmp	r3, r8
 8008770:	dcf1      	bgt.n	8008756 <_printf_float+0x40e>
 8008772:	464b      	mov	r3, r9
 8008774:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008778:	e6da      	b.n	8008530 <_printf_float+0x1e8>
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	f104 0a1a 	add.w	sl, r4, #26
 8008782:	e7f2      	b.n	800876a <_printf_float+0x422>
 8008784:	2301      	movs	r3, #1
 8008786:	4642      	mov	r2, r8
 8008788:	e7df      	b.n	800874a <_printf_float+0x402>
 800878a:	2301      	movs	r3, #1
 800878c:	464a      	mov	r2, r9
 800878e:	4631      	mov	r1, r6
 8008790:	4628      	mov	r0, r5
 8008792:	47b8      	blx	r7
 8008794:	3001      	adds	r0, #1
 8008796:	f43f ae36 	beq.w	8008406 <_printf_float+0xbe>
 800879a:	f108 0801 	add.w	r8, r8, #1
 800879e:	68e3      	ldr	r3, [r4, #12]
 80087a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087a2:	1a5b      	subs	r3, r3, r1
 80087a4:	4543      	cmp	r3, r8
 80087a6:	dcf0      	bgt.n	800878a <_printf_float+0x442>
 80087a8:	e6f8      	b.n	800859c <_printf_float+0x254>
 80087aa:	f04f 0800 	mov.w	r8, #0
 80087ae:	f104 0919 	add.w	r9, r4, #25
 80087b2:	e7f4      	b.n	800879e <_printf_float+0x456>

080087b4 <malloc>:
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <malloc+0xc>)
 80087b6:	4601      	mov	r1, r0
 80087b8:	6818      	ldr	r0, [r3, #0]
 80087ba:	f000 b82b 	b.w	8008814 <_malloc_r>
 80087be:	bf00      	nop
 80087c0:	200001f4 	.word	0x200001f4

080087c4 <free>:
 80087c4:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <free+0xc>)
 80087c6:	4601      	mov	r1, r0
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f002 bb17 	b.w	800adfc <_free_r>
 80087ce:	bf00      	nop
 80087d0:	200001f4 	.word	0x200001f4

080087d4 <sbrk_aligned>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4e0e      	ldr	r6, [pc, #56]	; (8008810 <sbrk_aligned+0x3c>)
 80087d8:	460c      	mov	r4, r1
 80087da:	6831      	ldr	r1, [r6, #0]
 80087dc:	4605      	mov	r5, r0
 80087de:	b911      	cbnz	r1, 80087e6 <sbrk_aligned+0x12>
 80087e0:	f001 fc36 	bl	800a050 <_sbrk_r>
 80087e4:	6030      	str	r0, [r6, #0]
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f001 fc31 	bl	800a050 <_sbrk_r>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	d00a      	beq.n	8008808 <sbrk_aligned+0x34>
 80087f2:	1cc4      	adds	r4, r0, #3
 80087f4:	f024 0403 	bic.w	r4, r4, #3
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d007      	beq.n	800880c <sbrk_aligned+0x38>
 80087fc:	1a21      	subs	r1, r4, r0
 80087fe:	4628      	mov	r0, r5
 8008800:	f001 fc26 	bl	800a050 <_sbrk_r>
 8008804:	3001      	adds	r0, #1
 8008806:	d101      	bne.n	800880c <sbrk_aligned+0x38>
 8008808:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800880c:	4620      	mov	r0, r4
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	20018588 	.word	0x20018588

08008814 <_malloc_r>:
 8008814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008818:	1ccd      	adds	r5, r1, #3
 800881a:	f025 0503 	bic.w	r5, r5, #3
 800881e:	3508      	adds	r5, #8
 8008820:	2d0c      	cmp	r5, #12
 8008822:	bf38      	it	cc
 8008824:	250c      	movcc	r5, #12
 8008826:	2d00      	cmp	r5, #0
 8008828:	4607      	mov	r7, r0
 800882a:	db01      	blt.n	8008830 <_malloc_r+0x1c>
 800882c:	42a9      	cmp	r1, r5
 800882e:	d905      	bls.n	800883c <_malloc_r+0x28>
 8008830:	230c      	movs	r3, #12
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	2600      	movs	r6, #0
 8008836:	4630      	mov	r0, r6
 8008838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008910 <_malloc_r+0xfc>
 8008840:	f000 fc08 	bl	8009054 <__malloc_lock>
 8008844:	f8d8 3000 	ldr.w	r3, [r8]
 8008848:	461c      	mov	r4, r3
 800884a:	bb5c      	cbnz	r4, 80088a4 <_malloc_r+0x90>
 800884c:	4629      	mov	r1, r5
 800884e:	4638      	mov	r0, r7
 8008850:	f7ff ffc0 	bl	80087d4 <sbrk_aligned>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	4604      	mov	r4, r0
 8008858:	d155      	bne.n	8008906 <_malloc_r+0xf2>
 800885a:	f8d8 4000 	ldr.w	r4, [r8]
 800885e:	4626      	mov	r6, r4
 8008860:	2e00      	cmp	r6, #0
 8008862:	d145      	bne.n	80088f0 <_malloc_r+0xdc>
 8008864:	2c00      	cmp	r4, #0
 8008866:	d048      	beq.n	80088fa <_malloc_r+0xe6>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	4631      	mov	r1, r6
 800886c:	4638      	mov	r0, r7
 800886e:	eb04 0903 	add.w	r9, r4, r3
 8008872:	f001 fbed 	bl	800a050 <_sbrk_r>
 8008876:	4581      	cmp	r9, r0
 8008878:	d13f      	bne.n	80088fa <_malloc_r+0xe6>
 800887a:	6821      	ldr	r1, [r4, #0]
 800887c:	1a6d      	subs	r5, r5, r1
 800887e:	4629      	mov	r1, r5
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ffa7 	bl	80087d4 <sbrk_aligned>
 8008886:	3001      	adds	r0, #1
 8008888:	d037      	beq.n	80088fa <_malloc_r+0xe6>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	442b      	add	r3, r5
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	f8d8 3000 	ldr.w	r3, [r8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d038      	beq.n	800890a <_malloc_r+0xf6>
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	42a2      	cmp	r2, r4
 800889c:	d12b      	bne.n	80088f6 <_malloc_r+0xe2>
 800889e:	2200      	movs	r2, #0
 80088a0:	605a      	str	r2, [r3, #4]
 80088a2:	e00f      	b.n	80088c4 <_malloc_r+0xb0>
 80088a4:	6822      	ldr	r2, [r4, #0]
 80088a6:	1b52      	subs	r2, r2, r5
 80088a8:	d41f      	bmi.n	80088ea <_malloc_r+0xd6>
 80088aa:	2a0b      	cmp	r2, #11
 80088ac:	d917      	bls.n	80088de <_malloc_r+0xca>
 80088ae:	1961      	adds	r1, r4, r5
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	6025      	str	r5, [r4, #0]
 80088b4:	bf18      	it	ne
 80088b6:	6059      	strne	r1, [r3, #4]
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	bf08      	it	eq
 80088bc:	f8c8 1000 	streq.w	r1, [r8]
 80088c0:	5162      	str	r2, [r4, r5]
 80088c2:	604b      	str	r3, [r1, #4]
 80088c4:	4638      	mov	r0, r7
 80088c6:	f104 060b 	add.w	r6, r4, #11
 80088ca:	f000 fbc9 	bl	8009060 <__malloc_unlock>
 80088ce:	f026 0607 	bic.w	r6, r6, #7
 80088d2:	1d23      	adds	r3, r4, #4
 80088d4:	1af2      	subs	r2, r6, r3
 80088d6:	d0ae      	beq.n	8008836 <_malloc_r+0x22>
 80088d8:	1b9b      	subs	r3, r3, r6
 80088da:	50a3      	str	r3, [r4, r2]
 80088dc:	e7ab      	b.n	8008836 <_malloc_r+0x22>
 80088de:	42a3      	cmp	r3, r4
 80088e0:	6862      	ldr	r2, [r4, #4]
 80088e2:	d1dd      	bne.n	80088a0 <_malloc_r+0x8c>
 80088e4:	f8c8 2000 	str.w	r2, [r8]
 80088e8:	e7ec      	b.n	80088c4 <_malloc_r+0xb0>
 80088ea:	4623      	mov	r3, r4
 80088ec:	6864      	ldr	r4, [r4, #4]
 80088ee:	e7ac      	b.n	800884a <_malloc_r+0x36>
 80088f0:	4634      	mov	r4, r6
 80088f2:	6876      	ldr	r6, [r6, #4]
 80088f4:	e7b4      	b.n	8008860 <_malloc_r+0x4c>
 80088f6:	4613      	mov	r3, r2
 80088f8:	e7cc      	b.n	8008894 <_malloc_r+0x80>
 80088fa:	230c      	movs	r3, #12
 80088fc:	603b      	str	r3, [r7, #0]
 80088fe:	4638      	mov	r0, r7
 8008900:	f000 fbae 	bl	8009060 <__malloc_unlock>
 8008904:	e797      	b.n	8008836 <_malloc_r+0x22>
 8008906:	6025      	str	r5, [r4, #0]
 8008908:	e7dc      	b.n	80088c4 <_malloc_r+0xb0>
 800890a:	605b      	str	r3, [r3, #4]
 800890c:	deff      	udf	#255	; 0xff
 800890e:	bf00      	nop
 8008910:	20018584 	.word	0x20018584

08008914 <_printf_common>:
 8008914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008918:	4616      	mov	r6, r2
 800891a:	4699      	mov	r9, r3
 800891c:	688a      	ldr	r2, [r1, #8]
 800891e:	690b      	ldr	r3, [r1, #16]
 8008920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008924:	4293      	cmp	r3, r2
 8008926:	bfb8      	it	lt
 8008928:	4613      	movlt	r3, r2
 800892a:	6033      	str	r3, [r6, #0]
 800892c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008930:	4607      	mov	r7, r0
 8008932:	460c      	mov	r4, r1
 8008934:	b10a      	cbz	r2, 800893a <_printf_common+0x26>
 8008936:	3301      	adds	r3, #1
 8008938:	6033      	str	r3, [r6, #0]
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	0699      	lsls	r1, r3, #26
 800893e:	bf42      	ittt	mi
 8008940:	6833      	ldrmi	r3, [r6, #0]
 8008942:	3302      	addmi	r3, #2
 8008944:	6033      	strmi	r3, [r6, #0]
 8008946:	6825      	ldr	r5, [r4, #0]
 8008948:	f015 0506 	ands.w	r5, r5, #6
 800894c:	d106      	bne.n	800895c <_printf_common+0x48>
 800894e:	f104 0a19 	add.w	sl, r4, #25
 8008952:	68e3      	ldr	r3, [r4, #12]
 8008954:	6832      	ldr	r2, [r6, #0]
 8008956:	1a9b      	subs	r3, r3, r2
 8008958:	42ab      	cmp	r3, r5
 800895a:	dc26      	bgt.n	80089aa <_printf_common+0x96>
 800895c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008960:	1e13      	subs	r3, r2, #0
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	bf18      	it	ne
 8008966:	2301      	movne	r3, #1
 8008968:	0692      	lsls	r2, r2, #26
 800896a:	d42b      	bmi.n	80089c4 <_printf_common+0xb0>
 800896c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008970:	4649      	mov	r1, r9
 8008972:	4638      	mov	r0, r7
 8008974:	47c0      	blx	r8
 8008976:	3001      	adds	r0, #1
 8008978:	d01e      	beq.n	80089b8 <_printf_common+0xa4>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	6922      	ldr	r2, [r4, #16]
 800897e:	f003 0306 	and.w	r3, r3, #6
 8008982:	2b04      	cmp	r3, #4
 8008984:	bf02      	ittt	eq
 8008986:	68e5      	ldreq	r5, [r4, #12]
 8008988:	6833      	ldreq	r3, [r6, #0]
 800898a:	1aed      	subeq	r5, r5, r3
 800898c:	68a3      	ldr	r3, [r4, #8]
 800898e:	bf0c      	ite	eq
 8008990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008994:	2500      	movne	r5, #0
 8008996:	4293      	cmp	r3, r2
 8008998:	bfc4      	itt	gt
 800899a:	1a9b      	subgt	r3, r3, r2
 800899c:	18ed      	addgt	r5, r5, r3
 800899e:	2600      	movs	r6, #0
 80089a0:	341a      	adds	r4, #26
 80089a2:	42b5      	cmp	r5, r6
 80089a4:	d11a      	bne.n	80089dc <_printf_common+0xc8>
 80089a6:	2000      	movs	r0, #0
 80089a8:	e008      	b.n	80089bc <_printf_common+0xa8>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4652      	mov	r2, sl
 80089ae:	4649      	mov	r1, r9
 80089b0:	4638      	mov	r0, r7
 80089b2:	47c0      	blx	r8
 80089b4:	3001      	adds	r0, #1
 80089b6:	d103      	bne.n	80089c0 <_printf_common+0xac>
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c0:	3501      	adds	r5, #1
 80089c2:	e7c6      	b.n	8008952 <_printf_common+0x3e>
 80089c4:	18e1      	adds	r1, r4, r3
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	2030      	movs	r0, #48	; 0x30
 80089ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089ce:	4422      	add	r2, r4
 80089d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089d8:	3302      	adds	r3, #2
 80089da:	e7c7      	b.n	800896c <_printf_common+0x58>
 80089dc:	2301      	movs	r3, #1
 80089de:	4622      	mov	r2, r4
 80089e0:	4649      	mov	r1, r9
 80089e2:	4638      	mov	r0, r7
 80089e4:	47c0      	blx	r8
 80089e6:	3001      	adds	r0, #1
 80089e8:	d0e6      	beq.n	80089b8 <_printf_common+0xa4>
 80089ea:	3601      	adds	r6, #1
 80089ec:	e7d9      	b.n	80089a2 <_printf_common+0x8e>
	...

080089f0 <_printf_i>:
 80089f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	7e0f      	ldrb	r7, [r1, #24]
 80089f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089f8:	2f78      	cmp	r7, #120	; 0x78
 80089fa:	4691      	mov	r9, r2
 80089fc:	4680      	mov	r8, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	469a      	mov	sl, r3
 8008a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a06:	d807      	bhi.n	8008a18 <_printf_i+0x28>
 8008a08:	2f62      	cmp	r7, #98	; 0x62
 8008a0a:	d80a      	bhi.n	8008a22 <_printf_i+0x32>
 8008a0c:	2f00      	cmp	r7, #0
 8008a0e:	f000 80d4 	beq.w	8008bba <_printf_i+0x1ca>
 8008a12:	2f58      	cmp	r7, #88	; 0x58
 8008a14:	f000 80c0 	beq.w	8008b98 <_printf_i+0x1a8>
 8008a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a20:	e03a      	b.n	8008a98 <_printf_i+0xa8>
 8008a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a26:	2b15      	cmp	r3, #21
 8008a28:	d8f6      	bhi.n	8008a18 <_printf_i+0x28>
 8008a2a:	a101      	add	r1, pc, #4	; (adr r1, 8008a30 <_printf_i+0x40>)
 8008a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a30:	08008a89 	.word	0x08008a89
 8008a34:	08008a9d 	.word	0x08008a9d
 8008a38:	08008a19 	.word	0x08008a19
 8008a3c:	08008a19 	.word	0x08008a19
 8008a40:	08008a19 	.word	0x08008a19
 8008a44:	08008a19 	.word	0x08008a19
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	08008a19 	.word	0x08008a19
 8008a50:	08008a19 	.word	0x08008a19
 8008a54:	08008a19 	.word	0x08008a19
 8008a58:	08008a19 	.word	0x08008a19
 8008a5c:	08008ba1 	.word	0x08008ba1
 8008a60:	08008ac9 	.word	0x08008ac9
 8008a64:	08008b5b 	.word	0x08008b5b
 8008a68:	08008a19 	.word	0x08008a19
 8008a6c:	08008a19 	.word	0x08008a19
 8008a70:	08008bc3 	.word	0x08008bc3
 8008a74:	08008a19 	.word	0x08008a19
 8008a78:	08008ac9 	.word	0x08008ac9
 8008a7c:	08008a19 	.word	0x08008a19
 8008a80:	08008a19 	.word	0x08008a19
 8008a84:	08008b63 	.word	0x08008b63
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	1d1a      	adds	r2, r3, #4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	602a      	str	r2, [r5, #0]
 8008a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e09f      	b.n	8008bdc <_printf_i+0x1ec>
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	682b      	ldr	r3, [r5, #0]
 8008aa0:	0607      	lsls	r7, r0, #24
 8008aa2:	f103 0104 	add.w	r1, r3, #4
 8008aa6:	6029      	str	r1, [r5, #0]
 8008aa8:	d501      	bpl.n	8008aae <_printf_i+0xbe>
 8008aaa:	681e      	ldr	r6, [r3, #0]
 8008aac:	e003      	b.n	8008ab6 <_printf_i+0xc6>
 8008aae:	0646      	lsls	r6, r0, #25
 8008ab0:	d5fb      	bpl.n	8008aaa <_printf_i+0xba>
 8008ab2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	da03      	bge.n	8008ac2 <_printf_i+0xd2>
 8008aba:	232d      	movs	r3, #45	; 0x2d
 8008abc:	4276      	negs	r6, r6
 8008abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac2:	485a      	ldr	r0, [pc, #360]	; (8008c2c <_printf_i+0x23c>)
 8008ac4:	230a      	movs	r3, #10
 8008ac6:	e012      	b.n	8008aee <_printf_i+0xfe>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	6820      	ldr	r0, [r4, #0]
 8008acc:	1d19      	adds	r1, r3, #4
 8008ace:	6029      	str	r1, [r5, #0]
 8008ad0:	0605      	lsls	r5, r0, #24
 8008ad2:	d501      	bpl.n	8008ad8 <_printf_i+0xe8>
 8008ad4:	681e      	ldr	r6, [r3, #0]
 8008ad6:	e002      	b.n	8008ade <_printf_i+0xee>
 8008ad8:	0641      	lsls	r1, r0, #25
 8008ada:	d5fb      	bpl.n	8008ad4 <_printf_i+0xe4>
 8008adc:	881e      	ldrh	r6, [r3, #0]
 8008ade:	4853      	ldr	r0, [pc, #332]	; (8008c2c <_printf_i+0x23c>)
 8008ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2308      	moveq	r3, #8
 8008ae6:	230a      	movne	r3, #10
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aee:	6865      	ldr	r5, [r4, #4]
 8008af0:	60a5      	str	r5, [r4, #8]
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	bfa2      	ittt	ge
 8008af6:	6821      	ldrge	r1, [r4, #0]
 8008af8:	f021 0104 	bicge.w	r1, r1, #4
 8008afc:	6021      	strge	r1, [r4, #0]
 8008afe:	b90e      	cbnz	r6, 8008b04 <_printf_i+0x114>
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	d04b      	beq.n	8008b9c <_printf_i+0x1ac>
 8008b04:	4615      	mov	r5, r2
 8008b06:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b0a:	fb03 6711 	mls	r7, r3, r1, r6
 8008b0e:	5dc7      	ldrb	r7, [r0, r7]
 8008b10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b14:	4637      	mov	r7, r6
 8008b16:	42bb      	cmp	r3, r7
 8008b18:	460e      	mov	r6, r1
 8008b1a:	d9f4      	bls.n	8008b06 <_printf_i+0x116>
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d10b      	bne.n	8008b38 <_printf_i+0x148>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	07de      	lsls	r6, r3, #31
 8008b24:	d508      	bpl.n	8008b38 <_printf_i+0x148>
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	6861      	ldr	r1, [r4, #4]
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	bfde      	ittt	le
 8008b2e:	2330      	movle	r3, #48	; 0x30
 8008b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b38:	1b52      	subs	r2, r2, r5
 8008b3a:	6122      	str	r2, [r4, #16]
 8008b3c:	f8cd a000 	str.w	sl, [sp]
 8008b40:	464b      	mov	r3, r9
 8008b42:	aa03      	add	r2, sp, #12
 8008b44:	4621      	mov	r1, r4
 8008b46:	4640      	mov	r0, r8
 8008b48:	f7ff fee4 	bl	8008914 <_printf_common>
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d14a      	bne.n	8008be6 <_printf_i+0x1f6>
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b54:	b004      	add	sp, #16
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	f043 0320 	orr.w	r3, r3, #32
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	4833      	ldr	r0, [pc, #204]	; (8008c30 <_printf_i+0x240>)
 8008b64:	2778      	movs	r7, #120	; 0x78
 8008b66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	6829      	ldr	r1, [r5, #0]
 8008b6e:	061f      	lsls	r7, r3, #24
 8008b70:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b74:	d402      	bmi.n	8008b7c <_printf_i+0x18c>
 8008b76:	065f      	lsls	r7, r3, #25
 8008b78:	bf48      	it	mi
 8008b7a:	b2b6      	uxthmi	r6, r6
 8008b7c:	07df      	lsls	r7, r3, #31
 8008b7e:	bf48      	it	mi
 8008b80:	f043 0320 	orrmi.w	r3, r3, #32
 8008b84:	6029      	str	r1, [r5, #0]
 8008b86:	bf48      	it	mi
 8008b88:	6023      	strmi	r3, [r4, #0]
 8008b8a:	b91e      	cbnz	r6, 8008b94 <_printf_i+0x1a4>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	f023 0320 	bic.w	r3, r3, #32
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	2310      	movs	r3, #16
 8008b96:	e7a7      	b.n	8008ae8 <_printf_i+0xf8>
 8008b98:	4824      	ldr	r0, [pc, #144]	; (8008c2c <_printf_i+0x23c>)
 8008b9a:	e7e4      	b.n	8008b66 <_printf_i+0x176>
 8008b9c:	4615      	mov	r5, r2
 8008b9e:	e7bd      	b.n	8008b1c <_printf_i+0x12c>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	6826      	ldr	r6, [r4, #0]
 8008ba4:	6961      	ldr	r1, [r4, #20]
 8008ba6:	1d18      	adds	r0, r3, #4
 8008ba8:	6028      	str	r0, [r5, #0]
 8008baa:	0635      	lsls	r5, r6, #24
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	d501      	bpl.n	8008bb4 <_printf_i+0x1c4>
 8008bb0:	6019      	str	r1, [r3, #0]
 8008bb2:	e002      	b.n	8008bba <_printf_i+0x1ca>
 8008bb4:	0670      	lsls	r0, r6, #25
 8008bb6:	d5fb      	bpl.n	8008bb0 <_printf_i+0x1c0>
 8008bb8:	8019      	strh	r1, [r3, #0]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6123      	str	r3, [r4, #16]
 8008bbe:	4615      	mov	r5, r2
 8008bc0:	e7bc      	b.n	8008b3c <_printf_i+0x14c>
 8008bc2:	682b      	ldr	r3, [r5, #0]
 8008bc4:	1d1a      	adds	r2, r3, #4
 8008bc6:	602a      	str	r2, [r5, #0]
 8008bc8:	681d      	ldr	r5, [r3, #0]
 8008bca:	6862      	ldr	r2, [r4, #4]
 8008bcc:	2100      	movs	r1, #0
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f7f7 fb1e 	bl	8000210 <memchr>
 8008bd4:	b108      	cbz	r0, 8008bda <_printf_i+0x1ea>
 8008bd6:	1b40      	subs	r0, r0, r5
 8008bd8:	6060      	str	r0, [r4, #4]
 8008bda:	6863      	ldr	r3, [r4, #4]
 8008bdc:	6123      	str	r3, [r4, #16]
 8008bde:	2300      	movs	r3, #0
 8008be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be4:	e7aa      	b.n	8008b3c <_printf_i+0x14c>
 8008be6:	6923      	ldr	r3, [r4, #16]
 8008be8:	462a      	mov	r2, r5
 8008bea:	4649      	mov	r1, r9
 8008bec:	4640      	mov	r0, r8
 8008bee:	47d0      	blx	sl
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d0ad      	beq.n	8008b50 <_printf_i+0x160>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	079b      	lsls	r3, r3, #30
 8008bf8:	d413      	bmi.n	8008c22 <_printf_i+0x232>
 8008bfa:	68e0      	ldr	r0, [r4, #12]
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	4298      	cmp	r0, r3
 8008c00:	bfb8      	it	lt
 8008c02:	4618      	movlt	r0, r3
 8008c04:	e7a6      	b.n	8008b54 <_printf_i+0x164>
 8008c06:	2301      	movs	r3, #1
 8008c08:	4632      	mov	r2, r6
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	47d0      	blx	sl
 8008c10:	3001      	adds	r0, #1
 8008c12:	d09d      	beq.n	8008b50 <_printf_i+0x160>
 8008c14:	3501      	adds	r5, #1
 8008c16:	68e3      	ldr	r3, [r4, #12]
 8008c18:	9903      	ldr	r1, [sp, #12]
 8008c1a:	1a5b      	subs	r3, r3, r1
 8008c1c:	42ab      	cmp	r3, r5
 8008c1e:	dcf2      	bgt.n	8008c06 <_printf_i+0x216>
 8008c20:	e7eb      	b.n	8008bfa <_printf_i+0x20a>
 8008c22:	2500      	movs	r5, #0
 8008c24:	f104 0619 	add.w	r6, r4, #25
 8008c28:	e7f5      	b.n	8008c16 <_printf_i+0x226>
 8008c2a:	bf00      	nop
 8008c2c:	0800d3ce 	.word	0x0800d3ce
 8008c30:	0800d3df 	.word	0x0800d3df

08008c34 <_scanf_float>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	b087      	sub	sp, #28
 8008c3a:	4617      	mov	r7, r2
 8008c3c:	9303      	str	r3, [sp, #12]
 8008c3e:	688b      	ldr	r3, [r1, #8]
 8008c40:	1e5a      	subs	r2, r3, #1
 8008c42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c46:	bf83      	ittte	hi
 8008c48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c4c:	195b      	addhi	r3, r3, r5
 8008c4e:	9302      	strhi	r3, [sp, #8]
 8008c50:	2300      	movls	r3, #0
 8008c52:	bf86      	itte	hi
 8008c54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c58:	608b      	strhi	r3, [r1, #8]
 8008c5a:	9302      	strls	r3, [sp, #8]
 8008c5c:	680b      	ldr	r3, [r1, #0]
 8008c5e:	468b      	mov	fp, r1
 8008c60:	2500      	movs	r5, #0
 8008c62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c66:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c6e:	4680      	mov	r8, r0
 8008c70:	460c      	mov	r4, r1
 8008c72:	465e      	mov	r6, fp
 8008c74:	46aa      	mov	sl, r5
 8008c76:	46a9      	mov	r9, r5
 8008c78:	9501      	str	r5, [sp, #4]
 8008c7a:	68a2      	ldr	r2, [r4, #8]
 8008c7c:	b152      	cbz	r2, 8008c94 <_scanf_float+0x60>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b4e      	cmp	r3, #78	; 0x4e
 8008c84:	d864      	bhi.n	8008d50 <_scanf_float+0x11c>
 8008c86:	2b40      	cmp	r3, #64	; 0x40
 8008c88:	d83c      	bhi.n	8008d04 <_scanf_float+0xd0>
 8008c8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c8e:	b2c8      	uxtb	r0, r1
 8008c90:	280e      	cmp	r0, #14
 8008c92:	d93a      	bls.n	8008d0a <_scanf_float+0xd6>
 8008c94:	f1b9 0f00 	cmp.w	r9, #0
 8008c98:	d003      	beq.n	8008ca2 <_scanf_float+0x6e>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ca6:	f1ba 0f01 	cmp.w	sl, #1
 8008caa:	f200 8113 	bhi.w	8008ed4 <_scanf_float+0x2a0>
 8008cae:	455e      	cmp	r6, fp
 8008cb0:	f200 8105 	bhi.w	8008ebe <_scanf_float+0x28a>
 8008cb4:	2501      	movs	r5, #1
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	b007      	add	sp, #28
 8008cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008cc2:	2a0d      	cmp	r2, #13
 8008cc4:	d8e6      	bhi.n	8008c94 <_scanf_float+0x60>
 8008cc6:	a101      	add	r1, pc, #4	; (adr r1, 8008ccc <_scanf_float+0x98>)
 8008cc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ccc:	08008e0b 	.word	0x08008e0b
 8008cd0:	08008c95 	.word	0x08008c95
 8008cd4:	08008c95 	.word	0x08008c95
 8008cd8:	08008c95 	.word	0x08008c95
 8008cdc:	08008e6b 	.word	0x08008e6b
 8008ce0:	08008e43 	.word	0x08008e43
 8008ce4:	08008c95 	.word	0x08008c95
 8008ce8:	08008c95 	.word	0x08008c95
 8008cec:	08008e19 	.word	0x08008e19
 8008cf0:	08008c95 	.word	0x08008c95
 8008cf4:	08008c95 	.word	0x08008c95
 8008cf8:	08008c95 	.word	0x08008c95
 8008cfc:	08008c95 	.word	0x08008c95
 8008d00:	08008dd1 	.word	0x08008dd1
 8008d04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d08:	e7db      	b.n	8008cc2 <_scanf_float+0x8e>
 8008d0a:	290e      	cmp	r1, #14
 8008d0c:	d8c2      	bhi.n	8008c94 <_scanf_float+0x60>
 8008d0e:	a001      	add	r0, pc, #4	; (adr r0, 8008d14 <_scanf_float+0xe0>)
 8008d10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d14:	08008dc3 	.word	0x08008dc3
 8008d18:	08008c95 	.word	0x08008c95
 8008d1c:	08008dc3 	.word	0x08008dc3
 8008d20:	08008e57 	.word	0x08008e57
 8008d24:	08008c95 	.word	0x08008c95
 8008d28:	08008d71 	.word	0x08008d71
 8008d2c:	08008dad 	.word	0x08008dad
 8008d30:	08008dad 	.word	0x08008dad
 8008d34:	08008dad 	.word	0x08008dad
 8008d38:	08008dad 	.word	0x08008dad
 8008d3c:	08008dad 	.word	0x08008dad
 8008d40:	08008dad 	.word	0x08008dad
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008dad 	.word	0x08008dad
 8008d4c:	08008dad 	.word	0x08008dad
 8008d50:	2b6e      	cmp	r3, #110	; 0x6e
 8008d52:	d809      	bhi.n	8008d68 <_scanf_float+0x134>
 8008d54:	2b60      	cmp	r3, #96	; 0x60
 8008d56:	d8b2      	bhi.n	8008cbe <_scanf_float+0x8a>
 8008d58:	2b54      	cmp	r3, #84	; 0x54
 8008d5a:	d077      	beq.n	8008e4c <_scanf_float+0x218>
 8008d5c:	2b59      	cmp	r3, #89	; 0x59
 8008d5e:	d199      	bne.n	8008c94 <_scanf_float+0x60>
 8008d60:	2d07      	cmp	r5, #7
 8008d62:	d197      	bne.n	8008c94 <_scanf_float+0x60>
 8008d64:	2508      	movs	r5, #8
 8008d66:	e029      	b.n	8008dbc <_scanf_float+0x188>
 8008d68:	2b74      	cmp	r3, #116	; 0x74
 8008d6a:	d06f      	beq.n	8008e4c <_scanf_float+0x218>
 8008d6c:	2b79      	cmp	r3, #121	; 0x79
 8008d6e:	e7f6      	b.n	8008d5e <_scanf_float+0x12a>
 8008d70:	6821      	ldr	r1, [r4, #0]
 8008d72:	05c8      	lsls	r0, r1, #23
 8008d74:	d51a      	bpl.n	8008dac <_scanf_float+0x178>
 8008d76:	9b02      	ldr	r3, [sp, #8]
 8008d78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d7c:	6021      	str	r1, [r4, #0]
 8008d7e:	f109 0901 	add.w	r9, r9, #1
 8008d82:	b11b      	cbz	r3, 8008d8c <_scanf_float+0x158>
 8008d84:	3b01      	subs	r3, #1
 8008d86:	3201      	adds	r2, #1
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	60a2      	str	r2, [r4, #8]
 8008d8c:	68a3      	ldr	r3, [r4, #8]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	3301      	adds	r3, #1
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	f340 8084 	ble.w	8008eac <_scanf_float+0x278>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	3301      	adds	r3, #1
 8008da8:	603b      	str	r3, [r7, #0]
 8008daa:	e766      	b.n	8008c7a <_scanf_float+0x46>
 8008dac:	eb1a 0f05 	cmn.w	sl, r5
 8008db0:	f47f af70 	bne.w	8008c94 <_scanf_float+0x60>
 8008db4:	6822      	ldr	r2, [r4, #0]
 8008db6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008dba:	6022      	str	r2, [r4, #0]
 8008dbc:	f806 3b01 	strb.w	r3, [r6], #1
 8008dc0:	e7e4      	b.n	8008d8c <_scanf_float+0x158>
 8008dc2:	6822      	ldr	r2, [r4, #0]
 8008dc4:	0610      	lsls	r0, r2, #24
 8008dc6:	f57f af65 	bpl.w	8008c94 <_scanf_float+0x60>
 8008dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dce:	e7f4      	b.n	8008dba <_scanf_float+0x186>
 8008dd0:	f1ba 0f00 	cmp.w	sl, #0
 8008dd4:	d10e      	bne.n	8008df4 <_scanf_float+0x1c0>
 8008dd6:	f1b9 0f00 	cmp.w	r9, #0
 8008dda:	d10e      	bne.n	8008dfa <_scanf_float+0x1c6>
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008de2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008de6:	d108      	bne.n	8008dfa <_scanf_float+0x1c6>
 8008de8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dec:	6022      	str	r2, [r4, #0]
 8008dee:	f04f 0a01 	mov.w	sl, #1
 8008df2:	e7e3      	b.n	8008dbc <_scanf_float+0x188>
 8008df4:	f1ba 0f02 	cmp.w	sl, #2
 8008df8:	d055      	beq.n	8008ea6 <_scanf_float+0x272>
 8008dfa:	2d01      	cmp	r5, #1
 8008dfc:	d002      	beq.n	8008e04 <_scanf_float+0x1d0>
 8008dfe:	2d04      	cmp	r5, #4
 8008e00:	f47f af48 	bne.w	8008c94 <_scanf_float+0x60>
 8008e04:	3501      	adds	r5, #1
 8008e06:	b2ed      	uxtb	r5, r5
 8008e08:	e7d8      	b.n	8008dbc <_scanf_float+0x188>
 8008e0a:	f1ba 0f01 	cmp.w	sl, #1
 8008e0e:	f47f af41 	bne.w	8008c94 <_scanf_float+0x60>
 8008e12:	f04f 0a02 	mov.w	sl, #2
 8008e16:	e7d1      	b.n	8008dbc <_scanf_float+0x188>
 8008e18:	b97d      	cbnz	r5, 8008e3a <_scanf_float+0x206>
 8008e1a:	f1b9 0f00 	cmp.w	r9, #0
 8008e1e:	f47f af3c 	bne.w	8008c9a <_scanf_float+0x66>
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e2c:	f47f af39 	bne.w	8008ca2 <_scanf_float+0x6e>
 8008e30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e34:	6022      	str	r2, [r4, #0]
 8008e36:	2501      	movs	r5, #1
 8008e38:	e7c0      	b.n	8008dbc <_scanf_float+0x188>
 8008e3a:	2d03      	cmp	r5, #3
 8008e3c:	d0e2      	beq.n	8008e04 <_scanf_float+0x1d0>
 8008e3e:	2d05      	cmp	r5, #5
 8008e40:	e7de      	b.n	8008e00 <_scanf_float+0x1cc>
 8008e42:	2d02      	cmp	r5, #2
 8008e44:	f47f af26 	bne.w	8008c94 <_scanf_float+0x60>
 8008e48:	2503      	movs	r5, #3
 8008e4a:	e7b7      	b.n	8008dbc <_scanf_float+0x188>
 8008e4c:	2d06      	cmp	r5, #6
 8008e4e:	f47f af21 	bne.w	8008c94 <_scanf_float+0x60>
 8008e52:	2507      	movs	r5, #7
 8008e54:	e7b2      	b.n	8008dbc <_scanf_float+0x188>
 8008e56:	6822      	ldr	r2, [r4, #0]
 8008e58:	0591      	lsls	r1, r2, #22
 8008e5a:	f57f af1b 	bpl.w	8008c94 <_scanf_float+0x60>
 8008e5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e62:	6022      	str	r2, [r4, #0]
 8008e64:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e68:	e7a8      	b.n	8008dbc <_scanf_float+0x188>
 8008e6a:	6822      	ldr	r2, [r4, #0]
 8008e6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e74:	d006      	beq.n	8008e84 <_scanf_float+0x250>
 8008e76:	0550      	lsls	r0, r2, #21
 8008e78:	f57f af0c 	bpl.w	8008c94 <_scanf_float+0x60>
 8008e7c:	f1b9 0f00 	cmp.w	r9, #0
 8008e80:	f43f af0f 	beq.w	8008ca2 <_scanf_float+0x6e>
 8008e84:	0591      	lsls	r1, r2, #22
 8008e86:	bf58      	it	pl
 8008e88:	9901      	ldrpl	r1, [sp, #4]
 8008e8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e8e:	bf58      	it	pl
 8008e90:	eba9 0101 	subpl.w	r1, r9, r1
 8008e94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e98:	bf58      	it	pl
 8008e9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e9e:	6022      	str	r2, [r4, #0]
 8008ea0:	f04f 0900 	mov.w	r9, #0
 8008ea4:	e78a      	b.n	8008dbc <_scanf_float+0x188>
 8008ea6:	f04f 0a03 	mov.w	sl, #3
 8008eaa:	e787      	b.n	8008dbc <_scanf_float+0x188>
 8008eac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4798      	blx	r3
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f43f aedf 	beq.w	8008c7a <_scanf_float+0x46>
 8008ebc:	e6ea      	b.n	8008c94 <_scanf_float+0x60>
 8008ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ec6:	463a      	mov	r2, r7
 8008ec8:	4640      	mov	r0, r8
 8008eca:	4798      	blx	r3
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	e6ec      	b.n	8008cae <_scanf_float+0x7a>
 8008ed4:	1e6b      	subs	r3, r5, #1
 8008ed6:	2b06      	cmp	r3, #6
 8008ed8:	d825      	bhi.n	8008f26 <_scanf_float+0x2f2>
 8008eda:	2d02      	cmp	r5, #2
 8008edc:	d836      	bhi.n	8008f4c <_scanf_float+0x318>
 8008ede:	455e      	cmp	r6, fp
 8008ee0:	f67f aee8 	bls.w	8008cb4 <_scanf_float+0x80>
 8008ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ee8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eec:	463a      	mov	r2, r7
 8008eee:	4640      	mov	r0, r8
 8008ef0:	4798      	blx	r3
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	e7f1      	b.n	8008ede <_scanf_float+0x2aa>
 8008efa:	9802      	ldr	r0, [sp, #8]
 8008efc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f04:	9002      	str	r0, [sp, #8]
 8008f06:	463a      	mov	r2, r7
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4798      	blx	r3
 8008f0c:	6923      	ldr	r3, [r4, #16]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008f16:	fa5f fa8a 	uxtb.w	sl, sl
 8008f1a:	f1ba 0f02 	cmp.w	sl, #2
 8008f1e:	d1ec      	bne.n	8008efa <_scanf_float+0x2c6>
 8008f20:	3d03      	subs	r5, #3
 8008f22:	b2ed      	uxtb	r5, r5
 8008f24:	1b76      	subs	r6, r6, r5
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	05da      	lsls	r2, r3, #23
 8008f2a:	d52f      	bpl.n	8008f8c <_scanf_float+0x358>
 8008f2c:	055b      	lsls	r3, r3, #21
 8008f2e:	d510      	bpl.n	8008f52 <_scanf_float+0x31e>
 8008f30:	455e      	cmp	r6, fp
 8008f32:	f67f aebf 	bls.w	8008cb4 <_scanf_float+0x80>
 8008f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4640      	mov	r0, r8
 8008f42:	4798      	blx	r3
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	e7f1      	b.n	8008f30 <_scanf_float+0x2fc>
 8008f4c:	46aa      	mov	sl, r5
 8008f4e:	9602      	str	r6, [sp, #8]
 8008f50:	e7df      	b.n	8008f12 <_scanf_float+0x2de>
 8008f52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f56:	6923      	ldr	r3, [r4, #16]
 8008f58:	2965      	cmp	r1, #101	; 0x65
 8008f5a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008f5e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	d00c      	beq.n	8008f80 <_scanf_float+0x34c>
 8008f66:	2945      	cmp	r1, #69	; 0x45
 8008f68:	d00a      	beq.n	8008f80 <_scanf_float+0x34c>
 8008f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f6e:	463a      	mov	r2, r7
 8008f70:	4640      	mov	r0, r8
 8008f72:	4798      	blx	r3
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	1eb5      	subs	r5, r6, #2
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f84:	463a      	mov	r2, r7
 8008f86:	4640      	mov	r0, r8
 8008f88:	4798      	blx	r3
 8008f8a:	462e      	mov	r6, r5
 8008f8c:	6825      	ldr	r5, [r4, #0]
 8008f8e:	f015 0510 	ands.w	r5, r5, #16
 8008f92:	d158      	bne.n	8009046 <_scanf_float+0x412>
 8008f94:	7035      	strb	r5, [r6, #0]
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa0:	d11c      	bne.n	8008fdc <_scanf_float+0x3a8>
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	454b      	cmp	r3, r9
 8008fa6:	eba3 0209 	sub.w	r2, r3, r9
 8008faa:	d124      	bne.n	8008ff6 <_scanf_float+0x3c2>
 8008fac:	2200      	movs	r2, #0
 8008fae:	4659      	mov	r1, fp
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	f000 ff19 	bl	8009de8 <_strtod_r>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	6821      	ldr	r1, [r4, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f011 0f02 	tst.w	r1, #2
 8008fc0:	ec57 6b10 	vmov	r6, r7, d0
 8008fc4:	f103 0204 	add.w	r2, r3, #4
 8008fc8:	d020      	beq.n	800900c <_scanf_float+0x3d8>
 8008fca:	9903      	ldr	r1, [sp, #12]
 8008fcc:	600a      	str	r2, [r1, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	e9c3 6700 	strd	r6, r7, [r3]
 8008fd4:	68e3      	ldr	r3, [r4, #12]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	60e3      	str	r3, [r4, #12]
 8008fda:	e66c      	b.n	8008cb6 <_scanf_float+0x82>
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0e4      	beq.n	8008fac <_scanf_float+0x378>
 8008fe2:	9905      	ldr	r1, [sp, #20]
 8008fe4:	230a      	movs	r3, #10
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	3101      	adds	r1, #1
 8008fea:	4640      	mov	r0, r8
 8008fec:	f000 ff84 	bl	8009ef8 <_strtol_r>
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	9e05      	ldr	r6, [sp, #20]
 8008ff4:	1ac2      	subs	r2, r0, r3
 8008ff6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008ffa:	429e      	cmp	r6, r3
 8008ffc:	bf28      	it	cs
 8008ffe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009002:	4912      	ldr	r1, [pc, #72]	; (800904c <_scanf_float+0x418>)
 8009004:	4630      	mov	r0, r6
 8009006:	f000 f831 	bl	800906c <siprintf>
 800900a:	e7cf      	b.n	8008fac <_scanf_float+0x378>
 800900c:	f011 0f04 	tst.w	r1, #4
 8009010:	9903      	ldr	r1, [sp, #12]
 8009012:	600a      	str	r2, [r1, #0]
 8009014:	d1db      	bne.n	8008fce <_scanf_float+0x39a>
 8009016:	f8d3 8000 	ldr.w	r8, [r3]
 800901a:	ee10 2a10 	vmov	r2, s0
 800901e:	ee10 0a10 	vmov	r0, s0
 8009022:	463b      	mov	r3, r7
 8009024:	4639      	mov	r1, r7
 8009026:	f7f7 fda1 	bl	8000b6c <__aeabi_dcmpun>
 800902a:	b128      	cbz	r0, 8009038 <_scanf_float+0x404>
 800902c:	4808      	ldr	r0, [pc, #32]	; (8009050 <_scanf_float+0x41c>)
 800902e:	f001 f863 	bl	800a0f8 <nanf>
 8009032:	ed88 0a00 	vstr	s0, [r8]
 8009036:	e7cd      	b.n	8008fd4 <_scanf_float+0x3a0>
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 fdf4 	bl	8000c28 <__aeabi_d2f>
 8009040:	f8c8 0000 	str.w	r0, [r8]
 8009044:	e7c6      	b.n	8008fd4 <_scanf_float+0x3a0>
 8009046:	2500      	movs	r5, #0
 8009048:	e635      	b.n	8008cb6 <_scanf_float+0x82>
 800904a:	bf00      	nop
 800904c:	0800d3f0 	.word	0x0800d3f0
 8009050:	0800d7df 	.word	0x0800d7df

08009054 <__malloc_lock>:
 8009054:	4801      	ldr	r0, [pc, #4]	; (800905c <__malloc_lock+0x8>)
 8009056:	f001 b835 	b.w	800a0c4 <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	200186c8 	.word	0x200186c8

08009060 <__malloc_unlock>:
 8009060:	4801      	ldr	r0, [pc, #4]	; (8009068 <__malloc_unlock+0x8>)
 8009062:	f001 b830 	b.w	800a0c6 <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	200186c8 	.word	0x200186c8

0800906c <siprintf>:
 800906c:	b40e      	push	{r1, r2, r3}
 800906e:	b500      	push	{lr}
 8009070:	b09c      	sub	sp, #112	; 0x70
 8009072:	ab1d      	add	r3, sp, #116	; 0x74
 8009074:	9002      	str	r0, [sp, #8]
 8009076:	9006      	str	r0, [sp, #24]
 8009078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800907c:	4809      	ldr	r0, [pc, #36]	; (80090a4 <siprintf+0x38>)
 800907e:	9107      	str	r1, [sp, #28]
 8009080:	9104      	str	r1, [sp, #16]
 8009082:	4909      	ldr	r1, [pc, #36]	; (80090a8 <siprintf+0x3c>)
 8009084:	f853 2b04 	ldr.w	r2, [r3], #4
 8009088:	9105      	str	r1, [sp, #20]
 800908a:	6800      	ldr	r0, [r0, #0]
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	a902      	add	r1, sp, #8
 8009090:	f002 fab2 	bl	800b5f8 <_svfiprintf_r>
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	b01c      	add	sp, #112	; 0x70
 800909c:	f85d eb04 	ldr.w	lr, [sp], #4
 80090a0:	b003      	add	sp, #12
 80090a2:	4770      	bx	lr
 80090a4:	200001f4 	.word	0x200001f4
 80090a8:	ffff0208 	.word	0xffff0208

080090ac <std>:
 80090ac:	2300      	movs	r3, #0
 80090ae:	b510      	push	{r4, lr}
 80090b0:	4604      	mov	r4, r0
 80090b2:	e9c0 3300 	strd	r3, r3, [r0]
 80090b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ba:	6083      	str	r3, [r0, #8]
 80090bc:	8181      	strh	r1, [r0, #12]
 80090be:	6643      	str	r3, [r0, #100]	; 0x64
 80090c0:	81c2      	strh	r2, [r0, #14]
 80090c2:	6183      	str	r3, [r0, #24]
 80090c4:	4619      	mov	r1, r3
 80090c6:	2208      	movs	r2, #8
 80090c8:	305c      	adds	r0, #92	; 0x5c
 80090ca:	f000 ffb5 	bl	800a038 <memset>
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <std+0x38>)
 80090d0:	6263      	str	r3, [r4, #36]	; 0x24
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <std+0x3c>)
 80090d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80090d6:	4b05      	ldr	r3, [pc, #20]	; (80090ec <std+0x40>)
 80090d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <std+0x44>)
 80090dc:	6224      	str	r4, [r4, #32]
 80090de:	6323      	str	r3, [r4, #48]	; 0x30
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	0800c557 	.word	0x0800c557
 80090e8:	0800c579 	.word	0x0800c579
 80090ec:	0800c5b1 	.word	0x0800c5b1
 80090f0:	0800c5d5 	.word	0x0800c5d5

080090f4 <stdio_exit_handler>:
 80090f4:	4a02      	ldr	r2, [pc, #8]	; (8009100 <stdio_exit_handler+0xc>)
 80090f6:	4903      	ldr	r1, [pc, #12]	; (8009104 <stdio_exit_handler+0x10>)
 80090f8:	4803      	ldr	r0, [pc, #12]	; (8009108 <stdio_exit_handler+0x14>)
 80090fa:	f000 beff 	b.w	8009efc <_fwalk_sglue>
 80090fe:	bf00      	nop
 8009100:	20000030 	.word	0x20000030
 8009104:	0800bbad 	.word	0x0800bbad
 8009108:	200001a8 	.word	0x200001a8

0800910c <cleanup_stdio>:
 800910c:	6841      	ldr	r1, [r0, #4]
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <cleanup_stdio+0x34>)
 8009110:	4299      	cmp	r1, r3
 8009112:	b510      	push	{r4, lr}
 8009114:	4604      	mov	r4, r0
 8009116:	d001      	beq.n	800911c <cleanup_stdio+0x10>
 8009118:	f002 fd48 	bl	800bbac <_fflush_r>
 800911c:	68a1      	ldr	r1, [r4, #8]
 800911e:	4b09      	ldr	r3, [pc, #36]	; (8009144 <cleanup_stdio+0x38>)
 8009120:	4299      	cmp	r1, r3
 8009122:	d002      	beq.n	800912a <cleanup_stdio+0x1e>
 8009124:	4620      	mov	r0, r4
 8009126:	f002 fd41 	bl	800bbac <_fflush_r>
 800912a:	68e1      	ldr	r1, [r4, #12]
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <cleanup_stdio+0x3c>)
 800912e:	4299      	cmp	r1, r3
 8009130:	d004      	beq.n	800913c <cleanup_stdio+0x30>
 8009132:	4620      	mov	r0, r4
 8009134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009138:	f002 bd38 	b.w	800bbac <_fflush_r>
 800913c:	bd10      	pop	{r4, pc}
 800913e:	bf00      	nop
 8009140:	2001858c 	.word	0x2001858c
 8009144:	200185f4 	.word	0x200185f4
 8009148:	2001865c 	.word	0x2001865c

0800914c <global_stdio_init.part.0>:
 800914c:	b510      	push	{r4, lr}
 800914e:	4b0b      	ldr	r3, [pc, #44]	; (800917c <global_stdio_init.part.0+0x30>)
 8009150:	4c0b      	ldr	r4, [pc, #44]	; (8009180 <global_stdio_init.part.0+0x34>)
 8009152:	4a0c      	ldr	r2, [pc, #48]	; (8009184 <global_stdio_init.part.0+0x38>)
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	4620      	mov	r0, r4
 8009158:	2200      	movs	r2, #0
 800915a:	2104      	movs	r1, #4
 800915c:	f7ff ffa6 	bl	80090ac <std>
 8009160:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009164:	2201      	movs	r2, #1
 8009166:	2109      	movs	r1, #9
 8009168:	f7ff ffa0 	bl	80090ac <std>
 800916c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009170:	2202      	movs	r2, #2
 8009172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009176:	2112      	movs	r1, #18
 8009178:	f7ff bf98 	b.w	80090ac <std>
 800917c:	200186c4 	.word	0x200186c4
 8009180:	2001858c 	.word	0x2001858c
 8009184:	080090f5 	.word	0x080090f5

08009188 <__sfp_lock_acquire>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sfp_lock_acquire+0x8>)
 800918a:	f000 bf9b 	b.w	800a0c4 <__retarget_lock_acquire_recursive>
 800918e:	bf00      	nop
 8009190:	200186c9 	.word	0x200186c9

08009194 <__sfp_lock_release>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__sfp_lock_release+0x8>)
 8009196:	f000 bf96 	b.w	800a0c6 <__retarget_lock_release_recursive>
 800919a:	bf00      	nop
 800919c:	200186c9 	.word	0x200186c9

080091a0 <__sinit>:
 80091a0:	b510      	push	{r4, lr}
 80091a2:	4604      	mov	r4, r0
 80091a4:	f7ff fff0 	bl	8009188 <__sfp_lock_acquire>
 80091a8:	6a23      	ldr	r3, [r4, #32]
 80091aa:	b11b      	cbz	r3, 80091b4 <__sinit+0x14>
 80091ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b0:	f7ff bff0 	b.w	8009194 <__sfp_lock_release>
 80091b4:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <__sinit+0x28>)
 80091b6:	6223      	str	r3, [r4, #32]
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <__sinit+0x2c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1f5      	bne.n	80091ac <__sinit+0xc>
 80091c0:	f7ff ffc4 	bl	800914c <global_stdio_init.part.0>
 80091c4:	e7f2      	b.n	80091ac <__sinit+0xc>
 80091c6:	bf00      	nop
 80091c8:	0800910d 	.word	0x0800910d
 80091cc:	200186c4 	.word	0x200186c4

080091d0 <sulp>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	ec45 4b10 	vmov	d0, r4, r5
 80091da:	4616      	mov	r6, r2
 80091dc:	f003 f87a 	bl	800c2d4 <__ulp>
 80091e0:	ec51 0b10 	vmov	r0, r1, d0
 80091e4:	b17e      	cbz	r6, 8009206 <sulp+0x36>
 80091e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dd09      	ble.n	8009206 <sulp+0x36>
 80091f2:	051b      	lsls	r3, r3, #20
 80091f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80091f8:	2400      	movs	r4, #0
 80091fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80091fe:	4622      	mov	r2, r4
 8009200:	462b      	mov	r3, r5
 8009202:	f7f7 fa19 	bl	8000638 <__aeabi_dmul>
 8009206:	bd70      	pop	{r4, r5, r6, pc}

08009208 <_strtod_l>:
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	ed2d 8b02 	vpush	{d8}
 8009210:	b09b      	sub	sp, #108	; 0x6c
 8009212:	4604      	mov	r4, r0
 8009214:	9213      	str	r2, [sp, #76]	; 0x4c
 8009216:	2200      	movs	r2, #0
 8009218:	9216      	str	r2, [sp, #88]	; 0x58
 800921a:	460d      	mov	r5, r1
 800921c:	f04f 0800 	mov.w	r8, #0
 8009220:	f04f 0900 	mov.w	r9, #0
 8009224:	460a      	mov	r2, r1
 8009226:	9215      	str	r2, [sp, #84]	; 0x54
 8009228:	7811      	ldrb	r1, [r2, #0]
 800922a:	292b      	cmp	r1, #43	; 0x2b
 800922c:	d04c      	beq.n	80092c8 <_strtod_l+0xc0>
 800922e:	d83a      	bhi.n	80092a6 <_strtod_l+0x9e>
 8009230:	290d      	cmp	r1, #13
 8009232:	d834      	bhi.n	800929e <_strtod_l+0x96>
 8009234:	2908      	cmp	r1, #8
 8009236:	d834      	bhi.n	80092a2 <_strtod_l+0x9a>
 8009238:	2900      	cmp	r1, #0
 800923a:	d03d      	beq.n	80092b8 <_strtod_l+0xb0>
 800923c:	2200      	movs	r2, #0
 800923e:	920a      	str	r2, [sp, #40]	; 0x28
 8009240:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009242:	7832      	ldrb	r2, [r6, #0]
 8009244:	2a30      	cmp	r2, #48	; 0x30
 8009246:	f040 80b4 	bne.w	80093b2 <_strtod_l+0x1aa>
 800924a:	7872      	ldrb	r2, [r6, #1]
 800924c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009250:	2a58      	cmp	r2, #88	; 0x58
 8009252:	d170      	bne.n	8009336 <_strtod_l+0x12e>
 8009254:	9302      	str	r3, [sp, #8]
 8009256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	ab16      	add	r3, sp, #88	; 0x58
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	4a8e      	ldr	r2, [pc, #568]	; (8009498 <_strtod_l+0x290>)
 8009260:	ab17      	add	r3, sp, #92	; 0x5c
 8009262:	a915      	add	r1, sp, #84	; 0x54
 8009264:	4620      	mov	r0, r4
 8009266:	f001 fe7d 	bl	800af64 <__gethex>
 800926a:	f010 070f 	ands.w	r7, r0, #15
 800926e:	4605      	mov	r5, r0
 8009270:	d005      	beq.n	800927e <_strtod_l+0x76>
 8009272:	2f06      	cmp	r7, #6
 8009274:	d12a      	bne.n	80092cc <_strtod_l+0xc4>
 8009276:	3601      	adds	r6, #1
 8009278:	2300      	movs	r3, #0
 800927a:	9615      	str	r6, [sp, #84]	; 0x54
 800927c:	930a      	str	r3, [sp, #40]	; 0x28
 800927e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009280:	2b00      	cmp	r3, #0
 8009282:	f040 857f 	bne.w	8009d84 <_strtod_l+0xb7c>
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	b1db      	cbz	r3, 80092c2 <_strtod_l+0xba>
 800928a:	4642      	mov	r2, r8
 800928c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009290:	ec43 2b10 	vmov	d0, r2, r3
 8009294:	b01b      	add	sp, #108	; 0x6c
 8009296:	ecbd 8b02 	vpop	{d8}
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	2920      	cmp	r1, #32
 80092a0:	d1cc      	bne.n	800923c <_strtod_l+0x34>
 80092a2:	3201      	adds	r2, #1
 80092a4:	e7bf      	b.n	8009226 <_strtod_l+0x1e>
 80092a6:	292d      	cmp	r1, #45	; 0x2d
 80092a8:	d1c8      	bne.n	800923c <_strtod_l+0x34>
 80092aa:	2101      	movs	r1, #1
 80092ac:	910a      	str	r1, [sp, #40]	; 0x28
 80092ae:	1c51      	adds	r1, r2, #1
 80092b0:	9115      	str	r1, [sp, #84]	; 0x54
 80092b2:	7852      	ldrb	r2, [r2, #1]
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	d1c3      	bne.n	8009240 <_strtod_l+0x38>
 80092b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092ba:	9515      	str	r5, [sp, #84]	; 0x54
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 855f 	bne.w	8009d80 <_strtod_l+0xb78>
 80092c2:	4642      	mov	r2, r8
 80092c4:	464b      	mov	r3, r9
 80092c6:	e7e3      	b.n	8009290 <_strtod_l+0x88>
 80092c8:	2100      	movs	r1, #0
 80092ca:	e7ef      	b.n	80092ac <_strtod_l+0xa4>
 80092cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092ce:	b13a      	cbz	r2, 80092e0 <_strtod_l+0xd8>
 80092d0:	2135      	movs	r1, #53	; 0x35
 80092d2:	a818      	add	r0, sp, #96	; 0x60
 80092d4:	f003 f8fb 	bl	800c4ce <__copybits>
 80092d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092da:	4620      	mov	r0, r4
 80092dc:	f002 fcce 	bl	800bc7c <_Bfree>
 80092e0:	3f01      	subs	r7, #1
 80092e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092e4:	2f04      	cmp	r7, #4
 80092e6:	d806      	bhi.n	80092f6 <_strtod_l+0xee>
 80092e8:	e8df f007 	tbb	[pc, r7]
 80092ec:	201d0314 	.word	0x201d0314
 80092f0:	14          	.byte	0x14
 80092f1:	00          	.byte	0x00
 80092f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80092f6:	05e9      	lsls	r1, r5, #23
 80092f8:	bf48      	it	mi
 80092fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80092fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009302:	0d1b      	lsrs	r3, r3, #20
 8009304:	051b      	lsls	r3, r3, #20
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1b9      	bne.n	800927e <_strtod_l+0x76>
 800930a:	f000 feb1 	bl	800a070 <__errno>
 800930e:	2322      	movs	r3, #34	; 0x22
 8009310:	6003      	str	r3, [r0, #0]
 8009312:	e7b4      	b.n	800927e <_strtod_l+0x76>
 8009314:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009318:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800931c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009320:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009324:	e7e7      	b.n	80092f6 <_strtod_l+0xee>
 8009326:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80094a0 <_strtod_l+0x298>
 800932a:	e7e4      	b.n	80092f6 <_strtod_l+0xee>
 800932c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009330:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009334:	e7df      	b.n	80092f6 <_strtod_l+0xee>
 8009336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	9215      	str	r2, [sp, #84]	; 0x54
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	2b30      	cmp	r3, #48	; 0x30
 8009340:	d0f9      	beq.n	8009336 <_strtod_l+0x12e>
 8009342:	2b00      	cmp	r3, #0
 8009344:	d09b      	beq.n	800927e <_strtod_l+0x76>
 8009346:	2301      	movs	r3, #1
 8009348:	f04f 0a00 	mov.w	sl, #0
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009350:	930b      	str	r3, [sp, #44]	; 0x2c
 8009352:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009356:	46d3      	mov	fp, sl
 8009358:	220a      	movs	r2, #10
 800935a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800935c:	7806      	ldrb	r6, [r0, #0]
 800935e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009362:	b2d9      	uxtb	r1, r3
 8009364:	2909      	cmp	r1, #9
 8009366:	d926      	bls.n	80093b6 <_strtod_l+0x1ae>
 8009368:	494c      	ldr	r1, [pc, #304]	; (800949c <_strtod_l+0x294>)
 800936a:	2201      	movs	r2, #1
 800936c:	f000 fe52 	bl	800a014 <strncmp>
 8009370:	2800      	cmp	r0, #0
 8009372:	d030      	beq.n	80093d6 <_strtod_l+0x1ce>
 8009374:	2000      	movs	r0, #0
 8009376:	4632      	mov	r2, r6
 8009378:	9005      	str	r0, [sp, #20]
 800937a:	465e      	mov	r6, fp
 800937c:	4603      	mov	r3, r0
 800937e:	2a65      	cmp	r2, #101	; 0x65
 8009380:	d001      	beq.n	8009386 <_strtod_l+0x17e>
 8009382:	2a45      	cmp	r2, #69	; 0x45
 8009384:	d113      	bne.n	80093ae <_strtod_l+0x1a6>
 8009386:	b91e      	cbnz	r6, 8009390 <_strtod_l+0x188>
 8009388:	9a04      	ldr	r2, [sp, #16]
 800938a:	4302      	orrs	r2, r0
 800938c:	d094      	beq.n	80092b8 <_strtod_l+0xb0>
 800938e:	2600      	movs	r6, #0
 8009390:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009392:	1c6a      	adds	r2, r5, #1
 8009394:	9215      	str	r2, [sp, #84]	; 0x54
 8009396:	786a      	ldrb	r2, [r5, #1]
 8009398:	2a2b      	cmp	r2, #43	; 0x2b
 800939a:	d074      	beq.n	8009486 <_strtod_l+0x27e>
 800939c:	2a2d      	cmp	r2, #45	; 0x2d
 800939e:	d078      	beq.n	8009492 <_strtod_l+0x28a>
 80093a0:	f04f 0c00 	mov.w	ip, #0
 80093a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80093a8:	2909      	cmp	r1, #9
 80093aa:	d97f      	bls.n	80094ac <_strtod_l+0x2a4>
 80093ac:	9515      	str	r5, [sp, #84]	; 0x54
 80093ae:	2700      	movs	r7, #0
 80093b0:	e09e      	b.n	80094f0 <_strtod_l+0x2e8>
 80093b2:	2300      	movs	r3, #0
 80093b4:	e7c8      	b.n	8009348 <_strtod_l+0x140>
 80093b6:	f1bb 0f08 	cmp.w	fp, #8
 80093ba:	bfd8      	it	le
 80093bc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80093be:	f100 0001 	add.w	r0, r0, #1
 80093c2:	bfda      	itte	le
 80093c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80093c8:	9309      	strle	r3, [sp, #36]	; 0x24
 80093ca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80093ce:	f10b 0b01 	add.w	fp, fp, #1
 80093d2:	9015      	str	r0, [sp, #84]	; 0x54
 80093d4:	e7c1      	b.n	800935a <_strtod_l+0x152>
 80093d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	9215      	str	r2, [sp, #84]	; 0x54
 80093dc:	785a      	ldrb	r2, [r3, #1]
 80093de:	f1bb 0f00 	cmp.w	fp, #0
 80093e2:	d037      	beq.n	8009454 <_strtod_l+0x24c>
 80093e4:	9005      	str	r0, [sp, #20]
 80093e6:	465e      	mov	r6, fp
 80093e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d912      	bls.n	8009416 <_strtod_l+0x20e>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e7c4      	b.n	800937e <_strtod_l+0x176>
 80093f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	9215      	str	r2, [sp, #84]	; 0x54
 80093fa:	785a      	ldrb	r2, [r3, #1]
 80093fc:	3001      	adds	r0, #1
 80093fe:	2a30      	cmp	r2, #48	; 0x30
 8009400:	d0f8      	beq.n	80093f4 <_strtod_l+0x1ec>
 8009402:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009406:	2b08      	cmp	r3, #8
 8009408:	f200 84c1 	bhi.w	8009d8e <_strtod_l+0xb86>
 800940c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800940e:	9005      	str	r0, [sp, #20]
 8009410:	2000      	movs	r0, #0
 8009412:	930b      	str	r3, [sp, #44]	; 0x2c
 8009414:	4606      	mov	r6, r0
 8009416:	3a30      	subs	r2, #48	; 0x30
 8009418:	f100 0301 	add.w	r3, r0, #1
 800941c:	d014      	beq.n	8009448 <_strtod_l+0x240>
 800941e:	9905      	ldr	r1, [sp, #20]
 8009420:	4419      	add	r1, r3
 8009422:	9105      	str	r1, [sp, #20]
 8009424:	4633      	mov	r3, r6
 8009426:	eb00 0c06 	add.w	ip, r0, r6
 800942a:	210a      	movs	r1, #10
 800942c:	4563      	cmp	r3, ip
 800942e:	d113      	bne.n	8009458 <_strtod_l+0x250>
 8009430:	1833      	adds	r3, r6, r0
 8009432:	2b08      	cmp	r3, #8
 8009434:	f106 0601 	add.w	r6, r6, #1
 8009438:	4406      	add	r6, r0
 800943a:	dc1a      	bgt.n	8009472 <_strtod_l+0x26a>
 800943c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800943e:	230a      	movs	r3, #10
 8009440:	fb03 2301 	mla	r3, r3, r1, r2
 8009444:	9309      	str	r3, [sp, #36]	; 0x24
 8009446:	2300      	movs	r3, #0
 8009448:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800944a:	1c51      	adds	r1, r2, #1
 800944c:	9115      	str	r1, [sp, #84]	; 0x54
 800944e:	7852      	ldrb	r2, [r2, #1]
 8009450:	4618      	mov	r0, r3
 8009452:	e7c9      	b.n	80093e8 <_strtod_l+0x1e0>
 8009454:	4658      	mov	r0, fp
 8009456:	e7d2      	b.n	80093fe <_strtod_l+0x1f6>
 8009458:	2b08      	cmp	r3, #8
 800945a:	f103 0301 	add.w	r3, r3, #1
 800945e:	dc03      	bgt.n	8009468 <_strtod_l+0x260>
 8009460:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009462:	434f      	muls	r7, r1
 8009464:	9709      	str	r7, [sp, #36]	; 0x24
 8009466:	e7e1      	b.n	800942c <_strtod_l+0x224>
 8009468:	2b10      	cmp	r3, #16
 800946a:	bfd8      	it	le
 800946c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009470:	e7dc      	b.n	800942c <_strtod_l+0x224>
 8009472:	2e10      	cmp	r6, #16
 8009474:	bfdc      	itt	le
 8009476:	230a      	movle	r3, #10
 8009478:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800947c:	e7e3      	b.n	8009446 <_strtod_l+0x23e>
 800947e:	2300      	movs	r3, #0
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	2301      	movs	r3, #1
 8009484:	e780      	b.n	8009388 <_strtod_l+0x180>
 8009486:	f04f 0c00 	mov.w	ip, #0
 800948a:	1caa      	adds	r2, r5, #2
 800948c:	9215      	str	r2, [sp, #84]	; 0x54
 800948e:	78aa      	ldrb	r2, [r5, #2]
 8009490:	e788      	b.n	80093a4 <_strtod_l+0x19c>
 8009492:	f04f 0c01 	mov.w	ip, #1
 8009496:	e7f8      	b.n	800948a <_strtod_l+0x282>
 8009498:	0800d3f8 	.word	0x0800d3f8
 800949c:	0800d3f5 	.word	0x0800d3f5
 80094a0:	7ff00000 	.word	0x7ff00000
 80094a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094a6:	1c51      	adds	r1, r2, #1
 80094a8:	9115      	str	r1, [sp, #84]	; 0x54
 80094aa:	7852      	ldrb	r2, [r2, #1]
 80094ac:	2a30      	cmp	r2, #48	; 0x30
 80094ae:	d0f9      	beq.n	80094a4 <_strtod_l+0x29c>
 80094b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80094b4:	2908      	cmp	r1, #8
 80094b6:	f63f af7a 	bhi.w	80093ae <_strtod_l+0x1a6>
 80094ba:	3a30      	subs	r2, #48	; 0x30
 80094bc:	9208      	str	r2, [sp, #32]
 80094be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094c0:	920c      	str	r2, [sp, #48]	; 0x30
 80094c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094c4:	1c57      	adds	r7, r2, #1
 80094c6:	9715      	str	r7, [sp, #84]	; 0x54
 80094c8:	7852      	ldrb	r2, [r2, #1]
 80094ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80094ce:	f1be 0f09 	cmp.w	lr, #9
 80094d2:	d938      	bls.n	8009546 <_strtod_l+0x33e>
 80094d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094d6:	1a7f      	subs	r7, r7, r1
 80094d8:	2f08      	cmp	r7, #8
 80094da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80094de:	dc03      	bgt.n	80094e8 <_strtod_l+0x2e0>
 80094e0:	9908      	ldr	r1, [sp, #32]
 80094e2:	428f      	cmp	r7, r1
 80094e4:	bfa8      	it	ge
 80094e6:	460f      	movge	r7, r1
 80094e8:	f1bc 0f00 	cmp.w	ip, #0
 80094ec:	d000      	beq.n	80094f0 <_strtod_l+0x2e8>
 80094ee:	427f      	negs	r7, r7
 80094f0:	2e00      	cmp	r6, #0
 80094f2:	d14f      	bne.n	8009594 <_strtod_l+0x38c>
 80094f4:	9904      	ldr	r1, [sp, #16]
 80094f6:	4301      	orrs	r1, r0
 80094f8:	f47f aec1 	bne.w	800927e <_strtod_l+0x76>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f47f aedb 	bne.w	80092b8 <_strtod_l+0xb0>
 8009502:	2a69      	cmp	r2, #105	; 0x69
 8009504:	d029      	beq.n	800955a <_strtod_l+0x352>
 8009506:	dc26      	bgt.n	8009556 <_strtod_l+0x34e>
 8009508:	2a49      	cmp	r2, #73	; 0x49
 800950a:	d026      	beq.n	800955a <_strtod_l+0x352>
 800950c:	2a4e      	cmp	r2, #78	; 0x4e
 800950e:	f47f aed3 	bne.w	80092b8 <_strtod_l+0xb0>
 8009512:	499b      	ldr	r1, [pc, #620]	; (8009780 <_strtod_l+0x578>)
 8009514:	a815      	add	r0, sp, #84	; 0x54
 8009516:	f001 ff65 	bl	800b3e4 <__match>
 800951a:	2800      	cmp	r0, #0
 800951c:	f43f aecc 	beq.w	80092b8 <_strtod_l+0xb0>
 8009520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	2b28      	cmp	r3, #40	; 0x28
 8009526:	d12f      	bne.n	8009588 <_strtod_l+0x380>
 8009528:	4996      	ldr	r1, [pc, #600]	; (8009784 <_strtod_l+0x57c>)
 800952a:	aa18      	add	r2, sp, #96	; 0x60
 800952c:	a815      	add	r0, sp, #84	; 0x54
 800952e:	f001 ff6d 	bl	800b40c <__hexnan>
 8009532:	2805      	cmp	r0, #5
 8009534:	d128      	bne.n	8009588 <_strtod_l+0x380>
 8009536:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800953c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009540:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009544:	e69b      	b.n	800927e <_strtod_l+0x76>
 8009546:	9f08      	ldr	r7, [sp, #32]
 8009548:	210a      	movs	r1, #10
 800954a:	fb01 2107 	mla	r1, r1, r7, r2
 800954e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009552:	9208      	str	r2, [sp, #32]
 8009554:	e7b5      	b.n	80094c2 <_strtod_l+0x2ba>
 8009556:	2a6e      	cmp	r2, #110	; 0x6e
 8009558:	e7d9      	b.n	800950e <_strtod_l+0x306>
 800955a:	498b      	ldr	r1, [pc, #556]	; (8009788 <_strtod_l+0x580>)
 800955c:	a815      	add	r0, sp, #84	; 0x54
 800955e:	f001 ff41 	bl	800b3e4 <__match>
 8009562:	2800      	cmp	r0, #0
 8009564:	f43f aea8 	beq.w	80092b8 <_strtod_l+0xb0>
 8009568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956a:	4988      	ldr	r1, [pc, #544]	; (800978c <_strtod_l+0x584>)
 800956c:	3b01      	subs	r3, #1
 800956e:	a815      	add	r0, sp, #84	; 0x54
 8009570:	9315      	str	r3, [sp, #84]	; 0x54
 8009572:	f001 ff37 	bl	800b3e4 <__match>
 8009576:	b910      	cbnz	r0, 800957e <_strtod_l+0x376>
 8009578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800957a:	3301      	adds	r3, #1
 800957c:	9315      	str	r3, [sp, #84]	; 0x54
 800957e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800979c <_strtod_l+0x594>
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	e67a      	b.n	800927e <_strtod_l+0x76>
 8009588:	4881      	ldr	r0, [pc, #516]	; (8009790 <_strtod_l+0x588>)
 800958a:	f000 fdad 	bl	800a0e8 <nan>
 800958e:	ec59 8b10 	vmov	r8, r9, d0
 8009592:	e674      	b.n	800927e <_strtod_l+0x76>
 8009594:	9b05      	ldr	r3, [sp, #20]
 8009596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009598:	1afb      	subs	r3, r7, r3
 800959a:	f1bb 0f00 	cmp.w	fp, #0
 800959e:	bf08      	it	eq
 80095a0:	46b3      	moveq	fp, r6
 80095a2:	2e10      	cmp	r6, #16
 80095a4:	9308      	str	r3, [sp, #32]
 80095a6:	4635      	mov	r5, r6
 80095a8:	bfa8      	it	ge
 80095aa:	2510      	movge	r5, #16
 80095ac:	f7f6 ffca 	bl	8000544 <__aeabi_ui2d>
 80095b0:	2e09      	cmp	r6, #9
 80095b2:	4680      	mov	r8, r0
 80095b4:	4689      	mov	r9, r1
 80095b6:	dd13      	ble.n	80095e0 <_strtod_l+0x3d8>
 80095b8:	4b76      	ldr	r3, [pc, #472]	; (8009794 <_strtod_l+0x58c>)
 80095ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80095be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80095c2:	f7f7 f839 	bl	8000638 <__aeabi_dmul>
 80095c6:	4680      	mov	r8, r0
 80095c8:	4650      	mov	r0, sl
 80095ca:	4689      	mov	r9, r1
 80095cc:	f7f6 ffba 	bl	8000544 <__aeabi_ui2d>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4640      	mov	r0, r8
 80095d6:	4649      	mov	r1, r9
 80095d8:	f7f6 fe78 	bl	80002cc <__adddf3>
 80095dc:	4680      	mov	r8, r0
 80095de:	4689      	mov	r9, r1
 80095e0:	2e0f      	cmp	r6, #15
 80095e2:	dc38      	bgt.n	8009656 <_strtod_l+0x44e>
 80095e4:	9b08      	ldr	r3, [sp, #32]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f43f ae49 	beq.w	800927e <_strtod_l+0x76>
 80095ec:	dd24      	ble.n	8009638 <_strtod_l+0x430>
 80095ee:	2b16      	cmp	r3, #22
 80095f0:	dc0b      	bgt.n	800960a <_strtod_l+0x402>
 80095f2:	4968      	ldr	r1, [pc, #416]	; (8009794 <_strtod_l+0x58c>)
 80095f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095fc:	4642      	mov	r2, r8
 80095fe:	464b      	mov	r3, r9
 8009600:	f7f7 f81a 	bl	8000638 <__aeabi_dmul>
 8009604:	4680      	mov	r8, r0
 8009606:	4689      	mov	r9, r1
 8009608:	e639      	b.n	800927e <_strtod_l+0x76>
 800960a:	9a08      	ldr	r2, [sp, #32]
 800960c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009610:	4293      	cmp	r3, r2
 8009612:	db20      	blt.n	8009656 <_strtod_l+0x44e>
 8009614:	4c5f      	ldr	r4, [pc, #380]	; (8009794 <_strtod_l+0x58c>)
 8009616:	f1c6 060f 	rsb	r6, r6, #15
 800961a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800961e:	4642      	mov	r2, r8
 8009620:	464b      	mov	r3, r9
 8009622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009626:	f7f7 f807 	bl	8000638 <__aeabi_dmul>
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	1b9e      	subs	r6, r3, r6
 800962e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009632:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009636:	e7e3      	b.n	8009600 <_strtod_l+0x3f8>
 8009638:	9b08      	ldr	r3, [sp, #32]
 800963a:	3316      	adds	r3, #22
 800963c:	db0b      	blt.n	8009656 <_strtod_l+0x44e>
 800963e:	9b05      	ldr	r3, [sp, #20]
 8009640:	1bdf      	subs	r7, r3, r7
 8009642:	4b54      	ldr	r3, [pc, #336]	; (8009794 <_strtod_l+0x58c>)
 8009644:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f7 f91c 	bl	800088c <__aeabi_ddiv>
 8009654:	e7d6      	b.n	8009604 <_strtod_l+0x3fc>
 8009656:	9b08      	ldr	r3, [sp, #32]
 8009658:	1b75      	subs	r5, r6, r5
 800965a:	441d      	add	r5, r3
 800965c:	2d00      	cmp	r5, #0
 800965e:	dd70      	ble.n	8009742 <_strtod_l+0x53a>
 8009660:	f015 030f 	ands.w	r3, r5, #15
 8009664:	d00a      	beq.n	800967c <_strtod_l+0x474>
 8009666:	494b      	ldr	r1, [pc, #300]	; (8009794 <_strtod_l+0x58c>)
 8009668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009674:	f7f6 ffe0 	bl	8000638 <__aeabi_dmul>
 8009678:	4680      	mov	r8, r0
 800967a:	4689      	mov	r9, r1
 800967c:	f035 050f 	bics.w	r5, r5, #15
 8009680:	d04d      	beq.n	800971e <_strtod_l+0x516>
 8009682:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009686:	dd22      	ble.n	80096ce <_strtod_l+0x4c6>
 8009688:	2500      	movs	r5, #0
 800968a:	46ab      	mov	fp, r5
 800968c:	9509      	str	r5, [sp, #36]	; 0x24
 800968e:	9505      	str	r5, [sp, #20]
 8009690:	2322      	movs	r3, #34	; 0x22
 8009692:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800979c <_strtod_l+0x594>
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	f04f 0800 	mov.w	r8, #0
 800969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f43f aded 	beq.w	800927e <_strtod_l+0x76>
 80096a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096a6:	4620      	mov	r0, r4
 80096a8:	f002 fae8 	bl	800bc7c <_Bfree>
 80096ac:	9905      	ldr	r1, [sp, #20]
 80096ae:	4620      	mov	r0, r4
 80096b0:	f002 fae4 	bl	800bc7c <_Bfree>
 80096b4:	4659      	mov	r1, fp
 80096b6:	4620      	mov	r0, r4
 80096b8:	f002 fae0 	bl	800bc7c <_Bfree>
 80096bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096be:	4620      	mov	r0, r4
 80096c0:	f002 fadc 	bl	800bc7c <_Bfree>
 80096c4:	4629      	mov	r1, r5
 80096c6:	4620      	mov	r0, r4
 80096c8:	f002 fad8 	bl	800bc7c <_Bfree>
 80096cc:	e5d7      	b.n	800927e <_strtod_l+0x76>
 80096ce:	4b32      	ldr	r3, [pc, #200]	; (8009798 <_strtod_l+0x590>)
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	2300      	movs	r3, #0
 80096d4:	112d      	asrs	r5, r5, #4
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	469a      	mov	sl, r3
 80096dc:	2d01      	cmp	r5, #1
 80096de:	dc21      	bgt.n	8009724 <_strtod_l+0x51c>
 80096e0:	b10b      	cbz	r3, 80096e6 <_strtod_l+0x4de>
 80096e2:	4680      	mov	r8, r0
 80096e4:	4689      	mov	r9, r1
 80096e6:	492c      	ldr	r1, [pc, #176]	; (8009798 <_strtod_l+0x590>)
 80096e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80096ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80096f0:	4642      	mov	r2, r8
 80096f2:	464b      	mov	r3, r9
 80096f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f8:	f7f6 ff9e 	bl	8000638 <__aeabi_dmul>
 80096fc:	4b27      	ldr	r3, [pc, #156]	; (800979c <_strtod_l+0x594>)
 80096fe:	460a      	mov	r2, r1
 8009700:	400b      	ands	r3, r1
 8009702:	4927      	ldr	r1, [pc, #156]	; (80097a0 <_strtod_l+0x598>)
 8009704:	428b      	cmp	r3, r1
 8009706:	4680      	mov	r8, r0
 8009708:	d8be      	bhi.n	8009688 <_strtod_l+0x480>
 800970a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800970e:	428b      	cmp	r3, r1
 8009710:	bf86      	itte	hi
 8009712:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80097a4 <_strtod_l+0x59c>
 8009716:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800971a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800971e:	2300      	movs	r3, #0
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	e07b      	b.n	800981c <_strtod_l+0x614>
 8009724:	07ea      	lsls	r2, r5, #31
 8009726:	d505      	bpl.n	8009734 <_strtod_l+0x52c>
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f7f6 ff83 	bl	8000638 <__aeabi_dmul>
 8009732:	2301      	movs	r3, #1
 8009734:	9a04      	ldr	r2, [sp, #16]
 8009736:	3208      	adds	r2, #8
 8009738:	f10a 0a01 	add.w	sl, sl, #1
 800973c:	106d      	asrs	r5, r5, #1
 800973e:	9204      	str	r2, [sp, #16]
 8009740:	e7cc      	b.n	80096dc <_strtod_l+0x4d4>
 8009742:	d0ec      	beq.n	800971e <_strtod_l+0x516>
 8009744:	426d      	negs	r5, r5
 8009746:	f015 020f 	ands.w	r2, r5, #15
 800974a:	d00a      	beq.n	8009762 <_strtod_l+0x55a>
 800974c:	4b11      	ldr	r3, [pc, #68]	; (8009794 <_strtod_l+0x58c>)
 800974e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009752:	4640      	mov	r0, r8
 8009754:	4649      	mov	r1, r9
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f7 f897 	bl	800088c <__aeabi_ddiv>
 800975e:	4680      	mov	r8, r0
 8009760:	4689      	mov	r9, r1
 8009762:	112d      	asrs	r5, r5, #4
 8009764:	d0db      	beq.n	800971e <_strtod_l+0x516>
 8009766:	2d1f      	cmp	r5, #31
 8009768:	dd1e      	ble.n	80097a8 <_strtod_l+0x5a0>
 800976a:	2500      	movs	r5, #0
 800976c:	46ab      	mov	fp, r5
 800976e:	9509      	str	r5, [sp, #36]	; 0x24
 8009770:	9505      	str	r5, [sp, #20]
 8009772:	2322      	movs	r3, #34	; 0x22
 8009774:	f04f 0800 	mov.w	r8, #0
 8009778:	f04f 0900 	mov.w	r9, #0
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	e78d      	b.n	800969c <_strtod_l+0x494>
 8009780:	0800d3c9 	.word	0x0800d3c9
 8009784:	0800d40c 	.word	0x0800d40c
 8009788:	0800d3c1 	.word	0x0800d3c1
 800978c:	0800d554 	.word	0x0800d554
 8009790:	0800d7df 	.word	0x0800d7df
 8009794:	0800d6d0 	.word	0x0800d6d0
 8009798:	0800d6a8 	.word	0x0800d6a8
 800979c:	7ff00000 	.word	0x7ff00000
 80097a0:	7ca00000 	.word	0x7ca00000
 80097a4:	7fefffff 	.word	0x7fefffff
 80097a8:	f015 0310 	ands.w	r3, r5, #16
 80097ac:	bf18      	it	ne
 80097ae:	236a      	movne	r3, #106	; 0x6a
 80097b0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009b54 <_strtod_l+0x94c>
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	4640      	mov	r0, r8
 80097b8:	4649      	mov	r1, r9
 80097ba:	2300      	movs	r3, #0
 80097bc:	07ea      	lsls	r2, r5, #31
 80097be:	d504      	bpl.n	80097ca <_strtod_l+0x5c2>
 80097c0:	e9da 2300 	ldrd	r2, r3, [sl]
 80097c4:	f7f6 ff38 	bl	8000638 <__aeabi_dmul>
 80097c8:	2301      	movs	r3, #1
 80097ca:	106d      	asrs	r5, r5, #1
 80097cc:	f10a 0a08 	add.w	sl, sl, #8
 80097d0:	d1f4      	bne.n	80097bc <_strtod_l+0x5b4>
 80097d2:	b10b      	cbz	r3, 80097d8 <_strtod_l+0x5d0>
 80097d4:	4680      	mov	r8, r0
 80097d6:	4689      	mov	r9, r1
 80097d8:	9b04      	ldr	r3, [sp, #16]
 80097da:	b1bb      	cbz	r3, 800980c <_strtod_l+0x604>
 80097dc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80097e0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	4649      	mov	r1, r9
 80097e8:	dd10      	ble.n	800980c <_strtod_l+0x604>
 80097ea:	2b1f      	cmp	r3, #31
 80097ec:	f340 811e 	ble.w	8009a2c <_strtod_l+0x824>
 80097f0:	2b34      	cmp	r3, #52	; 0x34
 80097f2:	bfde      	ittt	le
 80097f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80097f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80097fc:	4093      	lslle	r3, r2
 80097fe:	f04f 0800 	mov.w	r8, #0
 8009802:	bfcc      	ite	gt
 8009804:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009808:	ea03 0901 	andle.w	r9, r3, r1
 800980c:	2200      	movs	r2, #0
 800980e:	2300      	movs	r3, #0
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f7 f978 	bl	8000b08 <__aeabi_dcmpeq>
 8009818:	2800      	cmp	r0, #0
 800981a:	d1a6      	bne.n	800976a <_strtod_l+0x562>
 800981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009822:	4633      	mov	r3, r6
 8009824:	465a      	mov	r2, fp
 8009826:	4620      	mov	r0, r4
 8009828:	f002 fa90 	bl	800bd4c <__s2b>
 800982c:	9009      	str	r0, [sp, #36]	; 0x24
 800982e:	2800      	cmp	r0, #0
 8009830:	f43f af2a 	beq.w	8009688 <_strtod_l+0x480>
 8009834:	9a08      	ldr	r2, [sp, #32]
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	2a00      	cmp	r2, #0
 800983a:	eba3 0307 	sub.w	r3, r3, r7
 800983e:	bfa8      	it	ge
 8009840:	2300      	movge	r3, #0
 8009842:	930c      	str	r3, [sp, #48]	; 0x30
 8009844:	2500      	movs	r5, #0
 8009846:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800984a:	9312      	str	r3, [sp, #72]	; 0x48
 800984c:	46ab      	mov	fp, r5
 800984e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009850:	4620      	mov	r0, r4
 8009852:	6859      	ldr	r1, [r3, #4]
 8009854:	f002 f9d2 	bl	800bbfc <_Balloc>
 8009858:	9005      	str	r0, [sp, #20]
 800985a:	2800      	cmp	r0, #0
 800985c:	f43f af18 	beq.w	8009690 <_strtod_l+0x488>
 8009860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	3202      	adds	r2, #2
 8009866:	f103 010c 	add.w	r1, r3, #12
 800986a:	0092      	lsls	r2, r2, #2
 800986c:	300c      	adds	r0, #12
 800986e:	f000 fc2b 	bl	800a0c8 <memcpy>
 8009872:	ec49 8b10 	vmov	d0, r8, r9
 8009876:	aa18      	add	r2, sp, #96	; 0x60
 8009878:	a917      	add	r1, sp, #92	; 0x5c
 800987a:	4620      	mov	r0, r4
 800987c:	f002 fd9a 	bl	800c3b4 <__d2b>
 8009880:	ec49 8b18 	vmov	d8, r8, r9
 8009884:	9016      	str	r0, [sp, #88]	; 0x58
 8009886:	2800      	cmp	r0, #0
 8009888:	f43f af02 	beq.w	8009690 <_strtod_l+0x488>
 800988c:	2101      	movs	r1, #1
 800988e:	4620      	mov	r0, r4
 8009890:	f002 faf4 	bl	800be7c <__i2b>
 8009894:	4683      	mov	fp, r0
 8009896:	2800      	cmp	r0, #0
 8009898:	f43f aefa 	beq.w	8009690 <_strtod_l+0x488>
 800989c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800989e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80098a0:	2e00      	cmp	r6, #0
 80098a2:	bfab      	itete	ge
 80098a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80098a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80098a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80098aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80098ae:	bfac      	ite	ge
 80098b0:	eb06 0a03 	addge.w	sl, r6, r3
 80098b4:	1b9f      	sublt	r7, r3, r6
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	1af6      	subs	r6, r6, r3
 80098ba:	4416      	add	r6, r2
 80098bc:	4ba0      	ldr	r3, [pc, #640]	; (8009b40 <_strtod_l+0x938>)
 80098be:	3e01      	subs	r6, #1
 80098c0:	429e      	cmp	r6, r3
 80098c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80098c6:	f280 80c4 	bge.w	8009a52 <_strtod_l+0x84a>
 80098ca:	1b9b      	subs	r3, r3, r6
 80098cc:	2b1f      	cmp	r3, #31
 80098ce:	eba2 0203 	sub.w	r2, r2, r3
 80098d2:	f04f 0101 	mov.w	r1, #1
 80098d6:	f300 80b0 	bgt.w	8009a3a <_strtod_l+0x832>
 80098da:	fa01 f303 	lsl.w	r3, r1, r3
 80098de:	930e      	str	r3, [sp, #56]	; 0x38
 80098e0:	2300      	movs	r3, #0
 80098e2:	930d      	str	r3, [sp, #52]	; 0x34
 80098e4:	eb0a 0602 	add.w	r6, sl, r2
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	45b2      	cmp	sl, r6
 80098ec:	4417      	add	r7, r2
 80098ee:	441f      	add	r7, r3
 80098f0:	4653      	mov	r3, sl
 80098f2:	bfa8      	it	ge
 80098f4:	4633      	movge	r3, r6
 80098f6:	42bb      	cmp	r3, r7
 80098f8:	bfa8      	it	ge
 80098fa:	463b      	movge	r3, r7
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bfc2      	ittt	gt
 8009900:	1af6      	subgt	r6, r6, r3
 8009902:	1aff      	subgt	r7, r7, r3
 8009904:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd17      	ble.n	800993e <_strtod_l+0x736>
 800990e:	4659      	mov	r1, fp
 8009910:	461a      	mov	r2, r3
 8009912:	4620      	mov	r0, r4
 8009914:	f002 fb72 	bl	800bffc <__pow5mult>
 8009918:	4683      	mov	fp, r0
 800991a:	2800      	cmp	r0, #0
 800991c:	f43f aeb8 	beq.w	8009690 <_strtod_l+0x488>
 8009920:	4601      	mov	r1, r0
 8009922:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009924:	4620      	mov	r0, r4
 8009926:	f002 fabf 	bl	800bea8 <__multiply>
 800992a:	900b      	str	r0, [sp, #44]	; 0x2c
 800992c:	2800      	cmp	r0, #0
 800992e:	f43f aeaf 	beq.w	8009690 <_strtod_l+0x488>
 8009932:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009934:	4620      	mov	r0, r4
 8009936:	f002 f9a1 	bl	800bc7c <_Bfree>
 800993a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800993c:	9316      	str	r3, [sp, #88]	; 0x58
 800993e:	2e00      	cmp	r6, #0
 8009940:	f300 808c 	bgt.w	8009a5c <_strtod_l+0x854>
 8009944:	9b08      	ldr	r3, [sp, #32]
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd08      	ble.n	800995c <_strtod_l+0x754>
 800994a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800994c:	9905      	ldr	r1, [sp, #20]
 800994e:	4620      	mov	r0, r4
 8009950:	f002 fb54 	bl	800bffc <__pow5mult>
 8009954:	9005      	str	r0, [sp, #20]
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f ae9a 	beq.w	8009690 <_strtod_l+0x488>
 800995c:	2f00      	cmp	r7, #0
 800995e:	dd08      	ble.n	8009972 <_strtod_l+0x76a>
 8009960:	9905      	ldr	r1, [sp, #20]
 8009962:	463a      	mov	r2, r7
 8009964:	4620      	mov	r0, r4
 8009966:	f002 fba3 	bl	800c0b0 <__lshift>
 800996a:	9005      	str	r0, [sp, #20]
 800996c:	2800      	cmp	r0, #0
 800996e:	f43f ae8f 	beq.w	8009690 <_strtod_l+0x488>
 8009972:	f1ba 0f00 	cmp.w	sl, #0
 8009976:	dd08      	ble.n	800998a <_strtod_l+0x782>
 8009978:	4659      	mov	r1, fp
 800997a:	4652      	mov	r2, sl
 800997c:	4620      	mov	r0, r4
 800997e:	f002 fb97 	bl	800c0b0 <__lshift>
 8009982:	4683      	mov	fp, r0
 8009984:	2800      	cmp	r0, #0
 8009986:	f43f ae83 	beq.w	8009690 <_strtod_l+0x488>
 800998a:	9a05      	ldr	r2, [sp, #20]
 800998c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800998e:	4620      	mov	r0, r4
 8009990:	f002 fc16 	bl	800c1c0 <__mdiff>
 8009994:	4605      	mov	r5, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	f43f ae7a 	beq.w	8009690 <_strtod_l+0x488>
 800999c:	68c3      	ldr	r3, [r0, #12]
 800999e:	930b      	str	r3, [sp, #44]	; 0x2c
 80099a0:	2300      	movs	r3, #0
 80099a2:	60c3      	str	r3, [r0, #12]
 80099a4:	4659      	mov	r1, fp
 80099a6:	f002 fbef 	bl	800c188 <__mcmp>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	da60      	bge.n	8009a70 <_strtod_l+0x868>
 80099ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b0:	ea53 0308 	orrs.w	r3, r3, r8
 80099b4:	f040 8084 	bne.w	8009ac0 <_strtod_l+0x8b8>
 80099b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d17f      	bne.n	8009ac0 <_strtod_l+0x8b8>
 80099c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099c4:	0d1b      	lsrs	r3, r3, #20
 80099c6:	051b      	lsls	r3, r3, #20
 80099c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80099cc:	d978      	bls.n	8009ac0 <_strtod_l+0x8b8>
 80099ce:	696b      	ldr	r3, [r5, #20]
 80099d0:	b913      	cbnz	r3, 80099d8 <_strtod_l+0x7d0>
 80099d2:	692b      	ldr	r3, [r5, #16]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	dd73      	ble.n	8009ac0 <_strtod_l+0x8b8>
 80099d8:	4629      	mov	r1, r5
 80099da:	2201      	movs	r2, #1
 80099dc:	4620      	mov	r0, r4
 80099de:	f002 fb67 	bl	800c0b0 <__lshift>
 80099e2:	4659      	mov	r1, fp
 80099e4:	4605      	mov	r5, r0
 80099e6:	f002 fbcf 	bl	800c188 <__mcmp>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	dd68      	ble.n	8009ac0 <_strtod_l+0x8b8>
 80099ee:	9904      	ldr	r1, [sp, #16]
 80099f0:	4a54      	ldr	r2, [pc, #336]	; (8009b44 <_strtod_l+0x93c>)
 80099f2:	464b      	mov	r3, r9
 80099f4:	2900      	cmp	r1, #0
 80099f6:	f000 8084 	beq.w	8009b02 <_strtod_l+0x8fa>
 80099fa:	ea02 0109 	and.w	r1, r2, r9
 80099fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a02:	dc7e      	bgt.n	8009b02 <_strtod_l+0x8fa>
 8009a04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a08:	f77f aeb3 	ble.w	8009772 <_strtod_l+0x56a>
 8009a0c:	4b4e      	ldr	r3, [pc, #312]	; (8009b48 <_strtod_l+0x940>)
 8009a0e:	4640      	mov	r0, r8
 8009a10:	4649      	mov	r1, r9
 8009a12:	2200      	movs	r2, #0
 8009a14:	f7f6 fe10 	bl	8000638 <__aeabi_dmul>
 8009a18:	4b4a      	ldr	r3, [pc, #296]	; (8009b44 <_strtod_l+0x93c>)
 8009a1a:	400b      	ands	r3, r1
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	4689      	mov	r9, r1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f47f ae3f 	bne.w	80096a4 <_strtod_l+0x49c>
 8009a26:	2322      	movs	r3, #34	; 0x22
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	e63b      	b.n	80096a4 <_strtod_l+0x49c>
 8009a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a30:	fa02 f303 	lsl.w	r3, r2, r3
 8009a34:	ea03 0808 	and.w	r8, r3, r8
 8009a38:	e6e8      	b.n	800980c <_strtod_l+0x604>
 8009a3a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009a3e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009a42:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009a46:	36e2      	adds	r6, #226	; 0xe2
 8009a48:	fa01 f306 	lsl.w	r3, r1, r6
 8009a4c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009a50:	e748      	b.n	80098e4 <_strtod_l+0x6dc>
 8009a52:	2100      	movs	r1, #0
 8009a54:	2301      	movs	r3, #1
 8009a56:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009a5a:	e743      	b.n	80098e4 <_strtod_l+0x6dc>
 8009a5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a5e:	4632      	mov	r2, r6
 8009a60:	4620      	mov	r0, r4
 8009a62:	f002 fb25 	bl	800c0b0 <__lshift>
 8009a66:	9016      	str	r0, [sp, #88]	; 0x58
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f47f af6b 	bne.w	8009944 <_strtod_l+0x73c>
 8009a6e:	e60f      	b.n	8009690 <_strtod_l+0x488>
 8009a70:	46ca      	mov	sl, r9
 8009a72:	d171      	bne.n	8009b58 <_strtod_l+0x950>
 8009a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a7a:	b352      	cbz	r2, 8009ad2 <_strtod_l+0x8ca>
 8009a7c:	4a33      	ldr	r2, [pc, #204]	; (8009b4c <_strtod_l+0x944>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d12a      	bne.n	8009ad8 <_strtod_l+0x8d0>
 8009a82:	9b04      	ldr	r3, [sp, #16]
 8009a84:	4641      	mov	r1, r8
 8009a86:	b1fb      	cbz	r3, 8009ac8 <_strtod_l+0x8c0>
 8009a88:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <_strtod_l+0x93c>)
 8009a8a:	ea09 0303 	and.w	r3, r9, r3
 8009a8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a96:	d81a      	bhi.n	8009ace <_strtod_l+0x8c6>
 8009a98:	0d1b      	lsrs	r3, r3, #20
 8009a9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	d118      	bne.n	8009ad8 <_strtod_l+0x8d0>
 8009aa6:	4b2a      	ldr	r3, [pc, #168]	; (8009b50 <_strtod_l+0x948>)
 8009aa8:	459a      	cmp	sl, r3
 8009aaa:	d102      	bne.n	8009ab2 <_strtod_l+0x8aa>
 8009aac:	3101      	adds	r1, #1
 8009aae:	f43f adef 	beq.w	8009690 <_strtod_l+0x488>
 8009ab2:	4b24      	ldr	r3, [pc, #144]	; (8009b44 <_strtod_l+0x93c>)
 8009ab4:	ea0a 0303 	and.w	r3, sl, r3
 8009ab8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009abc:	f04f 0800 	mov.w	r8, #0
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1a2      	bne.n	8009a0c <_strtod_l+0x804>
 8009ac6:	e5ed      	b.n	80096a4 <_strtod_l+0x49c>
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009acc:	e7e9      	b.n	8009aa2 <_strtod_l+0x89a>
 8009ace:	4613      	mov	r3, r2
 8009ad0:	e7e7      	b.n	8009aa2 <_strtod_l+0x89a>
 8009ad2:	ea53 0308 	orrs.w	r3, r3, r8
 8009ad6:	d08a      	beq.n	80099ee <_strtod_l+0x7e6>
 8009ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ada:	b1e3      	cbz	r3, 8009b16 <_strtod_l+0x90e>
 8009adc:	ea13 0f0a 	tst.w	r3, sl
 8009ae0:	d0ee      	beq.n	8009ac0 <_strtod_l+0x8b8>
 8009ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae4:	9a04      	ldr	r2, [sp, #16]
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	b1c3      	cbz	r3, 8009b1e <_strtod_l+0x916>
 8009aec:	f7ff fb70 	bl	80091d0 <sulp>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	ec51 0b18 	vmov	r0, r1, d8
 8009af8:	f7f6 fbe8 	bl	80002cc <__adddf3>
 8009afc:	4680      	mov	r8, r0
 8009afe:	4689      	mov	r9, r1
 8009b00:	e7de      	b.n	8009ac0 <_strtod_l+0x8b8>
 8009b02:	4013      	ands	r3, r2
 8009b04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009b0c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009b10:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009b14:	e7d4      	b.n	8009ac0 <_strtod_l+0x8b8>
 8009b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b18:	ea13 0f08 	tst.w	r3, r8
 8009b1c:	e7e0      	b.n	8009ae0 <_strtod_l+0x8d8>
 8009b1e:	f7ff fb57 	bl	80091d0 <sulp>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	ec51 0b18 	vmov	r0, r1, d8
 8009b2a:	f7f6 fbcd 	bl	80002c8 <__aeabi_dsub>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2300      	movs	r3, #0
 8009b32:	4680      	mov	r8, r0
 8009b34:	4689      	mov	r9, r1
 8009b36:	f7f6 ffe7 	bl	8000b08 <__aeabi_dcmpeq>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d0c0      	beq.n	8009ac0 <_strtod_l+0x8b8>
 8009b3e:	e618      	b.n	8009772 <_strtod_l+0x56a>
 8009b40:	fffffc02 	.word	0xfffffc02
 8009b44:	7ff00000 	.word	0x7ff00000
 8009b48:	39500000 	.word	0x39500000
 8009b4c:	000fffff 	.word	0x000fffff
 8009b50:	7fefffff 	.word	0x7fefffff
 8009b54:	0800d420 	.word	0x0800d420
 8009b58:	4659      	mov	r1, fp
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f002 fc84 	bl	800c468 <__ratio>
 8009b60:	ec57 6b10 	vmov	r6, r7, d0
 8009b64:	ee10 0a10 	vmov	r0, s0
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 ffde 	bl	8000b30 <__aeabi_dcmple>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d071      	beq.n	8009c5c <_strtod_l+0xa54>
 8009b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d17c      	bne.n	8009c78 <_strtod_l+0xa70>
 8009b7e:	f1b8 0f00 	cmp.w	r8, #0
 8009b82:	d15a      	bne.n	8009c3a <_strtod_l+0xa32>
 8009b84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d15d      	bne.n	8009c48 <_strtod_l+0xa40>
 8009b8c:	4b90      	ldr	r3, [pc, #576]	; (8009dd0 <_strtod_l+0xbc8>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	4630      	mov	r0, r6
 8009b92:	4639      	mov	r1, r7
 8009b94:	f7f6 ffc2 	bl	8000b1c <__aeabi_dcmplt>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d15c      	bne.n	8009c56 <_strtod_l+0xa4e>
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4b8c      	ldr	r3, [pc, #560]	; (8009dd4 <_strtod_l+0xbcc>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f7f6 fd48 	bl	8000638 <__aeabi_dmul>
 8009ba8:	4606      	mov	r6, r0
 8009baa:	460f      	mov	r7, r1
 8009bac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009bb0:	9606      	str	r6, [sp, #24]
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009bbc:	4b86      	ldr	r3, [pc, #536]	; (8009dd8 <_strtod_l+0xbd0>)
 8009bbe:	ea0a 0303 	and.w	r3, sl, r3
 8009bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009bc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bc6:	4b85      	ldr	r3, [pc, #532]	; (8009ddc <_strtod_l+0xbd4>)
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	f040 8090 	bne.w	8009cee <_strtod_l+0xae6>
 8009bce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009bd2:	ec49 8b10 	vmov	d0, r8, r9
 8009bd6:	f002 fb7d 	bl	800c2d4 <__ulp>
 8009bda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bde:	ec51 0b10 	vmov	r0, r1, d0
 8009be2:	f7f6 fd29 	bl	8000638 <__aeabi_dmul>
 8009be6:	4642      	mov	r2, r8
 8009be8:	464b      	mov	r3, r9
 8009bea:	f7f6 fb6f 	bl	80002cc <__adddf3>
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4979      	ldr	r1, [pc, #484]	; (8009dd8 <_strtod_l+0xbd0>)
 8009bf2:	4a7b      	ldr	r2, [pc, #492]	; (8009de0 <_strtod_l+0xbd8>)
 8009bf4:	4019      	ands	r1, r3
 8009bf6:	4291      	cmp	r1, r2
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	d944      	bls.n	8009c86 <_strtod_l+0xa7e>
 8009bfc:	ee18 2a90 	vmov	r2, s17
 8009c00:	4b78      	ldr	r3, [pc, #480]	; (8009de4 <_strtod_l+0xbdc>)
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d104      	bne.n	8009c10 <_strtod_l+0xa08>
 8009c06:	ee18 3a10 	vmov	r3, s16
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	f43f ad40 	beq.w	8009690 <_strtod_l+0x488>
 8009c10:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009de4 <_strtod_l+0xbdc>
 8009c14:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009c18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f002 f82e 	bl	800bc7c <_Bfree>
 8009c20:	9905      	ldr	r1, [sp, #20]
 8009c22:	4620      	mov	r0, r4
 8009c24:	f002 f82a 	bl	800bc7c <_Bfree>
 8009c28:	4659      	mov	r1, fp
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f002 f826 	bl	800bc7c <_Bfree>
 8009c30:	4629      	mov	r1, r5
 8009c32:	4620      	mov	r0, r4
 8009c34:	f002 f822 	bl	800bc7c <_Bfree>
 8009c38:	e609      	b.n	800984e <_strtod_l+0x646>
 8009c3a:	f1b8 0f01 	cmp.w	r8, #1
 8009c3e:	d103      	bne.n	8009c48 <_strtod_l+0xa40>
 8009c40:	f1b9 0f00 	cmp.w	r9, #0
 8009c44:	f43f ad95 	beq.w	8009772 <_strtod_l+0x56a>
 8009c48:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009da0 <_strtod_l+0xb98>
 8009c4c:	4f60      	ldr	r7, [pc, #384]	; (8009dd0 <_strtod_l+0xbc8>)
 8009c4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c52:	2600      	movs	r6, #0
 8009c54:	e7ae      	b.n	8009bb4 <_strtod_l+0x9ac>
 8009c56:	4f5f      	ldr	r7, [pc, #380]	; (8009dd4 <_strtod_l+0xbcc>)
 8009c58:	2600      	movs	r6, #0
 8009c5a:	e7a7      	b.n	8009bac <_strtod_l+0x9a4>
 8009c5c:	4b5d      	ldr	r3, [pc, #372]	; (8009dd4 <_strtod_l+0xbcc>)
 8009c5e:	4630      	mov	r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	2200      	movs	r2, #0
 8009c64:	f7f6 fce8 	bl	8000638 <__aeabi_dmul>
 8009c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460f      	mov	r7, r1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d09c      	beq.n	8009bac <_strtod_l+0x9a4>
 8009c72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c76:	e79d      	b.n	8009bb4 <_strtod_l+0x9ac>
 8009c78:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009da8 <_strtod_l+0xba0>
 8009c7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c80:	ec57 6b17 	vmov	r6, r7, d7
 8009c84:	e796      	b.n	8009bb4 <_strtod_l+0x9ac>
 8009c86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009c8a:	9b04      	ldr	r3, [sp, #16]
 8009c8c:	46ca      	mov	sl, r9
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1c2      	bne.n	8009c18 <_strtod_l+0xa10>
 8009c92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c98:	0d1b      	lsrs	r3, r3, #20
 8009c9a:	051b      	lsls	r3, r3, #20
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d1bb      	bne.n	8009c18 <_strtod_l+0xa10>
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f7f7 f828 	bl	8000cf8 <__aeabi_d2lz>
 8009ca8:	f7f6 fc98 	bl	80005dc <__aeabi_l2d>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7f6 fb08 	bl	80002c8 <__aeabi_dsub>
 8009cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cbe:	ea43 0308 	orr.w	r3, r3, r8
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	d054      	beq.n	8009d74 <_strtod_l+0xb6c>
 8009cca:	a339      	add	r3, pc, #228	; (adr r3, 8009db0 <_strtod_l+0xba8>)
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f7f6 ff24 	bl	8000b1c <__aeabi_dcmplt>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f47f ace5 	bne.w	80096a4 <_strtod_l+0x49c>
 8009cda:	a337      	add	r3, pc, #220	; (adr r3, 8009db8 <_strtod_l+0xbb0>)
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 ff38 	bl	8000b58 <__aeabi_dcmpgt>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d095      	beq.n	8009c18 <_strtod_l+0xa10>
 8009cec:	e4da      	b.n	80096a4 <_strtod_l+0x49c>
 8009cee:	9b04      	ldr	r3, [sp, #16]
 8009cf0:	b333      	cbz	r3, 8009d40 <_strtod_l+0xb38>
 8009cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cf8:	d822      	bhi.n	8009d40 <_strtod_l+0xb38>
 8009cfa:	a331      	add	r3, pc, #196	; (adr r3, 8009dc0 <_strtod_l+0xbb8>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 ff14 	bl	8000b30 <__aeabi_dcmple>
 8009d08:	b1a0      	cbz	r0, 8009d34 <_strtod_l+0xb2c>
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7f6 ff6b 	bl	8000be8 <__aeabi_d2uiz>
 8009d12:	2801      	cmp	r0, #1
 8009d14:	bf38      	it	cc
 8009d16:	2001      	movcc	r0, #1
 8009d18:	f7f6 fc14 	bl	8000544 <__aeabi_ui2d>
 8009d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	bb23      	cbnz	r3, 8009d6e <_strtod_l+0xb66>
 8009d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d28:	9010      	str	r0, [sp, #64]	; 0x40
 8009d2a:	9311      	str	r3, [sp, #68]	; 0x44
 8009d2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d38:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d3c:	1a9b      	subs	r3, r3, r2
 8009d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d44:	eeb0 0a48 	vmov.f32	s0, s16
 8009d48:	eef0 0a68 	vmov.f32	s1, s17
 8009d4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009d50:	f002 fac0 	bl	800c2d4 <__ulp>
 8009d54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d58:	ec53 2b10 	vmov	r2, r3, d0
 8009d5c:	f7f6 fc6c 	bl	8000638 <__aeabi_dmul>
 8009d60:	ec53 2b18 	vmov	r2, r3, d8
 8009d64:	f7f6 fab2 	bl	80002cc <__adddf3>
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4689      	mov	r9, r1
 8009d6c:	e78d      	b.n	8009c8a <_strtod_l+0xa82>
 8009d6e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009d72:	e7db      	b.n	8009d2c <_strtod_l+0xb24>
 8009d74:	a314      	add	r3, pc, #80	; (adr r3, 8009dc8 <_strtod_l+0xbc0>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f7f6 fecf 	bl	8000b1c <__aeabi_dcmplt>
 8009d7e:	e7b3      	b.n	8009ce8 <_strtod_l+0xae0>
 8009d80:	2300      	movs	r3, #0
 8009d82:	930a      	str	r3, [sp, #40]	; 0x28
 8009d84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	f7ff ba7c 	b.w	8009286 <_strtod_l+0x7e>
 8009d8e:	2a65      	cmp	r2, #101	; 0x65
 8009d90:	f43f ab75 	beq.w	800947e <_strtod_l+0x276>
 8009d94:	2a45      	cmp	r2, #69	; 0x45
 8009d96:	f43f ab72 	beq.w	800947e <_strtod_l+0x276>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f7ff bbaa 	b.w	80094f4 <_strtod_l+0x2ec>
 8009da0:	00000000 	.word	0x00000000
 8009da4:	bff00000 	.word	0xbff00000
 8009da8:	00000000 	.word	0x00000000
 8009dac:	3ff00000 	.word	0x3ff00000
 8009db0:	94a03595 	.word	0x94a03595
 8009db4:	3fdfffff 	.word	0x3fdfffff
 8009db8:	35afe535 	.word	0x35afe535
 8009dbc:	3fe00000 	.word	0x3fe00000
 8009dc0:	ffc00000 	.word	0xffc00000
 8009dc4:	41dfffff 	.word	0x41dfffff
 8009dc8:	94a03595 	.word	0x94a03595
 8009dcc:	3fcfffff 	.word	0x3fcfffff
 8009dd0:	3ff00000 	.word	0x3ff00000
 8009dd4:	3fe00000 	.word	0x3fe00000
 8009dd8:	7ff00000 	.word	0x7ff00000
 8009ddc:	7fe00000 	.word	0x7fe00000
 8009de0:	7c9fffff 	.word	0x7c9fffff
 8009de4:	7fefffff 	.word	0x7fefffff

08009de8 <_strtod_r>:
 8009de8:	4b01      	ldr	r3, [pc, #4]	; (8009df0 <_strtod_r+0x8>)
 8009dea:	f7ff ba0d 	b.w	8009208 <_strtod_l>
 8009dee:	bf00      	nop
 8009df0:	2000003c 	.word	0x2000003c

08009df4 <_strtol_l.constprop.0>:
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dfa:	d001      	beq.n	8009e00 <_strtol_l.constprop.0+0xc>
 8009dfc:	2b24      	cmp	r3, #36	; 0x24
 8009dfe:	d906      	bls.n	8009e0e <_strtol_l.constprop.0+0x1a>
 8009e00:	f000 f936 	bl	800a070 <__errno>
 8009e04:	2316      	movs	r3, #22
 8009e06:	6003      	str	r3, [r0, #0]
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ef4 <_strtol_l.constprop.0+0x100>
 8009e12:	460d      	mov	r5, r1
 8009e14:	462e      	mov	r6, r5
 8009e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009e1e:	f017 0708 	ands.w	r7, r7, #8
 8009e22:	d1f7      	bne.n	8009e14 <_strtol_l.constprop.0+0x20>
 8009e24:	2c2d      	cmp	r4, #45	; 0x2d
 8009e26:	d132      	bne.n	8009e8e <_strtol_l.constprop.0+0x9a>
 8009e28:	782c      	ldrb	r4, [r5, #0]
 8009e2a:	2701      	movs	r7, #1
 8009e2c:	1cb5      	adds	r5, r6, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d05b      	beq.n	8009eea <_strtol_l.constprop.0+0xf6>
 8009e32:	2b10      	cmp	r3, #16
 8009e34:	d109      	bne.n	8009e4a <_strtol_l.constprop.0+0x56>
 8009e36:	2c30      	cmp	r4, #48	; 0x30
 8009e38:	d107      	bne.n	8009e4a <_strtol_l.constprop.0+0x56>
 8009e3a:	782c      	ldrb	r4, [r5, #0]
 8009e3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e40:	2c58      	cmp	r4, #88	; 0x58
 8009e42:	d14d      	bne.n	8009ee0 <_strtol_l.constprop.0+0xec>
 8009e44:	786c      	ldrb	r4, [r5, #1]
 8009e46:	2310      	movs	r3, #16
 8009e48:	3502      	adds	r5, #2
 8009e4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009e52:	f04f 0e00 	mov.w	lr, #0
 8009e56:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e5a:	4676      	mov	r6, lr
 8009e5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009e60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009e64:	f1bc 0f09 	cmp.w	ip, #9
 8009e68:	d816      	bhi.n	8009e98 <_strtol_l.constprop.0+0xa4>
 8009e6a:	4664      	mov	r4, ip
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	dd24      	ble.n	8009eba <_strtol_l.constprop.0+0xc6>
 8009e70:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009e74:	d008      	beq.n	8009e88 <_strtol_l.constprop.0+0x94>
 8009e76:	45b1      	cmp	r9, r6
 8009e78:	d31c      	bcc.n	8009eb4 <_strtol_l.constprop.0+0xc0>
 8009e7a:	d101      	bne.n	8009e80 <_strtol_l.constprop.0+0x8c>
 8009e7c:	45a2      	cmp	sl, r4
 8009e7e:	db19      	blt.n	8009eb4 <_strtol_l.constprop.0+0xc0>
 8009e80:	fb06 4603 	mla	r6, r6, r3, r4
 8009e84:	f04f 0e01 	mov.w	lr, #1
 8009e88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e8c:	e7e8      	b.n	8009e60 <_strtol_l.constprop.0+0x6c>
 8009e8e:	2c2b      	cmp	r4, #43	; 0x2b
 8009e90:	bf04      	itt	eq
 8009e92:	782c      	ldrbeq	r4, [r5, #0]
 8009e94:	1cb5      	addeq	r5, r6, #2
 8009e96:	e7ca      	b.n	8009e2e <_strtol_l.constprop.0+0x3a>
 8009e98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009e9c:	f1bc 0f19 	cmp.w	ip, #25
 8009ea0:	d801      	bhi.n	8009ea6 <_strtol_l.constprop.0+0xb2>
 8009ea2:	3c37      	subs	r4, #55	; 0x37
 8009ea4:	e7e2      	b.n	8009e6c <_strtol_l.constprop.0+0x78>
 8009ea6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009eaa:	f1bc 0f19 	cmp.w	ip, #25
 8009eae:	d804      	bhi.n	8009eba <_strtol_l.constprop.0+0xc6>
 8009eb0:	3c57      	subs	r4, #87	; 0x57
 8009eb2:	e7db      	b.n	8009e6c <_strtol_l.constprop.0+0x78>
 8009eb4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009eb8:	e7e6      	b.n	8009e88 <_strtol_l.constprop.0+0x94>
 8009eba:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009ebe:	d105      	bne.n	8009ecc <_strtol_l.constprop.0+0xd8>
 8009ec0:	2322      	movs	r3, #34	; 0x22
 8009ec2:	6003      	str	r3, [r0, #0]
 8009ec4:	4646      	mov	r6, r8
 8009ec6:	b942      	cbnz	r2, 8009eda <_strtol_l.constprop.0+0xe6>
 8009ec8:	4630      	mov	r0, r6
 8009eca:	e79e      	b.n	8009e0a <_strtol_l.constprop.0+0x16>
 8009ecc:	b107      	cbz	r7, 8009ed0 <_strtol_l.constprop.0+0xdc>
 8009ece:	4276      	negs	r6, r6
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d0f9      	beq.n	8009ec8 <_strtol_l.constprop.0+0xd4>
 8009ed4:	f1be 0f00 	cmp.w	lr, #0
 8009ed8:	d000      	beq.n	8009edc <_strtol_l.constprop.0+0xe8>
 8009eda:	1e69      	subs	r1, r5, #1
 8009edc:	6011      	str	r1, [r2, #0]
 8009ede:	e7f3      	b.n	8009ec8 <_strtol_l.constprop.0+0xd4>
 8009ee0:	2430      	movs	r4, #48	; 0x30
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1b1      	bne.n	8009e4a <_strtol_l.constprop.0+0x56>
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	e7af      	b.n	8009e4a <_strtol_l.constprop.0+0x56>
 8009eea:	2c30      	cmp	r4, #48	; 0x30
 8009eec:	d0a5      	beq.n	8009e3a <_strtol_l.constprop.0+0x46>
 8009eee:	230a      	movs	r3, #10
 8009ef0:	e7ab      	b.n	8009e4a <_strtol_l.constprop.0+0x56>
 8009ef2:	bf00      	nop
 8009ef4:	0800d451 	.word	0x0800d451

08009ef8 <_strtol_r>:
 8009ef8:	f7ff bf7c 	b.w	8009df4 <_strtol_l.constprop.0>

08009efc <_fwalk_sglue>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	4607      	mov	r7, r0
 8009f02:	4688      	mov	r8, r1
 8009f04:	4614      	mov	r4, r2
 8009f06:	2600      	movs	r6, #0
 8009f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8009f10:	d505      	bpl.n	8009f1e <_fwalk_sglue+0x22>
 8009f12:	6824      	ldr	r4, [r4, #0]
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	d1f7      	bne.n	8009f08 <_fwalk_sglue+0xc>
 8009f18:	4630      	mov	r0, r6
 8009f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d907      	bls.n	8009f34 <_fwalk_sglue+0x38>
 8009f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	d003      	beq.n	8009f34 <_fwalk_sglue+0x38>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4638      	mov	r0, r7
 8009f30:	47c0      	blx	r8
 8009f32:	4306      	orrs	r6, r0
 8009f34:	3568      	adds	r5, #104	; 0x68
 8009f36:	e7e9      	b.n	8009f0c <_fwalk_sglue+0x10>

08009f38 <iprintf>:
 8009f38:	b40f      	push	{r0, r1, r2, r3}
 8009f3a:	b507      	push	{r0, r1, r2, lr}
 8009f3c:	4906      	ldr	r1, [pc, #24]	; (8009f58 <iprintf+0x20>)
 8009f3e:	ab04      	add	r3, sp, #16
 8009f40:	6808      	ldr	r0, [r1, #0]
 8009f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f46:	6881      	ldr	r1, [r0, #8]
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	f001 fc7d 	bl	800b848 <_vfiprintf_r>
 8009f4e:	b003      	add	sp, #12
 8009f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f54:	b004      	add	sp, #16
 8009f56:	4770      	bx	lr
 8009f58:	200001f4 	.word	0x200001f4

08009f5c <_puts_r>:
 8009f5c:	6a03      	ldr	r3, [r0, #32]
 8009f5e:	b570      	push	{r4, r5, r6, lr}
 8009f60:	6884      	ldr	r4, [r0, #8]
 8009f62:	4605      	mov	r5, r0
 8009f64:	460e      	mov	r6, r1
 8009f66:	b90b      	cbnz	r3, 8009f6c <_puts_r+0x10>
 8009f68:	f7ff f91a 	bl	80091a0 <__sinit>
 8009f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f6e:	07db      	lsls	r3, r3, #31
 8009f70:	d405      	bmi.n	8009f7e <_puts_r+0x22>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	0598      	lsls	r0, r3, #22
 8009f76:	d402      	bmi.n	8009f7e <_puts_r+0x22>
 8009f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f7a:	f000 f8a3 	bl	800a0c4 <__retarget_lock_acquire_recursive>
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	0719      	lsls	r1, r3, #28
 8009f82:	d513      	bpl.n	8009fac <_puts_r+0x50>
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	b18b      	cbz	r3, 8009fac <_puts_r+0x50>
 8009f88:	3e01      	subs	r6, #1
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f90:	3b01      	subs	r3, #1
 8009f92:	60a3      	str	r3, [r4, #8]
 8009f94:	b9e9      	cbnz	r1, 8009fd2 <_puts_r+0x76>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	da2e      	bge.n	8009ff8 <_puts_r+0x9c>
 8009f9a:	4622      	mov	r2, r4
 8009f9c:	210a      	movs	r1, #10
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f002 fb4b 	bl	800c63a <__swbuf_r>
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d007      	beq.n	8009fb8 <_puts_r+0x5c>
 8009fa8:	250a      	movs	r5, #10
 8009faa:	e007      	b.n	8009fbc <_puts_r+0x60>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f002 fb80 	bl	800c6b4 <__swsetup_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d0e7      	beq.n	8009f88 <_puts_r+0x2c>
 8009fb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fbe:	07da      	lsls	r2, r3, #31
 8009fc0:	d405      	bmi.n	8009fce <_puts_r+0x72>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	059b      	lsls	r3, r3, #22
 8009fc6:	d402      	bmi.n	8009fce <_puts_r+0x72>
 8009fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fca:	f000 f87c 	bl	800a0c6 <__retarget_lock_release_recursive>
 8009fce:	4628      	mov	r0, r5
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	da04      	bge.n	8009fe0 <_puts_r+0x84>
 8009fd6:	69a2      	ldr	r2, [r4, #24]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	dc06      	bgt.n	8009fea <_puts_r+0x8e>
 8009fdc:	290a      	cmp	r1, #10
 8009fde:	d004      	beq.n	8009fea <_puts_r+0x8e>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	7019      	strb	r1, [r3, #0]
 8009fe8:	e7cf      	b.n	8009f8a <_puts_r+0x2e>
 8009fea:	4622      	mov	r2, r4
 8009fec:	4628      	mov	r0, r5
 8009fee:	f002 fb24 	bl	800c63a <__swbuf_r>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d1c9      	bne.n	8009f8a <_puts_r+0x2e>
 8009ff6:	e7df      	b.n	8009fb8 <_puts_r+0x5c>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	250a      	movs	r5, #10
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	6022      	str	r2, [r4, #0]
 800a000:	701d      	strb	r5, [r3, #0]
 800a002:	e7db      	b.n	8009fbc <_puts_r+0x60>

0800a004 <puts>:
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <puts+0xc>)
 800a006:	4601      	mov	r1, r0
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	f7ff bfa7 	b.w	8009f5c <_puts_r>
 800a00e:	bf00      	nop
 800a010:	200001f4 	.word	0x200001f4

0800a014 <strncmp>:
 800a014:	b510      	push	{r4, lr}
 800a016:	b16a      	cbz	r2, 800a034 <strncmp+0x20>
 800a018:	3901      	subs	r1, #1
 800a01a:	1884      	adds	r4, r0, r2
 800a01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a020:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a024:	429a      	cmp	r2, r3
 800a026:	d103      	bne.n	800a030 <strncmp+0x1c>
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d001      	beq.n	800a030 <strncmp+0x1c>
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	d1f5      	bne.n	800a01c <strncmp+0x8>
 800a030:	1ad0      	subs	r0, r2, r3
 800a032:	bd10      	pop	{r4, pc}
 800a034:	4610      	mov	r0, r2
 800a036:	e7fc      	b.n	800a032 <strncmp+0x1e>

0800a038 <memset>:
 800a038:	4402      	add	r2, r0
 800a03a:	4603      	mov	r3, r0
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d100      	bne.n	800a042 <memset+0xa>
 800a040:	4770      	bx	lr
 800a042:	f803 1b01 	strb.w	r1, [r3], #1
 800a046:	e7f9      	b.n	800a03c <memset+0x4>

0800a048 <_localeconv_r>:
 800a048:	4800      	ldr	r0, [pc, #0]	; (800a04c <_localeconv_r+0x4>)
 800a04a:	4770      	bx	lr
 800a04c:	2000012c 	.word	0x2000012c

0800a050 <_sbrk_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4d06      	ldr	r5, [pc, #24]	; (800a06c <_sbrk_r+0x1c>)
 800a054:	2300      	movs	r3, #0
 800a056:	4604      	mov	r4, r0
 800a058:	4608      	mov	r0, r1
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	f7f8 ffea 	bl	8003034 <_sbrk>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	d102      	bne.n	800a06a <_sbrk_r+0x1a>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	b103      	cbz	r3, 800a06a <_sbrk_r+0x1a>
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	200186cc 	.word	0x200186cc

0800a070 <__errno>:
 800a070:	4b01      	ldr	r3, [pc, #4]	; (800a078 <__errno+0x8>)
 800a072:	6818      	ldr	r0, [r3, #0]
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	200001f4 	.word	0x200001f4

0800a07c <__libc_init_array>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	4d0d      	ldr	r5, [pc, #52]	; (800a0b4 <__libc_init_array+0x38>)
 800a080:	4c0d      	ldr	r4, [pc, #52]	; (800a0b8 <__libc_init_array+0x3c>)
 800a082:	1b64      	subs	r4, r4, r5
 800a084:	10a4      	asrs	r4, r4, #2
 800a086:	2600      	movs	r6, #0
 800a088:	42a6      	cmp	r6, r4
 800a08a:	d109      	bne.n	800a0a0 <__libc_init_array+0x24>
 800a08c:	4d0b      	ldr	r5, [pc, #44]	; (800a0bc <__libc_init_array+0x40>)
 800a08e:	4c0c      	ldr	r4, [pc, #48]	; (800a0c0 <__libc_init_array+0x44>)
 800a090:	f003 f8f8 	bl	800d284 <_init>
 800a094:	1b64      	subs	r4, r4, r5
 800a096:	10a4      	asrs	r4, r4, #2
 800a098:	2600      	movs	r6, #0
 800a09a:	42a6      	cmp	r6, r4
 800a09c:	d105      	bne.n	800a0aa <__libc_init_array+0x2e>
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
 800a0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a4:	4798      	blx	r3
 800a0a6:	3601      	adds	r6, #1
 800a0a8:	e7ee      	b.n	800a088 <__libc_init_array+0xc>
 800a0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ae:	4798      	blx	r3
 800a0b0:	3601      	adds	r6, #1
 800a0b2:	e7f2      	b.n	800a09a <__libc_init_array+0x1e>
 800a0b4:	0800d818 	.word	0x0800d818
 800a0b8:	0800d818 	.word	0x0800d818
 800a0bc:	0800d818 	.word	0x0800d818
 800a0c0:	0800d81c 	.word	0x0800d81c

0800a0c4 <__retarget_lock_acquire_recursive>:
 800a0c4:	4770      	bx	lr

0800a0c6 <__retarget_lock_release_recursive>:
 800a0c6:	4770      	bx	lr

0800a0c8 <memcpy>:
 800a0c8:	440a      	add	r2, r1
 800a0ca:	4291      	cmp	r1, r2
 800a0cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0d0:	d100      	bne.n	800a0d4 <memcpy+0xc>
 800a0d2:	4770      	bx	lr
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0de:	4291      	cmp	r1, r2
 800a0e0:	d1f9      	bne.n	800a0d6 <memcpy+0xe>
 800a0e2:	bd10      	pop	{r4, pc}
 800a0e4:	0000      	movs	r0, r0
	...

0800a0e8 <nan>:
 800a0e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0f0 <nan+0x8>
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	00000000 	.word	0x00000000
 800a0f4:	7ff80000 	.word	0x7ff80000

0800a0f8 <nanf>:
 800a0f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a100 <nanf+0x8>
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	7fc00000 	.word	0x7fc00000

0800a104 <quorem>:
 800a104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	6903      	ldr	r3, [r0, #16]
 800a10a:	690c      	ldr	r4, [r1, #16]
 800a10c:	42a3      	cmp	r3, r4
 800a10e:	4607      	mov	r7, r0
 800a110:	db7e      	blt.n	800a210 <quorem+0x10c>
 800a112:	3c01      	subs	r4, #1
 800a114:	f101 0814 	add.w	r8, r1, #20
 800a118:	f100 0514 	add.w	r5, r0, #20
 800a11c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a12a:	3301      	adds	r3, #1
 800a12c:	429a      	cmp	r2, r3
 800a12e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a132:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a136:	fbb2 f6f3 	udiv	r6, r2, r3
 800a13a:	d331      	bcc.n	800a1a0 <quorem+0x9c>
 800a13c:	f04f 0e00 	mov.w	lr, #0
 800a140:	4640      	mov	r0, r8
 800a142:	46ac      	mov	ip, r5
 800a144:	46f2      	mov	sl, lr
 800a146:	f850 2b04 	ldr.w	r2, [r0], #4
 800a14a:	b293      	uxth	r3, r2
 800a14c:	fb06 e303 	mla	r3, r6, r3, lr
 800a150:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a154:	0c1a      	lsrs	r2, r3, #16
 800a156:	b29b      	uxth	r3, r3
 800a158:	ebaa 0303 	sub.w	r3, sl, r3
 800a15c:	f8dc a000 	ldr.w	sl, [ip]
 800a160:	fa13 f38a 	uxtah	r3, r3, sl
 800a164:	fb06 220e 	mla	r2, r6, lr, r2
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	9b00      	ldr	r3, [sp, #0]
 800a16c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a170:	b292      	uxth	r2, r2
 800a172:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a176:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a17a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a17e:	4581      	cmp	r9, r0
 800a180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a184:	f84c 3b04 	str.w	r3, [ip], #4
 800a188:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a18c:	d2db      	bcs.n	800a146 <quorem+0x42>
 800a18e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a192:	b92b      	cbnz	r3, 800a1a0 <quorem+0x9c>
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	3b04      	subs	r3, #4
 800a198:	429d      	cmp	r5, r3
 800a19a:	461a      	mov	r2, r3
 800a19c:	d32c      	bcc.n	800a1f8 <quorem+0xf4>
 800a19e:	613c      	str	r4, [r7, #16]
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f001 fff1 	bl	800c188 <__mcmp>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	db22      	blt.n	800a1f0 <quorem+0xec>
 800a1aa:	3601      	adds	r6, #1
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1b4:	f8d1 c000 	ldr.w	ip, [r1]
 800a1b8:	b293      	uxth	r3, r2
 800a1ba:	1ac3      	subs	r3, r0, r3
 800a1bc:	0c12      	lsrs	r2, r2, #16
 800a1be:	fa13 f38c 	uxtah	r3, r3, ip
 800a1c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a1c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d0:	45c1      	cmp	r9, r8
 800a1d2:	f841 3b04 	str.w	r3, [r1], #4
 800a1d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a1da:	d2e9      	bcs.n	800a1b0 <quorem+0xac>
 800a1dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e4:	b922      	cbnz	r2, 800a1f0 <quorem+0xec>
 800a1e6:	3b04      	subs	r3, #4
 800a1e8:	429d      	cmp	r5, r3
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	d30a      	bcc.n	800a204 <quorem+0x100>
 800a1ee:	613c      	str	r4, [r7, #16]
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	b003      	add	sp, #12
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	6812      	ldr	r2, [r2, #0]
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	2a00      	cmp	r2, #0
 800a1fe:	d1ce      	bne.n	800a19e <quorem+0x9a>
 800a200:	3c01      	subs	r4, #1
 800a202:	e7c9      	b.n	800a198 <quorem+0x94>
 800a204:	6812      	ldr	r2, [r2, #0]
 800a206:	3b04      	subs	r3, #4
 800a208:	2a00      	cmp	r2, #0
 800a20a:	d1f0      	bne.n	800a1ee <quorem+0xea>
 800a20c:	3c01      	subs	r4, #1
 800a20e:	e7eb      	b.n	800a1e8 <quorem+0xe4>
 800a210:	2000      	movs	r0, #0
 800a212:	e7ee      	b.n	800a1f2 <quorem+0xee>
 800a214:	0000      	movs	r0, r0
	...

0800a218 <_dtoa_r>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ed2d 8b04 	vpush	{d8-d9}
 800a220:	69c5      	ldr	r5, [r0, #28]
 800a222:	b093      	sub	sp, #76	; 0x4c
 800a224:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a228:	ec57 6b10 	vmov	r6, r7, d0
 800a22c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a230:	9107      	str	r1, [sp, #28]
 800a232:	4604      	mov	r4, r0
 800a234:	920a      	str	r2, [sp, #40]	; 0x28
 800a236:	930d      	str	r3, [sp, #52]	; 0x34
 800a238:	b975      	cbnz	r5, 800a258 <_dtoa_r+0x40>
 800a23a:	2010      	movs	r0, #16
 800a23c:	f7fe faba 	bl	80087b4 <malloc>
 800a240:	4602      	mov	r2, r0
 800a242:	61e0      	str	r0, [r4, #28]
 800a244:	b920      	cbnz	r0, 800a250 <_dtoa_r+0x38>
 800a246:	4bae      	ldr	r3, [pc, #696]	; (800a500 <_dtoa_r+0x2e8>)
 800a248:	21ef      	movs	r1, #239	; 0xef
 800a24a:	48ae      	ldr	r0, [pc, #696]	; (800a504 <_dtoa_r+0x2ec>)
 800a24c:	f002 fb7c 	bl	800c948 <__assert_func>
 800a250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a254:	6005      	str	r5, [r0, #0]
 800a256:	60c5      	str	r5, [r0, #12]
 800a258:	69e3      	ldr	r3, [r4, #28]
 800a25a:	6819      	ldr	r1, [r3, #0]
 800a25c:	b151      	cbz	r1, 800a274 <_dtoa_r+0x5c>
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	604a      	str	r2, [r1, #4]
 800a262:	2301      	movs	r3, #1
 800a264:	4093      	lsls	r3, r2
 800a266:	608b      	str	r3, [r1, #8]
 800a268:	4620      	mov	r0, r4
 800a26a:	f001 fd07 	bl	800bc7c <_Bfree>
 800a26e:	69e3      	ldr	r3, [r4, #28]
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	1e3b      	subs	r3, r7, #0
 800a276:	bfbb      	ittet	lt
 800a278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a27c:	9303      	strlt	r3, [sp, #12]
 800a27e:	2300      	movge	r3, #0
 800a280:	2201      	movlt	r2, #1
 800a282:	bfac      	ite	ge
 800a284:	f8c8 3000 	strge.w	r3, [r8]
 800a288:	f8c8 2000 	strlt.w	r2, [r8]
 800a28c:	4b9e      	ldr	r3, [pc, #632]	; (800a508 <_dtoa_r+0x2f0>)
 800a28e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a292:	ea33 0308 	bics.w	r3, r3, r8
 800a296:	d11b      	bne.n	800a2d0 <_dtoa_r+0xb8>
 800a298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a29a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a2a4:	4333      	orrs	r3, r6
 800a2a6:	f000 8593 	beq.w	800add0 <_dtoa_r+0xbb8>
 800a2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ac:	b963      	cbnz	r3, 800a2c8 <_dtoa_r+0xb0>
 800a2ae:	4b97      	ldr	r3, [pc, #604]	; (800a50c <_dtoa_r+0x2f4>)
 800a2b0:	e027      	b.n	800a302 <_dtoa_r+0xea>
 800a2b2:	4b97      	ldr	r3, [pc, #604]	; (800a510 <_dtoa_r+0x2f8>)
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	9800      	ldr	r0, [sp, #0]
 800a2be:	b013      	add	sp, #76	; 0x4c
 800a2c0:	ecbd 8b04 	vpop	{d8-d9}
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c8:	4b90      	ldr	r3, [pc, #576]	; (800a50c <_dtoa_r+0x2f4>)
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	3303      	adds	r3, #3
 800a2ce:	e7f3      	b.n	800a2b8 <_dtoa_r+0xa0>
 800a2d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	ec51 0b17 	vmov	r0, r1, d7
 800a2da:	eeb0 8a47 	vmov.f32	s16, s14
 800a2de:	eef0 8a67 	vmov.f32	s17, s15
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f7f6 fc10 	bl	8000b08 <__aeabi_dcmpeq>
 800a2e8:	4681      	mov	r9, r0
 800a2ea:	b160      	cbz	r0, 800a306 <_dtoa_r+0xee>
 800a2ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 8568 	beq.w	800adca <_dtoa_r+0xbb2>
 800a2fa:	4b86      	ldr	r3, [pc, #536]	; (800a514 <_dtoa_r+0x2fc>)
 800a2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	3b01      	subs	r3, #1
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	e7da      	b.n	800a2bc <_dtoa_r+0xa4>
 800a306:	aa10      	add	r2, sp, #64	; 0x40
 800a308:	a911      	add	r1, sp, #68	; 0x44
 800a30a:	4620      	mov	r0, r4
 800a30c:	eeb0 0a48 	vmov.f32	s0, s16
 800a310:	eef0 0a68 	vmov.f32	s1, s17
 800a314:	f002 f84e 	bl	800c3b4 <__d2b>
 800a318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a31c:	4682      	mov	sl, r0
 800a31e:	2d00      	cmp	r5, #0
 800a320:	d07f      	beq.n	800a422 <_dtoa_r+0x20a>
 800a322:	ee18 3a90 	vmov	r3, s17
 800a326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a32a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a32e:	ec51 0b18 	vmov	r0, r1, d8
 800a332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a33a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a33e:	4619      	mov	r1, r3
 800a340:	2200      	movs	r2, #0
 800a342:	4b75      	ldr	r3, [pc, #468]	; (800a518 <_dtoa_r+0x300>)
 800a344:	f7f5 ffc0 	bl	80002c8 <__aeabi_dsub>
 800a348:	a367      	add	r3, pc, #412	; (adr r3, 800a4e8 <_dtoa_r+0x2d0>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f7f6 f973 	bl	8000638 <__aeabi_dmul>
 800a352:	a367      	add	r3, pc, #412	; (adr r3, 800a4f0 <_dtoa_r+0x2d8>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f5 ffb8 	bl	80002cc <__adddf3>
 800a35c:	4606      	mov	r6, r0
 800a35e:	4628      	mov	r0, r5
 800a360:	460f      	mov	r7, r1
 800a362:	f7f6 f8ff 	bl	8000564 <__aeabi_i2d>
 800a366:	a364      	add	r3, pc, #400	; (adr r3, 800a4f8 <_dtoa_r+0x2e0>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f6 f964 	bl	8000638 <__aeabi_dmul>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f5 ffa8 	bl	80002cc <__adddf3>
 800a37c:	4606      	mov	r6, r0
 800a37e:	460f      	mov	r7, r1
 800a380:	f7f6 fc0a 	bl	8000b98 <__aeabi_d2iz>
 800a384:	2200      	movs	r2, #0
 800a386:	4683      	mov	fp, r0
 800a388:	2300      	movs	r3, #0
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f6 fbc5 	bl	8000b1c <__aeabi_dcmplt>
 800a392:	b148      	cbz	r0, 800a3a8 <_dtoa_r+0x190>
 800a394:	4658      	mov	r0, fp
 800a396:	f7f6 f8e5 	bl	8000564 <__aeabi_i2d>
 800a39a:	4632      	mov	r2, r6
 800a39c:	463b      	mov	r3, r7
 800a39e:	f7f6 fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 800a3a2:	b908      	cbnz	r0, 800a3a8 <_dtoa_r+0x190>
 800a3a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a3a8:	f1bb 0f16 	cmp.w	fp, #22
 800a3ac:	d857      	bhi.n	800a45e <_dtoa_r+0x246>
 800a3ae:	4b5b      	ldr	r3, [pc, #364]	; (800a51c <_dtoa_r+0x304>)
 800a3b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	ec51 0b18 	vmov	r0, r1, d8
 800a3bc:	f7f6 fbae 	bl	8000b1c <__aeabi_dcmplt>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d04e      	beq.n	800a462 <_dtoa_r+0x24a>
 800a3c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a3cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ce:	1b5b      	subs	r3, r3, r5
 800a3d0:	1e5a      	subs	r2, r3, #1
 800a3d2:	bf45      	ittet	mi
 800a3d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a3d8:	9305      	strmi	r3, [sp, #20]
 800a3da:	2300      	movpl	r3, #0
 800a3dc:	2300      	movmi	r3, #0
 800a3de:	9206      	str	r2, [sp, #24]
 800a3e0:	bf54      	ite	pl
 800a3e2:	9305      	strpl	r3, [sp, #20]
 800a3e4:	9306      	strmi	r3, [sp, #24]
 800a3e6:	f1bb 0f00 	cmp.w	fp, #0
 800a3ea:	db3c      	blt.n	800a466 <_dtoa_r+0x24e>
 800a3ec:	9b06      	ldr	r3, [sp, #24]
 800a3ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a3f2:	445b      	add	r3, fp
 800a3f4:	9306      	str	r3, [sp, #24]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9308      	str	r3, [sp, #32]
 800a3fa:	9b07      	ldr	r3, [sp, #28]
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	d868      	bhi.n	800a4d2 <_dtoa_r+0x2ba>
 800a400:	2b05      	cmp	r3, #5
 800a402:	bfc4      	itt	gt
 800a404:	3b04      	subgt	r3, #4
 800a406:	9307      	strgt	r3, [sp, #28]
 800a408:	9b07      	ldr	r3, [sp, #28]
 800a40a:	f1a3 0302 	sub.w	r3, r3, #2
 800a40e:	bfcc      	ite	gt
 800a410:	2500      	movgt	r5, #0
 800a412:	2501      	movle	r5, #1
 800a414:	2b03      	cmp	r3, #3
 800a416:	f200 8085 	bhi.w	800a524 <_dtoa_r+0x30c>
 800a41a:	e8df f003 	tbb	[pc, r3]
 800a41e:	3b2e      	.short	0x3b2e
 800a420:	5839      	.short	0x5839
 800a422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a426:	441d      	add	r5, r3
 800a428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a42c:	2b20      	cmp	r3, #32
 800a42e:	bfc1      	itttt	gt
 800a430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a434:	fa08 f803 	lslgt.w	r8, r8, r3
 800a438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a43c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a440:	bfd6      	itet	le
 800a442:	f1c3 0320 	rsble	r3, r3, #32
 800a446:	ea48 0003 	orrgt.w	r0, r8, r3
 800a44a:	fa06 f003 	lslle.w	r0, r6, r3
 800a44e:	f7f6 f879 	bl	8000544 <__aeabi_ui2d>
 800a452:	2201      	movs	r2, #1
 800a454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a458:	3d01      	subs	r5, #1
 800a45a:	920e      	str	r2, [sp, #56]	; 0x38
 800a45c:	e76f      	b.n	800a33e <_dtoa_r+0x126>
 800a45e:	2301      	movs	r3, #1
 800a460:	e7b3      	b.n	800a3ca <_dtoa_r+0x1b2>
 800a462:	900c      	str	r0, [sp, #48]	; 0x30
 800a464:	e7b2      	b.n	800a3cc <_dtoa_r+0x1b4>
 800a466:	9b05      	ldr	r3, [sp, #20]
 800a468:	eba3 030b 	sub.w	r3, r3, fp
 800a46c:	9305      	str	r3, [sp, #20]
 800a46e:	f1cb 0300 	rsb	r3, fp, #0
 800a472:	9308      	str	r3, [sp, #32]
 800a474:	2300      	movs	r3, #0
 800a476:	930b      	str	r3, [sp, #44]	; 0x2c
 800a478:	e7bf      	b.n	800a3fa <_dtoa_r+0x1e2>
 800a47a:	2300      	movs	r3, #0
 800a47c:	9309      	str	r3, [sp, #36]	; 0x24
 800a47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a480:	2b00      	cmp	r3, #0
 800a482:	dc52      	bgt.n	800a52a <_dtoa_r+0x312>
 800a484:	2301      	movs	r3, #1
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	461a      	mov	r2, r3
 800a48c:	920a      	str	r2, [sp, #40]	; 0x28
 800a48e:	e00b      	b.n	800a4a8 <_dtoa_r+0x290>
 800a490:	2301      	movs	r3, #1
 800a492:	e7f3      	b.n	800a47c <_dtoa_r+0x264>
 800a494:	2300      	movs	r3, #0
 800a496:	9309      	str	r3, [sp, #36]	; 0x24
 800a498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49a:	445b      	add	r3, fp
 800a49c:	9301      	str	r3, [sp, #4]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	bfb8      	it	lt
 800a4a6:	2301      	movlt	r3, #1
 800a4a8:	69e0      	ldr	r0, [r4, #28]
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	f102 0614 	add.w	r6, r2, #20
 800a4b2:	429e      	cmp	r6, r3
 800a4b4:	d93d      	bls.n	800a532 <_dtoa_r+0x31a>
 800a4b6:	6041      	str	r1, [r0, #4]
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f001 fb9f 	bl	800bbfc <_Balloc>
 800a4be:	9000      	str	r0, [sp, #0]
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d139      	bne.n	800a538 <_dtoa_r+0x320>
 800a4c4:	4b16      	ldr	r3, [pc, #88]	; (800a520 <_dtoa_r+0x308>)
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	f240 11af 	movw	r1, #431	; 0x1af
 800a4cc:	e6bd      	b.n	800a24a <_dtoa_r+0x32>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7e1      	b.n	800a496 <_dtoa_r+0x27e>
 800a4d2:	2501      	movs	r5, #1
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	9509      	str	r5, [sp, #36]	; 0x24
 800a4da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2312      	movs	r3, #18
 800a4e6:	e7d1      	b.n	800a48c <_dtoa_r+0x274>
 800a4e8:	636f4361 	.word	0x636f4361
 800a4ec:	3fd287a7 	.word	0x3fd287a7
 800a4f0:	8b60c8b3 	.word	0x8b60c8b3
 800a4f4:	3fc68a28 	.word	0x3fc68a28
 800a4f8:	509f79fb 	.word	0x509f79fb
 800a4fc:	3fd34413 	.word	0x3fd34413
 800a500:	0800d55e 	.word	0x0800d55e
 800a504:	0800d575 	.word	0x0800d575
 800a508:	7ff00000 	.word	0x7ff00000
 800a50c:	0800d55a 	.word	0x0800d55a
 800a510:	0800d551 	.word	0x0800d551
 800a514:	0800d3cd 	.word	0x0800d3cd
 800a518:	3ff80000 	.word	0x3ff80000
 800a51c:	0800d6d0 	.word	0x0800d6d0
 800a520:	0800d5cd 	.word	0x0800d5cd
 800a524:	2301      	movs	r3, #1
 800a526:	9309      	str	r3, [sp, #36]	; 0x24
 800a528:	e7d7      	b.n	800a4da <_dtoa_r+0x2c2>
 800a52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	e7ba      	b.n	800a4a8 <_dtoa_r+0x290>
 800a532:	3101      	adds	r1, #1
 800a534:	0052      	lsls	r2, r2, #1
 800a536:	e7ba      	b.n	800a4ae <_dtoa_r+0x296>
 800a538:	69e3      	ldr	r3, [r4, #28]
 800a53a:	9a00      	ldr	r2, [sp, #0]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	2b0e      	cmp	r3, #14
 800a542:	f200 80a8 	bhi.w	800a696 <_dtoa_r+0x47e>
 800a546:	2d00      	cmp	r5, #0
 800a548:	f000 80a5 	beq.w	800a696 <_dtoa_r+0x47e>
 800a54c:	f1bb 0f00 	cmp.w	fp, #0
 800a550:	dd38      	ble.n	800a5c4 <_dtoa_r+0x3ac>
 800a552:	4bc0      	ldr	r3, [pc, #768]	; (800a854 <_dtoa_r+0x63c>)
 800a554:	f00b 020f 	and.w	r2, fp, #15
 800a558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a55c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a560:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a564:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a568:	d019      	beq.n	800a59e <_dtoa_r+0x386>
 800a56a:	4bbb      	ldr	r3, [pc, #748]	; (800a858 <_dtoa_r+0x640>)
 800a56c:	ec51 0b18 	vmov	r0, r1, d8
 800a570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a574:	f7f6 f98a 	bl	800088c <__aeabi_ddiv>
 800a578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a57c:	f008 080f 	and.w	r8, r8, #15
 800a580:	2503      	movs	r5, #3
 800a582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a858 <_dtoa_r+0x640>
 800a586:	f1b8 0f00 	cmp.w	r8, #0
 800a58a:	d10a      	bne.n	800a5a2 <_dtoa_r+0x38a>
 800a58c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a590:	4632      	mov	r2, r6
 800a592:	463b      	mov	r3, r7
 800a594:	f7f6 f97a 	bl	800088c <__aeabi_ddiv>
 800a598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a59c:	e02b      	b.n	800a5f6 <_dtoa_r+0x3de>
 800a59e:	2502      	movs	r5, #2
 800a5a0:	e7ef      	b.n	800a582 <_dtoa_r+0x36a>
 800a5a2:	f018 0f01 	tst.w	r8, #1
 800a5a6:	d008      	beq.n	800a5ba <_dtoa_r+0x3a2>
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4639      	mov	r1, r7
 800a5ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a5b0:	f7f6 f842 	bl	8000638 <__aeabi_dmul>
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a5be:	f109 0908 	add.w	r9, r9, #8
 800a5c2:	e7e0      	b.n	800a586 <_dtoa_r+0x36e>
 800a5c4:	f000 809f 	beq.w	800a706 <_dtoa_r+0x4ee>
 800a5c8:	f1cb 0600 	rsb	r6, fp, #0
 800a5cc:	4ba1      	ldr	r3, [pc, #644]	; (800a854 <_dtoa_r+0x63c>)
 800a5ce:	4fa2      	ldr	r7, [pc, #648]	; (800a858 <_dtoa_r+0x640>)
 800a5d0:	f006 020f 	and.w	r2, r6, #15
 800a5d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5dc:	ec51 0b18 	vmov	r0, r1, d8
 800a5e0:	f7f6 f82a 	bl	8000638 <__aeabi_dmul>
 800a5e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e8:	1136      	asrs	r6, r6, #4
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2502      	movs	r5, #2
 800a5ee:	2e00      	cmp	r6, #0
 800a5f0:	d17e      	bne.n	800a6f0 <_dtoa_r+0x4d8>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1d0      	bne.n	800a598 <_dtoa_r+0x380>
 800a5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 8084 	beq.w	800a70a <_dtoa_r+0x4f2>
 800a602:	4b96      	ldr	r3, [pc, #600]	; (800a85c <_dtoa_r+0x644>)
 800a604:	2200      	movs	r2, #0
 800a606:	4640      	mov	r0, r8
 800a608:	4649      	mov	r1, r9
 800a60a:	f7f6 fa87 	bl	8000b1c <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d07b      	beq.n	800a70a <_dtoa_r+0x4f2>
 800a612:	9b04      	ldr	r3, [sp, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d078      	beq.n	800a70a <_dtoa_r+0x4f2>
 800a618:	9b01      	ldr	r3, [sp, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dd39      	ble.n	800a692 <_dtoa_r+0x47a>
 800a61e:	4b90      	ldr	r3, [pc, #576]	; (800a860 <_dtoa_r+0x648>)
 800a620:	2200      	movs	r2, #0
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f6 f807 	bl	8000638 <__aeabi_dmul>
 800a62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a62e:	9e01      	ldr	r6, [sp, #4]
 800a630:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a634:	3501      	adds	r5, #1
 800a636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a63a:	4628      	mov	r0, r5
 800a63c:	f7f5 ff92 	bl	8000564 <__aeabi_i2d>
 800a640:	4642      	mov	r2, r8
 800a642:	464b      	mov	r3, r9
 800a644:	f7f5 fff8 	bl	8000638 <__aeabi_dmul>
 800a648:	4b86      	ldr	r3, [pc, #536]	; (800a864 <_dtoa_r+0x64c>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	f7f5 fe3e 	bl	80002cc <__adddf3>
 800a650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	2e00      	cmp	r6, #0
 800a65c:	d158      	bne.n	800a710 <_dtoa_r+0x4f8>
 800a65e:	4b82      	ldr	r3, [pc, #520]	; (800a868 <_dtoa_r+0x650>)
 800a660:	2200      	movs	r2, #0
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	f7f5 fe2f 	bl	80002c8 <__aeabi_dsub>
 800a66a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a66e:	4680      	mov	r8, r0
 800a670:	4689      	mov	r9, r1
 800a672:	f7f6 fa71 	bl	8000b58 <__aeabi_dcmpgt>
 800a676:	2800      	cmp	r0, #0
 800a678:	f040 8296 	bne.w	800aba8 <_dtoa_r+0x990>
 800a67c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a680:	4640      	mov	r0, r8
 800a682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a686:	4649      	mov	r1, r9
 800a688:	f7f6 fa48 	bl	8000b1c <__aeabi_dcmplt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 8289 	bne.w	800aba4 <_dtoa_r+0x98c>
 800a692:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f2c0 814e 	blt.w	800a93a <_dtoa_r+0x722>
 800a69e:	f1bb 0f0e 	cmp.w	fp, #14
 800a6a2:	f300 814a 	bgt.w	800a93a <_dtoa_r+0x722>
 800a6a6:	4b6b      	ldr	r3, [pc, #428]	; (800a854 <_dtoa_r+0x63c>)
 800a6a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f280 80dc 	bge.w	800a870 <_dtoa_r+0x658>
 800a6b8:	9b04      	ldr	r3, [sp, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f300 80d8 	bgt.w	800a870 <_dtoa_r+0x658>
 800a6c0:	f040 826f 	bne.w	800aba2 <_dtoa_r+0x98a>
 800a6c4:	4b68      	ldr	r3, [pc, #416]	; (800a868 <_dtoa_r+0x650>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f5 ffb4 	bl	8000638 <__aeabi_dmul>
 800a6d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d4:	f7f6 fa36 	bl	8000b44 <__aeabi_dcmpge>
 800a6d8:	9e04      	ldr	r6, [sp, #16]
 800a6da:	4637      	mov	r7, r6
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f040 8245 	bne.w	800ab6c <_dtoa_r+0x954>
 800a6e2:	9d00      	ldr	r5, [sp, #0]
 800a6e4:	2331      	movs	r3, #49	; 0x31
 800a6e6:	f805 3b01 	strb.w	r3, [r5], #1
 800a6ea:	f10b 0b01 	add.w	fp, fp, #1
 800a6ee:	e241      	b.n	800ab74 <_dtoa_r+0x95c>
 800a6f0:	07f2      	lsls	r2, r6, #31
 800a6f2:	d505      	bpl.n	800a700 <_dtoa_r+0x4e8>
 800a6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f8:	f7f5 ff9e 	bl	8000638 <__aeabi_dmul>
 800a6fc:	3501      	adds	r5, #1
 800a6fe:	2301      	movs	r3, #1
 800a700:	1076      	asrs	r6, r6, #1
 800a702:	3708      	adds	r7, #8
 800a704:	e773      	b.n	800a5ee <_dtoa_r+0x3d6>
 800a706:	2502      	movs	r5, #2
 800a708:	e775      	b.n	800a5f6 <_dtoa_r+0x3de>
 800a70a:	9e04      	ldr	r6, [sp, #16]
 800a70c:	465f      	mov	r7, fp
 800a70e:	e792      	b.n	800a636 <_dtoa_r+0x41e>
 800a710:	9900      	ldr	r1, [sp, #0]
 800a712:	4b50      	ldr	r3, [pc, #320]	; (800a854 <_dtoa_r+0x63c>)
 800a714:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a718:	4431      	add	r1, r6
 800a71a:	9102      	str	r1, [sp, #8]
 800a71c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a71e:	eeb0 9a47 	vmov.f32	s18, s14
 800a722:	eef0 9a67 	vmov.f32	s19, s15
 800a726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a72a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a72e:	2900      	cmp	r1, #0
 800a730:	d044      	beq.n	800a7bc <_dtoa_r+0x5a4>
 800a732:	494e      	ldr	r1, [pc, #312]	; (800a86c <_dtoa_r+0x654>)
 800a734:	2000      	movs	r0, #0
 800a736:	f7f6 f8a9 	bl	800088c <__aeabi_ddiv>
 800a73a:	ec53 2b19 	vmov	r2, r3, d9
 800a73e:	f7f5 fdc3 	bl	80002c8 <__aeabi_dsub>
 800a742:	9d00      	ldr	r5, [sp, #0]
 800a744:	ec41 0b19 	vmov	d9, r0, r1
 800a748:	4649      	mov	r1, r9
 800a74a:	4640      	mov	r0, r8
 800a74c:	f7f6 fa24 	bl	8000b98 <__aeabi_d2iz>
 800a750:	4606      	mov	r6, r0
 800a752:	f7f5 ff07 	bl	8000564 <__aeabi_i2d>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	4640      	mov	r0, r8
 800a75c:	4649      	mov	r1, r9
 800a75e:	f7f5 fdb3 	bl	80002c8 <__aeabi_dsub>
 800a762:	3630      	adds	r6, #48	; 0x30
 800a764:	f805 6b01 	strb.w	r6, [r5], #1
 800a768:	ec53 2b19 	vmov	r2, r3, d9
 800a76c:	4680      	mov	r8, r0
 800a76e:	4689      	mov	r9, r1
 800a770:	f7f6 f9d4 	bl	8000b1c <__aeabi_dcmplt>
 800a774:	2800      	cmp	r0, #0
 800a776:	d164      	bne.n	800a842 <_dtoa_r+0x62a>
 800a778:	4642      	mov	r2, r8
 800a77a:	464b      	mov	r3, r9
 800a77c:	4937      	ldr	r1, [pc, #220]	; (800a85c <_dtoa_r+0x644>)
 800a77e:	2000      	movs	r0, #0
 800a780:	f7f5 fda2 	bl	80002c8 <__aeabi_dsub>
 800a784:	ec53 2b19 	vmov	r2, r3, d9
 800a788:	f7f6 f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	f040 80b6 	bne.w	800a8fe <_dtoa_r+0x6e6>
 800a792:	9b02      	ldr	r3, [sp, #8]
 800a794:	429d      	cmp	r5, r3
 800a796:	f43f af7c 	beq.w	800a692 <_dtoa_r+0x47a>
 800a79a:	4b31      	ldr	r3, [pc, #196]	; (800a860 <_dtoa_r+0x648>)
 800a79c:	ec51 0b19 	vmov	r0, r1, d9
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f7f5 ff49 	bl	8000638 <__aeabi_dmul>
 800a7a6:	4b2e      	ldr	r3, [pc, #184]	; (800a860 <_dtoa_r+0x648>)
 800a7a8:	ec41 0b19 	vmov	d9, r0, r1
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	f7f5 ff41 	bl	8000638 <__aeabi_dmul>
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	4689      	mov	r9, r1
 800a7ba:	e7c5      	b.n	800a748 <_dtoa_r+0x530>
 800a7bc:	ec51 0b17 	vmov	r0, r1, d7
 800a7c0:	f7f5 ff3a 	bl	8000638 <__aeabi_dmul>
 800a7c4:	9b02      	ldr	r3, [sp, #8]
 800a7c6:	9d00      	ldr	r5, [sp, #0]
 800a7c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7ca:	ec41 0b19 	vmov	d9, r0, r1
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	f7f6 f9e1 	bl	8000b98 <__aeabi_d2iz>
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	f7f5 fec4 	bl	8000564 <__aeabi_i2d>
 800a7dc:	3630      	adds	r6, #48	; 0x30
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	f7f5 fd6f 	bl	80002c8 <__aeabi_dsub>
 800a7ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a7ee:	9b02      	ldr	r3, [sp, #8]
 800a7f0:	429d      	cmp	r5, r3
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	4689      	mov	r9, r1
 800a7f6:	f04f 0200 	mov.w	r2, #0
 800a7fa:	d124      	bne.n	800a846 <_dtoa_r+0x62e>
 800a7fc:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <_dtoa_r+0x654>)
 800a7fe:	ec51 0b19 	vmov	r0, r1, d9
 800a802:	f7f5 fd63 	bl	80002cc <__adddf3>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	4640      	mov	r0, r8
 800a80c:	4649      	mov	r1, r9
 800a80e:	f7f6 f9a3 	bl	8000b58 <__aeabi_dcmpgt>
 800a812:	2800      	cmp	r0, #0
 800a814:	d173      	bne.n	800a8fe <_dtoa_r+0x6e6>
 800a816:	ec53 2b19 	vmov	r2, r3, d9
 800a81a:	4914      	ldr	r1, [pc, #80]	; (800a86c <_dtoa_r+0x654>)
 800a81c:	2000      	movs	r0, #0
 800a81e:	f7f5 fd53 	bl	80002c8 <__aeabi_dsub>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4640      	mov	r0, r8
 800a828:	4649      	mov	r1, r9
 800a82a:	f7f6 f977 	bl	8000b1c <__aeabi_dcmplt>
 800a82e:	2800      	cmp	r0, #0
 800a830:	f43f af2f 	beq.w	800a692 <_dtoa_r+0x47a>
 800a834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a836:	1e6b      	subs	r3, r5, #1
 800a838:	930f      	str	r3, [sp, #60]	; 0x3c
 800a83a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a83e:	2b30      	cmp	r3, #48	; 0x30
 800a840:	d0f8      	beq.n	800a834 <_dtoa_r+0x61c>
 800a842:	46bb      	mov	fp, r7
 800a844:	e04a      	b.n	800a8dc <_dtoa_r+0x6c4>
 800a846:	4b06      	ldr	r3, [pc, #24]	; (800a860 <_dtoa_r+0x648>)
 800a848:	f7f5 fef6 	bl	8000638 <__aeabi_dmul>
 800a84c:	4680      	mov	r8, r0
 800a84e:	4689      	mov	r9, r1
 800a850:	e7bd      	b.n	800a7ce <_dtoa_r+0x5b6>
 800a852:	bf00      	nop
 800a854:	0800d6d0 	.word	0x0800d6d0
 800a858:	0800d6a8 	.word	0x0800d6a8
 800a85c:	3ff00000 	.word	0x3ff00000
 800a860:	40240000 	.word	0x40240000
 800a864:	401c0000 	.word	0x401c0000
 800a868:	40140000 	.word	0x40140000
 800a86c:	3fe00000 	.word	0x3fe00000
 800a870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a874:	9d00      	ldr	r5, [sp, #0]
 800a876:	4642      	mov	r2, r8
 800a878:	464b      	mov	r3, r9
 800a87a:	4630      	mov	r0, r6
 800a87c:	4639      	mov	r1, r7
 800a87e:	f7f6 f805 	bl	800088c <__aeabi_ddiv>
 800a882:	f7f6 f989 	bl	8000b98 <__aeabi_d2iz>
 800a886:	9001      	str	r0, [sp, #4]
 800a888:	f7f5 fe6c 	bl	8000564 <__aeabi_i2d>
 800a88c:	4642      	mov	r2, r8
 800a88e:	464b      	mov	r3, r9
 800a890:	f7f5 fed2 	bl	8000638 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fd14 	bl	80002c8 <__aeabi_dsub>
 800a8a0:	9e01      	ldr	r6, [sp, #4]
 800a8a2:	9f04      	ldr	r7, [sp, #16]
 800a8a4:	3630      	adds	r6, #48	; 0x30
 800a8a6:	f805 6b01 	strb.w	r6, [r5], #1
 800a8aa:	9e00      	ldr	r6, [sp, #0]
 800a8ac:	1bae      	subs	r6, r5, r6
 800a8ae:	42b7      	cmp	r7, r6
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	d134      	bne.n	800a920 <_dtoa_r+0x708>
 800a8b6:	f7f5 fd09 	bl	80002cc <__adddf3>
 800a8ba:	4642      	mov	r2, r8
 800a8bc:	464b      	mov	r3, r9
 800a8be:	4606      	mov	r6, r0
 800a8c0:	460f      	mov	r7, r1
 800a8c2:	f7f6 f949 	bl	8000b58 <__aeabi_dcmpgt>
 800a8c6:	b9c8      	cbnz	r0, 800a8fc <_dtoa_r+0x6e4>
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f6 f91a 	bl	8000b08 <__aeabi_dcmpeq>
 800a8d4:	b110      	cbz	r0, 800a8dc <_dtoa_r+0x6c4>
 800a8d6:	9b01      	ldr	r3, [sp, #4]
 800a8d8:	07db      	lsls	r3, r3, #31
 800a8da:	d40f      	bmi.n	800a8fc <_dtoa_r+0x6e4>
 800a8dc:	4651      	mov	r1, sl
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f001 f9cc 	bl	800bc7c <_Bfree>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8e8:	702b      	strb	r3, [r5, #0]
 800a8ea:	f10b 0301 	add.w	r3, fp, #1
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f43f ace2 	beq.w	800a2bc <_dtoa_r+0xa4>
 800a8f8:	601d      	str	r5, [r3, #0]
 800a8fa:	e4df      	b.n	800a2bc <_dtoa_r+0xa4>
 800a8fc:	465f      	mov	r7, fp
 800a8fe:	462b      	mov	r3, r5
 800a900:	461d      	mov	r5, r3
 800a902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a906:	2a39      	cmp	r2, #57	; 0x39
 800a908:	d106      	bne.n	800a918 <_dtoa_r+0x700>
 800a90a:	9a00      	ldr	r2, [sp, #0]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d1f7      	bne.n	800a900 <_dtoa_r+0x6e8>
 800a910:	9900      	ldr	r1, [sp, #0]
 800a912:	2230      	movs	r2, #48	; 0x30
 800a914:	3701      	adds	r7, #1
 800a916:	700a      	strb	r2, [r1, #0]
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	3201      	adds	r2, #1
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	e790      	b.n	800a842 <_dtoa_r+0x62a>
 800a920:	4ba3      	ldr	r3, [pc, #652]	; (800abb0 <_dtoa_r+0x998>)
 800a922:	2200      	movs	r2, #0
 800a924:	f7f5 fe88 	bl	8000638 <__aeabi_dmul>
 800a928:	2200      	movs	r2, #0
 800a92a:	2300      	movs	r3, #0
 800a92c:	4606      	mov	r6, r0
 800a92e:	460f      	mov	r7, r1
 800a930:	f7f6 f8ea 	bl	8000b08 <__aeabi_dcmpeq>
 800a934:	2800      	cmp	r0, #0
 800a936:	d09e      	beq.n	800a876 <_dtoa_r+0x65e>
 800a938:	e7d0      	b.n	800a8dc <_dtoa_r+0x6c4>
 800a93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	f000 80ca 	beq.w	800aad6 <_dtoa_r+0x8be>
 800a942:	9a07      	ldr	r2, [sp, #28]
 800a944:	2a01      	cmp	r2, #1
 800a946:	f300 80ad 	bgt.w	800aaa4 <_dtoa_r+0x88c>
 800a94a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a94c:	2a00      	cmp	r2, #0
 800a94e:	f000 80a5 	beq.w	800aa9c <_dtoa_r+0x884>
 800a952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a956:	9e08      	ldr	r6, [sp, #32]
 800a958:	9d05      	ldr	r5, [sp, #20]
 800a95a:	9a05      	ldr	r2, [sp, #20]
 800a95c:	441a      	add	r2, r3
 800a95e:	9205      	str	r2, [sp, #20]
 800a960:	9a06      	ldr	r2, [sp, #24]
 800a962:	2101      	movs	r1, #1
 800a964:	441a      	add	r2, r3
 800a966:	4620      	mov	r0, r4
 800a968:	9206      	str	r2, [sp, #24]
 800a96a:	f001 fa87 	bl	800be7c <__i2b>
 800a96e:	4607      	mov	r7, r0
 800a970:	b165      	cbz	r5, 800a98c <_dtoa_r+0x774>
 800a972:	9b06      	ldr	r3, [sp, #24]
 800a974:	2b00      	cmp	r3, #0
 800a976:	dd09      	ble.n	800a98c <_dtoa_r+0x774>
 800a978:	42ab      	cmp	r3, r5
 800a97a:	9a05      	ldr	r2, [sp, #20]
 800a97c:	bfa8      	it	ge
 800a97e:	462b      	movge	r3, r5
 800a980:	1ad2      	subs	r2, r2, r3
 800a982:	9205      	str	r2, [sp, #20]
 800a984:	9a06      	ldr	r2, [sp, #24]
 800a986:	1aed      	subs	r5, r5, r3
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	9306      	str	r3, [sp, #24]
 800a98c:	9b08      	ldr	r3, [sp, #32]
 800a98e:	b1f3      	cbz	r3, 800a9ce <_dtoa_r+0x7b6>
 800a990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 80a3 	beq.w	800aade <_dtoa_r+0x8c6>
 800a998:	2e00      	cmp	r6, #0
 800a99a:	dd10      	ble.n	800a9be <_dtoa_r+0x7a6>
 800a99c:	4639      	mov	r1, r7
 800a99e:	4632      	mov	r2, r6
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f001 fb2b 	bl	800bffc <__pow5mult>
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	4607      	mov	r7, r0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f001 fa7b 	bl	800bea8 <__multiply>
 800a9b2:	4651      	mov	r1, sl
 800a9b4:	4680      	mov	r8, r0
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f001 f960 	bl	800bc7c <_Bfree>
 800a9bc:	46c2      	mov	sl, r8
 800a9be:	9b08      	ldr	r3, [sp, #32]
 800a9c0:	1b9a      	subs	r2, r3, r6
 800a9c2:	d004      	beq.n	800a9ce <_dtoa_r+0x7b6>
 800a9c4:	4651      	mov	r1, sl
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f001 fb18 	bl	800bffc <__pow5mult>
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f001 fa53 	bl	800be7c <__i2b>
 800a9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	4606      	mov	r6, r0
 800a9dc:	f340 8081 	ble.w	800aae2 <_dtoa_r+0x8ca>
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f001 fb09 	bl	800bffc <__pow5mult>
 800a9ea:	9b07      	ldr	r3, [sp, #28]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	dd7a      	ble.n	800aae8 <_dtoa_r+0x8d0>
 800a9f2:	f04f 0800 	mov.w	r8, #0
 800a9f6:	6933      	ldr	r3, [r6, #16]
 800a9f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9fc:	6918      	ldr	r0, [r3, #16]
 800a9fe:	f001 f9ef 	bl	800bde0 <__hi0bits>
 800aa02:	f1c0 0020 	rsb	r0, r0, #32
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	4418      	add	r0, r3
 800aa0a:	f010 001f 	ands.w	r0, r0, #31
 800aa0e:	f000 8094 	beq.w	800ab3a <_dtoa_r+0x922>
 800aa12:	f1c0 0320 	rsb	r3, r0, #32
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	f340 8085 	ble.w	800ab26 <_dtoa_r+0x90e>
 800aa1c:	9b05      	ldr	r3, [sp, #20]
 800aa1e:	f1c0 001c 	rsb	r0, r0, #28
 800aa22:	4403      	add	r3, r0
 800aa24:	9305      	str	r3, [sp, #20]
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	4403      	add	r3, r0
 800aa2a:	4405      	add	r5, r0
 800aa2c:	9306      	str	r3, [sp, #24]
 800aa2e:	9b05      	ldr	r3, [sp, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dd05      	ble.n	800aa40 <_dtoa_r+0x828>
 800aa34:	4651      	mov	r1, sl
 800aa36:	461a      	mov	r2, r3
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f001 fb39 	bl	800c0b0 <__lshift>
 800aa3e:	4682      	mov	sl, r0
 800aa40:	9b06      	ldr	r3, [sp, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dd05      	ble.n	800aa52 <_dtoa_r+0x83a>
 800aa46:	4631      	mov	r1, r6
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f001 fb30 	bl	800c0b0 <__lshift>
 800aa50:	4606      	mov	r6, r0
 800aa52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d072      	beq.n	800ab3e <_dtoa_r+0x926>
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	f001 fb94 	bl	800c188 <__mcmp>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	da6c      	bge.n	800ab3e <_dtoa_r+0x926>
 800aa64:	2300      	movs	r3, #0
 800aa66:	4651      	mov	r1, sl
 800aa68:	220a      	movs	r2, #10
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f001 f928 	bl	800bcc0 <__multadd>
 800aa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aa76:	4682      	mov	sl, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 81b0 	beq.w	800adde <_dtoa_r+0xbc6>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	4639      	mov	r1, r7
 800aa82:	220a      	movs	r2, #10
 800aa84:	4620      	mov	r0, r4
 800aa86:	f001 f91b 	bl	800bcc0 <__multadd>
 800aa8a:	9b01      	ldr	r3, [sp, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	4607      	mov	r7, r0
 800aa90:	f300 8096 	bgt.w	800abc0 <_dtoa_r+0x9a8>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	dc59      	bgt.n	800ab4e <_dtoa_r+0x936>
 800aa9a:	e091      	b.n	800abc0 <_dtoa_r+0x9a8>
 800aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaa2:	e758      	b.n	800a956 <_dtoa_r+0x73e>
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	1e5e      	subs	r6, r3, #1
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	42b3      	cmp	r3, r6
 800aaac:	bfbf      	itttt	lt
 800aaae:	9b08      	ldrlt	r3, [sp, #32]
 800aab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aab2:	9608      	strlt	r6, [sp, #32]
 800aab4:	1af3      	sublt	r3, r6, r3
 800aab6:	bfb4      	ite	lt
 800aab8:	18d2      	addlt	r2, r2, r3
 800aaba:	1b9e      	subge	r6, r3, r6
 800aabc:	9b04      	ldr	r3, [sp, #16]
 800aabe:	bfbc      	itt	lt
 800aac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aac2:	2600      	movlt	r6, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bfb7      	itett	lt
 800aac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aacc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aad0:	1a9d      	sublt	r5, r3, r2
 800aad2:	2300      	movlt	r3, #0
 800aad4:	e741      	b.n	800a95a <_dtoa_r+0x742>
 800aad6:	9e08      	ldr	r6, [sp, #32]
 800aad8:	9d05      	ldr	r5, [sp, #20]
 800aada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aadc:	e748      	b.n	800a970 <_dtoa_r+0x758>
 800aade:	9a08      	ldr	r2, [sp, #32]
 800aae0:	e770      	b.n	800a9c4 <_dtoa_r+0x7ac>
 800aae2:	9b07      	ldr	r3, [sp, #28]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	dc19      	bgt.n	800ab1c <_dtoa_r+0x904>
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	b9bb      	cbnz	r3, 800ab1c <_dtoa_r+0x904>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaf2:	b99b      	cbnz	r3, 800ab1c <_dtoa_r+0x904>
 800aaf4:	9b03      	ldr	r3, [sp, #12]
 800aaf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aafa:	0d1b      	lsrs	r3, r3, #20
 800aafc:	051b      	lsls	r3, r3, #20
 800aafe:	b183      	cbz	r3, 800ab22 <_dtoa_r+0x90a>
 800ab00:	9b05      	ldr	r3, [sp, #20]
 800ab02:	3301      	adds	r3, #1
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	9b06      	ldr	r3, [sp, #24]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	9306      	str	r3, [sp, #24]
 800ab0c:	f04f 0801 	mov.w	r8, #1
 800ab10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f47f af6f 	bne.w	800a9f6 <_dtoa_r+0x7de>
 800ab18:	2001      	movs	r0, #1
 800ab1a:	e774      	b.n	800aa06 <_dtoa_r+0x7ee>
 800ab1c:	f04f 0800 	mov.w	r8, #0
 800ab20:	e7f6      	b.n	800ab10 <_dtoa_r+0x8f8>
 800ab22:	4698      	mov	r8, r3
 800ab24:	e7f4      	b.n	800ab10 <_dtoa_r+0x8f8>
 800ab26:	d082      	beq.n	800aa2e <_dtoa_r+0x816>
 800ab28:	9a05      	ldr	r2, [sp, #20]
 800ab2a:	331c      	adds	r3, #28
 800ab2c:	441a      	add	r2, r3
 800ab2e:	9205      	str	r2, [sp, #20]
 800ab30:	9a06      	ldr	r2, [sp, #24]
 800ab32:	441a      	add	r2, r3
 800ab34:	441d      	add	r5, r3
 800ab36:	9206      	str	r2, [sp, #24]
 800ab38:	e779      	b.n	800aa2e <_dtoa_r+0x816>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	e7f4      	b.n	800ab28 <_dtoa_r+0x910>
 800ab3e:	9b04      	ldr	r3, [sp, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dc37      	bgt.n	800abb4 <_dtoa_r+0x99c>
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	dd34      	ble.n	800abb4 <_dtoa_r+0x99c>
 800ab4a:	9b04      	ldr	r3, [sp, #16]
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	b963      	cbnz	r3, 800ab6c <_dtoa_r+0x954>
 800ab52:	4631      	mov	r1, r6
 800ab54:	2205      	movs	r2, #5
 800ab56:	4620      	mov	r0, r4
 800ab58:	f001 f8b2 	bl	800bcc0 <__multadd>
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	4606      	mov	r6, r0
 800ab60:	4650      	mov	r0, sl
 800ab62:	f001 fb11 	bl	800c188 <__mcmp>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	f73f adbb 	bgt.w	800a6e2 <_dtoa_r+0x4ca>
 800ab6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab6e:	9d00      	ldr	r5, [sp, #0]
 800ab70:	ea6f 0b03 	mvn.w	fp, r3
 800ab74:	f04f 0800 	mov.w	r8, #0
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f001 f87e 	bl	800bc7c <_Bfree>
 800ab80:	2f00      	cmp	r7, #0
 800ab82:	f43f aeab 	beq.w	800a8dc <_dtoa_r+0x6c4>
 800ab86:	f1b8 0f00 	cmp.w	r8, #0
 800ab8a:	d005      	beq.n	800ab98 <_dtoa_r+0x980>
 800ab8c:	45b8      	cmp	r8, r7
 800ab8e:	d003      	beq.n	800ab98 <_dtoa_r+0x980>
 800ab90:	4641      	mov	r1, r8
 800ab92:	4620      	mov	r0, r4
 800ab94:	f001 f872 	bl	800bc7c <_Bfree>
 800ab98:	4639      	mov	r1, r7
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f001 f86e 	bl	800bc7c <_Bfree>
 800aba0:	e69c      	b.n	800a8dc <_dtoa_r+0x6c4>
 800aba2:	2600      	movs	r6, #0
 800aba4:	4637      	mov	r7, r6
 800aba6:	e7e1      	b.n	800ab6c <_dtoa_r+0x954>
 800aba8:	46bb      	mov	fp, r7
 800abaa:	4637      	mov	r7, r6
 800abac:	e599      	b.n	800a6e2 <_dtoa_r+0x4ca>
 800abae:	bf00      	nop
 800abb0:	40240000 	.word	0x40240000
 800abb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 80c8 	beq.w	800ad4c <_dtoa_r+0xb34>
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	dd05      	ble.n	800abd0 <_dtoa_r+0x9b8>
 800abc4:	4639      	mov	r1, r7
 800abc6:	462a      	mov	r2, r5
 800abc8:	4620      	mov	r0, r4
 800abca:	f001 fa71 	bl	800c0b0 <__lshift>
 800abce:	4607      	mov	r7, r0
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	d05b      	beq.n	800ac8e <_dtoa_r+0xa76>
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4620      	mov	r0, r4
 800abda:	f001 f80f 	bl	800bbfc <_Balloc>
 800abde:	4605      	mov	r5, r0
 800abe0:	b928      	cbnz	r0, 800abee <_dtoa_r+0x9d6>
 800abe2:	4b83      	ldr	r3, [pc, #524]	; (800adf0 <_dtoa_r+0xbd8>)
 800abe4:	4602      	mov	r2, r0
 800abe6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800abea:	f7ff bb2e 	b.w	800a24a <_dtoa_r+0x32>
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	3202      	adds	r2, #2
 800abf2:	0092      	lsls	r2, r2, #2
 800abf4:	f107 010c 	add.w	r1, r7, #12
 800abf8:	300c      	adds	r0, #12
 800abfa:	f7ff fa65 	bl	800a0c8 <memcpy>
 800abfe:	2201      	movs	r2, #1
 800ac00:	4629      	mov	r1, r5
 800ac02:	4620      	mov	r0, r4
 800ac04:	f001 fa54 	bl	800c0b0 <__lshift>
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac12:	4413      	add	r3, r2
 800ac14:	9308      	str	r3, [sp, #32]
 800ac16:	9b02      	ldr	r3, [sp, #8]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	46b8      	mov	r8, r7
 800ac1e:	9306      	str	r3, [sp, #24]
 800ac20:	4607      	mov	r7, r0
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	4631      	mov	r1, r6
 800ac26:	3b01      	subs	r3, #1
 800ac28:	4650      	mov	r0, sl
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	f7ff fa6a 	bl	800a104 <quorem>
 800ac30:	4641      	mov	r1, r8
 800ac32:	9002      	str	r0, [sp, #8]
 800ac34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac38:	4650      	mov	r0, sl
 800ac3a:	f001 faa5 	bl	800c188 <__mcmp>
 800ac3e:	463a      	mov	r2, r7
 800ac40:	9005      	str	r0, [sp, #20]
 800ac42:	4631      	mov	r1, r6
 800ac44:	4620      	mov	r0, r4
 800ac46:	f001 fabb 	bl	800c1c0 <__mdiff>
 800ac4a:	68c2      	ldr	r2, [r0, #12]
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	bb02      	cbnz	r2, 800ac92 <_dtoa_r+0xa7a>
 800ac50:	4601      	mov	r1, r0
 800ac52:	4650      	mov	r0, sl
 800ac54:	f001 fa98 	bl	800c188 <__mcmp>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ac60:	f001 f80c 	bl	800bc7c <_Bfree>
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac68:	9d04      	ldr	r5, [sp, #16]
 800ac6a:	ea43 0102 	orr.w	r1, r3, r2
 800ac6e:	9b06      	ldr	r3, [sp, #24]
 800ac70:	4319      	orrs	r1, r3
 800ac72:	d110      	bne.n	800ac96 <_dtoa_r+0xa7e>
 800ac74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac78:	d029      	beq.n	800acce <_dtoa_r+0xab6>
 800ac7a:	9b05      	ldr	r3, [sp, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	dd02      	ble.n	800ac86 <_dtoa_r+0xa6e>
 800ac80:	9b02      	ldr	r3, [sp, #8]
 800ac82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	f883 9000 	strb.w	r9, [r3]
 800ac8c:	e774      	b.n	800ab78 <_dtoa_r+0x960>
 800ac8e:	4638      	mov	r0, r7
 800ac90:	e7ba      	b.n	800ac08 <_dtoa_r+0x9f0>
 800ac92:	2201      	movs	r2, #1
 800ac94:	e7e1      	b.n	800ac5a <_dtoa_r+0xa42>
 800ac96:	9b05      	ldr	r3, [sp, #20]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	db04      	blt.n	800aca6 <_dtoa_r+0xa8e>
 800ac9c:	9907      	ldr	r1, [sp, #28]
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	9906      	ldr	r1, [sp, #24]
 800aca2:	430b      	orrs	r3, r1
 800aca4:	d120      	bne.n	800ace8 <_dtoa_r+0xad0>
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	dded      	ble.n	800ac86 <_dtoa_r+0xa6e>
 800acaa:	4651      	mov	r1, sl
 800acac:	2201      	movs	r2, #1
 800acae:	4620      	mov	r0, r4
 800acb0:	f001 f9fe 	bl	800c0b0 <__lshift>
 800acb4:	4631      	mov	r1, r6
 800acb6:	4682      	mov	sl, r0
 800acb8:	f001 fa66 	bl	800c188 <__mcmp>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	dc03      	bgt.n	800acc8 <_dtoa_r+0xab0>
 800acc0:	d1e1      	bne.n	800ac86 <_dtoa_r+0xa6e>
 800acc2:	f019 0f01 	tst.w	r9, #1
 800acc6:	d0de      	beq.n	800ac86 <_dtoa_r+0xa6e>
 800acc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800accc:	d1d8      	bne.n	800ac80 <_dtoa_r+0xa68>
 800acce:	9a01      	ldr	r2, [sp, #4]
 800acd0:	2339      	movs	r3, #57	; 0x39
 800acd2:	7013      	strb	r3, [r2, #0]
 800acd4:	462b      	mov	r3, r5
 800acd6:	461d      	mov	r5, r3
 800acd8:	3b01      	subs	r3, #1
 800acda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acde:	2a39      	cmp	r2, #57	; 0x39
 800ace0:	d06c      	beq.n	800adbc <_dtoa_r+0xba4>
 800ace2:	3201      	adds	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	e747      	b.n	800ab78 <_dtoa_r+0x960>
 800ace8:	2a00      	cmp	r2, #0
 800acea:	dd07      	ble.n	800acfc <_dtoa_r+0xae4>
 800acec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800acf0:	d0ed      	beq.n	800acce <_dtoa_r+0xab6>
 800acf2:	9a01      	ldr	r2, [sp, #4]
 800acf4:	f109 0301 	add.w	r3, r9, #1
 800acf8:	7013      	strb	r3, [r2, #0]
 800acfa:	e73d      	b.n	800ab78 <_dtoa_r+0x960>
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	9a08      	ldr	r2, [sp, #32]
 800ad00:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d043      	beq.n	800ad90 <_dtoa_r+0xb78>
 800ad08:	4651      	mov	r1, sl
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	220a      	movs	r2, #10
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f000 ffd6 	bl	800bcc0 <__multadd>
 800ad14:	45b8      	cmp	r8, r7
 800ad16:	4682      	mov	sl, r0
 800ad18:	f04f 0300 	mov.w	r3, #0
 800ad1c:	f04f 020a 	mov.w	r2, #10
 800ad20:	4641      	mov	r1, r8
 800ad22:	4620      	mov	r0, r4
 800ad24:	d107      	bne.n	800ad36 <_dtoa_r+0xb1e>
 800ad26:	f000 ffcb 	bl	800bcc0 <__multadd>
 800ad2a:	4680      	mov	r8, r0
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	9b04      	ldr	r3, [sp, #16]
 800ad30:	3301      	adds	r3, #1
 800ad32:	9304      	str	r3, [sp, #16]
 800ad34:	e775      	b.n	800ac22 <_dtoa_r+0xa0a>
 800ad36:	f000 ffc3 	bl	800bcc0 <__multadd>
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	2300      	movs	r3, #0
 800ad40:	220a      	movs	r2, #10
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 ffbc 	bl	800bcc0 <__multadd>
 800ad48:	4607      	mov	r7, r0
 800ad4a:	e7f0      	b.n	800ad2e <_dtoa_r+0xb16>
 800ad4c:	9b04      	ldr	r3, [sp, #16]
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	9d00      	ldr	r5, [sp, #0]
 800ad52:	4631      	mov	r1, r6
 800ad54:	4650      	mov	r0, sl
 800ad56:	f7ff f9d5 	bl	800a104 <quorem>
 800ad5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad5e:	9b00      	ldr	r3, [sp, #0]
 800ad60:	f805 9b01 	strb.w	r9, [r5], #1
 800ad64:	1aea      	subs	r2, r5, r3
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	dd07      	ble.n	800ad7c <_dtoa_r+0xb64>
 800ad6c:	4651      	mov	r1, sl
 800ad6e:	2300      	movs	r3, #0
 800ad70:	220a      	movs	r2, #10
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 ffa4 	bl	800bcc0 <__multadd>
 800ad78:	4682      	mov	sl, r0
 800ad7a:	e7ea      	b.n	800ad52 <_dtoa_r+0xb3a>
 800ad7c:	9b01      	ldr	r3, [sp, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bfc8      	it	gt
 800ad82:	461d      	movgt	r5, r3
 800ad84:	9b00      	ldr	r3, [sp, #0]
 800ad86:	bfd8      	it	le
 800ad88:	2501      	movle	r5, #1
 800ad8a:	441d      	add	r5, r3
 800ad8c:	f04f 0800 	mov.w	r8, #0
 800ad90:	4651      	mov	r1, sl
 800ad92:	2201      	movs	r2, #1
 800ad94:	4620      	mov	r0, r4
 800ad96:	f001 f98b 	bl	800c0b0 <__lshift>
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4682      	mov	sl, r0
 800ad9e:	f001 f9f3 	bl	800c188 <__mcmp>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	dc96      	bgt.n	800acd4 <_dtoa_r+0xabc>
 800ada6:	d102      	bne.n	800adae <_dtoa_r+0xb96>
 800ada8:	f019 0f01 	tst.w	r9, #1
 800adac:	d192      	bne.n	800acd4 <_dtoa_r+0xabc>
 800adae:	462b      	mov	r3, r5
 800adb0:	461d      	mov	r5, r3
 800adb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adb6:	2a30      	cmp	r2, #48	; 0x30
 800adb8:	d0fa      	beq.n	800adb0 <_dtoa_r+0xb98>
 800adba:	e6dd      	b.n	800ab78 <_dtoa_r+0x960>
 800adbc:	9a00      	ldr	r2, [sp, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d189      	bne.n	800acd6 <_dtoa_r+0xabe>
 800adc2:	f10b 0b01 	add.w	fp, fp, #1
 800adc6:	2331      	movs	r3, #49	; 0x31
 800adc8:	e796      	b.n	800acf8 <_dtoa_r+0xae0>
 800adca:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <_dtoa_r+0xbdc>)
 800adcc:	f7ff ba99 	b.w	800a302 <_dtoa_r+0xea>
 800add0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800add2:	2b00      	cmp	r3, #0
 800add4:	f47f aa6d 	bne.w	800a2b2 <_dtoa_r+0x9a>
 800add8:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <_dtoa_r+0xbe0>)
 800adda:	f7ff ba92 	b.w	800a302 <_dtoa_r+0xea>
 800adde:	9b01      	ldr	r3, [sp, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	dcb5      	bgt.n	800ad50 <_dtoa_r+0xb38>
 800ade4:	9b07      	ldr	r3, [sp, #28]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	f73f aeb1 	bgt.w	800ab4e <_dtoa_r+0x936>
 800adec:	e7b0      	b.n	800ad50 <_dtoa_r+0xb38>
 800adee:	bf00      	nop
 800adf0:	0800d5cd 	.word	0x0800d5cd
 800adf4:	0800d3cc 	.word	0x0800d3cc
 800adf8:	0800d551 	.word	0x0800d551

0800adfc <_free_r>:
 800adfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adfe:	2900      	cmp	r1, #0
 800ae00:	d044      	beq.n	800ae8c <_free_r+0x90>
 800ae02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae06:	9001      	str	r0, [sp, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae0e:	bfb8      	it	lt
 800ae10:	18e4      	addlt	r4, r4, r3
 800ae12:	f7fe f91f 	bl	8009054 <__malloc_lock>
 800ae16:	4a1e      	ldr	r2, [pc, #120]	; (800ae90 <_free_r+0x94>)
 800ae18:	9801      	ldr	r0, [sp, #4]
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	b933      	cbnz	r3, 800ae2c <_free_r+0x30>
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	6014      	str	r4, [r2, #0]
 800ae22:	b003      	add	sp, #12
 800ae24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae28:	f7fe b91a 	b.w	8009060 <__malloc_unlock>
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d908      	bls.n	800ae42 <_free_r+0x46>
 800ae30:	6825      	ldr	r5, [r4, #0]
 800ae32:	1961      	adds	r1, r4, r5
 800ae34:	428b      	cmp	r3, r1
 800ae36:	bf01      	itttt	eq
 800ae38:	6819      	ldreq	r1, [r3, #0]
 800ae3a:	685b      	ldreq	r3, [r3, #4]
 800ae3c:	1949      	addeq	r1, r1, r5
 800ae3e:	6021      	streq	r1, [r4, #0]
 800ae40:	e7ed      	b.n	800ae1e <_free_r+0x22>
 800ae42:	461a      	mov	r2, r3
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b10b      	cbz	r3, 800ae4c <_free_r+0x50>
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d9fa      	bls.n	800ae42 <_free_r+0x46>
 800ae4c:	6811      	ldr	r1, [r2, #0]
 800ae4e:	1855      	adds	r5, r2, r1
 800ae50:	42a5      	cmp	r5, r4
 800ae52:	d10b      	bne.n	800ae6c <_free_r+0x70>
 800ae54:	6824      	ldr	r4, [r4, #0]
 800ae56:	4421      	add	r1, r4
 800ae58:	1854      	adds	r4, r2, r1
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	6011      	str	r1, [r2, #0]
 800ae5e:	d1e0      	bne.n	800ae22 <_free_r+0x26>
 800ae60:	681c      	ldr	r4, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	6053      	str	r3, [r2, #4]
 800ae66:	440c      	add	r4, r1
 800ae68:	6014      	str	r4, [r2, #0]
 800ae6a:	e7da      	b.n	800ae22 <_free_r+0x26>
 800ae6c:	d902      	bls.n	800ae74 <_free_r+0x78>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	e7d6      	b.n	800ae22 <_free_r+0x26>
 800ae74:	6825      	ldr	r5, [r4, #0]
 800ae76:	1961      	adds	r1, r4, r5
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	bf04      	itt	eq
 800ae7c:	6819      	ldreq	r1, [r3, #0]
 800ae7e:	685b      	ldreq	r3, [r3, #4]
 800ae80:	6063      	str	r3, [r4, #4]
 800ae82:	bf04      	itt	eq
 800ae84:	1949      	addeq	r1, r1, r5
 800ae86:	6021      	streq	r1, [r4, #0]
 800ae88:	6054      	str	r4, [r2, #4]
 800ae8a:	e7ca      	b.n	800ae22 <_free_r+0x26>
 800ae8c:	b003      	add	sp, #12
 800ae8e:	bd30      	pop	{r4, r5, pc}
 800ae90:	20018584 	.word	0x20018584

0800ae94 <rshift>:
 800ae94:	6903      	ldr	r3, [r0, #16]
 800ae96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aea2:	f100 0414 	add.w	r4, r0, #20
 800aea6:	dd45      	ble.n	800af34 <rshift+0xa0>
 800aea8:	f011 011f 	ands.w	r1, r1, #31
 800aeac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aeb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aeb4:	d10c      	bne.n	800aed0 <rshift+0x3c>
 800aeb6:	f100 0710 	add.w	r7, r0, #16
 800aeba:	4629      	mov	r1, r5
 800aebc:	42b1      	cmp	r1, r6
 800aebe:	d334      	bcc.n	800af2a <rshift+0x96>
 800aec0:	1a9b      	subs	r3, r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	1eea      	subs	r2, r5, #3
 800aec6:	4296      	cmp	r6, r2
 800aec8:	bf38      	it	cc
 800aeca:	2300      	movcc	r3, #0
 800aecc:	4423      	add	r3, r4
 800aece:	e015      	b.n	800aefc <rshift+0x68>
 800aed0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aed4:	f1c1 0820 	rsb	r8, r1, #32
 800aed8:	40cf      	lsrs	r7, r1
 800aeda:	f105 0e04 	add.w	lr, r5, #4
 800aede:	46a1      	mov	r9, r4
 800aee0:	4576      	cmp	r6, lr
 800aee2:	46f4      	mov	ip, lr
 800aee4:	d815      	bhi.n	800af12 <rshift+0x7e>
 800aee6:	1a9a      	subs	r2, r3, r2
 800aee8:	0092      	lsls	r2, r2, #2
 800aeea:	3a04      	subs	r2, #4
 800aeec:	3501      	adds	r5, #1
 800aeee:	42ae      	cmp	r6, r5
 800aef0:	bf38      	it	cc
 800aef2:	2200      	movcc	r2, #0
 800aef4:	18a3      	adds	r3, r4, r2
 800aef6:	50a7      	str	r7, [r4, r2]
 800aef8:	b107      	cbz	r7, 800aefc <rshift+0x68>
 800aefa:	3304      	adds	r3, #4
 800aefc:	1b1a      	subs	r2, r3, r4
 800aefe:	42a3      	cmp	r3, r4
 800af00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af04:	bf08      	it	eq
 800af06:	2300      	moveq	r3, #0
 800af08:	6102      	str	r2, [r0, #16]
 800af0a:	bf08      	it	eq
 800af0c:	6143      	streq	r3, [r0, #20]
 800af0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af12:	f8dc c000 	ldr.w	ip, [ip]
 800af16:	fa0c fc08 	lsl.w	ip, ip, r8
 800af1a:	ea4c 0707 	orr.w	r7, ip, r7
 800af1e:	f849 7b04 	str.w	r7, [r9], #4
 800af22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af26:	40cf      	lsrs	r7, r1
 800af28:	e7da      	b.n	800aee0 <rshift+0x4c>
 800af2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800af2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800af32:	e7c3      	b.n	800aebc <rshift+0x28>
 800af34:	4623      	mov	r3, r4
 800af36:	e7e1      	b.n	800aefc <rshift+0x68>

0800af38 <__hexdig_fun>:
 800af38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af3c:	2b09      	cmp	r3, #9
 800af3e:	d802      	bhi.n	800af46 <__hexdig_fun+0xe>
 800af40:	3820      	subs	r0, #32
 800af42:	b2c0      	uxtb	r0, r0
 800af44:	4770      	bx	lr
 800af46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af4a:	2b05      	cmp	r3, #5
 800af4c:	d801      	bhi.n	800af52 <__hexdig_fun+0x1a>
 800af4e:	3847      	subs	r0, #71	; 0x47
 800af50:	e7f7      	b.n	800af42 <__hexdig_fun+0xa>
 800af52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af56:	2b05      	cmp	r3, #5
 800af58:	d801      	bhi.n	800af5e <__hexdig_fun+0x26>
 800af5a:	3827      	subs	r0, #39	; 0x27
 800af5c:	e7f1      	b.n	800af42 <__hexdig_fun+0xa>
 800af5e:	2000      	movs	r0, #0
 800af60:	4770      	bx	lr
	...

0800af64 <__gethex>:
 800af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	4617      	mov	r7, r2
 800af6a:	680a      	ldr	r2, [r1, #0]
 800af6c:	b085      	sub	sp, #20
 800af6e:	f102 0b02 	add.w	fp, r2, #2
 800af72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af7a:	4681      	mov	r9, r0
 800af7c:	468a      	mov	sl, r1
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	32fe      	adds	r2, #254	; 0xfe
 800af82:	eb02 030b 	add.w	r3, r2, fp
 800af86:	46d8      	mov	r8, fp
 800af88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	2830      	cmp	r0, #48	; 0x30
 800af90:	d0f7      	beq.n	800af82 <__gethex+0x1e>
 800af92:	f7ff ffd1 	bl	800af38 <__hexdig_fun>
 800af96:	4604      	mov	r4, r0
 800af98:	2800      	cmp	r0, #0
 800af9a:	d138      	bne.n	800b00e <__gethex+0xaa>
 800af9c:	49a7      	ldr	r1, [pc, #668]	; (800b23c <__gethex+0x2d8>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	4640      	mov	r0, r8
 800afa2:	f7ff f837 	bl	800a014 <strncmp>
 800afa6:	4606      	mov	r6, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d169      	bne.n	800b080 <__gethex+0x11c>
 800afac:	f898 0001 	ldrb.w	r0, [r8, #1]
 800afb0:	465d      	mov	r5, fp
 800afb2:	f7ff ffc1 	bl	800af38 <__hexdig_fun>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d064      	beq.n	800b084 <__gethex+0x120>
 800afba:	465a      	mov	r2, fp
 800afbc:	7810      	ldrb	r0, [r2, #0]
 800afbe:	2830      	cmp	r0, #48	; 0x30
 800afc0:	4690      	mov	r8, r2
 800afc2:	f102 0201 	add.w	r2, r2, #1
 800afc6:	d0f9      	beq.n	800afbc <__gethex+0x58>
 800afc8:	f7ff ffb6 	bl	800af38 <__hexdig_fun>
 800afcc:	2301      	movs	r3, #1
 800afce:	fab0 f480 	clz	r4, r0
 800afd2:	0964      	lsrs	r4, r4, #5
 800afd4:	465e      	mov	r6, fp
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	4642      	mov	r2, r8
 800afda:	4615      	mov	r5, r2
 800afdc:	3201      	adds	r2, #1
 800afde:	7828      	ldrb	r0, [r5, #0]
 800afe0:	f7ff ffaa 	bl	800af38 <__hexdig_fun>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1f8      	bne.n	800afda <__gethex+0x76>
 800afe8:	4994      	ldr	r1, [pc, #592]	; (800b23c <__gethex+0x2d8>)
 800afea:	2201      	movs	r2, #1
 800afec:	4628      	mov	r0, r5
 800afee:	f7ff f811 	bl	800a014 <strncmp>
 800aff2:	b978      	cbnz	r0, 800b014 <__gethex+0xb0>
 800aff4:	b946      	cbnz	r6, 800b008 <__gethex+0xa4>
 800aff6:	1c6e      	adds	r6, r5, #1
 800aff8:	4632      	mov	r2, r6
 800affa:	4615      	mov	r5, r2
 800affc:	3201      	adds	r2, #1
 800affe:	7828      	ldrb	r0, [r5, #0]
 800b000:	f7ff ff9a 	bl	800af38 <__hexdig_fun>
 800b004:	2800      	cmp	r0, #0
 800b006:	d1f8      	bne.n	800affa <__gethex+0x96>
 800b008:	1b73      	subs	r3, r6, r5
 800b00a:	009e      	lsls	r6, r3, #2
 800b00c:	e004      	b.n	800b018 <__gethex+0xb4>
 800b00e:	2400      	movs	r4, #0
 800b010:	4626      	mov	r6, r4
 800b012:	e7e1      	b.n	800afd8 <__gethex+0x74>
 800b014:	2e00      	cmp	r6, #0
 800b016:	d1f7      	bne.n	800b008 <__gethex+0xa4>
 800b018:	782b      	ldrb	r3, [r5, #0]
 800b01a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b01e:	2b50      	cmp	r3, #80	; 0x50
 800b020:	d13d      	bne.n	800b09e <__gethex+0x13a>
 800b022:	786b      	ldrb	r3, [r5, #1]
 800b024:	2b2b      	cmp	r3, #43	; 0x2b
 800b026:	d02f      	beq.n	800b088 <__gethex+0x124>
 800b028:	2b2d      	cmp	r3, #45	; 0x2d
 800b02a:	d031      	beq.n	800b090 <__gethex+0x12c>
 800b02c:	1c69      	adds	r1, r5, #1
 800b02e:	f04f 0b00 	mov.w	fp, #0
 800b032:	7808      	ldrb	r0, [r1, #0]
 800b034:	f7ff ff80 	bl	800af38 <__hexdig_fun>
 800b038:	1e42      	subs	r2, r0, #1
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	2a18      	cmp	r2, #24
 800b03e:	d82e      	bhi.n	800b09e <__gethex+0x13a>
 800b040:	f1a0 0210 	sub.w	r2, r0, #16
 800b044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b048:	f7ff ff76 	bl	800af38 <__hexdig_fun>
 800b04c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800b050:	fa5f fc8c 	uxtb.w	ip, ip
 800b054:	f1bc 0f18 	cmp.w	ip, #24
 800b058:	d91d      	bls.n	800b096 <__gethex+0x132>
 800b05a:	f1bb 0f00 	cmp.w	fp, #0
 800b05e:	d000      	beq.n	800b062 <__gethex+0xfe>
 800b060:	4252      	negs	r2, r2
 800b062:	4416      	add	r6, r2
 800b064:	f8ca 1000 	str.w	r1, [sl]
 800b068:	b1dc      	cbz	r4, 800b0a2 <__gethex+0x13e>
 800b06a:	9b01      	ldr	r3, [sp, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bf14      	ite	ne
 800b070:	f04f 0800 	movne.w	r8, #0
 800b074:	f04f 0806 	moveq.w	r8, #6
 800b078:	4640      	mov	r0, r8
 800b07a:	b005      	add	sp, #20
 800b07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b080:	4645      	mov	r5, r8
 800b082:	4626      	mov	r6, r4
 800b084:	2401      	movs	r4, #1
 800b086:	e7c7      	b.n	800b018 <__gethex+0xb4>
 800b088:	f04f 0b00 	mov.w	fp, #0
 800b08c:	1ca9      	adds	r1, r5, #2
 800b08e:	e7d0      	b.n	800b032 <__gethex+0xce>
 800b090:	f04f 0b01 	mov.w	fp, #1
 800b094:	e7fa      	b.n	800b08c <__gethex+0x128>
 800b096:	230a      	movs	r3, #10
 800b098:	fb03 0002 	mla	r0, r3, r2, r0
 800b09c:	e7d0      	b.n	800b040 <__gethex+0xdc>
 800b09e:	4629      	mov	r1, r5
 800b0a0:	e7e0      	b.n	800b064 <__gethex+0x100>
 800b0a2:	eba5 0308 	sub.w	r3, r5, r8
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	2b07      	cmp	r3, #7
 800b0ac:	dc0a      	bgt.n	800b0c4 <__gethex+0x160>
 800b0ae:	4648      	mov	r0, r9
 800b0b0:	f000 fda4 	bl	800bbfc <_Balloc>
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	b940      	cbnz	r0, 800b0ca <__gethex+0x166>
 800b0b8:	4b61      	ldr	r3, [pc, #388]	; (800b240 <__gethex+0x2dc>)
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	21e4      	movs	r1, #228	; 0xe4
 800b0be:	4861      	ldr	r0, [pc, #388]	; (800b244 <__gethex+0x2e0>)
 800b0c0:	f001 fc42 	bl	800c948 <__assert_func>
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	105b      	asrs	r3, r3, #1
 800b0c8:	e7ef      	b.n	800b0aa <__gethex+0x146>
 800b0ca:	f100 0a14 	add.w	sl, r0, #20
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	495a      	ldr	r1, [pc, #360]	; (800b23c <__gethex+0x2d8>)
 800b0d2:	f8cd a004 	str.w	sl, [sp, #4]
 800b0d6:	469b      	mov	fp, r3
 800b0d8:	45a8      	cmp	r8, r5
 800b0da:	d342      	bcc.n	800b162 <__gethex+0x1fe>
 800b0dc:	9801      	ldr	r0, [sp, #4]
 800b0de:	f840 bb04 	str.w	fp, [r0], #4
 800b0e2:	eba0 000a 	sub.w	r0, r0, sl
 800b0e6:	1080      	asrs	r0, r0, #2
 800b0e8:	6120      	str	r0, [r4, #16]
 800b0ea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b0ee:	4658      	mov	r0, fp
 800b0f0:	f000 fe76 	bl	800bde0 <__hi0bits>
 800b0f4:	683d      	ldr	r5, [r7, #0]
 800b0f6:	eba8 0000 	sub.w	r0, r8, r0
 800b0fa:	42a8      	cmp	r0, r5
 800b0fc:	dd59      	ble.n	800b1b2 <__gethex+0x24e>
 800b0fe:	eba0 0805 	sub.w	r8, r0, r5
 800b102:	4641      	mov	r1, r8
 800b104:	4620      	mov	r0, r4
 800b106:	f001 fa05 	bl	800c514 <__any_on>
 800b10a:	4683      	mov	fp, r0
 800b10c:	b1b8      	cbz	r0, 800b13e <__gethex+0x1da>
 800b10e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800b112:	1159      	asrs	r1, r3, #5
 800b114:	f003 021f 	and.w	r2, r3, #31
 800b118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b11c:	f04f 0b01 	mov.w	fp, #1
 800b120:	fa0b f202 	lsl.w	r2, fp, r2
 800b124:	420a      	tst	r2, r1
 800b126:	d00a      	beq.n	800b13e <__gethex+0x1da>
 800b128:	455b      	cmp	r3, fp
 800b12a:	dd06      	ble.n	800b13a <__gethex+0x1d6>
 800b12c:	f1a8 0102 	sub.w	r1, r8, #2
 800b130:	4620      	mov	r0, r4
 800b132:	f001 f9ef 	bl	800c514 <__any_on>
 800b136:	2800      	cmp	r0, #0
 800b138:	d138      	bne.n	800b1ac <__gethex+0x248>
 800b13a:	f04f 0b02 	mov.w	fp, #2
 800b13e:	4641      	mov	r1, r8
 800b140:	4620      	mov	r0, r4
 800b142:	f7ff fea7 	bl	800ae94 <rshift>
 800b146:	4446      	add	r6, r8
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	42b3      	cmp	r3, r6
 800b14c:	da41      	bge.n	800b1d2 <__gethex+0x26e>
 800b14e:	4621      	mov	r1, r4
 800b150:	4648      	mov	r0, r9
 800b152:	f000 fd93 	bl	800bc7c <_Bfree>
 800b156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b158:	2300      	movs	r3, #0
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b160:	e78a      	b.n	800b078 <__gethex+0x114>
 800b162:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b166:	2a2e      	cmp	r2, #46	; 0x2e
 800b168:	d014      	beq.n	800b194 <__gethex+0x230>
 800b16a:	2b20      	cmp	r3, #32
 800b16c:	d106      	bne.n	800b17c <__gethex+0x218>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	f843 bb04 	str.w	fp, [r3], #4
 800b174:	f04f 0b00 	mov.w	fp, #0
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	465b      	mov	r3, fp
 800b17c:	7828      	ldrb	r0, [r5, #0]
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	f7ff feda 	bl	800af38 <__hexdig_fun>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	f000 000f 	and.w	r0, r0, #15
 800b18a:	4098      	lsls	r0, r3
 800b18c:	ea4b 0b00 	orr.w	fp, fp, r0
 800b190:	3304      	adds	r3, #4
 800b192:	e7a1      	b.n	800b0d8 <__gethex+0x174>
 800b194:	45a8      	cmp	r8, r5
 800b196:	d8e8      	bhi.n	800b16a <__gethex+0x206>
 800b198:	2201      	movs	r2, #1
 800b19a:	4628      	mov	r0, r5
 800b19c:	9303      	str	r3, [sp, #12]
 800b19e:	f7fe ff39 	bl	800a014 <strncmp>
 800b1a2:	4926      	ldr	r1, [pc, #152]	; (800b23c <__gethex+0x2d8>)
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d1df      	bne.n	800b16a <__gethex+0x206>
 800b1aa:	e795      	b.n	800b0d8 <__gethex+0x174>
 800b1ac:	f04f 0b03 	mov.w	fp, #3
 800b1b0:	e7c5      	b.n	800b13e <__gethex+0x1da>
 800b1b2:	da0b      	bge.n	800b1cc <__gethex+0x268>
 800b1b4:	eba5 0800 	sub.w	r8, r5, r0
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4642      	mov	r2, r8
 800b1bc:	4648      	mov	r0, r9
 800b1be:	f000 ff77 	bl	800c0b0 <__lshift>
 800b1c2:	eba6 0608 	sub.w	r6, r6, r8
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	f100 0a14 	add.w	sl, r0, #20
 800b1cc:	f04f 0b00 	mov.w	fp, #0
 800b1d0:	e7ba      	b.n	800b148 <__gethex+0x1e4>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	42b3      	cmp	r3, r6
 800b1d6:	dd73      	ble.n	800b2c0 <__gethex+0x35c>
 800b1d8:	1b9e      	subs	r6, r3, r6
 800b1da:	42b5      	cmp	r5, r6
 800b1dc:	dc34      	bgt.n	800b248 <__gethex+0x2e4>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d023      	beq.n	800b22c <__gethex+0x2c8>
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d025      	beq.n	800b234 <__gethex+0x2d0>
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d115      	bne.n	800b218 <__gethex+0x2b4>
 800b1ec:	42b5      	cmp	r5, r6
 800b1ee:	d113      	bne.n	800b218 <__gethex+0x2b4>
 800b1f0:	2d01      	cmp	r5, #1
 800b1f2:	d10b      	bne.n	800b20c <__gethex+0x2a8>
 800b1f4:	9a02      	ldr	r2, [sp, #8]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	6123      	str	r3, [r4, #16]
 800b1fe:	f8ca 3000 	str.w	r3, [sl]
 800b202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b204:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b208:	601c      	str	r4, [r3, #0]
 800b20a:	e735      	b.n	800b078 <__gethex+0x114>
 800b20c:	1e69      	subs	r1, r5, #1
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 f980 	bl	800c514 <__any_on>
 800b214:	2800      	cmp	r0, #0
 800b216:	d1ed      	bne.n	800b1f4 <__gethex+0x290>
 800b218:	4621      	mov	r1, r4
 800b21a:	4648      	mov	r0, r9
 800b21c:	f000 fd2e 	bl	800bc7c <_Bfree>
 800b220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b222:	2300      	movs	r3, #0
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b22a:	e725      	b.n	800b078 <__gethex+0x114>
 800b22c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1f2      	bne.n	800b218 <__gethex+0x2b4>
 800b232:	e7df      	b.n	800b1f4 <__gethex+0x290>
 800b234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1dc      	bne.n	800b1f4 <__gethex+0x290>
 800b23a:	e7ed      	b.n	800b218 <__gethex+0x2b4>
 800b23c:	0800d3f5 	.word	0x0800d3f5
 800b240:	0800d5cd 	.word	0x0800d5cd
 800b244:	0800d5de 	.word	0x0800d5de
 800b248:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800b24c:	f1bb 0f00 	cmp.w	fp, #0
 800b250:	d133      	bne.n	800b2ba <__gethex+0x356>
 800b252:	f1b8 0f00 	cmp.w	r8, #0
 800b256:	d004      	beq.n	800b262 <__gethex+0x2fe>
 800b258:	4641      	mov	r1, r8
 800b25a:	4620      	mov	r0, r4
 800b25c:	f001 f95a 	bl	800c514 <__any_on>
 800b260:	4683      	mov	fp, r0
 800b262:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b266:	2301      	movs	r3, #1
 800b268:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b26c:	f008 081f 	and.w	r8, r8, #31
 800b270:	fa03 f308 	lsl.w	r3, r3, r8
 800b274:	4213      	tst	r3, r2
 800b276:	4631      	mov	r1, r6
 800b278:	4620      	mov	r0, r4
 800b27a:	bf18      	it	ne
 800b27c:	f04b 0b02 	orrne.w	fp, fp, #2
 800b280:	1bad      	subs	r5, r5, r6
 800b282:	f7ff fe07 	bl	800ae94 <rshift>
 800b286:	687e      	ldr	r6, [r7, #4]
 800b288:	f04f 0802 	mov.w	r8, #2
 800b28c:	f1bb 0f00 	cmp.w	fp, #0
 800b290:	d04a      	beq.n	800b328 <__gethex+0x3c4>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2b02      	cmp	r3, #2
 800b296:	d016      	beq.n	800b2c6 <__gethex+0x362>
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d018      	beq.n	800b2ce <__gethex+0x36a>
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d109      	bne.n	800b2b4 <__gethex+0x350>
 800b2a0:	f01b 0f02 	tst.w	fp, #2
 800b2a4:	d006      	beq.n	800b2b4 <__gethex+0x350>
 800b2a6:	f8da 3000 	ldr.w	r3, [sl]
 800b2aa:	ea4b 0b03 	orr.w	fp, fp, r3
 800b2ae:	f01b 0f01 	tst.w	fp, #1
 800b2b2:	d10f      	bne.n	800b2d4 <__gethex+0x370>
 800b2b4:	f048 0810 	orr.w	r8, r8, #16
 800b2b8:	e036      	b.n	800b328 <__gethex+0x3c4>
 800b2ba:	f04f 0b01 	mov.w	fp, #1
 800b2be:	e7d0      	b.n	800b262 <__gethex+0x2fe>
 800b2c0:	f04f 0801 	mov.w	r8, #1
 800b2c4:	e7e2      	b.n	800b28c <__gethex+0x328>
 800b2c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2c8:	f1c3 0301 	rsb	r3, r3, #1
 800b2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0ef      	beq.n	800b2b4 <__gethex+0x350>
 800b2d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2d8:	f104 0214 	add.w	r2, r4, #20
 800b2dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	4694      	mov	ip, r2
 800b2ea:	f852 1b04 	ldr.w	r1, [r2], #4
 800b2ee:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b2f2:	d01e      	beq.n	800b332 <__gethex+0x3ce>
 800b2f4:	3101      	adds	r1, #1
 800b2f6:	f8cc 1000 	str.w	r1, [ip]
 800b2fa:	f1b8 0f02 	cmp.w	r8, #2
 800b2fe:	f104 0214 	add.w	r2, r4, #20
 800b302:	d13d      	bne.n	800b380 <__gethex+0x41c>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	3b01      	subs	r3, #1
 800b308:	42ab      	cmp	r3, r5
 800b30a:	d10b      	bne.n	800b324 <__gethex+0x3c0>
 800b30c:	1169      	asrs	r1, r5, #5
 800b30e:	2301      	movs	r3, #1
 800b310:	f005 051f 	and.w	r5, r5, #31
 800b314:	fa03 f505 	lsl.w	r5, r3, r5
 800b318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b31c:	421d      	tst	r5, r3
 800b31e:	bf18      	it	ne
 800b320:	f04f 0801 	movne.w	r8, #1
 800b324:	f048 0820 	orr.w	r8, r8, #32
 800b328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b32a:	601c      	str	r4, [r3, #0]
 800b32c:	9b02      	ldr	r3, [sp, #8]
 800b32e:	601e      	str	r6, [r3, #0]
 800b330:	e6a2      	b.n	800b078 <__gethex+0x114>
 800b332:	4290      	cmp	r0, r2
 800b334:	f842 3c04 	str.w	r3, [r2, #-4]
 800b338:	d8d6      	bhi.n	800b2e8 <__gethex+0x384>
 800b33a:	68a2      	ldr	r2, [r4, #8]
 800b33c:	4593      	cmp	fp, r2
 800b33e:	db17      	blt.n	800b370 <__gethex+0x40c>
 800b340:	6861      	ldr	r1, [r4, #4]
 800b342:	4648      	mov	r0, r9
 800b344:	3101      	adds	r1, #1
 800b346:	f000 fc59 	bl	800bbfc <_Balloc>
 800b34a:	4682      	mov	sl, r0
 800b34c:	b918      	cbnz	r0, 800b356 <__gethex+0x3f2>
 800b34e:	4b1b      	ldr	r3, [pc, #108]	; (800b3bc <__gethex+0x458>)
 800b350:	4602      	mov	r2, r0
 800b352:	2184      	movs	r1, #132	; 0x84
 800b354:	e6b3      	b.n	800b0be <__gethex+0x15a>
 800b356:	6922      	ldr	r2, [r4, #16]
 800b358:	3202      	adds	r2, #2
 800b35a:	f104 010c 	add.w	r1, r4, #12
 800b35e:	0092      	lsls	r2, r2, #2
 800b360:	300c      	adds	r0, #12
 800b362:	f7fe feb1 	bl	800a0c8 <memcpy>
 800b366:	4621      	mov	r1, r4
 800b368:	4648      	mov	r0, r9
 800b36a:	f000 fc87 	bl	800bc7c <_Bfree>
 800b36e:	4654      	mov	r4, sl
 800b370:	6922      	ldr	r2, [r4, #16]
 800b372:	1c51      	adds	r1, r2, #1
 800b374:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b378:	6121      	str	r1, [r4, #16]
 800b37a:	2101      	movs	r1, #1
 800b37c:	6151      	str	r1, [r2, #20]
 800b37e:	e7bc      	b.n	800b2fa <__gethex+0x396>
 800b380:	6921      	ldr	r1, [r4, #16]
 800b382:	4559      	cmp	r1, fp
 800b384:	dd0b      	ble.n	800b39e <__gethex+0x43a>
 800b386:	2101      	movs	r1, #1
 800b388:	4620      	mov	r0, r4
 800b38a:	f7ff fd83 	bl	800ae94 <rshift>
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	3601      	adds	r6, #1
 800b392:	42b3      	cmp	r3, r6
 800b394:	f6ff aedb 	blt.w	800b14e <__gethex+0x1ea>
 800b398:	f04f 0801 	mov.w	r8, #1
 800b39c:	e7c2      	b.n	800b324 <__gethex+0x3c0>
 800b39e:	f015 051f 	ands.w	r5, r5, #31
 800b3a2:	d0f9      	beq.n	800b398 <__gethex+0x434>
 800b3a4:	9b01      	ldr	r3, [sp, #4]
 800b3a6:	441a      	add	r2, r3
 800b3a8:	f1c5 0520 	rsb	r5, r5, #32
 800b3ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b3b0:	f000 fd16 	bl	800bde0 <__hi0bits>
 800b3b4:	42a8      	cmp	r0, r5
 800b3b6:	dbe6      	blt.n	800b386 <__gethex+0x422>
 800b3b8:	e7ee      	b.n	800b398 <__gethex+0x434>
 800b3ba:	bf00      	nop
 800b3bc:	0800d5cd 	.word	0x0800d5cd

0800b3c0 <L_shift>:
 800b3c0:	f1c2 0208 	rsb	r2, r2, #8
 800b3c4:	0092      	lsls	r2, r2, #2
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	f1c2 0620 	rsb	r6, r2, #32
 800b3cc:	6843      	ldr	r3, [r0, #4]
 800b3ce:	6804      	ldr	r4, [r0, #0]
 800b3d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b3d4:	432c      	orrs	r4, r5
 800b3d6:	40d3      	lsrs	r3, r2
 800b3d8:	6004      	str	r4, [r0, #0]
 800b3da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3de:	4288      	cmp	r0, r1
 800b3e0:	d3f4      	bcc.n	800b3cc <L_shift+0xc>
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}

0800b3e4 <__match>:
 800b3e4:	b530      	push	{r4, r5, lr}
 800b3e6:	6803      	ldr	r3, [r0, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ee:	b914      	cbnz	r4, 800b3f6 <__match+0x12>
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	2001      	movs	r0, #1
 800b3f4:	bd30      	pop	{r4, r5, pc}
 800b3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3fe:	2d19      	cmp	r5, #25
 800b400:	bf98      	it	ls
 800b402:	3220      	addls	r2, #32
 800b404:	42a2      	cmp	r2, r4
 800b406:	d0f0      	beq.n	800b3ea <__match+0x6>
 800b408:	2000      	movs	r0, #0
 800b40a:	e7f3      	b.n	800b3f4 <__match+0x10>

0800b40c <__hexnan>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	680b      	ldr	r3, [r1, #0]
 800b412:	6801      	ldr	r1, [r0, #0]
 800b414:	115e      	asrs	r6, r3, #5
 800b416:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b41a:	f013 031f 	ands.w	r3, r3, #31
 800b41e:	b087      	sub	sp, #28
 800b420:	bf18      	it	ne
 800b422:	3604      	addne	r6, #4
 800b424:	2500      	movs	r5, #0
 800b426:	1f37      	subs	r7, r6, #4
 800b428:	4682      	mov	sl, r0
 800b42a:	4690      	mov	r8, r2
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b432:	46b9      	mov	r9, r7
 800b434:	463c      	mov	r4, r7
 800b436:	9502      	str	r5, [sp, #8]
 800b438:	46ab      	mov	fp, r5
 800b43a:	784a      	ldrb	r2, [r1, #1]
 800b43c:	1c4b      	adds	r3, r1, #1
 800b43e:	9303      	str	r3, [sp, #12]
 800b440:	b342      	cbz	r2, 800b494 <__hexnan+0x88>
 800b442:	4610      	mov	r0, r2
 800b444:	9105      	str	r1, [sp, #20]
 800b446:	9204      	str	r2, [sp, #16]
 800b448:	f7ff fd76 	bl	800af38 <__hexdig_fun>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d14f      	bne.n	800b4f0 <__hexnan+0xe4>
 800b450:	9a04      	ldr	r2, [sp, #16]
 800b452:	9905      	ldr	r1, [sp, #20]
 800b454:	2a20      	cmp	r2, #32
 800b456:	d818      	bhi.n	800b48a <__hexnan+0x7e>
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	459b      	cmp	fp, r3
 800b45c:	dd13      	ble.n	800b486 <__hexnan+0x7a>
 800b45e:	454c      	cmp	r4, r9
 800b460:	d206      	bcs.n	800b470 <__hexnan+0x64>
 800b462:	2d07      	cmp	r5, #7
 800b464:	dc04      	bgt.n	800b470 <__hexnan+0x64>
 800b466:	462a      	mov	r2, r5
 800b468:	4649      	mov	r1, r9
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff ffa8 	bl	800b3c0 <L_shift>
 800b470:	4544      	cmp	r4, r8
 800b472:	d950      	bls.n	800b516 <__hexnan+0x10a>
 800b474:	2300      	movs	r3, #0
 800b476:	f1a4 0904 	sub.w	r9, r4, #4
 800b47a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b47e:	f8cd b008 	str.w	fp, [sp, #8]
 800b482:	464c      	mov	r4, r9
 800b484:	461d      	mov	r5, r3
 800b486:	9903      	ldr	r1, [sp, #12]
 800b488:	e7d7      	b.n	800b43a <__hexnan+0x2e>
 800b48a:	2a29      	cmp	r2, #41	; 0x29
 800b48c:	d155      	bne.n	800b53a <__hexnan+0x12e>
 800b48e:	3102      	adds	r1, #2
 800b490:	f8ca 1000 	str.w	r1, [sl]
 800b494:	f1bb 0f00 	cmp.w	fp, #0
 800b498:	d04f      	beq.n	800b53a <__hexnan+0x12e>
 800b49a:	454c      	cmp	r4, r9
 800b49c:	d206      	bcs.n	800b4ac <__hexnan+0xa0>
 800b49e:	2d07      	cmp	r5, #7
 800b4a0:	dc04      	bgt.n	800b4ac <__hexnan+0xa0>
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7ff ff8a 	bl	800b3c0 <L_shift>
 800b4ac:	4544      	cmp	r4, r8
 800b4ae:	d934      	bls.n	800b51a <__hexnan+0x10e>
 800b4b0:	f1a8 0204 	sub.w	r2, r8, #4
 800b4b4:	4623      	mov	r3, r4
 800b4b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4be:	429f      	cmp	r7, r3
 800b4c0:	d2f9      	bcs.n	800b4b6 <__hexnan+0xaa>
 800b4c2:	1b3b      	subs	r3, r7, r4
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	3e03      	subs	r6, #3
 800b4cc:	3401      	adds	r4, #1
 800b4ce:	42a6      	cmp	r6, r4
 800b4d0:	bf38      	it	cc
 800b4d2:	2304      	movcc	r3, #4
 800b4d4:	4443      	add	r3, r8
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f843 2b04 	str.w	r2, [r3], #4
 800b4dc:	429f      	cmp	r7, r3
 800b4de:	d2fb      	bcs.n	800b4d8 <__hexnan+0xcc>
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	b91b      	cbnz	r3, 800b4ec <__hexnan+0xe0>
 800b4e4:	4547      	cmp	r7, r8
 800b4e6:	d126      	bne.n	800b536 <__hexnan+0x12a>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	2005      	movs	r0, #5
 800b4ee:	e025      	b.n	800b53c <__hexnan+0x130>
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	2d08      	cmp	r5, #8
 800b4f4:	f10b 0b01 	add.w	fp, fp, #1
 800b4f8:	dd06      	ble.n	800b508 <__hexnan+0xfc>
 800b4fa:	4544      	cmp	r4, r8
 800b4fc:	d9c3      	bls.n	800b486 <__hexnan+0x7a>
 800b4fe:	2300      	movs	r3, #0
 800b500:	f844 3c04 	str.w	r3, [r4, #-4]
 800b504:	2501      	movs	r5, #1
 800b506:	3c04      	subs	r4, #4
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	f000 000f 	and.w	r0, r0, #15
 800b50e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b512:	6020      	str	r0, [r4, #0]
 800b514:	e7b7      	b.n	800b486 <__hexnan+0x7a>
 800b516:	2508      	movs	r5, #8
 800b518:	e7b5      	b.n	800b486 <__hexnan+0x7a>
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0df      	beq.n	800b4e0 <__hexnan+0xd4>
 800b520:	f1c3 0320 	rsb	r3, r3, #32
 800b524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b528:	40da      	lsrs	r2, r3
 800b52a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b52e:	4013      	ands	r3, r2
 800b530:	f846 3c04 	str.w	r3, [r6, #-4]
 800b534:	e7d4      	b.n	800b4e0 <__hexnan+0xd4>
 800b536:	3f04      	subs	r7, #4
 800b538:	e7d2      	b.n	800b4e0 <__hexnan+0xd4>
 800b53a:	2004      	movs	r0, #4
 800b53c:	b007      	add	sp, #28
 800b53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b542 <__ssputs_r>:
 800b542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b546:	688e      	ldr	r6, [r1, #8]
 800b548:	461f      	mov	r7, r3
 800b54a:	42be      	cmp	r6, r7
 800b54c:	680b      	ldr	r3, [r1, #0]
 800b54e:	4682      	mov	sl, r0
 800b550:	460c      	mov	r4, r1
 800b552:	4690      	mov	r8, r2
 800b554:	d82c      	bhi.n	800b5b0 <__ssputs_r+0x6e>
 800b556:	898a      	ldrh	r2, [r1, #12]
 800b558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b55c:	d026      	beq.n	800b5ac <__ssputs_r+0x6a>
 800b55e:	6965      	ldr	r5, [r4, #20]
 800b560:	6909      	ldr	r1, [r1, #16]
 800b562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b566:	eba3 0901 	sub.w	r9, r3, r1
 800b56a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b56e:	1c7b      	adds	r3, r7, #1
 800b570:	444b      	add	r3, r9
 800b572:	106d      	asrs	r5, r5, #1
 800b574:	429d      	cmp	r5, r3
 800b576:	bf38      	it	cc
 800b578:	461d      	movcc	r5, r3
 800b57a:	0553      	lsls	r3, r2, #21
 800b57c:	d527      	bpl.n	800b5ce <__ssputs_r+0x8c>
 800b57e:	4629      	mov	r1, r5
 800b580:	f7fd f948 	bl	8008814 <_malloc_r>
 800b584:	4606      	mov	r6, r0
 800b586:	b360      	cbz	r0, 800b5e2 <__ssputs_r+0xa0>
 800b588:	6921      	ldr	r1, [r4, #16]
 800b58a:	464a      	mov	r2, r9
 800b58c:	f7fe fd9c 	bl	800a0c8 <memcpy>
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	6126      	str	r6, [r4, #16]
 800b59e:	6165      	str	r5, [r4, #20]
 800b5a0:	444e      	add	r6, r9
 800b5a2:	eba5 0509 	sub.w	r5, r5, r9
 800b5a6:	6026      	str	r6, [r4, #0]
 800b5a8:	60a5      	str	r5, [r4, #8]
 800b5aa:	463e      	mov	r6, r7
 800b5ac:	42be      	cmp	r6, r7
 800b5ae:	d900      	bls.n	800b5b2 <__ssputs_r+0x70>
 800b5b0:	463e      	mov	r6, r7
 800b5b2:	6820      	ldr	r0, [r4, #0]
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	4641      	mov	r1, r8
 800b5b8:	f001 f943 	bl	800c842 <memmove>
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	1b9b      	subs	r3, r3, r6
 800b5c0:	60a3      	str	r3, [r4, #8]
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	4433      	add	r3, r6
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	f001 f804 	bl	800c5dc <_realloc_r>
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1e0      	bne.n	800b59c <__ssputs_r+0x5a>
 800b5da:	6921      	ldr	r1, [r4, #16]
 800b5dc:	4650      	mov	r0, sl
 800b5de:	f7ff fc0d 	bl	800adfc <_free_r>
 800b5e2:	230c      	movs	r3, #12
 800b5e4:	f8ca 3000 	str.w	r3, [sl]
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5f4:	e7e9      	b.n	800b5ca <__ssputs_r+0x88>
	...

0800b5f8 <_svfiprintf_r>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	4698      	mov	r8, r3
 800b5fe:	898b      	ldrh	r3, [r1, #12]
 800b600:	061b      	lsls	r3, r3, #24
 800b602:	b09d      	sub	sp, #116	; 0x74
 800b604:	4607      	mov	r7, r0
 800b606:	460d      	mov	r5, r1
 800b608:	4614      	mov	r4, r2
 800b60a:	d50e      	bpl.n	800b62a <_svfiprintf_r+0x32>
 800b60c:	690b      	ldr	r3, [r1, #16]
 800b60e:	b963      	cbnz	r3, 800b62a <_svfiprintf_r+0x32>
 800b610:	2140      	movs	r1, #64	; 0x40
 800b612:	f7fd f8ff 	bl	8008814 <_malloc_r>
 800b616:	6028      	str	r0, [r5, #0]
 800b618:	6128      	str	r0, [r5, #16]
 800b61a:	b920      	cbnz	r0, 800b626 <_svfiprintf_r+0x2e>
 800b61c:	230c      	movs	r3, #12
 800b61e:	603b      	str	r3, [r7, #0]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b624:	e0d0      	b.n	800b7c8 <_svfiprintf_r+0x1d0>
 800b626:	2340      	movs	r3, #64	; 0x40
 800b628:	616b      	str	r3, [r5, #20]
 800b62a:	2300      	movs	r3, #0
 800b62c:	9309      	str	r3, [sp, #36]	; 0x24
 800b62e:	2320      	movs	r3, #32
 800b630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b634:	f8cd 800c 	str.w	r8, [sp, #12]
 800b638:	2330      	movs	r3, #48	; 0x30
 800b63a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b7e0 <_svfiprintf_r+0x1e8>
 800b63e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b642:	f04f 0901 	mov.w	r9, #1
 800b646:	4623      	mov	r3, r4
 800b648:	469a      	mov	sl, r3
 800b64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b64e:	b10a      	cbz	r2, 800b654 <_svfiprintf_r+0x5c>
 800b650:	2a25      	cmp	r2, #37	; 0x25
 800b652:	d1f9      	bne.n	800b648 <_svfiprintf_r+0x50>
 800b654:	ebba 0b04 	subs.w	fp, sl, r4
 800b658:	d00b      	beq.n	800b672 <_svfiprintf_r+0x7a>
 800b65a:	465b      	mov	r3, fp
 800b65c:	4622      	mov	r2, r4
 800b65e:	4629      	mov	r1, r5
 800b660:	4638      	mov	r0, r7
 800b662:	f7ff ff6e 	bl	800b542 <__ssputs_r>
 800b666:	3001      	adds	r0, #1
 800b668:	f000 80a9 	beq.w	800b7be <_svfiprintf_r+0x1c6>
 800b66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b66e:	445a      	add	r2, fp
 800b670:	9209      	str	r2, [sp, #36]	; 0x24
 800b672:	f89a 3000 	ldrb.w	r3, [sl]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f000 80a1 	beq.w	800b7be <_svfiprintf_r+0x1c6>
 800b67c:	2300      	movs	r3, #0
 800b67e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b686:	f10a 0a01 	add.w	sl, sl, #1
 800b68a:	9304      	str	r3, [sp, #16]
 800b68c:	9307      	str	r3, [sp, #28]
 800b68e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b692:	931a      	str	r3, [sp, #104]	; 0x68
 800b694:	4654      	mov	r4, sl
 800b696:	2205      	movs	r2, #5
 800b698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b69c:	4850      	ldr	r0, [pc, #320]	; (800b7e0 <_svfiprintf_r+0x1e8>)
 800b69e:	f7f4 fdb7 	bl	8000210 <memchr>
 800b6a2:	9a04      	ldr	r2, [sp, #16]
 800b6a4:	b9d8      	cbnz	r0, 800b6de <_svfiprintf_r+0xe6>
 800b6a6:	06d0      	lsls	r0, r2, #27
 800b6a8:	bf44      	itt	mi
 800b6aa:	2320      	movmi	r3, #32
 800b6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6b0:	0711      	lsls	r1, r2, #28
 800b6b2:	bf44      	itt	mi
 800b6b4:	232b      	movmi	r3, #43	; 0x2b
 800b6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b6be:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c0:	d015      	beq.n	800b6ee <_svfiprintf_r+0xf6>
 800b6c2:	9a07      	ldr	r2, [sp, #28]
 800b6c4:	4654      	mov	r4, sl
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	f04f 0c0a 	mov.w	ip, #10
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6d2:	3b30      	subs	r3, #48	; 0x30
 800b6d4:	2b09      	cmp	r3, #9
 800b6d6:	d94d      	bls.n	800b774 <_svfiprintf_r+0x17c>
 800b6d8:	b1b0      	cbz	r0, 800b708 <_svfiprintf_r+0x110>
 800b6da:	9207      	str	r2, [sp, #28]
 800b6dc:	e014      	b.n	800b708 <_svfiprintf_r+0x110>
 800b6de:	eba0 0308 	sub.w	r3, r0, r8
 800b6e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	9304      	str	r3, [sp, #16]
 800b6ea:	46a2      	mov	sl, r4
 800b6ec:	e7d2      	b.n	800b694 <_svfiprintf_r+0x9c>
 800b6ee:	9b03      	ldr	r3, [sp, #12]
 800b6f0:	1d19      	adds	r1, r3, #4
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	9103      	str	r1, [sp, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	bfbb      	ittet	lt
 800b6fa:	425b      	neglt	r3, r3
 800b6fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b700:	9307      	strge	r3, [sp, #28]
 800b702:	9307      	strlt	r3, [sp, #28]
 800b704:	bfb8      	it	lt
 800b706:	9204      	strlt	r2, [sp, #16]
 800b708:	7823      	ldrb	r3, [r4, #0]
 800b70a:	2b2e      	cmp	r3, #46	; 0x2e
 800b70c:	d10c      	bne.n	800b728 <_svfiprintf_r+0x130>
 800b70e:	7863      	ldrb	r3, [r4, #1]
 800b710:	2b2a      	cmp	r3, #42	; 0x2a
 800b712:	d134      	bne.n	800b77e <_svfiprintf_r+0x186>
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	1d1a      	adds	r2, r3, #4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	9203      	str	r2, [sp, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfb8      	it	lt
 800b720:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b724:	3402      	adds	r4, #2
 800b726:	9305      	str	r3, [sp, #20]
 800b728:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b7f0 <_svfiprintf_r+0x1f8>
 800b72c:	7821      	ldrb	r1, [r4, #0]
 800b72e:	2203      	movs	r2, #3
 800b730:	4650      	mov	r0, sl
 800b732:	f7f4 fd6d 	bl	8000210 <memchr>
 800b736:	b138      	cbz	r0, 800b748 <_svfiprintf_r+0x150>
 800b738:	9b04      	ldr	r3, [sp, #16]
 800b73a:	eba0 000a 	sub.w	r0, r0, sl
 800b73e:	2240      	movs	r2, #64	; 0x40
 800b740:	4082      	lsls	r2, r0
 800b742:	4313      	orrs	r3, r2
 800b744:	3401      	adds	r4, #1
 800b746:	9304      	str	r3, [sp, #16]
 800b748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74c:	4825      	ldr	r0, [pc, #148]	; (800b7e4 <_svfiprintf_r+0x1ec>)
 800b74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b752:	2206      	movs	r2, #6
 800b754:	f7f4 fd5c 	bl	8000210 <memchr>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d038      	beq.n	800b7ce <_svfiprintf_r+0x1d6>
 800b75c:	4b22      	ldr	r3, [pc, #136]	; (800b7e8 <_svfiprintf_r+0x1f0>)
 800b75e:	bb1b      	cbnz	r3, 800b7a8 <_svfiprintf_r+0x1b0>
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	3307      	adds	r3, #7
 800b764:	f023 0307 	bic.w	r3, r3, #7
 800b768:	3308      	adds	r3, #8
 800b76a:	9303      	str	r3, [sp, #12]
 800b76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76e:	4433      	add	r3, r6
 800b770:	9309      	str	r3, [sp, #36]	; 0x24
 800b772:	e768      	b.n	800b646 <_svfiprintf_r+0x4e>
 800b774:	fb0c 3202 	mla	r2, ip, r2, r3
 800b778:	460c      	mov	r4, r1
 800b77a:	2001      	movs	r0, #1
 800b77c:	e7a6      	b.n	800b6cc <_svfiprintf_r+0xd4>
 800b77e:	2300      	movs	r3, #0
 800b780:	3401      	adds	r4, #1
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	4619      	mov	r1, r3
 800b786:	f04f 0c0a 	mov.w	ip, #10
 800b78a:	4620      	mov	r0, r4
 800b78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b790:	3a30      	subs	r2, #48	; 0x30
 800b792:	2a09      	cmp	r2, #9
 800b794:	d903      	bls.n	800b79e <_svfiprintf_r+0x1a6>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0c6      	beq.n	800b728 <_svfiprintf_r+0x130>
 800b79a:	9105      	str	r1, [sp, #20]
 800b79c:	e7c4      	b.n	800b728 <_svfiprintf_r+0x130>
 800b79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e7f0      	b.n	800b78a <_svfiprintf_r+0x192>
 800b7a8:	ab03      	add	r3, sp, #12
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <_svfiprintf_r+0x1f4>)
 800b7b0:	a904      	add	r1, sp, #16
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	f7fc fdc8 	bl	8008348 <_printf_float>
 800b7b8:	1c42      	adds	r2, r0, #1
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	d1d6      	bne.n	800b76c <_svfiprintf_r+0x174>
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	065b      	lsls	r3, r3, #25
 800b7c2:	f53f af2d 	bmi.w	800b620 <_svfiprintf_r+0x28>
 800b7c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7c8:	b01d      	add	sp, #116	; 0x74
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	ab03      	add	r3, sp, #12
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	4b05      	ldr	r3, [pc, #20]	; (800b7ec <_svfiprintf_r+0x1f4>)
 800b7d6:	a904      	add	r1, sp, #16
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f7fd f909 	bl	80089f0 <_printf_i>
 800b7de:	e7eb      	b.n	800b7b8 <_svfiprintf_r+0x1c0>
 800b7e0:	0800d63e 	.word	0x0800d63e
 800b7e4:	0800d648 	.word	0x0800d648
 800b7e8:	08008349 	.word	0x08008349
 800b7ec:	0800b543 	.word	0x0800b543
 800b7f0:	0800d644 	.word	0x0800d644

0800b7f4 <__sfputc_r>:
 800b7f4:	6893      	ldr	r3, [r2, #8]
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	b410      	push	{r4}
 800b7fc:	6093      	str	r3, [r2, #8]
 800b7fe:	da08      	bge.n	800b812 <__sfputc_r+0x1e>
 800b800:	6994      	ldr	r4, [r2, #24]
 800b802:	42a3      	cmp	r3, r4
 800b804:	db01      	blt.n	800b80a <__sfputc_r+0x16>
 800b806:	290a      	cmp	r1, #10
 800b808:	d103      	bne.n	800b812 <__sfputc_r+0x1e>
 800b80a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b80e:	f000 bf14 	b.w	800c63a <__swbuf_r>
 800b812:	6813      	ldr	r3, [r2, #0]
 800b814:	1c58      	adds	r0, r3, #1
 800b816:	6010      	str	r0, [r2, #0]
 800b818:	7019      	strb	r1, [r3, #0]
 800b81a:	4608      	mov	r0, r1
 800b81c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <__sfputs_r>:
 800b822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b824:	4606      	mov	r6, r0
 800b826:	460f      	mov	r7, r1
 800b828:	4614      	mov	r4, r2
 800b82a:	18d5      	adds	r5, r2, r3
 800b82c:	42ac      	cmp	r4, r5
 800b82e:	d101      	bne.n	800b834 <__sfputs_r+0x12>
 800b830:	2000      	movs	r0, #0
 800b832:	e007      	b.n	800b844 <__sfputs_r+0x22>
 800b834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b838:	463a      	mov	r2, r7
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7ff ffda 	bl	800b7f4 <__sfputc_r>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d1f3      	bne.n	800b82c <__sfputs_r+0xa>
 800b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b848 <_vfiprintf_r>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	460d      	mov	r5, r1
 800b84e:	b09d      	sub	sp, #116	; 0x74
 800b850:	4614      	mov	r4, r2
 800b852:	4698      	mov	r8, r3
 800b854:	4606      	mov	r6, r0
 800b856:	b118      	cbz	r0, 800b860 <_vfiprintf_r+0x18>
 800b858:	6a03      	ldr	r3, [r0, #32]
 800b85a:	b90b      	cbnz	r3, 800b860 <_vfiprintf_r+0x18>
 800b85c:	f7fd fca0 	bl	80091a0 <__sinit>
 800b860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b862:	07d9      	lsls	r1, r3, #31
 800b864:	d405      	bmi.n	800b872 <_vfiprintf_r+0x2a>
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	059a      	lsls	r2, r3, #22
 800b86a:	d402      	bmi.n	800b872 <_vfiprintf_r+0x2a>
 800b86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b86e:	f7fe fc29 	bl	800a0c4 <__retarget_lock_acquire_recursive>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	071b      	lsls	r3, r3, #28
 800b876:	d501      	bpl.n	800b87c <_vfiprintf_r+0x34>
 800b878:	692b      	ldr	r3, [r5, #16]
 800b87a:	b99b      	cbnz	r3, 800b8a4 <_vfiprintf_r+0x5c>
 800b87c:	4629      	mov	r1, r5
 800b87e:	4630      	mov	r0, r6
 800b880:	f000 ff18 	bl	800c6b4 <__swsetup_r>
 800b884:	b170      	cbz	r0, 800b8a4 <_vfiprintf_r+0x5c>
 800b886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b888:	07dc      	lsls	r4, r3, #31
 800b88a:	d504      	bpl.n	800b896 <_vfiprintf_r+0x4e>
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b890:	b01d      	add	sp, #116	; 0x74
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b896:	89ab      	ldrh	r3, [r5, #12]
 800b898:	0598      	lsls	r0, r3, #22
 800b89a:	d4f7      	bmi.n	800b88c <_vfiprintf_r+0x44>
 800b89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b89e:	f7fe fc12 	bl	800a0c6 <__retarget_lock_release_recursive>
 800b8a2:	e7f3      	b.n	800b88c <_vfiprintf_r+0x44>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a8:	2320      	movs	r3, #32
 800b8aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8b2:	2330      	movs	r3, #48	; 0x30
 800b8b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ba68 <_vfiprintf_r+0x220>
 800b8b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8bc:	f04f 0901 	mov.w	r9, #1
 800b8c0:	4623      	mov	r3, r4
 800b8c2:	469a      	mov	sl, r3
 800b8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8c8:	b10a      	cbz	r2, 800b8ce <_vfiprintf_r+0x86>
 800b8ca:	2a25      	cmp	r2, #37	; 0x25
 800b8cc:	d1f9      	bne.n	800b8c2 <_vfiprintf_r+0x7a>
 800b8ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b8d2:	d00b      	beq.n	800b8ec <_vfiprintf_r+0xa4>
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	4629      	mov	r1, r5
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f7ff ffa1 	bl	800b822 <__sfputs_r>
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	f000 80a9 	beq.w	800ba38 <_vfiprintf_r+0x1f0>
 800b8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e8:	445a      	add	r2, fp
 800b8ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 80a1 	beq.w	800ba38 <_vfiprintf_r+0x1f0>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b900:	f10a 0a01 	add.w	sl, sl, #1
 800b904:	9304      	str	r3, [sp, #16]
 800b906:	9307      	str	r3, [sp, #28]
 800b908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b90c:	931a      	str	r3, [sp, #104]	; 0x68
 800b90e:	4654      	mov	r4, sl
 800b910:	2205      	movs	r2, #5
 800b912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b916:	4854      	ldr	r0, [pc, #336]	; (800ba68 <_vfiprintf_r+0x220>)
 800b918:	f7f4 fc7a 	bl	8000210 <memchr>
 800b91c:	9a04      	ldr	r2, [sp, #16]
 800b91e:	b9d8      	cbnz	r0, 800b958 <_vfiprintf_r+0x110>
 800b920:	06d1      	lsls	r1, r2, #27
 800b922:	bf44      	itt	mi
 800b924:	2320      	movmi	r3, #32
 800b926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b92a:	0713      	lsls	r3, r2, #28
 800b92c:	bf44      	itt	mi
 800b92e:	232b      	movmi	r3, #43	; 0x2b
 800b930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b934:	f89a 3000 	ldrb.w	r3, [sl]
 800b938:	2b2a      	cmp	r3, #42	; 0x2a
 800b93a:	d015      	beq.n	800b968 <_vfiprintf_r+0x120>
 800b93c:	9a07      	ldr	r2, [sp, #28]
 800b93e:	4654      	mov	r4, sl
 800b940:	2000      	movs	r0, #0
 800b942:	f04f 0c0a 	mov.w	ip, #10
 800b946:	4621      	mov	r1, r4
 800b948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b94c:	3b30      	subs	r3, #48	; 0x30
 800b94e:	2b09      	cmp	r3, #9
 800b950:	d94d      	bls.n	800b9ee <_vfiprintf_r+0x1a6>
 800b952:	b1b0      	cbz	r0, 800b982 <_vfiprintf_r+0x13a>
 800b954:	9207      	str	r2, [sp, #28]
 800b956:	e014      	b.n	800b982 <_vfiprintf_r+0x13a>
 800b958:	eba0 0308 	sub.w	r3, r0, r8
 800b95c:	fa09 f303 	lsl.w	r3, r9, r3
 800b960:	4313      	orrs	r3, r2
 800b962:	9304      	str	r3, [sp, #16]
 800b964:	46a2      	mov	sl, r4
 800b966:	e7d2      	b.n	800b90e <_vfiprintf_r+0xc6>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	1d19      	adds	r1, r3, #4
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	9103      	str	r1, [sp, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	bfbb      	ittet	lt
 800b974:	425b      	neglt	r3, r3
 800b976:	f042 0202 	orrlt.w	r2, r2, #2
 800b97a:	9307      	strge	r3, [sp, #28]
 800b97c:	9307      	strlt	r3, [sp, #28]
 800b97e:	bfb8      	it	lt
 800b980:	9204      	strlt	r2, [sp, #16]
 800b982:	7823      	ldrb	r3, [r4, #0]
 800b984:	2b2e      	cmp	r3, #46	; 0x2e
 800b986:	d10c      	bne.n	800b9a2 <_vfiprintf_r+0x15a>
 800b988:	7863      	ldrb	r3, [r4, #1]
 800b98a:	2b2a      	cmp	r3, #42	; 0x2a
 800b98c:	d134      	bne.n	800b9f8 <_vfiprintf_r+0x1b0>
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	1d1a      	adds	r2, r3, #4
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	9203      	str	r2, [sp, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	bfb8      	it	lt
 800b99a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b99e:	3402      	adds	r4, #2
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ba78 <_vfiprintf_r+0x230>
 800b9a6:	7821      	ldrb	r1, [r4, #0]
 800b9a8:	2203      	movs	r2, #3
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	f7f4 fc30 	bl	8000210 <memchr>
 800b9b0:	b138      	cbz	r0, 800b9c2 <_vfiprintf_r+0x17a>
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	eba0 000a 	sub.w	r0, r0, sl
 800b9b8:	2240      	movs	r2, #64	; 0x40
 800b9ba:	4082      	lsls	r2, r0
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	3401      	adds	r4, #1
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c6:	4829      	ldr	r0, [pc, #164]	; (800ba6c <_vfiprintf_r+0x224>)
 800b9c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9cc:	2206      	movs	r2, #6
 800b9ce:	f7f4 fc1f 	bl	8000210 <memchr>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d03f      	beq.n	800ba56 <_vfiprintf_r+0x20e>
 800b9d6:	4b26      	ldr	r3, [pc, #152]	; (800ba70 <_vfiprintf_r+0x228>)
 800b9d8:	bb1b      	cbnz	r3, 800ba22 <_vfiprintf_r+0x1da>
 800b9da:	9b03      	ldr	r3, [sp, #12]
 800b9dc:	3307      	adds	r3, #7
 800b9de:	f023 0307 	bic.w	r3, r3, #7
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e8:	443b      	add	r3, r7
 800b9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ec:	e768      	b.n	800b8c0 <_vfiprintf_r+0x78>
 800b9ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	2001      	movs	r0, #1
 800b9f6:	e7a6      	b.n	800b946 <_vfiprintf_r+0xfe>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	3401      	adds	r4, #1
 800b9fc:	9305      	str	r3, [sp, #20]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	f04f 0c0a 	mov.w	ip, #10
 800ba04:	4620      	mov	r0, r4
 800ba06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba0a:	3a30      	subs	r2, #48	; 0x30
 800ba0c:	2a09      	cmp	r2, #9
 800ba0e:	d903      	bls.n	800ba18 <_vfiprintf_r+0x1d0>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0c6      	beq.n	800b9a2 <_vfiprintf_r+0x15a>
 800ba14:	9105      	str	r1, [sp, #20]
 800ba16:	e7c4      	b.n	800b9a2 <_vfiprintf_r+0x15a>
 800ba18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e7f0      	b.n	800ba04 <_vfiprintf_r+0x1bc>
 800ba22:	ab03      	add	r3, sp, #12
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	462a      	mov	r2, r5
 800ba28:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <_vfiprintf_r+0x22c>)
 800ba2a:	a904      	add	r1, sp, #16
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f7fc fc8b 	bl	8008348 <_printf_float>
 800ba32:	4607      	mov	r7, r0
 800ba34:	1c78      	adds	r0, r7, #1
 800ba36:	d1d6      	bne.n	800b9e6 <_vfiprintf_r+0x19e>
 800ba38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba3a:	07d9      	lsls	r1, r3, #31
 800ba3c:	d405      	bmi.n	800ba4a <_vfiprintf_r+0x202>
 800ba3e:	89ab      	ldrh	r3, [r5, #12]
 800ba40:	059a      	lsls	r2, r3, #22
 800ba42:	d402      	bmi.n	800ba4a <_vfiprintf_r+0x202>
 800ba44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba46:	f7fe fb3e 	bl	800a0c6 <__retarget_lock_release_recursive>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	065b      	lsls	r3, r3, #25
 800ba4e:	f53f af1d 	bmi.w	800b88c <_vfiprintf_r+0x44>
 800ba52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba54:	e71c      	b.n	800b890 <_vfiprintf_r+0x48>
 800ba56:	ab03      	add	r3, sp, #12
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <_vfiprintf_r+0x22c>)
 800ba5e:	a904      	add	r1, sp, #16
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7fc ffc5 	bl	80089f0 <_printf_i>
 800ba66:	e7e4      	b.n	800ba32 <_vfiprintf_r+0x1ea>
 800ba68:	0800d63e 	.word	0x0800d63e
 800ba6c:	0800d648 	.word	0x0800d648
 800ba70:	08008349 	.word	0x08008349
 800ba74:	0800b823 	.word	0x0800b823
 800ba78:	0800d644 	.word	0x0800d644

0800ba7c <__ascii_mbtowc>:
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	b901      	cbnz	r1, 800ba82 <__ascii_mbtowc+0x6>
 800ba80:	a901      	add	r1, sp, #4
 800ba82:	b142      	cbz	r2, 800ba96 <__ascii_mbtowc+0x1a>
 800ba84:	b14b      	cbz	r3, 800ba9a <__ascii_mbtowc+0x1e>
 800ba86:	7813      	ldrb	r3, [r2, #0]
 800ba88:	600b      	str	r3, [r1, #0]
 800ba8a:	7812      	ldrb	r2, [r2, #0]
 800ba8c:	1e10      	subs	r0, r2, #0
 800ba8e:	bf18      	it	ne
 800ba90:	2001      	movne	r0, #1
 800ba92:	b002      	add	sp, #8
 800ba94:	4770      	bx	lr
 800ba96:	4610      	mov	r0, r2
 800ba98:	e7fb      	b.n	800ba92 <__ascii_mbtowc+0x16>
 800ba9a:	f06f 0001 	mvn.w	r0, #1
 800ba9e:	e7f8      	b.n	800ba92 <__ascii_mbtowc+0x16>

0800baa0 <__sflush_r>:
 800baa0:	898a      	ldrh	r2, [r1, #12]
 800baa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa6:	4605      	mov	r5, r0
 800baa8:	0710      	lsls	r0, r2, #28
 800baaa:	460c      	mov	r4, r1
 800baac:	d458      	bmi.n	800bb60 <__sflush_r+0xc0>
 800baae:	684b      	ldr	r3, [r1, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dc05      	bgt.n	800bac0 <__sflush_r+0x20>
 800bab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dc02      	bgt.n	800bac0 <__sflush_r+0x20>
 800baba:	2000      	movs	r0, #0
 800babc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bac2:	2e00      	cmp	r6, #0
 800bac4:	d0f9      	beq.n	800baba <__sflush_r+0x1a>
 800bac6:	2300      	movs	r3, #0
 800bac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bacc:	682f      	ldr	r7, [r5, #0]
 800bace:	6a21      	ldr	r1, [r4, #32]
 800bad0:	602b      	str	r3, [r5, #0]
 800bad2:	d032      	beq.n	800bb3a <__sflush_r+0x9a>
 800bad4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	075a      	lsls	r2, r3, #29
 800bada:	d505      	bpl.n	800bae8 <__sflush_r+0x48>
 800badc:	6863      	ldr	r3, [r4, #4]
 800bade:	1ac0      	subs	r0, r0, r3
 800bae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bae2:	b10b      	cbz	r3, 800bae8 <__sflush_r+0x48>
 800bae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bae6:	1ac0      	subs	r0, r0, r3
 800bae8:	2300      	movs	r3, #0
 800baea:	4602      	mov	r2, r0
 800baec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800baee:	6a21      	ldr	r1, [r4, #32]
 800baf0:	4628      	mov	r0, r5
 800baf2:	47b0      	blx	r6
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	89a3      	ldrh	r3, [r4, #12]
 800baf8:	d106      	bne.n	800bb08 <__sflush_r+0x68>
 800bafa:	6829      	ldr	r1, [r5, #0]
 800bafc:	291d      	cmp	r1, #29
 800bafe:	d82b      	bhi.n	800bb58 <__sflush_r+0xb8>
 800bb00:	4a29      	ldr	r2, [pc, #164]	; (800bba8 <__sflush_r+0x108>)
 800bb02:	410a      	asrs	r2, r1
 800bb04:	07d6      	lsls	r6, r2, #31
 800bb06:	d427      	bmi.n	800bb58 <__sflush_r+0xb8>
 800bb08:	2200      	movs	r2, #0
 800bb0a:	6062      	str	r2, [r4, #4]
 800bb0c:	04d9      	lsls	r1, r3, #19
 800bb0e:	6922      	ldr	r2, [r4, #16]
 800bb10:	6022      	str	r2, [r4, #0]
 800bb12:	d504      	bpl.n	800bb1e <__sflush_r+0x7e>
 800bb14:	1c42      	adds	r2, r0, #1
 800bb16:	d101      	bne.n	800bb1c <__sflush_r+0x7c>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b903      	cbnz	r3, 800bb1e <__sflush_r+0x7e>
 800bb1c:	6560      	str	r0, [r4, #84]	; 0x54
 800bb1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb20:	602f      	str	r7, [r5, #0]
 800bb22:	2900      	cmp	r1, #0
 800bb24:	d0c9      	beq.n	800baba <__sflush_r+0x1a>
 800bb26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d002      	beq.n	800bb34 <__sflush_r+0x94>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f7ff f964 	bl	800adfc <_free_r>
 800bb34:	2000      	movs	r0, #0
 800bb36:	6360      	str	r0, [r4, #52]	; 0x34
 800bb38:	e7c0      	b.n	800babc <__sflush_r+0x1c>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	47b0      	blx	r6
 800bb40:	1c41      	adds	r1, r0, #1
 800bb42:	d1c8      	bne.n	800bad6 <__sflush_r+0x36>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0c5      	beq.n	800bad6 <__sflush_r+0x36>
 800bb4a:	2b1d      	cmp	r3, #29
 800bb4c:	d001      	beq.n	800bb52 <__sflush_r+0xb2>
 800bb4e:	2b16      	cmp	r3, #22
 800bb50:	d101      	bne.n	800bb56 <__sflush_r+0xb6>
 800bb52:	602f      	str	r7, [r5, #0]
 800bb54:	e7b1      	b.n	800baba <__sflush_r+0x1a>
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb5c:	81a3      	strh	r3, [r4, #12]
 800bb5e:	e7ad      	b.n	800babc <__sflush_r+0x1c>
 800bb60:	690f      	ldr	r7, [r1, #16]
 800bb62:	2f00      	cmp	r7, #0
 800bb64:	d0a9      	beq.n	800baba <__sflush_r+0x1a>
 800bb66:	0793      	lsls	r3, r2, #30
 800bb68:	680e      	ldr	r6, [r1, #0]
 800bb6a:	bf08      	it	eq
 800bb6c:	694b      	ldreq	r3, [r1, #20]
 800bb6e:	600f      	str	r7, [r1, #0]
 800bb70:	bf18      	it	ne
 800bb72:	2300      	movne	r3, #0
 800bb74:	eba6 0807 	sub.w	r8, r6, r7
 800bb78:	608b      	str	r3, [r1, #8]
 800bb7a:	f1b8 0f00 	cmp.w	r8, #0
 800bb7e:	dd9c      	ble.n	800baba <__sflush_r+0x1a>
 800bb80:	6a21      	ldr	r1, [r4, #32]
 800bb82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb84:	4643      	mov	r3, r8
 800bb86:	463a      	mov	r2, r7
 800bb88:	4628      	mov	r0, r5
 800bb8a:	47b0      	blx	r6
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	dc06      	bgt.n	800bb9e <__sflush_r+0xfe>
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb96:	81a3      	strh	r3, [r4, #12]
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb9c:	e78e      	b.n	800babc <__sflush_r+0x1c>
 800bb9e:	4407      	add	r7, r0
 800bba0:	eba8 0800 	sub.w	r8, r8, r0
 800bba4:	e7e9      	b.n	800bb7a <__sflush_r+0xda>
 800bba6:	bf00      	nop
 800bba8:	dfbffffe 	.word	0xdfbffffe

0800bbac <_fflush_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	690b      	ldr	r3, [r1, #16]
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	b913      	cbnz	r3, 800bbbc <_fflush_r+0x10>
 800bbb6:	2500      	movs	r5, #0
 800bbb8:	4628      	mov	r0, r5
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	b118      	cbz	r0, 800bbc6 <_fflush_r+0x1a>
 800bbbe:	6a03      	ldr	r3, [r0, #32]
 800bbc0:	b90b      	cbnz	r3, 800bbc6 <_fflush_r+0x1a>
 800bbc2:	f7fd faed 	bl	80091a0 <__sinit>
 800bbc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0f3      	beq.n	800bbb6 <_fflush_r+0xa>
 800bbce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbd0:	07d0      	lsls	r0, r2, #31
 800bbd2:	d404      	bmi.n	800bbde <_fflush_r+0x32>
 800bbd4:	0599      	lsls	r1, r3, #22
 800bbd6:	d402      	bmi.n	800bbde <_fflush_r+0x32>
 800bbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbda:	f7fe fa73 	bl	800a0c4 <__retarget_lock_acquire_recursive>
 800bbde:	4628      	mov	r0, r5
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	f7ff ff5d 	bl	800baa0 <__sflush_r>
 800bbe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbe8:	07da      	lsls	r2, r3, #31
 800bbea:	4605      	mov	r5, r0
 800bbec:	d4e4      	bmi.n	800bbb8 <_fflush_r+0xc>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	059b      	lsls	r3, r3, #22
 800bbf2:	d4e1      	bmi.n	800bbb8 <_fflush_r+0xc>
 800bbf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbf6:	f7fe fa66 	bl	800a0c6 <__retarget_lock_release_recursive>
 800bbfa:	e7dd      	b.n	800bbb8 <_fflush_r+0xc>

0800bbfc <_Balloc>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	69c6      	ldr	r6, [r0, #28]
 800bc00:	4604      	mov	r4, r0
 800bc02:	460d      	mov	r5, r1
 800bc04:	b976      	cbnz	r6, 800bc24 <_Balloc+0x28>
 800bc06:	2010      	movs	r0, #16
 800bc08:	f7fc fdd4 	bl	80087b4 <malloc>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	61e0      	str	r0, [r4, #28]
 800bc10:	b920      	cbnz	r0, 800bc1c <_Balloc+0x20>
 800bc12:	4b18      	ldr	r3, [pc, #96]	; (800bc74 <_Balloc+0x78>)
 800bc14:	4818      	ldr	r0, [pc, #96]	; (800bc78 <_Balloc+0x7c>)
 800bc16:	216b      	movs	r1, #107	; 0x6b
 800bc18:	f000 fe96 	bl	800c948 <__assert_func>
 800bc1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc20:	6006      	str	r6, [r0, #0]
 800bc22:	60c6      	str	r6, [r0, #12]
 800bc24:	69e6      	ldr	r6, [r4, #28]
 800bc26:	68f3      	ldr	r3, [r6, #12]
 800bc28:	b183      	cbz	r3, 800bc4c <_Balloc+0x50>
 800bc2a:	69e3      	ldr	r3, [r4, #28]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc32:	b9b8      	cbnz	r0, 800bc64 <_Balloc+0x68>
 800bc34:	2101      	movs	r1, #1
 800bc36:	fa01 f605 	lsl.w	r6, r1, r5
 800bc3a:	1d72      	adds	r2, r6, #5
 800bc3c:	0092      	lsls	r2, r2, #2
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 fea0 	bl	800c984 <_calloc_r>
 800bc44:	b160      	cbz	r0, 800bc60 <_Balloc+0x64>
 800bc46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc4a:	e00e      	b.n	800bc6a <_Balloc+0x6e>
 800bc4c:	2221      	movs	r2, #33	; 0x21
 800bc4e:	2104      	movs	r1, #4
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 fe97 	bl	800c984 <_calloc_r>
 800bc56:	69e3      	ldr	r3, [r4, #28]
 800bc58:	60f0      	str	r0, [r6, #12]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1e4      	bne.n	800bc2a <_Balloc+0x2e>
 800bc60:	2000      	movs	r0, #0
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	6802      	ldr	r2, [r0, #0]
 800bc66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc70:	e7f7      	b.n	800bc62 <_Balloc+0x66>
 800bc72:	bf00      	nop
 800bc74:	0800d55e 	.word	0x0800d55e
 800bc78:	0800d64f 	.word	0x0800d64f

0800bc7c <_Bfree>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	69c6      	ldr	r6, [r0, #28]
 800bc80:	4605      	mov	r5, r0
 800bc82:	460c      	mov	r4, r1
 800bc84:	b976      	cbnz	r6, 800bca4 <_Bfree+0x28>
 800bc86:	2010      	movs	r0, #16
 800bc88:	f7fc fd94 	bl	80087b4 <malloc>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	61e8      	str	r0, [r5, #28]
 800bc90:	b920      	cbnz	r0, 800bc9c <_Bfree+0x20>
 800bc92:	4b09      	ldr	r3, [pc, #36]	; (800bcb8 <_Bfree+0x3c>)
 800bc94:	4809      	ldr	r0, [pc, #36]	; (800bcbc <_Bfree+0x40>)
 800bc96:	218f      	movs	r1, #143	; 0x8f
 800bc98:	f000 fe56 	bl	800c948 <__assert_func>
 800bc9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bca0:	6006      	str	r6, [r0, #0]
 800bca2:	60c6      	str	r6, [r0, #12]
 800bca4:	b13c      	cbz	r4, 800bcb6 <_Bfree+0x3a>
 800bca6:	69eb      	ldr	r3, [r5, #28]
 800bca8:	6862      	ldr	r2, [r4, #4]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcb0:	6021      	str	r1, [r4, #0]
 800bcb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}
 800bcb8:	0800d55e 	.word	0x0800d55e
 800bcbc:	0800d64f 	.word	0x0800d64f

0800bcc0 <__multadd>:
 800bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc4:	690d      	ldr	r5, [r1, #16]
 800bcc6:	4607      	mov	r7, r0
 800bcc8:	460c      	mov	r4, r1
 800bcca:	461e      	mov	r6, r3
 800bccc:	f101 0c14 	add.w	ip, r1, #20
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f8dc 3000 	ldr.w	r3, [ip]
 800bcd6:	b299      	uxth	r1, r3
 800bcd8:	fb02 6101 	mla	r1, r2, r1, r6
 800bcdc:	0c1e      	lsrs	r6, r3, #16
 800bcde:	0c0b      	lsrs	r3, r1, #16
 800bce0:	fb02 3306 	mla	r3, r2, r6, r3
 800bce4:	b289      	uxth	r1, r1
 800bce6:	3001      	adds	r0, #1
 800bce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcec:	4285      	cmp	r5, r0
 800bcee:	f84c 1b04 	str.w	r1, [ip], #4
 800bcf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcf6:	dcec      	bgt.n	800bcd2 <__multadd+0x12>
 800bcf8:	b30e      	cbz	r6, 800bd3e <__multadd+0x7e>
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	42ab      	cmp	r3, r5
 800bcfe:	dc19      	bgt.n	800bd34 <__multadd+0x74>
 800bd00:	6861      	ldr	r1, [r4, #4]
 800bd02:	4638      	mov	r0, r7
 800bd04:	3101      	adds	r1, #1
 800bd06:	f7ff ff79 	bl	800bbfc <_Balloc>
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	b928      	cbnz	r0, 800bd1a <__multadd+0x5a>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	4b0c      	ldr	r3, [pc, #48]	; (800bd44 <__multadd+0x84>)
 800bd12:	480d      	ldr	r0, [pc, #52]	; (800bd48 <__multadd+0x88>)
 800bd14:	21ba      	movs	r1, #186	; 0xba
 800bd16:	f000 fe17 	bl	800c948 <__assert_func>
 800bd1a:	6922      	ldr	r2, [r4, #16]
 800bd1c:	3202      	adds	r2, #2
 800bd1e:	f104 010c 	add.w	r1, r4, #12
 800bd22:	0092      	lsls	r2, r2, #2
 800bd24:	300c      	adds	r0, #12
 800bd26:	f7fe f9cf 	bl	800a0c8 <memcpy>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f7ff ffa5 	bl	800bc7c <_Bfree>
 800bd32:	4644      	mov	r4, r8
 800bd34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd38:	3501      	adds	r5, #1
 800bd3a:	615e      	str	r6, [r3, #20]
 800bd3c:	6125      	str	r5, [r4, #16]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd44:	0800d5cd 	.word	0x0800d5cd
 800bd48:	0800d64f 	.word	0x0800d64f

0800bd4c <__s2b>:
 800bd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	4615      	mov	r5, r2
 800bd54:	461f      	mov	r7, r3
 800bd56:	2209      	movs	r2, #9
 800bd58:	3308      	adds	r3, #8
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd60:	2100      	movs	r1, #0
 800bd62:	2201      	movs	r2, #1
 800bd64:	429a      	cmp	r2, r3
 800bd66:	db09      	blt.n	800bd7c <__s2b+0x30>
 800bd68:	4630      	mov	r0, r6
 800bd6a:	f7ff ff47 	bl	800bbfc <_Balloc>
 800bd6e:	b940      	cbnz	r0, 800bd82 <__s2b+0x36>
 800bd70:	4602      	mov	r2, r0
 800bd72:	4b19      	ldr	r3, [pc, #100]	; (800bdd8 <__s2b+0x8c>)
 800bd74:	4819      	ldr	r0, [pc, #100]	; (800bddc <__s2b+0x90>)
 800bd76:	21d3      	movs	r1, #211	; 0xd3
 800bd78:	f000 fde6 	bl	800c948 <__assert_func>
 800bd7c:	0052      	lsls	r2, r2, #1
 800bd7e:	3101      	adds	r1, #1
 800bd80:	e7f0      	b.n	800bd64 <__s2b+0x18>
 800bd82:	9b08      	ldr	r3, [sp, #32]
 800bd84:	6143      	str	r3, [r0, #20]
 800bd86:	2d09      	cmp	r5, #9
 800bd88:	f04f 0301 	mov.w	r3, #1
 800bd8c:	6103      	str	r3, [r0, #16]
 800bd8e:	dd16      	ble.n	800bdbe <__s2b+0x72>
 800bd90:	f104 0909 	add.w	r9, r4, #9
 800bd94:	46c8      	mov	r8, r9
 800bd96:	442c      	add	r4, r5
 800bd98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	3b30      	subs	r3, #48	; 0x30
 800bda0:	220a      	movs	r2, #10
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7ff ff8c 	bl	800bcc0 <__multadd>
 800bda8:	45a0      	cmp	r8, r4
 800bdaa:	d1f5      	bne.n	800bd98 <__s2b+0x4c>
 800bdac:	f1a5 0408 	sub.w	r4, r5, #8
 800bdb0:	444c      	add	r4, r9
 800bdb2:	1b2d      	subs	r5, r5, r4
 800bdb4:	1963      	adds	r3, r4, r5
 800bdb6:	42bb      	cmp	r3, r7
 800bdb8:	db04      	blt.n	800bdc4 <__s2b+0x78>
 800bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdbe:	340a      	adds	r4, #10
 800bdc0:	2509      	movs	r5, #9
 800bdc2:	e7f6      	b.n	800bdb2 <__s2b+0x66>
 800bdc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bdc8:	4601      	mov	r1, r0
 800bdca:	3b30      	subs	r3, #48	; 0x30
 800bdcc:	220a      	movs	r2, #10
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f7ff ff76 	bl	800bcc0 <__multadd>
 800bdd4:	e7ee      	b.n	800bdb4 <__s2b+0x68>
 800bdd6:	bf00      	nop
 800bdd8:	0800d5cd 	.word	0x0800d5cd
 800bddc:	0800d64f 	.word	0x0800d64f

0800bde0 <__hi0bits>:
 800bde0:	0c03      	lsrs	r3, r0, #16
 800bde2:	041b      	lsls	r3, r3, #16
 800bde4:	b9d3      	cbnz	r3, 800be1c <__hi0bits+0x3c>
 800bde6:	0400      	lsls	r0, r0, #16
 800bde8:	2310      	movs	r3, #16
 800bdea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdee:	bf04      	itt	eq
 800bdf0:	0200      	lsleq	r0, r0, #8
 800bdf2:	3308      	addeq	r3, #8
 800bdf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdf8:	bf04      	itt	eq
 800bdfa:	0100      	lsleq	r0, r0, #4
 800bdfc:	3304      	addeq	r3, #4
 800bdfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be02:	bf04      	itt	eq
 800be04:	0080      	lsleq	r0, r0, #2
 800be06:	3302      	addeq	r3, #2
 800be08:	2800      	cmp	r0, #0
 800be0a:	db05      	blt.n	800be18 <__hi0bits+0x38>
 800be0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be10:	f103 0301 	add.w	r3, r3, #1
 800be14:	bf08      	it	eq
 800be16:	2320      	moveq	r3, #32
 800be18:	4618      	mov	r0, r3
 800be1a:	4770      	bx	lr
 800be1c:	2300      	movs	r3, #0
 800be1e:	e7e4      	b.n	800bdea <__hi0bits+0xa>

0800be20 <__lo0bits>:
 800be20:	6803      	ldr	r3, [r0, #0]
 800be22:	f013 0207 	ands.w	r2, r3, #7
 800be26:	d00c      	beq.n	800be42 <__lo0bits+0x22>
 800be28:	07d9      	lsls	r1, r3, #31
 800be2a:	d422      	bmi.n	800be72 <__lo0bits+0x52>
 800be2c:	079a      	lsls	r2, r3, #30
 800be2e:	bf49      	itett	mi
 800be30:	085b      	lsrmi	r3, r3, #1
 800be32:	089b      	lsrpl	r3, r3, #2
 800be34:	6003      	strmi	r3, [r0, #0]
 800be36:	2201      	movmi	r2, #1
 800be38:	bf5c      	itt	pl
 800be3a:	6003      	strpl	r3, [r0, #0]
 800be3c:	2202      	movpl	r2, #2
 800be3e:	4610      	mov	r0, r2
 800be40:	4770      	bx	lr
 800be42:	b299      	uxth	r1, r3
 800be44:	b909      	cbnz	r1, 800be4a <__lo0bits+0x2a>
 800be46:	0c1b      	lsrs	r3, r3, #16
 800be48:	2210      	movs	r2, #16
 800be4a:	b2d9      	uxtb	r1, r3
 800be4c:	b909      	cbnz	r1, 800be52 <__lo0bits+0x32>
 800be4e:	3208      	adds	r2, #8
 800be50:	0a1b      	lsrs	r3, r3, #8
 800be52:	0719      	lsls	r1, r3, #28
 800be54:	bf04      	itt	eq
 800be56:	091b      	lsreq	r3, r3, #4
 800be58:	3204      	addeq	r2, #4
 800be5a:	0799      	lsls	r1, r3, #30
 800be5c:	bf04      	itt	eq
 800be5e:	089b      	lsreq	r3, r3, #2
 800be60:	3202      	addeq	r2, #2
 800be62:	07d9      	lsls	r1, r3, #31
 800be64:	d403      	bmi.n	800be6e <__lo0bits+0x4e>
 800be66:	085b      	lsrs	r3, r3, #1
 800be68:	f102 0201 	add.w	r2, r2, #1
 800be6c:	d003      	beq.n	800be76 <__lo0bits+0x56>
 800be6e:	6003      	str	r3, [r0, #0]
 800be70:	e7e5      	b.n	800be3e <__lo0bits+0x1e>
 800be72:	2200      	movs	r2, #0
 800be74:	e7e3      	b.n	800be3e <__lo0bits+0x1e>
 800be76:	2220      	movs	r2, #32
 800be78:	e7e1      	b.n	800be3e <__lo0bits+0x1e>
	...

0800be7c <__i2b>:
 800be7c:	b510      	push	{r4, lr}
 800be7e:	460c      	mov	r4, r1
 800be80:	2101      	movs	r1, #1
 800be82:	f7ff febb 	bl	800bbfc <_Balloc>
 800be86:	4602      	mov	r2, r0
 800be88:	b928      	cbnz	r0, 800be96 <__i2b+0x1a>
 800be8a:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <__i2b+0x24>)
 800be8c:	4805      	ldr	r0, [pc, #20]	; (800bea4 <__i2b+0x28>)
 800be8e:	f240 1145 	movw	r1, #325	; 0x145
 800be92:	f000 fd59 	bl	800c948 <__assert_func>
 800be96:	2301      	movs	r3, #1
 800be98:	6144      	str	r4, [r0, #20]
 800be9a:	6103      	str	r3, [r0, #16]
 800be9c:	bd10      	pop	{r4, pc}
 800be9e:	bf00      	nop
 800bea0:	0800d5cd 	.word	0x0800d5cd
 800bea4:	0800d64f 	.word	0x0800d64f

0800bea8 <__multiply>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	4691      	mov	r9, r2
 800beae:	690a      	ldr	r2, [r1, #16]
 800beb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	bfb8      	it	lt
 800beb8:	460b      	movlt	r3, r1
 800beba:	460c      	mov	r4, r1
 800bebc:	bfbc      	itt	lt
 800bebe:	464c      	movlt	r4, r9
 800bec0:	4699      	movlt	r9, r3
 800bec2:	6927      	ldr	r7, [r4, #16]
 800bec4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bec8:	68a3      	ldr	r3, [r4, #8]
 800beca:	6861      	ldr	r1, [r4, #4]
 800becc:	eb07 060a 	add.w	r6, r7, sl
 800bed0:	42b3      	cmp	r3, r6
 800bed2:	b085      	sub	sp, #20
 800bed4:	bfb8      	it	lt
 800bed6:	3101      	addlt	r1, #1
 800bed8:	f7ff fe90 	bl	800bbfc <_Balloc>
 800bedc:	b930      	cbnz	r0, 800beec <__multiply+0x44>
 800bede:	4602      	mov	r2, r0
 800bee0:	4b44      	ldr	r3, [pc, #272]	; (800bff4 <__multiply+0x14c>)
 800bee2:	4845      	ldr	r0, [pc, #276]	; (800bff8 <__multiply+0x150>)
 800bee4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bee8:	f000 fd2e 	bl	800c948 <__assert_func>
 800beec:	f100 0514 	add.w	r5, r0, #20
 800bef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bef4:	462b      	mov	r3, r5
 800bef6:	2200      	movs	r2, #0
 800bef8:	4543      	cmp	r3, r8
 800befa:	d321      	bcc.n	800bf40 <__multiply+0x98>
 800befc:	f104 0314 	add.w	r3, r4, #20
 800bf00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf04:	f109 0314 	add.w	r3, r9, #20
 800bf08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf0c:	9202      	str	r2, [sp, #8]
 800bf0e:	1b3a      	subs	r2, r7, r4
 800bf10:	3a15      	subs	r2, #21
 800bf12:	f022 0203 	bic.w	r2, r2, #3
 800bf16:	3204      	adds	r2, #4
 800bf18:	f104 0115 	add.w	r1, r4, #21
 800bf1c:	428f      	cmp	r7, r1
 800bf1e:	bf38      	it	cc
 800bf20:	2204      	movcc	r2, #4
 800bf22:	9201      	str	r2, [sp, #4]
 800bf24:	9a02      	ldr	r2, [sp, #8]
 800bf26:	9303      	str	r3, [sp, #12]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d80c      	bhi.n	800bf46 <__multiply+0x9e>
 800bf2c:	2e00      	cmp	r6, #0
 800bf2e:	dd03      	ble.n	800bf38 <__multiply+0x90>
 800bf30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d05b      	beq.n	800bff0 <__multiply+0x148>
 800bf38:	6106      	str	r6, [r0, #16]
 800bf3a:	b005      	add	sp, #20
 800bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf40:	f843 2b04 	str.w	r2, [r3], #4
 800bf44:	e7d8      	b.n	800bef8 <__multiply+0x50>
 800bf46:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf4a:	f1ba 0f00 	cmp.w	sl, #0
 800bf4e:	d024      	beq.n	800bf9a <__multiply+0xf2>
 800bf50:	f104 0e14 	add.w	lr, r4, #20
 800bf54:	46a9      	mov	r9, r5
 800bf56:	f04f 0c00 	mov.w	ip, #0
 800bf5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf5e:	f8d9 1000 	ldr.w	r1, [r9]
 800bf62:	fa1f fb82 	uxth.w	fp, r2
 800bf66:	b289      	uxth	r1, r1
 800bf68:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf70:	f8d9 2000 	ldr.w	r2, [r9]
 800bf74:	4461      	add	r1, ip
 800bf76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf82:	b289      	uxth	r1, r1
 800bf84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf88:	4577      	cmp	r7, lr
 800bf8a:	f849 1b04 	str.w	r1, [r9], #4
 800bf8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf92:	d8e2      	bhi.n	800bf5a <__multiply+0xb2>
 800bf94:	9a01      	ldr	r2, [sp, #4]
 800bf96:	f845 c002 	str.w	ip, [r5, r2]
 800bf9a:	9a03      	ldr	r2, [sp, #12]
 800bf9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	f1b9 0f00 	cmp.w	r9, #0
 800bfa6:	d021      	beq.n	800bfec <__multiply+0x144>
 800bfa8:	6829      	ldr	r1, [r5, #0]
 800bfaa:	f104 0c14 	add.w	ip, r4, #20
 800bfae:	46ae      	mov	lr, r5
 800bfb0:	f04f 0a00 	mov.w	sl, #0
 800bfb4:	f8bc b000 	ldrh.w	fp, [ip]
 800bfb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bfbc:	fb09 220b 	mla	r2, r9, fp, r2
 800bfc0:	4452      	add	r2, sl
 800bfc2:	b289      	uxth	r1, r1
 800bfc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfc8:	f84e 1b04 	str.w	r1, [lr], #4
 800bfcc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bfd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfd4:	f8be 1000 	ldrh.w	r1, [lr]
 800bfd8:	fb09 110a 	mla	r1, r9, sl, r1
 800bfdc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bfe0:	4567      	cmp	r7, ip
 800bfe2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfe6:	d8e5      	bhi.n	800bfb4 <__multiply+0x10c>
 800bfe8:	9a01      	ldr	r2, [sp, #4]
 800bfea:	50a9      	str	r1, [r5, r2]
 800bfec:	3504      	adds	r5, #4
 800bfee:	e799      	b.n	800bf24 <__multiply+0x7c>
 800bff0:	3e01      	subs	r6, #1
 800bff2:	e79b      	b.n	800bf2c <__multiply+0x84>
 800bff4:	0800d5cd 	.word	0x0800d5cd
 800bff8:	0800d64f 	.word	0x0800d64f

0800bffc <__pow5mult>:
 800bffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c000:	4615      	mov	r5, r2
 800c002:	f012 0203 	ands.w	r2, r2, #3
 800c006:	4606      	mov	r6, r0
 800c008:	460f      	mov	r7, r1
 800c00a:	d007      	beq.n	800c01c <__pow5mult+0x20>
 800c00c:	4c25      	ldr	r4, [pc, #148]	; (800c0a4 <__pow5mult+0xa8>)
 800c00e:	3a01      	subs	r2, #1
 800c010:	2300      	movs	r3, #0
 800c012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c016:	f7ff fe53 	bl	800bcc0 <__multadd>
 800c01a:	4607      	mov	r7, r0
 800c01c:	10ad      	asrs	r5, r5, #2
 800c01e:	d03d      	beq.n	800c09c <__pow5mult+0xa0>
 800c020:	69f4      	ldr	r4, [r6, #28]
 800c022:	b97c      	cbnz	r4, 800c044 <__pow5mult+0x48>
 800c024:	2010      	movs	r0, #16
 800c026:	f7fc fbc5 	bl	80087b4 <malloc>
 800c02a:	4602      	mov	r2, r0
 800c02c:	61f0      	str	r0, [r6, #28]
 800c02e:	b928      	cbnz	r0, 800c03c <__pow5mult+0x40>
 800c030:	4b1d      	ldr	r3, [pc, #116]	; (800c0a8 <__pow5mult+0xac>)
 800c032:	481e      	ldr	r0, [pc, #120]	; (800c0ac <__pow5mult+0xb0>)
 800c034:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c038:	f000 fc86 	bl	800c948 <__assert_func>
 800c03c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c040:	6004      	str	r4, [r0, #0]
 800c042:	60c4      	str	r4, [r0, #12]
 800c044:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c04c:	b94c      	cbnz	r4, 800c062 <__pow5mult+0x66>
 800c04e:	f240 2171 	movw	r1, #625	; 0x271
 800c052:	4630      	mov	r0, r6
 800c054:	f7ff ff12 	bl	800be7c <__i2b>
 800c058:	2300      	movs	r3, #0
 800c05a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c05e:	4604      	mov	r4, r0
 800c060:	6003      	str	r3, [r0, #0]
 800c062:	f04f 0900 	mov.w	r9, #0
 800c066:	07eb      	lsls	r3, r5, #31
 800c068:	d50a      	bpl.n	800c080 <__pow5mult+0x84>
 800c06a:	4639      	mov	r1, r7
 800c06c:	4622      	mov	r2, r4
 800c06e:	4630      	mov	r0, r6
 800c070:	f7ff ff1a 	bl	800bea8 <__multiply>
 800c074:	4639      	mov	r1, r7
 800c076:	4680      	mov	r8, r0
 800c078:	4630      	mov	r0, r6
 800c07a:	f7ff fdff 	bl	800bc7c <_Bfree>
 800c07e:	4647      	mov	r7, r8
 800c080:	106d      	asrs	r5, r5, #1
 800c082:	d00b      	beq.n	800c09c <__pow5mult+0xa0>
 800c084:	6820      	ldr	r0, [r4, #0]
 800c086:	b938      	cbnz	r0, 800c098 <__pow5mult+0x9c>
 800c088:	4622      	mov	r2, r4
 800c08a:	4621      	mov	r1, r4
 800c08c:	4630      	mov	r0, r6
 800c08e:	f7ff ff0b 	bl	800bea8 <__multiply>
 800c092:	6020      	str	r0, [r4, #0]
 800c094:	f8c0 9000 	str.w	r9, [r0]
 800c098:	4604      	mov	r4, r0
 800c09a:	e7e4      	b.n	800c066 <__pow5mult+0x6a>
 800c09c:	4638      	mov	r0, r7
 800c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	bf00      	nop
 800c0a4:	0800d798 	.word	0x0800d798
 800c0a8:	0800d55e 	.word	0x0800d55e
 800c0ac:	0800d64f 	.word	0x0800d64f

0800c0b0 <__lshift>:
 800c0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	6849      	ldr	r1, [r1, #4]
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0be:	68a3      	ldr	r3, [r4, #8]
 800c0c0:	4607      	mov	r7, r0
 800c0c2:	4691      	mov	r9, r2
 800c0c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0c8:	f108 0601 	add.w	r6, r8, #1
 800c0cc:	42b3      	cmp	r3, r6
 800c0ce:	db0b      	blt.n	800c0e8 <__lshift+0x38>
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f7ff fd93 	bl	800bbfc <_Balloc>
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	b948      	cbnz	r0, 800c0ee <__lshift+0x3e>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	4b28      	ldr	r3, [pc, #160]	; (800c180 <__lshift+0xd0>)
 800c0de:	4829      	ldr	r0, [pc, #164]	; (800c184 <__lshift+0xd4>)
 800c0e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c0e4:	f000 fc30 	bl	800c948 <__assert_func>
 800c0e8:	3101      	adds	r1, #1
 800c0ea:	005b      	lsls	r3, r3, #1
 800c0ec:	e7ee      	b.n	800c0cc <__lshift+0x1c>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f100 0114 	add.w	r1, r0, #20
 800c0f4:	f100 0210 	add.w	r2, r0, #16
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	4553      	cmp	r3, sl
 800c0fc:	db33      	blt.n	800c166 <__lshift+0xb6>
 800c0fe:	6920      	ldr	r0, [r4, #16]
 800c100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c104:	f104 0314 	add.w	r3, r4, #20
 800c108:	f019 091f 	ands.w	r9, r9, #31
 800c10c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c110:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c114:	d02b      	beq.n	800c16e <__lshift+0xbe>
 800c116:	f1c9 0e20 	rsb	lr, r9, #32
 800c11a:	468a      	mov	sl, r1
 800c11c:	2200      	movs	r2, #0
 800c11e:	6818      	ldr	r0, [r3, #0]
 800c120:	fa00 f009 	lsl.w	r0, r0, r9
 800c124:	4310      	orrs	r0, r2
 800c126:	f84a 0b04 	str.w	r0, [sl], #4
 800c12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c12e:	459c      	cmp	ip, r3
 800c130:	fa22 f20e 	lsr.w	r2, r2, lr
 800c134:	d8f3      	bhi.n	800c11e <__lshift+0x6e>
 800c136:	ebac 0304 	sub.w	r3, ip, r4
 800c13a:	3b15      	subs	r3, #21
 800c13c:	f023 0303 	bic.w	r3, r3, #3
 800c140:	3304      	adds	r3, #4
 800c142:	f104 0015 	add.w	r0, r4, #21
 800c146:	4584      	cmp	ip, r0
 800c148:	bf38      	it	cc
 800c14a:	2304      	movcc	r3, #4
 800c14c:	50ca      	str	r2, [r1, r3]
 800c14e:	b10a      	cbz	r2, 800c154 <__lshift+0xa4>
 800c150:	f108 0602 	add.w	r6, r8, #2
 800c154:	3e01      	subs	r6, #1
 800c156:	4638      	mov	r0, r7
 800c158:	612e      	str	r6, [r5, #16]
 800c15a:	4621      	mov	r1, r4
 800c15c:	f7ff fd8e 	bl	800bc7c <_Bfree>
 800c160:	4628      	mov	r0, r5
 800c162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c166:	f842 0f04 	str.w	r0, [r2, #4]!
 800c16a:	3301      	adds	r3, #1
 800c16c:	e7c5      	b.n	800c0fa <__lshift+0x4a>
 800c16e:	3904      	subs	r1, #4
 800c170:	f853 2b04 	ldr.w	r2, [r3], #4
 800c174:	f841 2f04 	str.w	r2, [r1, #4]!
 800c178:	459c      	cmp	ip, r3
 800c17a:	d8f9      	bhi.n	800c170 <__lshift+0xc0>
 800c17c:	e7ea      	b.n	800c154 <__lshift+0xa4>
 800c17e:	bf00      	nop
 800c180:	0800d5cd 	.word	0x0800d5cd
 800c184:	0800d64f 	.word	0x0800d64f

0800c188 <__mcmp>:
 800c188:	b530      	push	{r4, r5, lr}
 800c18a:	6902      	ldr	r2, [r0, #16]
 800c18c:	690c      	ldr	r4, [r1, #16]
 800c18e:	1b12      	subs	r2, r2, r4
 800c190:	d10e      	bne.n	800c1b0 <__mcmp+0x28>
 800c192:	f100 0314 	add.w	r3, r0, #20
 800c196:	3114      	adds	r1, #20
 800c198:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c19c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c1a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c1a8:	42a5      	cmp	r5, r4
 800c1aa:	d003      	beq.n	800c1b4 <__mcmp+0x2c>
 800c1ac:	d305      	bcc.n	800c1ba <__mcmp+0x32>
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	bd30      	pop	{r4, r5, pc}
 800c1b4:	4283      	cmp	r3, r0
 800c1b6:	d3f3      	bcc.n	800c1a0 <__mcmp+0x18>
 800c1b8:	e7fa      	b.n	800c1b0 <__mcmp+0x28>
 800c1ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1be:	e7f7      	b.n	800c1b0 <__mcmp+0x28>

0800c1c0 <__mdiff>:
 800c1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	4690      	mov	r8, r2
 800c1ce:	f7ff ffdb 	bl	800c188 <__mcmp>
 800c1d2:	1e05      	subs	r5, r0, #0
 800c1d4:	d110      	bne.n	800c1f8 <__mdiff+0x38>
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	4630      	mov	r0, r6
 800c1da:	f7ff fd0f 	bl	800bbfc <_Balloc>
 800c1de:	b930      	cbnz	r0, 800c1ee <__mdiff+0x2e>
 800c1e0:	4b3a      	ldr	r3, [pc, #232]	; (800c2cc <__mdiff+0x10c>)
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	f240 2137 	movw	r1, #567	; 0x237
 800c1e8:	4839      	ldr	r0, [pc, #228]	; (800c2d0 <__mdiff+0x110>)
 800c1ea:	f000 fbad 	bl	800c948 <__assert_func>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f8:	bfa4      	itt	ge
 800c1fa:	4643      	movge	r3, r8
 800c1fc:	46a0      	movge	r8, r4
 800c1fe:	4630      	mov	r0, r6
 800c200:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c204:	bfa6      	itte	ge
 800c206:	461c      	movge	r4, r3
 800c208:	2500      	movge	r5, #0
 800c20a:	2501      	movlt	r5, #1
 800c20c:	f7ff fcf6 	bl	800bbfc <_Balloc>
 800c210:	b920      	cbnz	r0, 800c21c <__mdiff+0x5c>
 800c212:	4b2e      	ldr	r3, [pc, #184]	; (800c2cc <__mdiff+0x10c>)
 800c214:	4602      	mov	r2, r0
 800c216:	f240 2145 	movw	r1, #581	; 0x245
 800c21a:	e7e5      	b.n	800c1e8 <__mdiff+0x28>
 800c21c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c220:	6926      	ldr	r6, [r4, #16]
 800c222:	60c5      	str	r5, [r0, #12]
 800c224:	f104 0914 	add.w	r9, r4, #20
 800c228:	f108 0514 	add.w	r5, r8, #20
 800c22c:	f100 0e14 	add.w	lr, r0, #20
 800c230:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c234:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c238:	f108 0210 	add.w	r2, r8, #16
 800c23c:	46f2      	mov	sl, lr
 800c23e:	2100      	movs	r1, #0
 800c240:	f859 3b04 	ldr.w	r3, [r9], #4
 800c244:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c248:	fa11 f88b 	uxtah	r8, r1, fp
 800c24c:	b299      	uxth	r1, r3
 800c24e:	0c1b      	lsrs	r3, r3, #16
 800c250:	eba8 0801 	sub.w	r8, r8, r1
 800c254:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c258:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c25c:	fa1f f888 	uxth.w	r8, r8
 800c260:	1419      	asrs	r1, r3, #16
 800c262:	454e      	cmp	r6, r9
 800c264:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c268:	f84a 3b04 	str.w	r3, [sl], #4
 800c26c:	d8e8      	bhi.n	800c240 <__mdiff+0x80>
 800c26e:	1b33      	subs	r3, r6, r4
 800c270:	3b15      	subs	r3, #21
 800c272:	f023 0303 	bic.w	r3, r3, #3
 800c276:	3304      	adds	r3, #4
 800c278:	3415      	adds	r4, #21
 800c27a:	42a6      	cmp	r6, r4
 800c27c:	bf38      	it	cc
 800c27e:	2304      	movcc	r3, #4
 800c280:	441d      	add	r5, r3
 800c282:	4473      	add	r3, lr
 800c284:	469e      	mov	lr, r3
 800c286:	462e      	mov	r6, r5
 800c288:	4566      	cmp	r6, ip
 800c28a:	d30e      	bcc.n	800c2aa <__mdiff+0xea>
 800c28c:	f10c 0203 	add.w	r2, ip, #3
 800c290:	1b52      	subs	r2, r2, r5
 800c292:	f022 0203 	bic.w	r2, r2, #3
 800c296:	3d03      	subs	r5, #3
 800c298:	45ac      	cmp	ip, r5
 800c29a:	bf38      	it	cc
 800c29c:	2200      	movcc	r2, #0
 800c29e:	4413      	add	r3, r2
 800c2a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c2a4:	b17a      	cbz	r2, 800c2c6 <__mdiff+0x106>
 800c2a6:	6107      	str	r7, [r0, #16]
 800c2a8:	e7a4      	b.n	800c1f4 <__mdiff+0x34>
 800c2aa:	f856 8b04 	ldr.w	r8, [r6], #4
 800c2ae:	fa11 f288 	uxtah	r2, r1, r8
 800c2b2:	1414      	asrs	r4, r2, #16
 800c2b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c2b8:	b292      	uxth	r2, r2
 800c2ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c2be:	f84e 2b04 	str.w	r2, [lr], #4
 800c2c2:	1421      	asrs	r1, r4, #16
 800c2c4:	e7e0      	b.n	800c288 <__mdiff+0xc8>
 800c2c6:	3f01      	subs	r7, #1
 800c2c8:	e7ea      	b.n	800c2a0 <__mdiff+0xe0>
 800c2ca:	bf00      	nop
 800c2cc:	0800d5cd 	.word	0x0800d5cd
 800c2d0:	0800d64f 	.word	0x0800d64f

0800c2d4 <__ulp>:
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	ed8d 0b00 	vstr	d0, [sp]
 800c2da:	9a01      	ldr	r2, [sp, #4]
 800c2dc:	4b0f      	ldr	r3, [pc, #60]	; (800c31c <__ulp+0x48>)
 800c2de:	4013      	ands	r3, r2
 800c2e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dc08      	bgt.n	800c2fa <__ulp+0x26>
 800c2e8:	425b      	negs	r3, r3
 800c2ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c2ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c2f2:	da04      	bge.n	800c2fe <__ulp+0x2a>
 800c2f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c2f8:	4113      	asrs	r3, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	e008      	b.n	800c310 <__ulp+0x3c>
 800c2fe:	f1a2 0314 	sub.w	r3, r2, #20
 800c302:	2b1e      	cmp	r3, #30
 800c304:	bfda      	itte	le
 800c306:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c30a:	40da      	lsrle	r2, r3
 800c30c:	2201      	movgt	r2, #1
 800c30e:	2300      	movs	r3, #0
 800c310:	4619      	mov	r1, r3
 800c312:	4610      	mov	r0, r2
 800c314:	ec41 0b10 	vmov	d0, r0, r1
 800c318:	b002      	add	sp, #8
 800c31a:	4770      	bx	lr
 800c31c:	7ff00000 	.word	0x7ff00000

0800c320 <__b2d>:
 800c320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c324:	6906      	ldr	r6, [r0, #16]
 800c326:	f100 0814 	add.w	r8, r0, #20
 800c32a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c32e:	1f37      	subs	r7, r6, #4
 800c330:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c334:	4610      	mov	r0, r2
 800c336:	f7ff fd53 	bl	800bde0 <__hi0bits>
 800c33a:	f1c0 0320 	rsb	r3, r0, #32
 800c33e:	280a      	cmp	r0, #10
 800c340:	600b      	str	r3, [r1, #0]
 800c342:	491b      	ldr	r1, [pc, #108]	; (800c3b0 <__b2d+0x90>)
 800c344:	dc15      	bgt.n	800c372 <__b2d+0x52>
 800c346:	f1c0 0c0b 	rsb	ip, r0, #11
 800c34a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c34e:	45b8      	cmp	r8, r7
 800c350:	ea43 0501 	orr.w	r5, r3, r1
 800c354:	bf34      	ite	cc
 800c356:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c35a:	2300      	movcs	r3, #0
 800c35c:	3015      	adds	r0, #21
 800c35e:	fa02 f000 	lsl.w	r0, r2, r0
 800c362:	fa23 f30c 	lsr.w	r3, r3, ip
 800c366:	4303      	orrs	r3, r0
 800c368:	461c      	mov	r4, r3
 800c36a:	ec45 4b10 	vmov	d0, r4, r5
 800c36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c372:	45b8      	cmp	r8, r7
 800c374:	bf3a      	itte	cc
 800c376:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c37a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c37e:	2300      	movcs	r3, #0
 800c380:	380b      	subs	r0, #11
 800c382:	d012      	beq.n	800c3aa <__b2d+0x8a>
 800c384:	f1c0 0120 	rsb	r1, r0, #32
 800c388:	fa23 f401 	lsr.w	r4, r3, r1
 800c38c:	4082      	lsls	r2, r0
 800c38e:	4322      	orrs	r2, r4
 800c390:	4547      	cmp	r7, r8
 800c392:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c396:	bf8c      	ite	hi
 800c398:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c39c:	2200      	movls	r2, #0
 800c39e:	4083      	lsls	r3, r0
 800c3a0:	40ca      	lsrs	r2, r1
 800c3a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	e7de      	b.n	800c368 <__b2d+0x48>
 800c3aa:	ea42 0501 	orr.w	r5, r2, r1
 800c3ae:	e7db      	b.n	800c368 <__b2d+0x48>
 800c3b0:	3ff00000 	.word	0x3ff00000

0800c3b4 <__d2b>:
 800c3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3b8:	460f      	mov	r7, r1
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	ec59 8b10 	vmov	r8, r9, d0
 800c3c0:	4616      	mov	r6, r2
 800c3c2:	f7ff fc1b 	bl	800bbfc <_Balloc>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	b930      	cbnz	r0, 800c3d8 <__d2b+0x24>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	4b24      	ldr	r3, [pc, #144]	; (800c460 <__d2b+0xac>)
 800c3ce:	4825      	ldr	r0, [pc, #148]	; (800c464 <__d2b+0xb0>)
 800c3d0:	f240 310f 	movw	r1, #783	; 0x30f
 800c3d4:	f000 fab8 	bl	800c948 <__assert_func>
 800c3d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3e0:	bb2d      	cbnz	r5, 800c42e <__d2b+0x7a>
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	f1b8 0300 	subs.w	r3, r8, #0
 800c3e8:	d026      	beq.n	800c438 <__d2b+0x84>
 800c3ea:	4668      	mov	r0, sp
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	f7ff fd17 	bl	800be20 <__lo0bits>
 800c3f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c3f6:	b1e8      	cbz	r0, 800c434 <__d2b+0x80>
 800c3f8:	f1c0 0320 	rsb	r3, r0, #32
 800c3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c400:	430b      	orrs	r3, r1
 800c402:	40c2      	lsrs	r2, r0
 800c404:	6163      	str	r3, [r4, #20]
 800c406:	9201      	str	r2, [sp, #4]
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	61a3      	str	r3, [r4, #24]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	bf14      	ite	ne
 800c410:	2202      	movne	r2, #2
 800c412:	2201      	moveq	r2, #1
 800c414:	6122      	str	r2, [r4, #16]
 800c416:	b1bd      	cbz	r5, 800c448 <__d2b+0x94>
 800c418:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c41c:	4405      	add	r5, r0
 800c41e:	603d      	str	r5, [r7, #0]
 800c420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c424:	6030      	str	r0, [r6, #0]
 800c426:	4620      	mov	r0, r4
 800c428:	b003      	add	sp, #12
 800c42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c432:	e7d6      	b.n	800c3e2 <__d2b+0x2e>
 800c434:	6161      	str	r1, [r4, #20]
 800c436:	e7e7      	b.n	800c408 <__d2b+0x54>
 800c438:	a801      	add	r0, sp, #4
 800c43a:	f7ff fcf1 	bl	800be20 <__lo0bits>
 800c43e:	9b01      	ldr	r3, [sp, #4]
 800c440:	6163      	str	r3, [r4, #20]
 800c442:	3020      	adds	r0, #32
 800c444:	2201      	movs	r2, #1
 800c446:	e7e5      	b.n	800c414 <__d2b+0x60>
 800c448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c44c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c450:	6038      	str	r0, [r7, #0]
 800c452:	6918      	ldr	r0, [r3, #16]
 800c454:	f7ff fcc4 	bl	800bde0 <__hi0bits>
 800c458:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c45c:	e7e2      	b.n	800c424 <__d2b+0x70>
 800c45e:	bf00      	nop
 800c460:	0800d5cd 	.word	0x0800d5cd
 800c464:	0800d64f 	.word	0x0800d64f

0800c468 <__ratio>:
 800c468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	4688      	mov	r8, r1
 800c46e:	4669      	mov	r1, sp
 800c470:	4681      	mov	r9, r0
 800c472:	f7ff ff55 	bl	800c320 <__b2d>
 800c476:	a901      	add	r1, sp, #4
 800c478:	4640      	mov	r0, r8
 800c47a:	ec55 4b10 	vmov	r4, r5, d0
 800c47e:	f7ff ff4f 	bl	800c320 <__b2d>
 800c482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c486:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c48a:	eba3 0c02 	sub.w	ip, r3, r2
 800c48e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c492:	1a9b      	subs	r3, r3, r2
 800c494:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c498:	ec51 0b10 	vmov	r0, r1, d0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	bfd6      	itet	le
 800c4a0:	460a      	movle	r2, r1
 800c4a2:	462a      	movgt	r2, r5
 800c4a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c4a8:	468b      	mov	fp, r1
 800c4aa:	462f      	mov	r7, r5
 800c4ac:	bfd4      	ite	le
 800c4ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c4b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	ee10 2a10 	vmov	r2, s0
 800c4bc:	465b      	mov	r3, fp
 800c4be:	4639      	mov	r1, r7
 800c4c0:	f7f4 f9e4 	bl	800088c <__aeabi_ddiv>
 800c4c4:	ec41 0b10 	vmov	d0, r0, r1
 800c4c8:	b003      	add	sp, #12
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4ce <__copybits>:
 800c4ce:	3901      	subs	r1, #1
 800c4d0:	b570      	push	{r4, r5, r6, lr}
 800c4d2:	1149      	asrs	r1, r1, #5
 800c4d4:	6914      	ldr	r4, [r2, #16]
 800c4d6:	3101      	adds	r1, #1
 800c4d8:	f102 0314 	add.w	r3, r2, #20
 800c4dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4e4:	1f05      	subs	r5, r0, #4
 800c4e6:	42a3      	cmp	r3, r4
 800c4e8:	d30c      	bcc.n	800c504 <__copybits+0x36>
 800c4ea:	1aa3      	subs	r3, r4, r2
 800c4ec:	3b11      	subs	r3, #17
 800c4ee:	f023 0303 	bic.w	r3, r3, #3
 800c4f2:	3211      	adds	r2, #17
 800c4f4:	42a2      	cmp	r2, r4
 800c4f6:	bf88      	it	hi
 800c4f8:	2300      	movhi	r3, #0
 800c4fa:	4418      	add	r0, r3
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4288      	cmp	r0, r1
 800c500:	d305      	bcc.n	800c50e <__copybits+0x40>
 800c502:	bd70      	pop	{r4, r5, r6, pc}
 800c504:	f853 6b04 	ldr.w	r6, [r3], #4
 800c508:	f845 6f04 	str.w	r6, [r5, #4]!
 800c50c:	e7eb      	b.n	800c4e6 <__copybits+0x18>
 800c50e:	f840 3b04 	str.w	r3, [r0], #4
 800c512:	e7f4      	b.n	800c4fe <__copybits+0x30>

0800c514 <__any_on>:
 800c514:	f100 0214 	add.w	r2, r0, #20
 800c518:	6900      	ldr	r0, [r0, #16]
 800c51a:	114b      	asrs	r3, r1, #5
 800c51c:	4298      	cmp	r0, r3
 800c51e:	b510      	push	{r4, lr}
 800c520:	db11      	blt.n	800c546 <__any_on+0x32>
 800c522:	dd0a      	ble.n	800c53a <__any_on+0x26>
 800c524:	f011 011f 	ands.w	r1, r1, #31
 800c528:	d007      	beq.n	800c53a <__any_on+0x26>
 800c52a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c52e:	fa24 f001 	lsr.w	r0, r4, r1
 800c532:	fa00 f101 	lsl.w	r1, r0, r1
 800c536:	428c      	cmp	r4, r1
 800c538:	d10b      	bne.n	800c552 <__any_on+0x3e>
 800c53a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c53e:	4293      	cmp	r3, r2
 800c540:	d803      	bhi.n	800c54a <__any_on+0x36>
 800c542:	2000      	movs	r0, #0
 800c544:	bd10      	pop	{r4, pc}
 800c546:	4603      	mov	r3, r0
 800c548:	e7f7      	b.n	800c53a <__any_on+0x26>
 800c54a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c54e:	2900      	cmp	r1, #0
 800c550:	d0f5      	beq.n	800c53e <__any_on+0x2a>
 800c552:	2001      	movs	r0, #1
 800c554:	e7f6      	b.n	800c544 <__any_on+0x30>

0800c556 <__sread>:
 800c556:	b510      	push	{r4, lr}
 800c558:	460c      	mov	r4, r1
 800c55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55e:	f000 f9cf 	bl	800c900 <_read_r>
 800c562:	2800      	cmp	r0, #0
 800c564:	bfab      	itete	ge
 800c566:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c568:	89a3      	ldrhlt	r3, [r4, #12]
 800c56a:	181b      	addge	r3, r3, r0
 800c56c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c570:	bfac      	ite	ge
 800c572:	6563      	strge	r3, [r4, #84]	; 0x54
 800c574:	81a3      	strhlt	r3, [r4, #12]
 800c576:	bd10      	pop	{r4, pc}

0800c578 <__swrite>:
 800c578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57c:	461f      	mov	r7, r3
 800c57e:	898b      	ldrh	r3, [r1, #12]
 800c580:	05db      	lsls	r3, r3, #23
 800c582:	4605      	mov	r5, r0
 800c584:	460c      	mov	r4, r1
 800c586:	4616      	mov	r6, r2
 800c588:	d505      	bpl.n	800c596 <__swrite+0x1e>
 800c58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c58e:	2302      	movs	r3, #2
 800c590:	2200      	movs	r2, #0
 800c592:	f000 f9a3 	bl	800c8dc <_lseek_r>
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5a0:	81a3      	strh	r3, [r4, #12]
 800c5a2:	4632      	mov	r2, r6
 800c5a4:	463b      	mov	r3, r7
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ac:	f000 b9ba 	b.w	800c924 <_write_r>

0800c5b0 <__sseek>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b8:	f000 f990 	bl	800c8dc <_lseek_r>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	89a3      	ldrh	r3, [r4, #12]
 800c5c0:	bf15      	itete	ne
 800c5c2:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5c4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5c8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5cc:	81a3      	strheq	r3, [r4, #12]
 800c5ce:	bf18      	it	ne
 800c5d0:	81a3      	strhne	r3, [r4, #12]
 800c5d2:	bd10      	pop	{r4, pc}

0800c5d4 <__sclose>:
 800c5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d8:	f000 b94e 	b.w	800c878 <_close_r>

0800c5dc <_realloc_r>:
 800c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e0:	4680      	mov	r8, r0
 800c5e2:	4614      	mov	r4, r2
 800c5e4:	460e      	mov	r6, r1
 800c5e6:	b921      	cbnz	r1, 800c5f2 <_realloc_r+0x16>
 800c5e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	f7fc b911 	b.w	8008814 <_malloc_r>
 800c5f2:	b92a      	cbnz	r2, 800c600 <_realloc_r+0x24>
 800c5f4:	f7fe fc02 	bl	800adfc <_free_r>
 800c5f8:	4625      	mov	r5, r4
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c600:	f000 f9d6 	bl	800c9b0 <_malloc_usable_size_r>
 800c604:	4284      	cmp	r4, r0
 800c606:	4607      	mov	r7, r0
 800c608:	d802      	bhi.n	800c610 <_realloc_r+0x34>
 800c60a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c60e:	d812      	bhi.n	800c636 <_realloc_r+0x5a>
 800c610:	4621      	mov	r1, r4
 800c612:	4640      	mov	r0, r8
 800c614:	f7fc f8fe 	bl	8008814 <_malloc_r>
 800c618:	4605      	mov	r5, r0
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d0ed      	beq.n	800c5fa <_realloc_r+0x1e>
 800c61e:	42bc      	cmp	r4, r7
 800c620:	4622      	mov	r2, r4
 800c622:	4631      	mov	r1, r6
 800c624:	bf28      	it	cs
 800c626:	463a      	movcs	r2, r7
 800c628:	f7fd fd4e 	bl	800a0c8 <memcpy>
 800c62c:	4631      	mov	r1, r6
 800c62e:	4640      	mov	r0, r8
 800c630:	f7fe fbe4 	bl	800adfc <_free_r>
 800c634:	e7e1      	b.n	800c5fa <_realloc_r+0x1e>
 800c636:	4635      	mov	r5, r6
 800c638:	e7df      	b.n	800c5fa <_realloc_r+0x1e>

0800c63a <__swbuf_r>:
 800c63a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63c:	460e      	mov	r6, r1
 800c63e:	4614      	mov	r4, r2
 800c640:	4605      	mov	r5, r0
 800c642:	b118      	cbz	r0, 800c64c <__swbuf_r+0x12>
 800c644:	6a03      	ldr	r3, [r0, #32]
 800c646:	b90b      	cbnz	r3, 800c64c <__swbuf_r+0x12>
 800c648:	f7fc fdaa 	bl	80091a0 <__sinit>
 800c64c:	69a3      	ldr	r3, [r4, #24]
 800c64e:	60a3      	str	r3, [r4, #8]
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	071a      	lsls	r2, r3, #28
 800c654:	d525      	bpl.n	800c6a2 <__swbuf_r+0x68>
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	b31b      	cbz	r3, 800c6a2 <__swbuf_r+0x68>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	6922      	ldr	r2, [r4, #16]
 800c65e:	1a98      	subs	r0, r3, r2
 800c660:	6963      	ldr	r3, [r4, #20]
 800c662:	b2f6      	uxtb	r6, r6
 800c664:	4283      	cmp	r3, r0
 800c666:	4637      	mov	r7, r6
 800c668:	dc04      	bgt.n	800c674 <__swbuf_r+0x3a>
 800c66a:	4621      	mov	r1, r4
 800c66c:	4628      	mov	r0, r5
 800c66e:	f7ff fa9d 	bl	800bbac <_fflush_r>
 800c672:	b9e0      	cbnz	r0, 800c6ae <__swbuf_r+0x74>
 800c674:	68a3      	ldr	r3, [r4, #8]
 800c676:	3b01      	subs	r3, #1
 800c678:	60a3      	str	r3, [r4, #8]
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	6022      	str	r2, [r4, #0]
 800c680:	701e      	strb	r6, [r3, #0]
 800c682:	6962      	ldr	r2, [r4, #20]
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	429a      	cmp	r2, r3
 800c688:	d004      	beq.n	800c694 <__swbuf_r+0x5a>
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	07db      	lsls	r3, r3, #31
 800c68e:	d506      	bpl.n	800c69e <__swbuf_r+0x64>
 800c690:	2e0a      	cmp	r6, #10
 800c692:	d104      	bne.n	800c69e <__swbuf_r+0x64>
 800c694:	4621      	mov	r1, r4
 800c696:	4628      	mov	r0, r5
 800c698:	f7ff fa88 	bl	800bbac <_fflush_r>
 800c69c:	b938      	cbnz	r0, 800c6ae <__swbuf_r+0x74>
 800c69e:	4638      	mov	r0, r7
 800c6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f000 f805 	bl	800c6b4 <__swsetup_r>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	d0d5      	beq.n	800c65a <__swbuf_r+0x20>
 800c6ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c6b2:	e7f4      	b.n	800c69e <__swbuf_r+0x64>

0800c6b4 <__swsetup_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4b2a      	ldr	r3, [pc, #168]	; (800c760 <__swsetup_r+0xac>)
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	6818      	ldr	r0, [r3, #0]
 800c6bc:	460c      	mov	r4, r1
 800c6be:	b118      	cbz	r0, 800c6c8 <__swsetup_r+0x14>
 800c6c0:	6a03      	ldr	r3, [r0, #32]
 800c6c2:	b90b      	cbnz	r3, 800c6c8 <__swsetup_r+0x14>
 800c6c4:	f7fc fd6c 	bl	80091a0 <__sinit>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6ce:	0718      	lsls	r0, r3, #28
 800c6d0:	d422      	bmi.n	800c718 <__swsetup_r+0x64>
 800c6d2:	06d9      	lsls	r1, r3, #27
 800c6d4:	d407      	bmi.n	800c6e6 <__swsetup_r+0x32>
 800c6d6:	2309      	movs	r3, #9
 800c6d8:	602b      	str	r3, [r5, #0]
 800c6da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6de:	81a3      	strh	r3, [r4, #12]
 800c6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6e4:	e034      	b.n	800c750 <__swsetup_r+0x9c>
 800c6e6:	0758      	lsls	r0, r3, #29
 800c6e8:	d512      	bpl.n	800c710 <__swsetup_r+0x5c>
 800c6ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ec:	b141      	cbz	r1, 800c700 <__swsetup_r+0x4c>
 800c6ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	d002      	beq.n	800c6fc <__swsetup_r+0x48>
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7fe fb80 	bl	800adfc <_free_r>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	6363      	str	r3, [r4, #52]	; 0x34
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	2300      	movs	r3, #0
 800c70a:	6063      	str	r3, [r4, #4]
 800c70c:	6923      	ldr	r3, [r4, #16]
 800c70e:	6023      	str	r3, [r4, #0]
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	f043 0308 	orr.w	r3, r3, #8
 800c716:	81a3      	strh	r3, [r4, #12]
 800c718:	6923      	ldr	r3, [r4, #16]
 800c71a:	b94b      	cbnz	r3, 800c730 <__swsetup_r+0x7c>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c726:	d003      	beq.n	800c730 <__swsetup_r+0x7c>
 800c728:	4621      	mov	r1, r4
 800c72a:	4628      	mov	r0, r5
 800c72c:	f000 f84d 	bl	800c7ca <__smakebuf_r>
 800c730:	89a0      	ldrh	r0, [r4, #12]
 800c732:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c736:	f010 0301 	ands.w	r3, r0, #1
 800c73a:	d00a      	beq.n	800c752 <__swsetup_r+0x9e>
 800c73c:	2300      	movs	r3, #0
 800c73e:	60a3      	str	r3, [r4, #8]
 800c740:	6963      	ldr	r3, [r4, #20]
 800c742:	425b      	negs	r3, r3
 800c744:	61a3      	str	r3, [r4, #24]
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	b943      	cbnz	r3, 800c75c <__swsetup_r+0xa8>
 800c74a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c74e:	d1c4      	bne.n	800c6da <__swsetup_r+0x26>
 800c750:	bd38      	pop	{r3, r4, r5, pc}
 800c752:	0781      	lsls	r1, r0, #30
 800c754:	bf58      	it	pl
 800c756:	6963      	ldrpl	r3, [r4, #20]
 800c758:	60a3      	str	r3, [r4, #8]
 800c75a:	e7f4      	b.n	800c746 <__swsetup_r+0x92>
 800c75c:	2000      	movs	r0, #0
 800c75e:	e7f7      	b.n	800c750 <__swsetup_r+0x9c>
 800c760:	200001f4 	.word	0x200001f4

0800c764 <__ascii_wctomb>:
 800c764:	b149      	cbz	r1, 800c77a <__ascii_wctomb+0x16>
 800c766:	2aff      	cmp	r2, #255	; 0xff
 800c768:	bf85      	ittet	hi
 800c76a:	238a      	movhi	r3, #138	; 0x8a
 800c76c:	6003      	strhi	r3, [r0, #0]
 800c76e:	700a      	strbls	r2, [r1, #0]
 800c770:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c774:	bf98      	it	ls
 800c776:	2001      	movls	r0, #1
 800c778:	4770      	bx	lr
 800c77a:	4608      	mov	r0, r1
 800c77c:	4770      	bx	lr

0800c77e <__swhatbuf_r>:
 800c77e:	b570      	push	{r4, r5, r6, lr}
 800c780:	460c      	mov	r4, r1
 800c782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c786:	2900      	cmp	r1, #0
 800c788:	b096      	sub	sp, #88	; 0x58
 800c78a:	4615      	mov	r5, r2
 800c78c:	461e      	mov	r6, r3
 800c78e:	da0d      	bge.n	800c7ac <__swhatbuf_r+0x2e>
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c796:	f04f 0100 	mov.w	r1, #0
 800c79a:	bf0c      	ite	eq
 800c79c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7a0:	2340      	movne	r3, #64	; 0x40
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	6031      	str	r1, [r6, #0]
 800c7a6:	602b      	str	r3, [r5, #0]
 800c7a8:	b016      	add	sp, #88	; 0x58
 800c7aa:	bd70      	pop	{r4, r5, r6, pc}
 800c7ac:	466a      	mov	r2, sp
 800c7ae:	f000 f873 	bl	800c898 <_fstat_r>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	dbec      	blt.n	800c790 <__swhatbuf_r+0x12>
 800c7b6:	9901      	ldr	r1, [sp, #4]
 800c7b8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c7bc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c7c0:	4259      	negs	r1, r3
 800c7c2:	4159      	adcs	r1, r3
 800c7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7c8:	e7eb      	b.n	800c7a2 <__swhatbuf_r+0x24>

0800c7ca <__smakebuf_r>:
 800c7ca:	898b      	ldrh	r3, [r1, #12]
 800c7cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7ce:	079d      	lsls	r5, r3, #30
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	d507      	bpl.n	800c7e6 <__smakebuf_r+0x1c>
 800c7d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	6123      	str	r3, [r4, #16]
 800c7de:	2301      	movs	r3, #1
 800c7e0:	6163      	str	r3, [r4, #20]
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd70      	pop	{r4, r5, r6, pc}
 800c7e6:	ab01      	add	r3, sp, #4
 800c7e8:	466a      	mov	r2, sp
 800c7ea:	f7ff ffc8 	bl	800c77e <__swhatbuf_r>
 800c7ee:	9900      	ldr	r1, [sp, #0]
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7fc f80e 	bl	8008814 <_malloc_r>
 800c7f8:	b948      	cbnz	r0, 800c80e <__smakebuf_r+0x44>
 800c7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7fe:	059a      	lsls	r2, r3, #22
 800c800:	d4ef      	bmi.n	800c7e2 <__smakebuf_r+0x18>
 800c802:	f023 0303 	bic.w	r3, r3, #3
 800c806:	f043 0302 	orr.w	r3, r3, #2
 800c80a:	81a3      	strh	r3, [r4, #12]
 800c80c:	e7e3      	b.n	800c7d6 <__smakebuf_r+0xc>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	6020      	str	r0, [r4, #0]
 800c812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c816:	81a3      	strh	r3, [r4, #12]
 800c818:	9b00      	ldr	r3, [sp, #0]
 800c81a:	6163      	str	r3, [r4, #20]
 800c81c:	9b01      	ldr	r3, [sp, #4]
 800c81e:	6120      	str	r0, [r4, #16]
 800c820:	b15b      	cbz	r3, 800c83a <__smakebuf_r+0x70>
 800c822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c826:	4630      	mov	r0, r6
 800c828:	f000 f848 	bl	800c8bc <_isatty_r>
 800c82c:	b128      	cbz	r0, 800c83a <__smakebuf_r+0x70>
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	f023 0303 	bic.w	r3, r3, #3
 800c834:	f043 0301 	orr.w	r3, r3, #1
 800c838:	81a3      	strh	r3, [r4, #12]
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	431d      	orrs	r5, r3
 800c83e:	81a5      	strh	r5, [r4, #12]
 800c840:	e7cf      	b.n	800c7e2 <__smakebuf_r+0x18>

0800c842 <memmove>:
 800c842:	4288      	cmp	r0, r1
 800c844:	b510      	push	{r4, lr}
 800c846:	eb01 0402 	add.w	r4, r1, r2
 800c84a:	d902      	bls.n	800c852 <memmove+0x10>
 800c84c:	4284      	cmp	r4, r0
 800c84e:	4623      	mov	r3, r4
 800c850:	d807      	bhi.n	800c862 <memmove+0x20>
 800c852:	1e43      	subs	r3, r0, #1
 800c854:	42a1      	cmp	r1, r4
 800c856:	d008      	beq.n	800c86a <memmove+0x28>
 800c858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c85c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c860:	e7f8      	b.n	800c854 <memmove+0x12>
 800c862:	4402      	add	r2, r0
 800c864:	4601      	mov	r1, r0
 800c866:	428a      	cmp	r2, r1
 800c868:	d100      	bne.n	800c86c <memmove+0x2a>
 800c86a:	bd10      	pop	{r4, pc}
 800c86c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c870:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c874:	e7f7      	b.n	800c866 <memmove+0x24>
	...

0800c878 <_close_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d06      	ldr	r5, [pc, #24]	; (800c894 <_close_r+0x1c>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f6 fba1 	bl	8002fca <_close>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_close_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_close_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	200186cc 	.word	0x200186cc

0800c898 <_fstat_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d07      	ldr	r5, [pc, #28]	; (800c8b8 <_fstat_r+0x20>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	f7f6 fb9c 	bl	8002fe2 <_fstat>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d102      	bne.n	800c8b4 <_fstat_r+0x1c>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	b103      	cbz	r3, 800c8b4 <_fstat_r+0x1c>
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	200186cc 	.word	0x200186cc

0800c8bc <_isatty_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d06      	ldr	r5, [pc, #24]	; (800c8d8 <_isatty_r+0x1c>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	602b      	str	r3, [r5, #0]
 800c8c8:	f7f6 fb9b 	bl	8003002 <_isatty>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_isatty_r+0x1a>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_isatty_r+0x1a>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	200186cc 	.word	0x200186cc

0800c8dc <_lseek_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d07      	ldr	r5, [pc, #28]	; (800c8fc <_lseek_r+0x20>)
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	4608      	mov	r0, r1
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	602a      	str	r2, [r5, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f7f6 fb94 	bl	8003018 <_lseek>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_lseek_r+0x1e>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_lseek_r+0x1e>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	200186cc 	.word	0x200186cc

0800c900 <_read_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d07      	ldr	r5, [pc, #28]	; (800c920 <_read_r+0x20>)
 800c904:	4604      	mov	r4, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f6 fb3e 	bl	8002f90 <_read>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_read_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_read_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	200186cc 	.word	0x200186cc

0800c924 <_write_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4d07      	ldr	r5, [pc, #28]	; (800c944 <_write_r+0x20>)
 800c928:	4604      	mov	r4, r0
 800c92a:	4608      	mov	r0, r1
 800c92c:	4611      	mov	r1, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	602a      	str	r2, [r5, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	f7f6 f932 	bl	8002b9c <_write>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_write_r+0x1e>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_write_r+0x1e>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	200186cc 	.word	0x200186cc

0800c948 <__assert_func>:
 800c948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c94a:	4614      	mov	r4, r2
 800c94c:	461a      	mov	r2, r3
 800c94e:	4b09      	ldr	r3, [pc, #36]	; (800c974 <__assert_func+0x2c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4605      	mov	r5, r0
 800c954:	68d8      	ldr	r0, [r3, #12]
 800c956:	b14c      	cbz	r4, 800c96c <__assert_func+0x24>
 800c958:	4b07      	ldr	r3, [pc, #28]	; (800c978 <__assert_func+0x30>)
 800c95a:	9100      	str	r1, [sp, #0]
 800c95c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c960:	4906      	ldr	r1, [pc, #24]	; (800c97c <__assert_func+0x34>)
 800c962:	462b      	mov	r3, r5
 800c964:	f000 f82c 	bl	800c9c0 <fiprintf>
 800c968:	f000 f83c 	bl	800c9e4 <abort>
 800c96c:	4b04      	ldr	r3, [pc, #16]	; (800c980 <__assert_func+0x38>)
 800c96e:	461c      	mov	r4, r3
 800c970:	e7f3      	b.n	800c95a <__assert_func+0x12>
 800c972:	bf00      	nop
 800c974:	200001f4 	.word	0x200001f4
 800c978:	0800d7a4 	.word	0x0800d7a4
 800c97c:	0800d7b1 	.word	0x0800d7b1
 800c980:	0800d7df 	.word	0x0800d7df

0800c984 <_calloc_r>:
 800c984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c986:	fba1 2402 	umull	r2, r4, r1, r2
 800c98a:	b94c      	cbnz	r4, 800c9a0 <_calloc_r+0x1c>
 800c98c:	4611      	mov	r1, r2
 800c98e:	9201      	str	r2, [sp, #4]
 800c990:	f7fb ff40 	bl	8008814 <_malloc_r>
 800c994:	9a01      	ldr	r2, [sp, #4]
 800c996:	4605      	mov	r5, r0
 800c998:	b930      	cbnz	r0, 800c9a8 <_calloc_r+0x24>
 800c99a:	4628      	mov	r0, r5
 800c99c:	b003      	add	sp, #12
 800c99e:	bd30      	pop	{r4, r5, pc}
 800c9a0:	220c      	movs	r2, #12
 800c9a2:	6002      	str	r2, [r0, #0]
 800c9a4:	2500      	movs	r5, #0
 800c9a6:	e7f8      	b.n	800c99a <_calloc_r+0x16>
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	f7fd fb45 	bl	800a038 <memset>
 800c9ae:	e7f4      	b.n	800c99a <_calloc_r+0x16>

0800c9b0 <_malloc_usable_size_r>:
 800c9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b4:	1f18      	subs	r0, r3, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bfbc      	itt	lt
 800c9ba:	580b      	ldrlt	r3, [r1, r0]
 800c9bc:	18c0      	addlt	r0, r0, r3
 800c9be:	4770      	bx	lr

0800c9c0 <fiprintf>:
 800c9c0:	b40e      	push	{r1, r2, r3}
 800c9c2:	b503      	push	{r0, r1, lr}
 800c9c4:	4601      	mov	r1, r0
 800c9c6:	ab03      	add	r3, sp, #12
 800c9c8:	4805      	ldr	r0, [pc, #20]	; (800c9e0 <fiprintf+0x20>)
 800c9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ce:	6800      	ldr	r0, [r0, #0]
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	f7fe ff39 	bl	800b848 <_vfiprintf_r>
 800c9d6:	b002      	add	sp, #8
 800c9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9dc:	b003      	add	sp, #12
 800c9de:	4770      	bx	lr
 800c9e0:	200001f4 	.word	0x200001f4

0800c9e4 <abort>:
 800c9e4:	b508      	push	{r3, lr}
 800c9e6:	2006      	movs	r0, #6
 800c9e8:	f000 f82c 	bl	800ca44 <raise>
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	f7f6 fac5 	bl	8002f7c <_exit>

0800c9f2 <_raise_r>:
 800c9f2:	291f      	cmp	r1, #31
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	460d      	mov	r5, r1
 800c9fa:	d904      	bls.n	800ca06 <_raise_r+0x14>
 800c9fc:	2316      	movs	r3, #22
 800c9fe:	6003      	str	r3, [r0, #0]
 800ca00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca04:	bd38      	pop	{r3, r4, r5, pc}
 800ca06:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca08:	b112      	cbz	r2, 800ca10 <_raise_r+0x1e>
 800ca0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca0e:	b94b      	cbnz	r3, 800ca24 <_raise_r+0x32>
 800ca10:	4620      	mov	r0, r4
 800ca12:	f000 f831 	bl	800ca78 <_getpid_r>
 800ca16:	462a      	mov	r2, r5
 800ca18:	4601      	mov	r1, r0
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca20:	f000 b818 	b.w	800ca54 <_kill_r>
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d00a      	beq.n	800ca3e <_raise_r+0x4c>
 800ca28:	1c59      	adds	r1, r3, #1
 800ca2a:	d103      	bne.n	800ca34 <_raise_r+0x42>
 800ca2c:	2316      	movs	r3, #22
 800ca2e:	6003      	str	r3, [r0, #0]
 800ca30:	2001      	movs	r0, #1
 800ca32:	e7e7      	b.n	800ca04 <_raise_r+0x12>
 800ca34:	2400      	movs	r4, #0
 800ca36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	4798      	blx	r3
 800ca3e:	2000      	movs	r0, #0
 800ca40:	e7e0      	b.n	800ca04 <_raise_r+0x12>
	...

0800ca44 <raise>:
 800ca44:	4b02      	ldr	r3, [pc, #8]	; (800ca50 <raise+0xc>)
 800ca46:	4601      	mov	r1, r0
 800ca48:	6818      	ldr	r0, [r3, #0]
 800ca4a:	f7ff bfd2 	b.w	800c9f2 <_raise_r>
 800ca4e:	bf00      	nop
 800ca50:	200001f4 	.word	0x200001f4

0800ca54 <_kill_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4d07      	ldr	r5, [pc, #28]	; (800ca74 <_kill_r+0x20>)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	4611      	mov	r1, r2
 800ca60:	602b      	str	r3, [r5, #0]
 800ca62:	f7f6 fa7b 	bl	8002f5c <_kill>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d102      	bne.n	800ca70 <_kill_r+0x1c>
 800ca6a:	682b      	ldr	r3, [r5, #0]
 800ca6c:	b103      	cbz	r3, 800ca70 <_kill_r+0x1c>
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	bd38      	pop	{r3, r4, r5, pc}
 800ca72:	bf00      	nop
 800ca74:	200186cc 	.word	0x200186cc

0800ca78 <_getpid_r>:
 800ca78:	f7f6 ba68 	b.w	8002f4c <_getpid>
 800ca7c:	0000      	movs	r0, r0
	...

0800ca80 <exp>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	ed2d 8b02 	vpush	{d8}
 800ca86:	ec55 4b10 	vmov	r4, r5, d0
 800ca8a:	f000 f88d 	bl	800cba8 <__ieee754_exp>
 800ca8e:	eeb0 8a40 	vmov.f32	s16, s0
 800ca92:	eef0 8a60 	vmov.f32	s17, s1
 800ca96:	ec45 4b10 	vmov	d0, r4, r5
 800ca9a:	f000 f877 	bl	800cb8c <finite>
 800ca9e:	b168      	cbz	r0, 800cabc <exp+0x3c>
 800caa0:	a317      	add	r3, pc, #92	; (adr r3, 800cb00 <exp+0x80>)
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	4620      	mov	r0, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	f7f4 f855 	bl	8000b58 <__aeabi_dcmpgt>
 800caae:	b160      	cbz	r0, 800caca <exp+0x4a>
 800cab0:	f7fd fade 	bl	800a070 <__errno>
 800cab4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800caf0 <exp+0x70>
 800cab8:	2322      	movs	r3, #34	; 0x22
 800caba:	6003      	str	r3, [r0, #0]
 800cabc:	eeb0 0a48 	vmov.f32	s0, s16
 800cac0:	eef0 0a68 	vmov.f32	s1, s17
 800cac4:	ecbd 8b02 	vpop	{d8}
 800cac8:	bd38      	pop	{r3, r4, r5, pc}
 800caca:	a30f      	add	r3, pc, #60	; (adr r3, 800cb08 <exp+0x88>)
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	4620      	mov	r0, r4
 800cad2:	4629      	mov	r1, r5
 800cad4:	f7f4 f822 	bl	8000b1c <__aeabi_dcmplt>
 800cad8:	2800      	cmp	r0, #0
 800cada:	d0ef      	beq.n	800cabc <exp+0x3c>
 800cadc:	f7fd fac8 	bl	800a070 <__errno>
 800cae0:	2322      	movs	r3, #34	; 0x22
 800cae2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800caf8 <exp+0x78>
 800cae6:	6003      	str	r3, [r0, #0]
 800cae8:	e7e8      	b.n	800cabc <exp+0x3c>
 800caea:	bf00      	nop
 800caec:	f3af 8000 	nop.w
 800caf0:	00000000 	.word	0x00000000
 800caf4:	7ff00000 	.word	0x7ff00000
	...
 800cb00:	fefa39ef 	.word	0xfefa39ef
 800cb04:	40862e42 	.word	0x40862e42
 800cb08:	d52d3051 	.word	0xd52d3051
 800cb0c:	c0874910 	.word	0xc0874910

0800cb10 <log>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	ed2d 8b02 	vpush	{d8}
 800cb16:	ec55 4b10 	vmov	r4, r5, d0
 800cb1a:	f000 f9c9 	bl	800ceb0 <__ieee754_log>
 800cb1e:	4622      	mov	r2, r4
 800cb20:	462b      	mov	r3, r5
 800cb22:	4620      	mov	r0, r4
 800cb24:	4629      	mov	r1, r5
 800cb26:	eeb0 8a40 	vmov.f32	s16, s0
 800cb2a:	eef0 8a60 	vmov.f32	s17, s1
 800cb2e:	f7f4 f81d 	bl	8000b6c <__aeabi_dcmpun>
 800cb32:	b998      	cbnz	r0, 800cb5c <log+0x4c>
 800cb34:	2200      	movs	r2, #0
 800cb36:	2300      	movs	r3, #0
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f7f4 f80c 	bl	8000b58 <__aeabi_dcmpgt>
 800cb40:	b960      	cbnz	r0, 800cb5c <log+0x4c>
 800cb42:	2200      	movs	r2, #0
 800cb44:	2300      	movs	r3, #0
 800cb46:	4620      	mov	r0, r4
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7f3 ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 800cb4e:	b160      	cbz	r0, 800cb6a <log+0x5a>
 800cb50:	f7fd fa8e 	bl	800a070 <__errno>
 800cb54:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800cb80 <log+0x70>
 800cb58:	2322      	movs	r3, #34	; 0x22
 800cb5a:	6003      	str	r3, [r0, #0]
 800cb5c:	eeb0 0a48 	vmov.f32	s0, s16
 800cb60:	eef0 0a68 	vmov.f32	s1, s17
 800cb64:	ecbd 8b02 	vpop	{d8}
 800cb68:	bd38      	pop	{r3, r4, r5, pc}
 800cb6a:	f7fd fa81 	bl	800a070 <__errno>
 800cb6e:	ecbd 8b02 	vpop	{d8}
 800cb72:	2321      	movs	r3, #33	; 0x21
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb7a:	4803      	ldr	r0, [pc, #12]	; (800cb88 <log+0x78>)
 800cb7c:	f7fd bab4 	b.w	800a0e8 <nan>
 800cb80:	00000000 	.word	0x00000000
 800cb84:	fff00000 	.word	0xfff00000
 800cb88:	0800d7df 	.word	0x0800d7df

0800cb8c <finite>:
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	ed8d 0b00 	vstr	d0, [sp]
 800cb92:	9801      	ldr	r0, [sp, #4]
 800cb94:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cb98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb9c:	0fc0      	lsrs	r0, r0, #31
 800cb9e:	b002      	add	sp, #8
 800cba0:	4770      	bx	lr
 800cba2:	0000      	movs	r0, r0
 800cba4:	0000      	movs	r0, r0
	...

0800cba8 <__ieee754_exp>:
 800cba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbac:	ec55 4b10 	vmov	r4, r5, d0
 800cbb0:	49b5      	ldr	r1, [pc, #724]	; (800ce88 <__ieee754_exp+0x2e0>)
 800cbb2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cbb6:	428a      	cmp	r2, r1
 800cbb8:	ed2d 8b04 	vpush	{d8-d9}
 800cbbc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800cbc0:	d93b      	bls.n	800cc3a <__ieee754_exp+0x92>
 800cbc2:	49b2      	ldr	r1, [pc, #712]	; (800ce8c <__ieee754_exp+0x2e4>)
 800cbc4:	428a      	cmp	r2, r1
 800cbc6:	d916      	bls.n	800cbf6 <__ieee754_exp+0x4e>
 800cbc8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cbcc:	4323      	orrs	r3, r4
 800cbce:	ee10 2a10 	vmov	r2, s0
 800cbd2:	d007      	beq.n	800cbe4 <__ieee754_exp+0x3c>
 800cbd4:	462b      	mov	r3, r5
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	4629      	mov	r1, r5
 800cbda:	f7f3 fb77 	bl	80002cc <__adddf3>
 800cbde:	4604      	mov	r4, r0
 800cbe0:	460d      	mov	r5, r1
 800cbe2:	e002      	b.n	800cbea <__ieee754_exp+0x42>
 800cbe4:	b10e      	cbz	r6, 800cbea <__ieee754_exp+0x42>
 800cbe6:	2400      	movs	r4, #0
 800cbe8:	2500      	movs	r5, #0
 800cbea:	ecbd 8b04 	vpop	{d8-d9}
 800cbee:	ec45 4b10 	vmov	d0, r4, r5
 800cbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf6:	a38e      	add	r3, pc, #568	; (adr r3, 800ce30 <__ieee754_exp+0x288>)
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	ee10 0a10 	vmov	r0, s0
 800cc00:	4629      	mov	r1, r5
 800cc02:	f7f3 ffa9 	bl	8000b58 <__aeabi_dcmpgt>
 800cc06:	4607      	mov	r7, r0
 800cc08:	b130      	cbz	r0, 800cc18 <__ieee754_exp+0x70>
 800cc0a:	ecbd 8b04 	vpop	{d8-d9}
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc14:	f000 bb2d 	b.w	800d272 <__math_oflow>
 800cc18:	a387      	add	r3, pc, #540	; (adr r3, 800ce38 <__ieee754_exp+0x290>)
 800cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 ff7b 	bl	8000b1c <__aeabi_dcmplt>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	f000 808b 	beq.w	800cd42 <__ieee754_exp+0x19a>
 800cc2c:	ecbd 8b04 	vpop	{d8-d9}
 800cc30:	4638      	mov	r0, r7
 800cc32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc36:	f000 bb13 	b.w	800d260 <__math_uflow>
 800cc3a:	4b95      	ldr	r3, [pc, #596]	; (800ce90 <__ieee754_exp+0x2e8>)
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	f240 80ac 	bls.w	800cd9a <__ieee754_exp+0x1f2>
 800cc42:	4b94      	ldr	r3, [pc, #592]	; (800ce94 <__ieee754_exp+0x2ec>)
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d87c      	bhi.n	800cd42 <__ieee754_exp+0x19a>
 800cc48:	4b93      	ldr	r3, [pc, #588]	; (800ce98 <__ieee754_exp+0x2f0>)
 800cc4a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	ee10 0a10 	vmov	r0, s0
 800cc56:	4629      	mov	r1, r5
 800cc58:	f7f3 fb36 	bl	80002c8 <__aeabi_dsub>
 800cc5c:	4b8f      	ldr	r3, [pc, #572]	; (800ce9c <__ieee754_exp+0x2f4>)
 800cc5e:	00f7      	lsls	r7, r6, #3
 800cc60:	443b      	add	r3, r7
 800cc62:	ed93 7b00 	vldr	d7, [r3]
 800cc66:	f1c6 0a01 	rsb	sl, r6, #1
 800cc6a:	4680      	mov	r8, r0
 800cc6c:	4689      	mov	r9, r1
 800cc6e:	ebaa 0a06 	sub.w	sl, sl, r6
 800cc72:	eeb0 8a47 	vmov.f32	s16, s14
 800cc76:	eef0 8a67 	vmov.f32	s17, s15
 800cc7a:	ec53 2b18 	vmov	r2, r3, d8
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 fb21 	bl	80002c8 <__aeabi_dsub>
 800cc86:	4604      	mov	r4, r0
 800cc88:	460d      	mov	r5, r1
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	462b      	mov	r3, r5
 800cc8e:	4620      	mov	r0, r4
 800cc90:	4629      	mov	r1, r5
 800cc92:	f7f3 fcd1 	bl	8000638 <__aeabi_dmul>
 800cc96:	a36a      	add	r3, pc, #424	; (adr r3, 800ce40 <__ieee754_exp+0x298>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	460f      	mov	r7, r1
 800cca0:	f7f3 fcca 	bl	8000638 <__aeabi_dmul>
 800cca4:	a368      	add	r3, pc, #416	; (adr r3, 800ce48 <__ieee754_exp+0x2a0>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fb0d 	bl	80002c8 <__aeabi_dsub>
 800ccae:	4632      	mov	r2, r6
 800ccb0:	463b      	mov	r3, r7
 800ccb2:	f7f3 fcc1 	bl	8000638 <__aeabi_dmul>
 800ccb6:	a366      	add	r3, pc, #408	; (adr r3, 800ce50 <__ieee754_exp+0x2a8>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	f7f3 fb06 	bl	80002cc <__adddf3>
 800ccc0:	4632      	mov	r2, r6
 800ccc2:	463b      	mov	r3, r7
 800ccc4:	f7f3 fcb8 	bl	8000638 <__aeabi_dmul>
 800ccc8:	a363      	add	r3, pc, #396	; (adr r3, 800ce58 <__ieee754_exp+0x2b0>)
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7f3 fafb 	bl	80002c8 <__aeabi_dsub>
 800ccd2:	4632      	mov	r2, r6
 800ccd4:	463b      	mov	r3, r7
 800ccd6:	f7f3 fcaf 	bl	8000638 <__aeabi_dmul>
 800ccda:	a361      	add	r3, pc, #388	; (adr r3, 800ce60 <__ieee754_exp+0x2b8>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f7f3 faf4 	bl	80002cc <__adddf3>
 800cce4:	4632      	mov	r2, r6
 800cce6:	463b      	mov	r3, r7
 800cce8:	f7f3 fca6 	bl	8000638 <__aeabi_dmul>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	f7f3 fae8 	bl	80002c8 <__aeabi_dsub>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	460f      	mov	r7, r1
 800cd00:	4620      	mov	r0, r4
 800cd02:	4629      	mov	r1, r5
 800cd04:	f7f3 fc98 	bl	8000638 <__aeabi_dmul>
 800cd08:	ec41 0b19 	vmov	d9, r0, r1
 800cd0c:	f1ba 0f00 	cmp.w	sl, #0
 800cd10:	d15d      	bne.n	800cdce <__ieee754_exp+0x226>
 800cd12:	2200      	movs	r2, #0
 800cd14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd18:	4630      	mov	r0, r6
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	f7f3 fad4 	bl	80002c8 <__aeabi_dsub>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	ec51 0b19 	vmov	r0, r1, d9
 800cd28:	f7f3 fdb0 	bl	800088c <__aeabi_ddiv>
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	462b      	mov	r3, r5
 800cd30:	f7f3 faca 	bl	80002c8 <__aeabi_dsub>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	2000      	movs	r0, #0
 800cd3a:	4959      	ldr	r1, [pc, #356]	; (800cea0 <__ieee754_exp+0x2f8>)
 800cd3c:	f7f3 fac4 	bl	80002c8 <__aeabi_dsub>
 800cd40:	e74d      	b.n	800cbde <__ieee754_exp+0x36>
 800cd42:	4b58      	ldr	r3, [pc, #352]	; (800cea4 <__ieee754_exp+0x2fc>)
 800cd44:	4620      	mov	r0, r4
 800cd46:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	a346      	add	r3, pc, #280	; (adr r3, 800ce68 <__ieee754_exp+0x2c0>)
 800cd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd52:	f7f3 fc71 	bl	8000638 <__aeabi_dmul>
 800cd56:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd5a:	f7f3 fab7 	bl	80002cc <__adddf3>
 800cd5e:	f7f3 ff1b 	bl	8000b98 <__aeabi_d2iz>
 800cd62:	4682      	mov	sl, r0
 800cd64:	f7f3 fbfe 	bl	8000564 <__aeabi_i2d>
 800cd68:	a341      	add	r3, pc, #260	; (adr r3, 800ce70 <__ieee754_exp+0x2c8>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	4606      	mov	r6, r0
 800cd70:	460f      	mov	r7, r1
 800cd72:	f7f3 fc61 	bl	8000638 <__aeabi_dmul>
 800cd76:	4602      	mov	r2, r0
 800cd78:	460b      	mov	r3, r1
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f7f3 faa3 	bl	80002c8 <__aeabi_dsub>
 800cd82:	a33d      	add	r3, pc, #244	; (adr r3, 800ce78 <__ieee754_exp+0x2d0>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	4680      	mov	r8, r0
 800cd8a:	4689      	mov	r9, r1
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	4639      	mov	r1, r7
 800cd90:	f7f3 fc52 	bl	8000638 <__aeabi_dmul>
 800cd94:	ec41 0b18 	vmov	d8, r0, r1
 800cd98:	e76f      	b.n	800cc7a <__ieee754_exp+0xd2>
 800cd9a:	4b43      	ldr	r3, [pc, #268]	; (800cea8 <__ieee754_exp+0x300>)
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d811      	bhi.n	800cdc4 <__ieee754_exp+0x21c>
 800cda0:	a337      	add	r3, pc, #220	; (adr r3, 800ce80 <__ieee754_exp+0x2d8>)
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	ee10 0a10 	vmov	r0, s0
 800cdaa:	4629      	mov	r1, r5
 800cdac:	f7f3 fa8e 	bl	80002cc <__adddf3>
 800cdb0:	4b3b      	ldr	r3, [pc, #236]	; (800cea0 <__ieee754_exp+0x2f8>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f7f3 fed0 	bl	8000b58 <__aeabi_dcmpgt>
 800cdb8:	b138      	cbz	r0, 800cdca <__ieee754_exp+0x222>
 800cdba:	4b39      	ldr	r3, [pc, #228]	; (800cea0 <__ieee754_exp+0x2f8>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	e70a      	b.n	800cbda <__ieee754_exp+0x32>
 800cdc4:	f04f 0a00 	mov.w	sl, #0
 800cdc8:	e75f      	b.n	800cc8a <__ieee754_exp+0xe2>
 800cdca:	4682      	mov	sl, r0
 800cdcc:	e75d      	b.n	800cc8a <__ieee754_exp+0xe2>
 800cdce:	4632      	mov	r2, r6
 800cdd0:	463b      	mov	r3, r7
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800cdd8:	f7f3 fa76 	bl	80002c8 <__aeabi_dsub>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	ec51 0b19 	vmov	r0, r1, d9
 800cde4:	f7f3 fd52 	bl	800088c <__aeabi_ddiv>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	ec51 0b18 	vmov	r0, r1, d8
 800cdf0:	f7f3 fa6a 	bl	80002c8 <__aeabi_dsub>
 800cdf4:	4642      	mov	r2, r8
 800cdf6:	464b      	mov	r3, r9
 800cdf8:	f7f3 fa66 	bl	80002c8 <__aeabi_dsub>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	460b      	mov	r3, r1
 800ce00:	2000      	movs	r0, #0
 800ce02:	4927      	ldr	r1, [pc, #156]	; (800cea0 <__ieee754_exp+0x2f8>)
 800ce04:	f7f3 fa60 	bl	80002c8 <__aeabi_dsub>
 800ce08:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ce0c:	4592      	cmp	sl, r2
 800ce0e:	db02      	blt.n	800ce16 <__ieee754_exp+0x26e>
 800ce10:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ce14:	e6e3      	b.n	800cbde <__ieee754_exp+0x36>
 800ce16:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ce1a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ce24:	f7f3 fc08 	bl	8000638 <__aeabi_dmul>
 800ce28:	e6d9      	b.n	800cbde <__ieee754_exp+0x36>
 800ce2a:	bf00      	nop
 800ce2c:	f3af 8000 	nop.w
 800ce30:	fefa39ef 	.word	0xfefa39ef
 800ce34:	40862e42 	.word	0x40862e42
 800ce38:	d52d3051 	.word	0xd52d3051
 800ce3c:	c0874910 	.word	0xc0874910
 800ce40:	72bea4d0 	.word	0x72bea4d0
 800ce44:	3e663769 	.word	0x3e663769
 800ce48:	c5d26bf1 	.word	0xc5d26bf1
 800ce4c:	3ebbbd41 	.word	0x3ebbbd41
 800ce50:	af25de2c 	.word	0xaf25de2c
 800ce54:	3f11566a 	.word	0x3f11566a
 800ce58:	16bebd93 	.word	0x16bebd93
 800ce5c:	3f66c16c 	.word	0x3f66c16c
 800ce60:	5555553e 	.word	0x5555553e
 800ce64:	3fc55555 	.word	0x3fc55555
 800ce68:	652b82fe 	.word	0x652b82fe
 800ce6c:	3ff71547 	.word	0x3ff71547
 800ce70:	fee00000 	.word	0xfee00000
 800ce74:	3fe62e42 	.word	0x3fe62e42
 800ce78:	35793c76 	.word	0x35793c76
 800ce7c:	3dea39ef 	.word	0x3dea39ef
 800ce80:	8800759c 	.word	0x8800759c
 800ce84:	7e37e43c 	.word	0x7e37e43c
 800ce88:	40862e41 	.word	0x40862e41
 800ce8c:	7fefffff 	.word	0x7fefffff
 800ce90:	3fd62e42 	.word	0x3fd62e42
 800ce94:	3ff0a2b1 	.word	0x3ff0a2b1
 800ce98:	0800d7f0 	.word	0x0800d7f0
 800ce9c:	0800d800 	.word	0x0800d800
 800cea0:	3ff00000 	.word	0x3ff00000
 800cea4:	0800d7e0 	.word	0x0800d7e0
 800cea8:	3defffff 	.word	0x3defffff
 800ceac:	00000000 	.word	0x00000000

0800ceb0 <__ieee754_log>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	ec51 0b10 	vmov	r0, r1, d0
 800ceb8:	ed2d 8b04 	vpush	{d8-d9}
 800cebc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cec0:	b083      	sub	sp, #12
 800cec2:	460d      	mov	r5, r1
 800cec4:	da29      	bge.n	800cf1a <__ieee754_log+0x6a>
 800cec6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ceca:	4303      	orrs	r3, r0
 800cecc:	ee10 2a10 	vmov	r2, s0
 800ced0:	d10c      	bne.n	800ceec <__ieee754_log+0x3c>
 800ced2:	49cf      	ldr	r1, [pc, #828]	; (800d210 <__ieee754_log+0x360>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	2300      	movs	r3, #0
 800ced8:	2000      	movs	r0, #0
 800ceda:	f7f3 fcd7 	bl	800088c <__aeabi_ddiv>
 800cede:	ec41 0b10 	vmov	d0, r0, r1
 800cee2:	b003      	add	sp, #12
 800cee4:	ecbd 8b04 	vpop	{d8-d9}
 800cee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceec:	2900      	cmp	r1, #0
 800ceee:	da05      	bge.n	800cefc <__ieee754_log+0x4c>
 800cef0:	460b      	mov	r3, r1
 800cef2:	f7f3 f9e9 	bl	80002c8 <__aeabi_dsub>
 800cef6:	2200      	movs	r2, #0
 800cef8:	2300      	movs	r3, #0
 800cefa:	e7ee      	b.n	800ceda <__ieee754_log+0x2a>
 800cefc:	4bc5      	ldr	r3, [pc, #788]	; (800d214 <__ieee754_log+0x364>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	f7f3 fb9a 	bl	8000638 <__aeabi_dmul>
 800cf04:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cf08:	460d      	mov	r5, r1
 800cf0a:	4ac3      	ldr	r2, [pc, #780]	; (800d218 <__ieee754_log+0x368>)
 800cf0c:	4295      	cmp	r5, r2
 800cf0e:	dd06      	ble.n	800cf1e <__ieee754_log+0x6e>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	f7f3 f9da 	bl	80002cc <__adddf3>
 800cf18:	e7e1      	b.n	800cede <__ieee754_log+0x2e>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e7f5      	b.n	800cf0a <__ieee754_log+0x5a>
 800cf1e:	152c      	asrs	r4, r5, #20
 800cf20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cf24:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cf28:	441c      	add	r4, r3
 800cf2a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cf2e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cf32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf36:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cf3a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cf3e:	ea42 0105 	orr.w	r1, r2, r5
 800cf42:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cf46:	2200      	movs	r2, #0
 800cf48:	4bb4      	ldr	r3, [pc, #720]	; (800d21c <__ieee754_log+0x36c>)
 800cf4a:	f7f3 f9bd 	bl	80002c8 <__aeabi_dsub>
 800cf4e:	1cab      	adds	r3, r5, #2
 800cf50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	4682      	mov	sl, r0
 800cf58:	468b      	mov	fp, r1
 800cf5a:	f04f 0200 	mov.w	r2, #0
 800cf5e:	dc53      	bgt.n	800d008 <__ieee754_log+0x158>
 800cf60:	2300      	movs	r3, #0
 800cf62:	f7f3 fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 800cf66:	b1d0      	cbz	r0, 800cf9e <__ieee754_log+0xee>
 800cf68:	2c00      	cmp	r4, #0
 800cf6a:	f000 8122 	beq.w	800d1b2 <__ieee754_log+0x302>
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f7f3 faf8 	bl	8000564 <__aeabi_i2d>
 800cf74:	a390      	add	r3, pc, #576	; (adr r3, 800d1b8 <__ieee754_log+0x308>)
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	460f      	mov	r7, r1
 800cf7e:	f7f3 fb5b 	bl	8000638 <__aeabi_dmul>
 800cf82:	a38f      	add	r3, pc, #572	; (adr r3, 800d1c0 <__ieee754_log+0x310>)
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	4604      	mov	r4, r0
 800cf8a:	460d      	mov	r5, r1
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fb52 	bl	8000638 <__aeabi_dmul>
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	e7ba      	b.n	800cf14 <__ieee754_log+0x64>
 800cf9e:	a38a      	add	r3, pc, #552	; (adr r3, 800d1c8 <__ieee754_log+0x318>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	4650      	mov	r0, sl
 800cfa6:	4659      	mov	r1, fp
 800cfa8:	f7f3 fb46 	bl	8000638 <__aeabi_dmul>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	499b      	ldr	r1, [pc, #620]	; (800d220 <__ieee754_log+0x370>)
 800cfb4:	f7f3 f988 	bl	80002c8 <__aeabi_dsub>
 800cfb8:	4652      	mov	r2, sl
 800cfba:	4606      	mov	r6, r0
 800cfbc:	460f      	mov	r7, r1
 800cfbe:	465b      	mov	r3, fp
 800cfc0:	4650      	mov	r0, sl
 800cfc2:	4659      	mov	r1, fp
 800cfc4:	f7f3 fb38 	bl	8000638 <__aeabi_dmul>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4639      	mov	r1, r7
 800cfd0:	f7f3 fb32 	bl	8000638 <__aeabi_dmul>
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	460f      	mov	r7, r1
 800cfd8:	b914      	cbnz	r4, 800cfe0 <__ieee754_log+0x130>
 800cfda:	4632      	mov	r2, r6
 800cfdc:	463b      	mov	r3, r7
 800cfde:	e0a2      	b.n	800d126 <__ieee754_log+0x276>
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7f3 fabf 	bl	8000564 <__aeabi_i2d>
 800cfe6:	a374      	add	r3, pc, #464	; (adr r3, 800d1b8 <__ieee754_log+0x308>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	4680      	mov	r8, r0
 800cfee:	4689      	mov	r9, r1
 800cff0:	f7f3 fb22 	bl	8000638 <__aeabi_dmul>
 800cff4:	a372      	add	r3, pc, #456	; (adr r3, 800d1c0 <__ieee754_log+0x310>)
 800cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffa:	4604      	mov	r4, r0
 800cffc:	460d      	mov	r5, r1
 800cffe:	4640      	mov	r0, r8
 800d000:	4649      	mov	r1, r9
 800d002:	f7f3 fb19 	bl	8000638 <__aeabi_dmul>
 800d006:	e0a7      	b.n	800d158 <__ieee754_log+0x2a8>
 800d008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d00c:	f7f3 f95e 	bl	80002cc <__adddf3>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4650      	mov	r0, sl
 800d016:	4659      	mov	r1, fp
 800d018:	f7f3 fc38 	bl	800088c <__aeabi_ddiv>
 800d01c:	ec41 0b18 	vmov	d8, r0, r1
 800d020:	4620      	mov	r0, r4
 800d022:	f7f3 fa9f 	bl	8000564 <__aeabi_i2d>
 800d026:	ec53 2b18 	vmov	r2, r3, d8
 800d02a:	ec41 0b19 	vmov	d9, r0, r1
 800d02e:	ec51 0b18 	vmov	r0, r1, d8
 800d032:	f7f3 fb01 	bl	8000638 <__aeabi_dmul>
 800d036:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d03a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	4602      	mov	r2, r0
 800d042:	460b      	mov	r3, r1
 800d044:	4680      	mov	r8, r0
 800d046:	4689      	mov	r9, r1
 800d048:	f7f3 faf6 	bl	8000638 <__aeabi_dmul>
 800d04c:	a360      	add	r3, pc, #384	; (adr r3, 800d1d0 <__ieee754_log+0x320>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	4606      	mov	r6, r0
 800d054:	460f      	mov	r7, r1
 800d056:	f7f3 faef 	bl	8000638 <__aeabi_dmul>
 800d05a:	a35f      	add	r3, pc, #380	; (adr r3, 800d1d8 <__ieee754_log+0x328>)
 800d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d060:	f7f3 f934 	bl	80002cc <__adddf3>
 800d064:	4632      	mov	r2, r6
 800d066:	463b      	mov	r3, r7
 800d068:	f7f3 fae6 	bl	8000638 <__aeabi_dmul>
 800d06c:	a35c      	add	r3, pc, #368	; (adr r3, 800d1e0 <__ieee754_log+0x330>)
 800d06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d072:	f7f3 f92b 	bl	80002cc <__adddf3>
 800d076:	4632      	mov	r2, r6
 800d078:	463b      	mov	r3, r7
 800d07a:	f7f3 fadd 	bl	8000638 <__aeabi_dmul>
 800d07e:	a35a      	add	r3, pc, #360	; (adr r3, 800d1e8 <__ieee754_log+0x338>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	f7f3 f922 	bl	80002cc <__adddf3>
 800d088:	4642      	mov	r2, r8
 800d08a:	464b      	mov	r3, r9
 800d08c:	f7f3 fad4 	bl	8000638 <__aeabi_dmul>
 800d090:	a357      	add	r3, pc, #348	; (adr r3, 800d1f0 <__ieee754_log+0x340>)
 800d092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d096:	4680      	mov	r8, r0
 800d098:	4689      	mov	r9, r1
 800d09a:	4630      	mov	r0, r6
 800d09c:	4639      	mov	r1, r7
 800d09e:	f7f3 facb 	bl	8000638 <__aeabi_dmul>
 800d0a2:	a355      	add	r3, pc, #340	; (adr r3, 800d1f8 <__ieee754_log+0x348>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 f910 	bl	80002cc <__adddf3>
 800d0ac:	4632      	mov	r2, r6
 800d0ae:	463b      	mov	r3, r7
 800d0b0:	f7f3 fac2 	bl	8000638 <__aeabi_dmul>
 800d0b4:	a352      	add	r3, pc, #328	; (adr r3, 800d200 <__ieee754_log+0x350>)
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	f7f3 f907 	bl	80002cc <__adddf3>
 800d0be:	4632      	mov	r2, r6
 800d0c0:	463b      	mov	r3, r7
 800d0c2:	f7f3 fab9 	bl	8000638 <__aeabi_dmul>
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	4649      	mov	r1, r9
 800d0cc:	4640      	mov	r0, r8
 800d0ce:	f7f3 f8fd 	bl	80002cc <__adddf3>
 800d0d2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d0d6:	9b01      	ldr	r3, [sp, #4]
 800d0d8:	3551      	adds	r5, #81	; 0x51
 800d0da:	431d      	orrs	r5, r3
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	4680      	mov	r8, r0
 800d0e0:	4689      	mov	r9, r1
 800d0e2:	dd48      	ble.n	800d176 <__ieee754_log+0x2c6>
 800d0e4:	4b4e      	ldr	r3, [pc, #312]	; (800d220 <__ieee754_log+0x370>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4650      	mov	r0, sl
 800d0ea:	4659      	mov	r1, fp
 800d0ec:	f7f3 faa4 	bl	8000638 <__aeabi_dmul>
 800d0f0:	4652      	mov	r2, sl
 800d0f2:	465b      	mov	r3, fp
 800d0f4:	f7f3 faa0 	bl	8000638 <__aeabi_dmul>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	460f      	mov	r7, r1
 800d100:	4640      	mov	r0, r8
 800d102:	4649      	mov	r1, r9
 800d104:	f7f3 f8e2 	bl	80002cc <__adddf3>
 800d108:	ec53 2b18 	vmov	r2, r3, d8
 800d10c:	f7f3 fa94 	bl	8000638 <__aeabi_dmul>
 800d110:	4680      	mov	r8, r0
 800d112:	4689      	mov	r9, r1
 800d114:	b964      	cbnz	r4, 800d130 <__ieee754_log+0x280>
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	4630      	mov	r0, r6
 800d11c:	4639      	mov	r1, r7
 800d11e:	f7f3 f8d3 	bl	80002c8 <__aeabi_dsub>
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	4650      	mov	r0, sl
 800d128:	4659      	mov	r1, fp
 800d12a:	f7f3 f8cd 	bl	80002c8 <__aeabi_dsub>
 800d12e:	e6d6      	b.n	800cede <__ieee754_log+0x2e>
 800d130:	a321      	add	r3, pc, #132	; (adr r3, 800d1b8 <__ieee754_log+0x308>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	ec51 0b19 	vmov	r0, r1, d9
 800d13a:	f7f3 fa7d 	bl	8000638 <__aeabi_dmul>
 800d13e:	a320      	add	r3, pc, #128	; (adr r3, 800d1c0 <__ieee754_log+0x310>)
 800d140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d144:	4604      	mov	r4, r0
 800d146:	460d      	mov	r5, r1
 800d148:	ec51 0b19 	vmov	r0, r1, d9
 800d14c:	f7f3 fa74 	bl	8000638 <__aeabi_dmul>
 800d150:	4642      	mov	r2, r8
 800d152:	464b      	mov	r3, r9
 800d154:	f7f3 f8ba 	bl	80002cc <__adddf3>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	4630      	mov	r0, r6
 800d15e:	4639      	mov	r1, r7
 800d160:	f7f3 f8b2 	bl	80002c8 <__aeabi_dsub>
 800d164:	4652      	mov	r2, sl
 800d166:	465b      	mov	r3, fp
 800d168:	f7f3 f8ae 	bl	80002c8 <__aeabi_dsub>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4620      	mov	r0, r4
 800d172:	4629      	mov	r1, r5
 800d174:	e7d9      	b.n	800d12a <__ieee754_log+0x27a>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	4650      	mov	r0, sl
 800d17c:	4659      	mov	r1, fp
 800d17e:	f7f3 f8a3 	bl	80002c8 <__aeabi_dsub>
 800d182:	ec53 2b18 	vmov	r2, r3, d8
 800d186:	f7f3 fa57 	bl	8000638 <__aeabi_dmul>
 800d18a:	4606      	mov	r6, r0
 800d18c:	460f      	mov	r7, r1
 800d18e:	2c00      	cmp	r4, #0
 800d190:	f43f af23 	beq.w	800cfda <__ieee754_log+0x12a>
 800d194:	a308      	add	r3, pc, #32	; (adr r3, 800d1b8 <__ieee754_log+0x308>)
 800d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19a:	ec51 0b19 	vmov	r0, r1, d9
 800d19e:	f7f3 fa4b 	bl	8000638 <__aeabi_dmul>
 800d1a2:	a307      	add	r3, pc, #28	; (adr r3, 800d1c0 <__ieee754_log+0x310>)
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	460d      	mov	r5, r1
 800d1ac:	ec51 0b19 	vmov	r0, r1, d9
 800d1b0:	e727      	b.n	800d002 <__ieee754_log+0x152>
 800d1b2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d208 <__ieee754_log+0x358>
 800d1b6:	e694      	b.n	800cee2 <__ieee754_log+0x32>
 800d1b8:	fee00000 	.word	0xfee00000
 800d1bc:	3fe62e42 	.word	0x3fe62e42
 800d1c0:	35793c76 	.word	0x35793c76
 800d1c4:	3dea39ef 	.word	0x3dea39ef
 800d1c8:	55555555 	.word	0x55555555
 800d1cc:	3fd55555 	.word	0x3fd55555
 800d1d0:	df3e5244 	.word	0xdf3e5244
 800d1d4:	3fc2f112 	.word	0x3fc2f112
 800d1d8:	96cb03de 	.word	0x96cb03de
 800d1dc:	3fc74664 	.word	0x3fc74664
 800d1e0:	94229359 	.word	0x94229359
 800d1e4:	3fd24924 	.word	0x3fd24924
 800d1e8:	55555593 	.word	0x55555593
 800d1ec:	3fe55555 	.word	0x3fe55555
 800d1f0:	d078c69f 	.word	0xd078c69f
 800d1f4:	3fc39a09 	.word	0x3fc39a09
 800d1f8:	1d8e78af 	.word	0x1d8e78af
 800d1fc:	3fcc71c5 	.word	0x3fcc71c5
 800d200:	9997fa04 	.word	0x9997fa04
 800d204:	3fd99999 	.word	0x3fd99999
	...
 800d210:	c3500000 	.word	0xc3500000
 800d214:	43500000 	.word	0x43500000
 800d218:	7fefffff 	.word	0x7fefffff
 800d21c:	3ff00000 	.word	0x3ff00000
 800d220:	3fe00000 	.word	0x3fe00000

0800d224 <with_errno>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	4604      	mov	r4, r0
 800d228:	460d      	mov	r5, r1
 800d22a:	4616      	mov	r6, r2
 800d22c:	f7fc ff20 	bl	800a070 <__errno>
 800d230:	4629      	mov	r1, r5
 800d232:	6006      	str	r6, [r0, #0]
 800d234:	4620      	mov	r0, r4
 800d236:	bd70      	pop	{r4, r5, r6, pc}

0800d238 <xflow>:
 800d238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d23a:	4614      	mov	r4, r2
 800d23c:	461d      	mov	r5, r3
 800d23e:	b108      	cbz	r0, 800d244 <xflow+0xc>
 800d240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d244:	e9cd 2300 	strd	r2, r3, [sp]
 800d248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d24c:	4620      	mov	r0, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7f3 f9f2 	bl	8000638 <__aeabi_dmul>
 800d254:	2222      	movs	r2, #34	; 0x22
 800d256:	b003      	add	sp, #12
 800d258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d25c:	f7ff bfe2 	b.w	800d224 <with_errno>

0800d260 <__math_uflow>:
 800d260:	b508      	push	{r3, lr}
 800d262:	2200      	movs	r2, #0
 800d264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d268:	f7ff ffe6 	bl	800d238 <xflow>
 800d26c:	ec41 0b10 	vmov	d0, r0, r1
 800d270:	bd08      	pop	{r3, pc}

0800d272 <__math_oflow>:
 800d272:	b508      	push	{r3, lr}
 800d274:	2200      	movs	r2, #0
 800d276:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d27a:	f7ff ffdd 	bl	800d238 <xflow>
 800d27e:	ec41 0b10 	vmov	d0, r0, r1
 800d282:	bd08      	pop	{r3, pc}

0800d284 <_init>:
 800d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d286:	bf00      	nop
 800d288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28a:	bc08      	pop	{r3}
 800d28c:	469e      	mov	lr, r3
 800d28e:	4770      	bx	lr

0800d290 <_fini>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	bf00      	nop
 800d294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d296:	bc08      	pop	{r3}
 800d298:	469e      	mov	lr, r3
 800d29a:	4770      	bx	lr
