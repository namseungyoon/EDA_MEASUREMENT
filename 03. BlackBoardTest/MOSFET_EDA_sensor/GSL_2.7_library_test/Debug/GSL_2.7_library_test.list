
GSL_2.7_library_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b35c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800b530  0800b530  0001b530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba28  0800ba28  00022d7c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba28  0800ba28  0001ba28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba30  0800ba30  00022d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002d7c  20000000  0800ba38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de54  20002d7c  0800e7b4  00022d7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010bd0  0800e7b4  00030bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022d7c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00022dac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a120  00000000  00000000  00022def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f0a  00000000  00000000  0003cf0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  00040e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001162  00000000  00000000  00042488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aad1  00000000  00000000  000435ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe24  00000000  00000000  0006e0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd34f  00000000  00000000  0008dedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074a8  00000000  00000000  0018b230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  001926d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002d7c 	.word	0x20002d7c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b514 	.word	0x0800b514

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002d80 	.word	0x20002d80
 800020c:	0800b514 	.word	0x0800b514

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <MX_ADC1_Init+0xec>)
 8001044:	4a36      	ldr	r2, [pc, #216]	; (8001120 <MX_ADC1_Init+0xf0>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <MX_ADC1_Init+0xec>)
 800104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b32      	ldr	r3, [pc, #200]	; (800111c <MX_ADC1_Init+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <MX_ADC1_Init+0xec>)
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <MX_ADC1_Init+0xec>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <MX_ADC1_Init+0xec>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_ADC1_Init+0xec>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <MX_ADC1_Init+0xec>)
 8001072:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <MX_ADC1_Init+0xf4>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <MX_ADC1_Init+0xec>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <MX_ADC1_Init+0xec>)
 800107e:	2204      	movs	r2, #4
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <MX_ADC1_Init+0xec>)
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_ADC1_Init+0xec>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_ADC1_Init+0xec>)
 8001092:	f001 fd8f 	bl	8002bb4 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f001 fa2e 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010a8:	2304      	movs	r3, #4
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <MX_ADC1_Init+0xec>)
 80010b2:	f001 fef1 	bl	8002e98 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f001 fa1e 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010c0:	2305      	movs	r3, #5
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <MX_ADC1_Init+0xec>)
 80010ce:	f001 fee3 	bl	8002e98 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010d8:	f001 fa10 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010dc:	2308      	movs	r3, #8
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e0:	2303      	movs	r3, #3
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_ADC1_Init+0xec>)
 80010ea:	f001 fed5 	bl	8002e98 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010f4:	f001 fa02 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f8:	2309      	movs	r3, #9
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_ADC1_Init+0xec>)
 8001106:	f001 fec7 	bl	8002e98 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001110:	f001 f9f4 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20002d98 	.word	0x20002d98
 8001120:	40012000 	.word	0x40012000
 8001124:	0f000001 	.word	0x0f000001

08001128 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3d      	ldr	r2, [pc, #244]	; (800123c <HAL_ADC_MspInit+0x114>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d173      	bne.n	8001232 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_ADC_MspInit+0x118>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a3c      	ldr	r2, [pc, #240]	; (8001240 <HAL_ADC_MspInit+0x118>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_ADC_MspInit+0x118>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <HAL_ADC_MspInit+0x118>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a36      	ldr	r2, [pc, #216]	; (8001240 <HAL_ADC_MspInit+0x118>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <HAL_ADC_MspInit+0x118>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_ADC_MspInit+0x118>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a30      	ldr	r2, [pc, #192]	; (8001240 <HAL_ADC_MspInit+0x118>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_ADC_MspInit+0x118>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = EDA_LPF_Pin|EDA_HPF_Pin;
 8001192:	2322      	movs	r3, #34	; 0x22
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4827      	ldr	r0, [pc, #156]	; (8001244 <HAL_ADC_MspInit+0x11c>)
 80011a6:	f002 fd3d 	bl	8003c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_V_Pin|BAT_V_Pin;
 80011aa:	2303      	movs	r3, #3
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4822      	ldr	r0, [pc, #136]	; (8001248 <HAL_ADC_MspInit+0x120>)
 80011be:	f002 fd31 	bl	8003c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011c4:	4a22      	ldr	r2, [pc, #136]	; (8001250 <HAL_ADC_MspInit+0x128>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_ADC_MspInit+0x124>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_ADC_MspInit+0x124>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001206:	4811      	ldr	r0, [pc, #68]	; (800124c <HAL_ADC_MspInit+0x124>)
 8001208:	f002 fa22 	bl	8003650 <HAL_DMA_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001212:	f001 f973 	bl	80024fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_ADC_MspInit+0x124>)
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_ADC_MspInit+0x124>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2012      	movs	r0, #18
 8001228:	f002 f96b 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800122c:	2012      	movs	r0, #18
 800122e:	f002 f984 	bl	800353a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40012000 	.word	0x40012000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	20002de0 	.word	0x20002de0
 8001250:	40026410 	.word	0x40026410

08001254 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_DAC_Init+0x4c>)
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <MX_DAC_Init+0x50>)
 8001266:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_DAC_Init+0x4c>)
 800126a:	f002 f980 	bl	800356e <HAL_DAC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001274:	f001 f942 	bl	80024fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_DAC_Init+0x4c>)
 8001288:	f002 f993 	bl	80035b2 <HAL_DAC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001292:	f001 f933 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20002e40 	.word	0x20002e40
 80012a4:	40007400 	.word	0x40007400

080012a8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a15      	ldr	r2, [pc, #84]	; (800131c <HAL_DAC_MspInit+0x74>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d123      	bne.n	8001312 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_DAC_MspInit+0x78>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_DAC_MspInit+0x78>)
 80012d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_DAC_MspInit+0x78>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_DAC_MspInit+0x78>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_DAC_MspInit+0x78>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_DAC_MspInit+0x78>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = EDA_DAC_Pin;
 80012fa:	2310      	movs	r3, #16
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EDA_DAC_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <HAL_DAC_MspInit+0x7c>)
 800130e:	f002 fc89 	bl	8003c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40007400 	.word	0x40007400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000

08001328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_DMA_Init+0x38>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <MX_DMA_Init+0x38>)
 8001334:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_DMA_Init+0x38>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2038      	movs	r0, #56	; 0x38
 800134c:	f002 f8d9 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001350:	2038      	movs	r0, #56	; 0x38
 8001352:	f002 f8f2 	bl	800353a <HAL_NVIC_EnableIRQ>

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b60      	ldr	r3, [pc, #384]	; (80014fc <MX_GPIO_Init+0x198>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a5f      	ldr	r2, [pc, #380]	; (80014fc <MX_GPIO_Init+0x198>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <MX_GPIO_Init+0x198>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <MX_GPIO_Init+0x198>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a59      	ldr	r2, [pc, #356]	; (80014fc <MX_GPIO_Init+0x198>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b57      	ldr	r3, [pc, #348]	; (80014fc <MX_GPIO_Init+0x198>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013aa:	4b54      	ldr	r3, [pc, #336]	; (80014fc <MX_GPIO_Init+0x198>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a53      	ldr	r2, [pc, #332]	; (80014fc <MX_GPIO_Init+0x198>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <MX_GPIO_Init+0x198>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <MX_GPIO_Init+0x198>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <MX_GPIO_Init+0x198>)
 80013c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <MX_GPIO_Init+0x198>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <MX_GPIO_Init+0x198>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <MX_GPIO_Init+0x198>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <MX_GPIO_Init+0x198>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <MX_GPIO_Init+0x198>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a41      	ldr	r2, [pc, #260]	; (80014fc <MX_GPIO_Init+0x198>)
 80013f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <MX_GPIO_Init+0x198>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EDA_MUX_SET1_GPIO_Port, EDA_MUX_SET1_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	483b      	ldr	r0, [pc, #236]	; (8001500 <MX_GPIO_Init+0x19c>)
 8001412:	f002 fdb3 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EDA_MUX_SET2_GPIO_Port, EDA_MUX_SET2_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800141c:	4838      	ldr	r0, [pc, #224]	; (8001500 <MX_GPIO_Init+0x19c>)
 800141e:	f002 fdad 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	4837      	ldr	r0, [pc, #220]	; (8001504 <MX_GPIO_Init+0x1a0>)
 8001428:	f002 fda8 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RGB_Blue_LED_Pin|RGB_Red_LED_Pin|RGB_Green_LED_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2170      	movs	r1, #112	; 0x70
 8001430:	4835      	ldr	r0, [pc, #212]	; (8001508 <MX_GPIO_Init+0x1a4>)
 8001432:	f002 fda3 	bl	8003f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CHK_Pin;
 8001436:	2310      	movs	r3, #16
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_CHK_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4830      	ldr	r0, [pc, #192]	; (800150c <MX_GPIO_Init+0x1a8>)
 800144a:	f002 fbeb 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = EDA_MUX_SET1_Pin|EDA_MUX_SET2_Pin;
 800144e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4826      	ldr	r0, [pc, #152]	; (8001500 <MX_GPIO_Init+0x19c>)
 8001468:	f002 fbdc 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_CHK_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_CHK_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	481f      	ldr	r0, [pc, #124]	; (8001500 <MX_GPIO_Init+0x19c>)
 8001482:	f002 fbcf 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AFE_ADC_RDY_Pin;
 8001486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AFE_ADC_RDY_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4818      	ldr	r0, [pc, #96]	; (8001500 <MX_GPIO_Init+0x19c>)
 800149e:	f002 fbc1 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 80014a2:	2340      	movs	r3, #64	; 0x40
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <MX_GPIO_Init+0x1a0>)
 80014ba:	f002 fbb3 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = RGB_Blue_LED_Pin|RGB_Red_LED_Pin|RGB_Green_LED_Pin;
 80014be:	2370      	movs	r3, #112	; 0x70
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <MX_GPIO_Init+0x1a4>)
 80014d6:	f002 fba5 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = BAT_CHK3_Pin|BAT_CHK1_Pin|BAT_CHK2_Pin;
 80014da:	2307      	movs	r3, #7
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_GPIO_Init+0x1a4>)
 80014ee:	f002 fb99 	bl	8003c24 <HAL_GPIO_Init>

}
 80014f2:	bf00      	nop
 80014f4:	3730      	adds	r7, #48	; 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40022000 	.word	0x40022000
 8001504:	40021400 	.word	0x40021400
 8001508:	40022400 	.word	0x40022400
 800150c:	40020400 	.word	0x40020400

08001510 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_I2C1_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_I2C1_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_I2C1_Init+0x74>)
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <MX_I2C1_Init+0x7c>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_I2C1_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_I2C1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_I2C1_Init+0x74>)
 800154c:	f002 fd30 	bl	8003fb0 <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001556:	f000 ffd1 	bl	80024fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <MX_I2C1_Init+0x74>)
 800155e:	f002 fdb7 	bl	80040d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 ffc8 	bl	80024fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_I2C1_Init+0x74>)
 8001570:	f002 fdf9 	bl	8004166 <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 ffbf 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20002e54 	.word	0x20002e54
 8001588:	40005400 	.word	0x40005400
 800158c:	00303d5b 	.word	0x00303d5b

08001590 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_I2C2_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <MX_I2C2_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_I2C2_Init+0x74>)
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <MX_I2C2_Init+0x7c>)
 800159e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_I2C2_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_I2C2_Init+0x74>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_I2C2_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_I2C2_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C2_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C2_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C2_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <MX_I2C2_Init+0x74>)
 80015cc:	f002 fcf0 	bl	8003fb0 <HAL_I2C_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015d6:	f000 ff91 	bl	80024fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <MX_I2C2_Init+0x74>)
 80015de:	f002 fd77 	bl	80040d0 <HAL_I2CEx_ConfigAnalogFilter>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015e8:	f000 ff88 	bl	80024fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015ec:	2100      	movs	r1, #0
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_I2C2_Init+0x74>)
 80015f0:	f002 fdb9 	bl	8004166 <HAL_I2CEx_ConfigDigitalFilter>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 ff7f 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20002ea8 	.word	0x20002ea8
 8001608:	40005800 	.word	0x40005800
 800160c:	00303d5b 	.word	0x00303d5b

08001610 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_I2C3_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <MX_I2C3_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_I2C3_Init+0x74>)
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <MX_I2C3_Init+0x7c>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_I2C3_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_I2C3_Init+0x74>)
 8001628:	2201      	movs	r2, #1
 800162a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_I2C3_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_I2C3_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_I2C3_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_I2C3_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_I2C3_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_I2C3_Init+0x74>)
 800164c:	f002 fcb0 	bl	8003fb0 <HAL_I2C_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001656:	f000 ff51 	bl	80024fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <MX_I2C3_Init+0x74>)
 800165e:	f002 fd37 	bl	80040d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001668:	f000 ff48 	bl	80024fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_I2C3_Init+0x74>)
 8001670:	f002 fd79 	bl	8004166 <HAL_I2CEx_ConfigDigitalFilter>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800167a:	f000 ff3f 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20002efc 	.word	0x20002efc
 8001688:	40005c00 	.word	0x40005c00
 800168c:	00303d5b 	.word	0x00303d5b

08001690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0ae      	sub	sp, #184	; 0xb8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	2284      	movs	r2, #132	; 0x84
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f006 ff51 	bl	8008558 <memset>
  if(i2cHandle->Instance==I2C1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a66      	ldr	r2, [pc, #408]	; (8001854 <HAL_I2C_MspInit+0x1c4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13e      	bne.n	800173e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fa5f 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80016dc:	f000 ff0e 	bl	80024fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a5c      	ldr	r2, [pc, #368]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_AFE_IMU_Pin|I2C1_SDL_AFE_IMU_Pin;
 80016f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001712:	2304      	movs	r3, #4
 8001714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800171c:	4619      	mov	r1, r3
 800171e:	484f      	ldr	r0, [pc, #316]	; (800185c <HAL_I2C_MspInit+0x1cc>)
 8001720:	f002 fa80 	bl	8003c24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a4b      	ldr	r2, [pc, #300]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 800172a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b49      	ldr	r3, [pc, #292]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800173c:	e086      	b.n	800184c <HAL_I2C_MspInit+0x1bc>
  else if(i2cHandle->Instance==I2C2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a47      	ldr	r2, [pc, #284]	; (8001860 <HAL_I2C_MspInit+0x1d0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d13e      	bne.n	80017c6 <HAL_I2C_MspInit+0x136>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fa1b 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001764:	f000 feca 	bl	80024fc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = I2C2_SCL_ENV_Pin|I2C2_SDA_ENV_Pin;
 8001780:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800179a:	2304      	movs	r3, #4
 800179c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017a4:	4619      	mov	r1, r3
 80017a6:	482d      	ldr	r0, [pc, #180]	; (800185c <HAL_I2C_MspInit+0x1cc>)
 80017a8:	f002 fa3c 	bl	8003c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a29      	ldr	r2, [pc, #164]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80017b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
}
 80017c4:	e042      	b.n	800184c <HAL_I2C_MspInit+0x1bc>
  else if(i2cHandle->Instance==I2C3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a26      	ldr	r2, [pc, #152]	; (8001864 <HAL_I2C_MspInit+0x1d4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d13d      	bne.n	800184c <HAL_I2C_MspInit+0x1bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 f9d7 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_MspInit+0x160>
      Error_Handler();
 80017ec:	f000 fe86 	bl	80024fc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80017f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_SKT_Pin|I2C3_SDA_SKT_Pin;
 8001808:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800180c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001822:	2304      	movs	r3, #4
 8001824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001828:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800182c:	4619      	mov	r1, r3
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <HAL_I2C_MspInit+0x1d8>)
 8001830:	f002 f9f8 	bl	8003c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 800183a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_I2C_MspInit+0x1c8>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
}
 800184c:	bf00      	nop
 800184e:	37b8      	adds	r7, #184	; 0xb8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40005400 	.word	0x40005400
 8001858:	40023800 	.word	0x40023800
 800185c:	40020400 	.word	0x40020400
 8001860:	40005800 	.word	0x40005800
 8001864:	40005c00 	.word	0x40005c00
 8001868:	40021c00 	.word	0x40021c00

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b5b0      	push	{r4, r5, r7, lr}
 800186e:	f5ad 3d83 	sub.w	sp, sp, #67072	; 0x10600
 8001872:	b0ac      	sub	sp, #176	; 0xb0
 8001874:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001876:	f001 f940 	bl	8002afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187a:	f000 f9fd 	bl	8001c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187e:	f7ff fd71 	bl	8001364 <MX_GPIO_Init>
  MX_DMA_Init();
 8001882:	f7ff fd51 	bl	8001328 <MX_DMA_Init>
  MX_SPI5_Init();
 8001886:	f000 fe3f 	bl	8002508 <MX_SPI5_Init>
  MX_FATFS_Init();
 800188a:	f004 ff43 	bl	8006714 <MX_FATFS_Init>
  MX_ADC1_Init();
 800188e:	f7ff fbcf 	bl	8001030 <MX_ADC1_Init>
  MX_DAC_Init();
 8001892:	f7ff fcdf 	bl	8001254 <MX_DAC_Init>
  MX_I2C1_Init();
 8001896:	f7ff fe3b 	bl	8001510 <MX_I2C1_Init>
  MX_I2C2_Init();
 800189a:	f7ff fe79 	bl	8001590 <MX_I2C2_Init>
  MX_I2C3_Init();
 800189e:	f7ff feb7 	bl	8001610 <MX_I2C3_Init>
  MX_TIM3_Init();
 80018a2:	f000 ffdb 	bl	800285c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80018a6:	f001 f84d 	bl	8002944 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i_Ids = 0; i_Ids < n_Ids; i_Ids++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	4aad      	ldr	r2, [pc, #692]	; (8001b64 <main+0x2f8>)
 80018ae:	443a      	add	r2, r7
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e0a6      	b.n	8001a02 <main+0x196>
	  {
		  x = (float)i_Ids;
 80018b4:	4bab      	ldr	r3, [pc, #684]	; (8001b64 <main+0x2f8>)
 80018b6:	443b      	add	r3, r7
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c2:	4ba9      	ldr	r3, [pc, #676]	; (8001b68 <main+0x2fc>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
		  A[i_Ids][5] = x * x * x * x * x;
 80018c8:	4ba7      	ldr	r3, [pc, #668]	; (8001b68 <main+0x2fc>)
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	4ba6      	ldr	r3, [pc, #664]	; (8001b68 <main+0x2fc>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d8:	4ba3      	ldr	r3, [pc, #652]	; (8001b68 <main+0x2fc>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e2:	4ba1      	ldr	r3, [pc, #644]	; (8001b68 <main+0x2fc>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	4b9e      	ldr	r3, [pc, #632]	; (8001b68 <main+0x2fc>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f6:	499d      	ldr	r1, [pc, #628]	; (8001b6c <main+0x300>)
 80018f8:	4b9a      	ldr	r3, [pc, #616]	; (8001b64 <main+0x2f8>)
 80018fa:	443b      	add	r3, r7
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3314      	adds	r3, #20
 800190a:	edc3 7a00 	vstr	s15, [r3]
		  A[i_Ids][4] = x * x * x * x;
 800190e:	4b96      	ldr	r3, [pc, #600]	; (8001b68 <main+0x2fc>)
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	4b94      	ldr	r3, [pc, #592]	; (8001b68 <main+0x2fc>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800191e:	4b92      	ldr	r3, [pc, #584]	; (8001b68 <main+0x2fc>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001928:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <main+0x2fc>)
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001932:	498e      	ldr	r1, [pc, #568]	; (8001b6c <main+0x300>)
 8001934:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <main+0x2f8>)
 8001936:	443b      	add	r3, r7
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3310      	adds	r3, #16
 8001946:	edc3 7a00 	vstr	s15, [r3]
		  A[i_Ids][3] = x * x * x;
 800194a:	4b87      	ldr	r3, [pc, #540]	; (8001b68 <main+0x2fc>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	4b85      	ldr	r3, [pc, #532]	; (8001b68 <main+0x2fc>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195a:	4b83      	ldr	r3, [pc, #524]	; (8001b68 <main+0x2fc>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	4981      	ldr	r1, [pc, #516]	; (8001b6c <main+0x300>)
 8001966:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <main+0x2f8>)
 8001968:	443b      	add	r3, r7
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	330c      	adds	r3, #12
 8001978:	edc3 7a00 	vstr	s15, [r3]
		  A[i_Ids][2] = x * x;
 800197c:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <main+0x2fc>)
 800197e:	ed93 7a00 	vldr	s14, [r3]
 8001982:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <main+0x2fc>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198c:	4977      	ldr	r1, [pc, #476]	; (8001b6c <main+0x300>)
 800198e:	4b75      	ldr	r3, [pc, #468]	; (8001b64 <main+0x2f8>)
 8001990:	443b      	add	r3, r7
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	3308      	adds	r3, #8
 80019a0:	edc3 7a00 	vstr	s15, [r3]
		  A[i_Ids][1] = x;
 80019a4:	4b70      	ldr	r3, [pc, #448]	; (8001b68 <main+0x2fc>)
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	4870      	ldr	r0, [pc, #448]	; (8001b6c <main+0x300>)
 80019aa:	4b6e      	ldr	r3, [pc, #440]	; (8001b64 <main+0x2f8>)
 80019ac:	443b      	add	r3, r7
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4403      	add	r3, r0
 80019ba:	3304      	adds	r3, #4
 80019bc:	6019      	str	r1, [r3, #0]
		  A[i_Ids][0] = 1;
 80019be:	496b      	ldr	r1, [pc, #428]	; (8001b6c <main+0x300>)
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <main+0x2f8>)
 80019c2:	443b      	add	r3, r7
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019d4:	601a      	str	r2, [r3, #0]

		  B[i_Ids][1] = ln_Ids[i_Ids];
 80019d6:	4a66      	ldr	r2, [pc, #408]	; (8001b70 <main+0x304>)
 80019d8:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <main+0x2f8>)
 80019da:	443b      	add	r3, r7
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4963      	ldr	r1, [pc, #396]	; (8001b74 <main+0x308>)
 80019e6:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <main+0x2f8>)
 80019e8:	443b      	add	r3, r7
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	601a      	str	r2, [r3, #0]
	  for(int i_Ids = 0; i_Ids < n_Ids; i_Ids++)
 80019f4:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <main+0x2f8>)
 80019f6:	443b      	add	r3, r7
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a59      	ldr	r2, [pc, #356]	; (8001b64 <main+0x2f8>)
 80019fe:	443a      	add	r2, r7
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <main+0x30c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a57      	ldr	r2, [pc, #348]	; (8001b64 <main+0x2f8>)
 8001a08:	443a      	add	r2, r7
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f6ff af51 	blt.w	80018b4 <main+0x48>
//						{4, 1},
//						{5, 1},
//						{6, 1},
//						{7, 1},
//						{7, 1} };
	  float A_T[6][1394] = {0, };
 8001a12:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001a16:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f248 23b0 	movw	r3, #33456	; 0x82b0
 8001a20:	461a      	mov	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f006 fd98 	bl	8008558 <memset>
	  float A_T_A[6][6] = {0, };
 8001a28:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001a2c:	f5a3 63d4 	sub.w	r3, r3, #1696	; 0x6a0
 8001a30:	4618      	mov	r0, r3
 8001a32:	2390      	movs	r3, #144	; 0x90
 8001a34:	461a      	mov	r2, r3
 8001a36:	2100      	movs	r1, #0
 8001a38:	f006 fd8e 	bl	8008558 <memset>
	  float A_T_A_I[6][6] = {0, };
 8001a3c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001a40:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001a44:	4618      	mov	r0, r3
 8001a46:	2390      	movs	r3, #144	; 0x90
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f006 fd84 	bl	8008558 <memset>
	  float A_T_A_I_A_T[6][1394] = {0, };
 8001a50:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8001a54:	443b      	add	r3, r7
 8001a56:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f248 23b0 	movw	r3, #33456	; 0x82b0
 8001a60:	461a      	mov	r2, r3
 8001a62:	2100      	movs	r1, #0
 8001a64:	f006 fd78 	bl	8008558 <memset>

	  float X[6][1] = {0, };
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <main+0x310>)
 8001a6a:	443b      	add	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]

	  transpose_matrix(1394, 6, A, A_T);
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <main+0x314>)
 8001a7c:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8001a80:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001a84:	443b      	add	r3, r7
 8001a86:	4a39      	ldr	r2, [pc, #228]	; (8001b6c <main+0x300>)
 8001a88:	2106      	movs	r1, #6
 8001a8a:	f240 5072 	movw	r0, #1394	; 0x572
 8001a8e:	f000 f9d3 	bl	8001e38 <transpose_matrix>

	  multiply_matrices(6, 1394, A_T, 1394, 6, A, A_T_A);
 8001a92:	4a3b      	ldr	r2, [pc, #236]	; (8001b80 <main+0x314>)
 8001a94:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <main+0x318>)
 8001a96:	4413      	add	r3, r2
 8001a98:	19da      	adds	r2, r3, r7
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <main+0x31c>)
 8001a9c:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8001aa0:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001aa4:	443b      	add	r3, r7
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <main+0x300>)
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2306      	movs	r3, #6
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f240 5372 	movw	r3, #1394	; 0x572
 8001ab4:	f240 5172 	movw	r1, #1394	; 0x572
 8001ab8:	2006      	movs	r0, #6
 8001aba:	f000 fa17 	bl	8001eec <multiply_matrices>

	  inverse_matrix(6, A_T_A, A_T_A_I);
 8001abe:	4a33      	ldr	r2, [pc, #204]	; (8001b8c <main+0x320>)
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <main+0x318>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	19da      	adds	r2, r3, r7
 8001ac6:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <main+0x31c>)
 8001ac8:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8001acc:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001ad0:	443b      	add	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2006      	movs	r0, #6
 8001ad6:	f000 faaf 	bl	8002038 <inverse_matrix>

	  multiply_matrices(6, 6, A_T_A_I, 6, 1394, A_T, A_T_A_I_A_T);
 8001ada:	4a2c      	ldr	r2, [pc, #176]	; (8001b8c <main+0x320>)
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <main+0x318>)
 8001ade:	4413      	add	r3, r2
 8001ae0:	19da      	adds	r2, r3, r7
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <main+0x324>)
 8001ae4:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8001ae8:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001aec:	443b      	add	r3, r7
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <main+0x314>)
 8001af2:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8001af6:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001afa:	443b      	add	r3, r7
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	f240 5372 	movw	r3, #1394	; 0x572
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2306      	movs	r3, #6
 8001b06:	2106      	movs	r1, #6
 8001b08:	2006      	movs	r0, #6
 8001b0a:	f000 f9ef 	bl	8001eec <multiply_matrices>

	  multiply_matrices(6, 1394, A_T_A_I_A_T, 1394, 1, B, X);
 8001b0e:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <main+0x324>)
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <main+0x318>)
 8001b12:	4413      	add	r3, r2
 8001b14:	19da      	adds	r2, r3, r7
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <main+0x310>)
 8001b18:	443b      	add	r3, r7
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <main+0x308>)
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2301      	movs	r3, #1
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f240 5372 	movw	r3, #1394	; 0x572
 8001b28:	f240 5172 	movw	r1, #1394	; 0x572
 8001b2c:	2006      	movs	r0, #6
 8001b2e:	f000 f9dd 	bl	8001eec <multiply_matrices>

	  multiply_matrices(1394, 6, A, 6, 1, X, B_);
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <main+0x328>)
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <main+0x310>)
 8001b38:	443b      	add	r3, r7
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2306      	movs	r3, #6
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <main+0x300>)
 8001b44:	2106      	movs	r1, #6
 8001b46:	f240 5072 	movw	r0, #1394	; 0x572
 8001b4a:	f000 f9cf 	bl	8001eec <multiply_matrices>
	  print_matrix(1394, 1, B_);
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <main+0x328>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	f240 5072 	movw	r0, #1394	; 0x572
 8001b56:	f000 fc89 	bl	800246c <print_matrix>

	  for(int i_Ids=0; i_Ids<n_Ids; i_Ids++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <main+0x32c>)
 8001b5e:	443a      	add	r2, r7
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e06d      	b.n	8001c40 <main+0x3d4>
 8001b64:	0001069c 	.word	0x0001069c
 8001b68:	2001092c 	.word	0x2001092c
 8001b6c:	20002f5c 	.word	0x20002f5c
 8001b70:	200015c8 	.word	0x200015c8
 8001b74:	2000b20c 	.word	0x2000b20c
 8001b78:	20002b90 	.word	0x20002b90
 8001b7c:	00010680 	.word	0x00010680
 8001b80:	fffefa80 	.word	0xfffefa80
 8001b84:	000106a0 	.word	0x000106a0
 8001b88:	fffef960 	.word	0xfffef960
 8001b8c:	fffef9f0 	.word	0xfffef9f0
 8001b90:	ffff7d30 	.word	0xffff7d30
 8001b94:	2000c7d4 	.word	0x2000c7d4
 8001b98:	00010698 	.word	0x00010698
	  {
		  ln_Ids_[i_Ids] = B_[i_Ids][0];
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <main+0x3ec>)
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <main+0x3f0>)
 8001ba0:	443b      	add	r3, r7
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <main+0x3f4>)
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <main+0x3f0>)
 8001bae:	443b      	add	r3, r7
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	601a      	str	r2, [r3, #0]
		  Ids_[i_Ids] = exp(ln_Ids_[i_Ids]);
 8001bb8:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <main+0x3f4>)
 8001bba:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <main+0x3f0>)
 8001bbc:	443b      	add	r3, r7
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcde 	bl	8000588 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	ec43 2b10 	vmov	d0, r2, r3
 8001bd4:	f009 fa98 	bl	800b108 <exp>
 8001bd8:	ec53 2b10 	vmov	r2, r3, d0
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff f822 	bl	8000c28 <__aeabi_d2f>
 8001be4:	4602      	mov	r2, r0
 8001be6:	491f      	ldr	r1, [pc, #124]	; (8001c64 <main+0x3f8>)
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <main+0x3f0>)
 8001bea:	443b      	add	r3, r7
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	601a      	str	r2, [r3, #0]
		  printf("%f\t%f\r\n", Ids[i_Ids], Ids_[i_Ids]);
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <main+0x3fc>)
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <main+0x3f0>)
 8001bf8:	443b      	add	r3, r7
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcc0 	bl	8000588 <__aeabi_f2d>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <main+0x3f8>)
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <main+0x3f0>)
 8001c10:	443b      	add	r3, r7
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fcb4 	bl	8000588 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	e9cd 2300 	strd	r2, r3, [sp]
 8001c28:	4622      	mov	r2, r4
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	480f      	ldr	r0, [pc, #60]	; (8001c6c <main+0x400>)
 8001c2e:	f006 fc13 	bl	8008458 <iprintf>
	  for(int i_Ids=0; i_Ids<n_Ids; i_Ids++)
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <main+0x3f0>)
 8001c34:	443b      	add	r3, r7
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <main+0x3f0>)
 8001c3c:	443a      	add	r2, r7
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <main+0x404>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <main+0x3f0>)
 8001c46:	443a      	add	r2, r7
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dba6      	blt.n	8001b9c <main+0x330>
	  }

	  printf("\r\n");
 8001c4e:	4809      	ldr	r0, [pc, #36]	; (8001c74 <main+0x408>)
 8001c50:	f006 fc68 	bl	8008524 <puts>
  {
 8001c54:	e629      	b.n	80018aa <main+0x3e>
 8001c56:	bf00      	nop
 8001c58:	2000c7d4 	.word	0x2000c7d4
 8001c5c:	00010698 	.word	0x00010698
 8001c60:	2000dd9c 	.word	0x2000dd9c
 8001c64:	2000f364 	.word	0x2000f364
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	0800b530 	.word	0x0800b530
 8001c70:	20002b90 	.word	0x20002b90
 8001c74:	0800b538 	.word	0x0800b538

08001c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b094      	sub	sp, #80	; 0x50
 8001c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7e:	f107 0320 	add.w	r3, r7, #32
 8001c82:	2230      	movs	r2, #48	; 0x30
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f006 fc66 	bl	8008558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <SystemClock_Config+0xd0>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <SystemClock_Config+0xd0>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <SystemClock_Config+0xd0>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <SystemClock_Config+0xd4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <SystemClock_Config+0xd4>)
 8001cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <SystemClock_Config+0xd4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cec:	2304      	movs	r3, #4
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fa7d 	bl	8004200 <HAL_RCC_OscConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d0c:	f000 fbf6 	bl	80024fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d10:	230f      	movs	r3, #15
 8001d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001d1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 fd0a 	bl	8004748 <HAL_RCC_ClockConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001d3a:	f000 fbdf 	bl	80024fc <Error_Handler>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	3750      	adds	r7, #80	; 0x50
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40007000 	.word	0x40007000

08001d50 <_write>:

/* USER CODE BEGIN 4 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 20);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	2314      	movs	r3, #20
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <_write+0x24>)
 8001d66:	f004 f84d 	bl	8005e04 <HAL_UART_Transmit>

	return len;
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200109e4 	.word	0x200109e4

08001d78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d144      	bne.n	8001e14 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		ms = (float)ms_idx/fs;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d96:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001e24 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001da0:	edc3 7a00 	vstr	s15, [r3]

		printf("%dm %.3fs\r\n", min, sec+ms);
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461c      	mov	r4, r3
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	ee17 0a90 	vmov	r0, s15
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4621      	mov	r1, r4
 8001dce:	4819      	ldr	r0, [pc, #100]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001dd0:	f006 fb42 	bl	8008458 <iprintf>
		if(ms_idx >= fs)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dda:	d915      	bls.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x90>
		{
			ms_idx = 0;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	801a      	strh	r2, [r3, #0]
			sec++;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001dec:	701a      	strb	r2, [r3, #0]

			if(sec >= 60)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b3b      	cmp	r3, #59	; 0x3b
 8001df4:	d908      	bls.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x90>
			{
				sec = 0;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
				min++;
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e06:	801a      	strh	r2, [r3, #0]
			}
		}
		ms_idx++;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e12:	801a      	strh	r2, [r3, #0]
	}
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	20002f58 	.word	0x20002f58
 8001e24:	43000000 	.word	0x43000000
 8001e28:	20002f50 	.word	0x20002f50
 8001e2c:	20002f56 	.word	0x20002f56
 8001e30:	20002f54 	.word	0x20002f54
 8001e34:	0800b53c 	.word	0x0800b53c

08001e38 <transpose_matrix>:

// Function to calculate the transpose of a matrix
void transpose_matrix(int rows, int cols, float A[rows][cols], float A_transpose[cols][rows]) {
 8001e38:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001e3c:	b089      	sub	sp, #36	; 0x24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	1e4b      	subs	r3, r1, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	460a      	mov	r2, r1
 8001e50:	2300      	movs	r3, #0
 8001e52:	4690      	mov	r8, r2
 8001e54:	4699      	mov	r9, r3
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001e62:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001e66:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	1e43      	subs	r3, r0, #1
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	4602      	mov	r2, r0
 8001e72:	2300      	movs	r3, #0
 8001e74:	4614      	mov	r4, r2
 8001e76:	461d      	mov	r5, r3
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	016b      	lsls	r3, r5, #5
 8001e82:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001e86:	0162      	lsls	r2, r4, #5
    int i, j;

    for (i = 0; i < rows; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	e022      	b.n	8001ed4 <transpose_matrix+0x9c>
    {
        for (j = 0; j < cols; j++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	e018      	b.n	8001ec6 <transpose_matrix+0x8e>
        {
            A_transpose[j][i] = A[i][j]; // Swap rows and columns to assign
 8001e94:	460a      	mov	r2, r1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fb04 f303 	mul.w	r3, r4, r3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	683c      	ldr	r4, [r7, #0]
 8001eae:	441c      	add	r4, r3
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4423      	add	r3, r4
 8001ebe:	601a      	str	r2, [r3, #0]
        for (j = 0; j < cols; j++)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dbe2      	blt.n	8001e94 <transpose_matrix+0x5c>
    for (i = 0; i < rows; i++)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dbd8      	blt.n	8001e8e <transpose_matrix+0x56>
        }
    }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001ee8:	4770      	bx	lr
	...

08001eec <multiply_matrices>:

// Function to calculate the product of two matrices
void multiply_matrices(int rows1, int cols1, float A[rows1][cols1], int rows2, int cols2, float B[rows2][cols2], float result[rows1][cols2]) {
 8001eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef0:	b08b      	sub	sp, #44	; 0x2c
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	1e43      	subs	r3, r0, #1
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	4602      	mov	r2, r0
 8001f04:	2300      	movs	r3, #0
 8001f06:	4692      	mov	sl, r2
 8001f08:	469b      	mov	fp, r3
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001f16:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001f1a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001f1e:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8001f20:	1e73      	subs	r3, r6, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	4632      	mov	r2, r6
 8001f26:	2300      	movs	r3, #0
 8001f28:	4690      	mov	r8, r2
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001f38:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001f3c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001f40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f42:	1e4b      	subs	r3, r1, #1
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	460a      	mov	r2, r1
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	016b      	lsls	r3, r5, #5
 8001f58:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001f5c:	0162      	lsls	r2, r4, #5
    int i, j, k;

    if (cols1 != rows2)
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d003      	beq.n	8001f6e <multiply_matrices+0x82>
    {
        printf("Error: Number of columns in the first matrix must be equal to the number of rows in the second matrix.\n");
 8001f66:	4833      	ldr	r0, [pc, #204]	; (8002034 <multiply_matrices+0x148>)
 8001f68:	f006 fadc 	bl	8008524 <puts>
        return;
 8001f6c:	e05e      	b.n	800202c <multiply_matrices+0x140>
    }

    for (i = 0; i < rows1; i++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
 8001f72:	e057      	b.n	8002024 <multiply_matrices+0x138>
    {
        for (j = 0; j < cols2; j++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	e04d      	b.n	8002016 <multiply_matrices+0x12a>
        {
            result[i][j] = 0; // Initialize the result matrix
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f86:	441a      	add	r2, r3
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
            for (k = 0; k < cols1; k++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	e036      	b.n	8002008 <multiply_matrices+0x11c>
            {
                result[i][j] += A[i][k] * B[k][j]; // Matrix multiplication
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	441a      	add	r2, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	4632      	mov	r2, r6
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fbe:	441a      	add	r2, r3
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fce:	460a      	mov	r2, r1
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fda:	441a      	add	r2, r3
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ff2:	441a      	add	r2, r3
 8001ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
            for (k = 0; k < cols1; k++)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3301      	adds	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbc4      	blt.n	8001f9a <multiply_matrices+0xae>
        for (j = 0; j < cols2; j++)
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	3301      	adds	r3, #1
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	6a3a      	ldr	r2, [r7, #32]
 8002018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201a:	429a      	cmp	r2, r3
 800201c:	dbad      	blt.n	8001f7a <multiply_matrices+0x8e>
    for (i = 0; i < rows1; i++)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	dba3      	blt.n	8001f74 <multiply_matrices+0x88>
            }
        }
    }
}
 800202c:	372c      	adds	r7, #44	; 0x2c
 800202e:	46bd      	mov	sp, r7
 8002030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002034:	0800b548 	.word	0x0800b548

08002038 <inverse_matrix>:

// Function to calculate the inverse of a matrix
void inverse_matrix(int N, float A[N][N], float A_inv[N][N])
{
 8002038:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800203c:	b0a2      	sub	sp, #136	; 0x88
 800203e:	af00      	add	r7, sp, #0
 8002040:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002042:	63b9      	str	r1, [r7, #56]	; 0x38
 8002044:	637a      	str	r2, [r7, #52]	; 0x34
void inverse_matrix(int N, float A[N][N], float A_inv[N][N])
 8002046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002048:	633a      	str	r2, [r7, #48]	; 0x30
 800204a:	1e53      	subs	r3, r2, #1
 800204c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800204e:	2300      	movs	r3, #0
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	016b      	lsls	r3, r5, #5
 800205e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002062:	0162      	lsls	r2, r4, #5
 8002064:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8002066:	1e73      	subs	r3, r6, #1
 8002068:	65bb      	str	r3, [r7, #88]	; 0x58
 800206a:	4632      	mov	r2, r6
 800206c:	2300      	movs	r3, #0
 800206e:	4690      	mov	r8, r2
 8002070:	4699      	mov	r9, r3
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800207e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002082:	ea4f 1248 	mov.w	r2, r8, lsl #5
{
 8002086:	466b      	mov	r3, sp
 8002088:	469c      	mov	ip, r3
	float temp[N][2*N]; // Matrix combining the original matrix and the identity matrix
 800208a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208c:	0059      	lsls	r1, r3, #1
 800208e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002090:	1e4b      	subs	r3, r1, #1
 8002092:	657b      	str	r3, [r7, #84]	; 0x54
 8002094:	460a      	mov	r2, r1
 8002096:	2300      	movs	r3, #0
 8002098:	61ba      	str	r2, [r7, #24]
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80020a8:	464c      	mov	r4, r9
 80020aa:	0163      	lsls	r3, r4, #5
 80020ac:	4644      	mov	r4, r8
 80020ae:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020b2:	4644      	mov	r4, r8
 80020b4:	0162      	lsls	r2, r4, #5
 80020b6:	460b      	mov	r3, r1
 80020b8:	009d      	lsls	r5, r3, #2
 80020ba:	1e43      	subs	r3, r0, #1
 80020bc:	653b      	str	r3, [r7, #80]	; 0x50
 80020be:	460a      	mov	r2, r1
 80020c0:	2300      	movs	r3, #0
 80020c2:	613a      	str	r2, [r7, #16]
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	4602      	mov	r2, r0
 80020c8:	2300      	movs	r3, #0
 80020ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ce:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80020d2:	464b      	mov	r3, r9
 80020d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d6:	fb02 f203 	mul.w	r2, r2, r3
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	4644      	mov	r4, r8
 80020de:	fb04 f303 	mul.w	r3, r4, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	4642      	mov	r2, r8
 80020e6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80020e8:	fba2 ab04 	umull	sl, fp, r2, r4
 80020ec:	445b      	add	r3, fp
 80020ee:	469b      	mov	fp, r3
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80020fc:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002100:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002104:	460a      	mov	r2, r1
 8002106:	2300      	movs	r3, #0
 8002108:	60ba      	str	r2, [r7, #8]
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4602      	mov	r2, r0
 800210e:	2300      	movs	r3, #0
 8002110:	603a      	str	r2, [r7, #0]
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002118:	464b      	mov	r3, r9
 800211a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800211e:	4652      	mov	r2, sl
 8002120:	fb02 f203 	mul.w	r2, r2, r3
 8002124:	465b      	mov	r3, fp
 8002126:	4644      	mov	r4, r8
 8002128:	fb04 f303 	mul.w	r3, r4, r3
 800212c:	4413      	add	r3, r2
 800212e:	4642      	mov	r2, r8
 8002130:	4654      	mov	r4, sl
 8002132:	fba2 4204 	umull	r4, r2, r2, r4
 8002136:	627a      	str	r2, [r7, #36]	; 0x24
 8002138:	4622      	mov	r2, r4
 800213a:	623a      	str	r2, [r7, #32]
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	4413      	add	r3, r2
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800214e:	464c      	mov	r4, r9
 8002150:	0163      	lsls	r3, r4, #5
 8002152:	4644      	mov	r4, r8
 8002154:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002158:	4644      	mov	r4, r8
 800215a:	0162      	lsls	r2, r4, #5
 800215c:	460b      	mov	r3, r1
 800215e:	4602      	mov	r2, r0
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3307      	adds	r3, #7
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	ebad 0d03 	sub.w	sp, sp, r3
 8002170:	466b      	mov	r3, sp
 8002172:	3303      	adds	r3, #3
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
	float factor;

    // Initialize the temp matrix
    for (int i = 0; i < N; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002180:	e057      	b.n	8002232 <inverse_matrix+0x1fa>
    {
        for (int j = 0; j < 2*N; j++)
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002188:	e048      	b.n	800221c <inverse_matrix+0x1e4>
        {
            if (j < N)
 800218a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800218e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002190:	429a      	cmp	r2, r3
 8002192:	da19      	bge.n	80021c8 <inverse_matrix+0x190>
            {
                temp[i][j] = A[i][j];
 8002194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a2:	18d1      	adds	r1, r2, r3
 80021a4:	08ab      	lsrs	r3, r5, #2
 80021a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	440a      	add	r2, r1
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021b2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021b6:	fb03 f000 	mul.w	r0, r3, r0
 80021ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021be:	4403      	add	r3, r0
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e024      	b.n	8002212 <inverse_matrix+0x1da>
            }
            else
            {
                if (j - N == i)
 80021c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10e      	bne.n	80021f6 <inverse_matrix+0x1be>
                {
                    temp[i][j] = 1; // Initialize the identity matrix part
 80021d8:	08ab      	lsrs	r3, r5, #2
 80021da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80021e0:	fb03 f101 	mul.w	r1, r3, r1
 80021e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021e8:	440b      	add	r3, r1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e00d      	b.n	8002212 <inverse_matrix+0x1da>
                }
                else
                {
                    temp[i][j] = 0;
 80021f6:	08ab      	lsrs	r3, r5, #2
 80021f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021fa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80021fe:	fb03 f101 	mul.w	r1, r3, r1
 8002202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002206:	440b      	add	r3, r1
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 2*N; j++)
 8002212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002216:	3301      	adds	r3, #1
 8002218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002224:	429a      	cmp	r2, r3
 8002226:	dbb0      	blt.n	800218a <inverse_matrix+0x152>
    for (int i = 0; i < N; i++)
 8002228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800222c:	3301      	adds	r3, #1
 800222e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002232:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002238:	429a      	cmp	r2, r3
 800223a:	dba2      	blt.n	8002182 <inverse_matrix+0x14a>
            }
        }
    }

    // Gaussian elimination
    for (int i = 0; i < N; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002240:	e0dc      	b.n	80023fc <inverse_matrix+0x3c4>
    {
        // If the diagonal element is 0, swap rows
        if (temp[i][i] == 0)
 8002242:	08ab      	lsrs	r3, r5, #2
 8002244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002246:	3301      	adds	r3, #1
 8002248:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	d150      	bne.n	8002302 <inverse_matrix+0x2ca>
        {
            for (int j = i + 1; j < N; j++)
 8002260:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002262:	3301      	adds	r3, #1
 8002264:	67bb      	str	r3, [r7, #120]	; 0x78
 8002266:	e048      	b.n	80022fa <inverse_matrix+0x2c2>
            {
                if (temp[j][i] != 0)
 8002268:	08ab      	lsrs	r3, r5, #2
 800226a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800226c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800226e:	fb03 f101 	mul.w	r1, r3, r1
 8002272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002274:	440b      	add	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	d035      	beq.n	80022f4 <inverse_matrix+0x2bc>
                {
                    // Swap rows
                    for (int k = 0; k < 2*N; k++)
 8002288:	2300      	movs	r3, #0
 800228a:	677b      	str	r3, [r7, #116]	; 0x74
 800228c:	e02c      	b.n	80022e8 <inverse_matrix+0x2b0>
                    {
                    	float temp_swap = temp[i][k];
 800228e:	08ab      	lsrs	r3, r5, #2
 8002290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002292:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002294:	fb03 f101 	mul.w	r1, r3, r1
 8002298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800229a:	440b      	add	r3, r1
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
                        temp[i][k] = temp[j][k];
 80022a4:	08aa      	lsrs	r2, r5, #2
 80022a6:	08ab      	lsrs	r3, r5, #2
 80022a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022aa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022ac:	fb02 f000 	mul.w	r0, r2, r0
 80022b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022b2:	4402      	add	r2, r0
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	440a      	add	r2, r1
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022bc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80022be:	fb03 f000 	mul.w	r0, r3, r0
 80022c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c4:	4403      	add	r3, r0
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	601a      	str	r2, [r3, #0]
                        temp[j][k] = temp_swap;
 80022cc:	08ab      	lsrs	r3, r5, #2
 80022ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022d2:	fb03 f101 	mul.w	r1, r3, r1
 80022d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d8:	440b      	add	r3, r1
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022e0:	601a      	str	r2, [r3, #0]
                    for (int k = 0; k < 2*N; k++)
 80022e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e4:	3301      	adds	r3, #1
 80022e6:	677b      	str	r3, [r7, #116]	; 0x74
 80022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbcd      	blt.n	800228e <inverse_matrix+0x256>
                    }
                    break;
 80022f2:	e006      	b.n	8002302 <inverse_matrix+0x2ca>
            for (int j = i + 1; j < N; j++)
 80022f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f6:	3301      	adds	r3, #1
 80022f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbb2      	blt.n	8002268 <inverse_matrix+0x230>
                }
            }
        }
        // Make the diagonal element 1
        factor = temp[i][i];
 8002302:	08ab      	lsrs	r3, r5, #2
 8002304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002306:	3301      	adds	r3, #1
 8002308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
        for (int j = 0; j < 2*N; j++)
 8002316:	2300      	movs	r3, #0
 8002318:	673b      	str	r3, [r7, #112]	; 0x70
 800231a:	e01c      	b.n	8002356 <inverse_matrix+0x31e>
        {
            temp[i][j] /= factor;
 800231c:	08ab      	lsrs	r3, r5, #2
 800231e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002320:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002322:	fb03 f101 	mul.w	r1, r3, r1
 8002326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002328:	440b      	add	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	edd3 6a00 	vldr	s13, [r3]
 8002332:	08ab      	lsrs	r3, r5, #2
 8002334:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800233e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002340:	fb03 f101 	mul.w	r1, r3, r1
 8002344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002346:	440b      	add	r3, r1
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 2*N; j++)
 8002350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002352:	3301      	adds	r3, #1
 8002354:	673b      	str	r3, [r7, #112]	; 0x70
 8002356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800235c:	429a      	cmp	r2, r3
 800235e:	dbdd      	blt.n	800231c <inverse_matrix+0x2e4>
        }
        // Make other elements in the same column 0
        for (int j = 0; j < N; j++)
 8002360:	2300      	movs	r3, #0
 8002362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002364:	e043      	b.n	80023ee <inverse_matrix+0x3b6>
        {
            if (i != j)
 8002366:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236a:	429a      	cmp	r2, r3
 800236c:	d03c      	beq.n	80023e8 <inverse_matrix+0x3b0>
            {
                factor = temp[j][i];
 800236e:	08ab      	lsrs	r3, r5, #2
 8002370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002372:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002374:	fb03 f101 	mul.w	r1, r3, r1
 8002378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237a:	440b      	add	r3, r1
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	647b      	str	r3, [r7, #68]	; 0x44
                for (int k = 0; k < 2*N; k++)
 8002384:	2300      	movs	r3, #0
 8002386:	66bb      	str	r3, [r7, #104]	; 0x68
 8002388:	e029      	b.n	80023de <inverse_matrix+0x3a6>
                {
                    temp[j][k] -= factor * temp[i][k];
 800238a:	08ab      	lsrs	r3, r5, #2
 800238c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800238e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002390:	fb03 f101 	mul.w	r1, r3, r1
 8002394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002396:	440b      	add	r3, r1
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	08ab      	lsrs	r3, r5, #2
 80023a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80023a6:	fb03 f101 	mul.w	r1, r3, r1
 80023aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ac:	440b      	add	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	edd3 6a00 	vldr	s13, [r3]
 80023b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023be:	08ab      	lsrs	r3, r5, #2
 80023c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023c6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80023c8:	fb03 f101 	mul.w	r1, r3, r1
 80023cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ce:	440b      	add	r3, r1
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2*N; k++)
 80023d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023da:	3301      	adds	r3, #1
 80023dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80023de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbd0      	blt.n	800238a <inverse_matrix+0x352>
        for (int j = 0; j < N; j++)
 80023e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ea:	3301      	adds	r3, #1
 80023ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	dbb7      	blt.n	8002366 <inverse_matrix+0x32e>
    for (int i = 0; i < N; i++)
 80023f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f8:	3301      	adds	r3, #1
 80023fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80023fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002400:	429a      	cmp	r2, r3
 8002402:	f6ff af1e 	blt.w	8002242 <inverse_matrix+0x20a>
            }
        }
    }

    // Extract the inverse matrix
    for (int i = 0; i < N; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	667b      	str	r3, [r7, #100]	; 0x64
 800240a:	e023      	b.n	8002454 <inverse_matrix+0x41c>
    {
        for (int j = 0; j < N; j++)
 800240c:	2300      	movs	r3, #0
 800240e:	663b      	str	r3, [r7, #96]	; 0x60
 8002410:	e019      	b.n	8002446 <inverse_matrix+0x40e>
        {
            A_inv[i][j] = temp[i][j+N];
 8002412:	08a8      	lsrs	r0, r5, #2
 8002414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002418:	4413      	add	r3, r2
 800241a:	4631      	mov	r1, r6
 800241c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002426:	4411      	add	r1, r2
 8002428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800242a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800242c:	fb04 f000 	mul.w	r0, r4, r0
 8002430:	4403      	add	r3, r0
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++)
 8002440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002442:	3301      	adds	r3, #1
 8002444:	663b      	str	r3, [r7, #96]	; 0x60
 8002446:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244a:	429a      	cmp	r2, r3
 800244c:	dbe1      	blt.n	8002412 <inverse_matrix+0x3da>
    for (int i = 0; i < N; i++)
 800244e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002450:	3301      	adds	r3, #1
 8002452:	667b      	str	r3, [r7, #100]	; 0x64
 8002454:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002458:	429a      	cmp	r2, r3
 800245a:	dbd7      	blt.n	800240c <inverse_matrix+0x3d4>
 800245c:	46e5      	mov	sp, ip
        }
    }
}
 800245e:	bf00      	nop
 8002460:	3788      	adds	r7, #136	; 0x88
 8002462:	46bd      	mov	sp, r7
 8002464:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002468:	4770      	bx	lr
	...

0800246c <print_matrix>:

// Function to print a matrix
void print_matrix(int rows, int cols, float matrix[rows][cols]) {
 800246c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	68be      	ldr	r6, [r7, #8]
 800247a:	1e73      	subs	r3, r6, #1
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	4632      	mov	r2, r6
 8002480:	2300      	movs	r3, #0
 8002482:	4614      	mov	r4, r2
 8002484:	461d      	mov	r5, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	016b      	lsls	r3, r5, #5
 8002490:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002494:	0162      	lsls	r2, r4, #5
    int i, j;
    for (i = 0; i < rows; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e022      	b.n	80024e2 <print_matrix+0x76>
    {
        for (j = 0; j < cols; j++)
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	e015      	b.n	80024ce <print_matrix+0x62>
        {
            printf("%f ", matrix[i][j]);
 80024a2:	4632      	mov	r2, r6
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	441a      	add	r2, r3
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f865 	bl	8000588 <__aeabi_f2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	480c      	ldr	r0, [pc, #48]	; (80024f4 <print_matrix+0x88>)
 80024c4:	f005 ffc8 	bl	8008458 <iprintf>
        for (j = 0; j < cols; j++)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	3301      	adds	r3, #1
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	dbe5      	blt.n	80024a2 <print_matrix+0x36>
        }
        printf("\r\n");
 80024d6:	4808      	ldr	r0, [pc, #32]	; (80024f8 <print_matrix+0x8c>)
 80024d8:	f006 f824 	bl	8008524 <puts>
    for (i = 0; i < rows; i++)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dbd8      	blt.n	800249c <print_matrix+0x30>
    }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	3724      	adds	r7, #36	; 0x24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f4:	0800b5b0 	.word	0x0800b5b0
 80024f8:	0800b538 	.word	0x0800b538

080024fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
}
 8002502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002504:	e7fe      	b.n	8002504 <Error_Handler+0x8>
	...

08002508 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <MX_SPI5_Init+0x74>)
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <MX_SPI5_Init+0x78>)
 8002510:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <MX_SPI5_Init+0x74>)
 8002514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002518:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <MX_SPI5_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <MX_SPI5_Init+0x74>)
 8002522:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002526:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_SPI5_Init+0x74>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_SPI5_Init+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_SPI5_Init+0x74>)
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_SPI5_Init+0x74>)
 800253e:	2208      	movs	r2, #8
 8002540:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_SPI5_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_SPI5_Init+0x74>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_SPI5_Init+0x74>)
 8002550:	2200      	movs	r2, #0
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_SPI5_Init+0x74>)
 8002556:	2207      	movs	r2, #7
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_SPI5_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_SPI5_Init+0x74>)
 8002562:	2208      	movs	r2, #8
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_SPI5_Init+0x74>)
 8002568:	f002 ff04 	bl	8005374 <HAL_SPI_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002572:	f7ff ffc3 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20010930 	.word	0x20010930
 8002580:	40015000 	.word	0x40015000

08002584 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_SPI_MspInit+0x7c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d128      	bne.n	80025f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_SPI_MspInit+0x80>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_SPI_MspInit+0x80>)
 80025ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_SPI_MspInit+0x80>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_SPI_MspInit+0x80>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_SPI_MspInit+0x80>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_SPI_MspInit+0x80>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80025d6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80025e8:	2305      	movs	r3, #5
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_SPI_MspInit+0x84>)
 80025f4:	f001 fb16 	bl	8003c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40015000 	.word	0x40015000
 8002604:	40023800 	.word	0x40023800
 8002608:	40021400 	.word	0x40021400

0800260c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_MspInit+0x44>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_MspInit+0x44>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_MspInit+0x44>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_MspInit+0x44>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_MspInit+0x44>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_MspInit+0x44>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 fa68 	bl	8002b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <ADC_IRQHandler+0x10>)
 80026ae:	f000 fac5 	bl	8002c3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20002d98 	.word	0x20002d98

080026bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <TIM3_IRQHandler+0x10>)
 80026c2:	f002 ff59 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20010998 	.word	0x20010998

080026d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <DMA2_Stream0_IRQHandler+0x10>)
 80026d6:	f001 f869 	bl	80037ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20002de0 	.word	0x20002de0

080026e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return 1;
 80026e8:	2301      	movs	r3, #1
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_kill>:

int _kill(int pid, int sig)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026fe:	f005 ff37 	bl	8008570 <__errno>
 8002702:	4603      	mov	r3, r0
 8002704:	2216      	movs	r2, #22
 8002706:	601a      	str	r2, [r3, #0]
  return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_exit>:

void _exit (int status)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800271c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ffe7 	bl	80026f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002726:	e7fe      	b.n	8002726 <_exit+0x12>

08002728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e00a      	b.n	8002750 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800273a:	f3af 8000 	nop.w
 800273e:	4601      	mov	r1, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	b2ca      	uxtb	r2, r1
 8002748:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf0      	blt.n	800273a <_read+0x12>
  }

  return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278a:	605a      	str	r2, [r3, #4]
  return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_isatty>:

int _isatty(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <_sbrk+0x5c>)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <_sbrk+0x60>)
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x64>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <_sbrk+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d207      	bcs.n	800280c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027fc:	f005 feb8 	bl	8008570 <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800280a:	e009      	b.n	8002820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <_sbrk+0x64>)
 800281c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20050000 	.word	0x20050000
 800282c:	00000400 	.word	0x00000400
 8002830:	20010994 	.word	0x20010994
 8002834:	20010bd0 	.word	0x20010bd0

08002838 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <SystemInit+0x20>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <SystemInit+0x20>)
 8002844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <MX_TIM3_Init+0x94>)
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <MX_TIM3_Init+0x98>)
 800287e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <MX_TIM3_Init+0x94>)
 8002882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002886:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <MX_TIM3_Init+0x94>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 249;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <MX_TIM3_Init+0x94>)
 8002890:	22f9      	movs	r2, #249	; 0xf9
 8002892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <MX_TIM3_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <MX_TIM3_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028a0:	4813      	ldr	r0, [pc, #76]	; (80028f0 <MX_TIM3_Init+0x94>)
 80028a2:	f002 fe12 	bl	80054ca <HAL_TIM_Base_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028ac:	f7ff fe26 	bl	80024fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	4619      	mov	r1, r3
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <MX_TIM3_Init+0x94>)
 80028be:	f002 ff7b 	bl	80057b8 <HAL_TIM_ConfigClockSource>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028c8:	f7ff fe18 	bl	80024fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_TIM3_Init+0x94>)
 80028da:	f003 f999 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028e4:	f7ff fe0a 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20010998 	.word	0x20010998
 80028f4:	40000400 	.word	0x40000400

080028f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <HAL_TIM_Base_MspInit+0x44>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_TIM_Base_MspInit+0x48>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <HAL_TIM_Base_MspInit+0x48>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_TIM_Base_MspInit+0x48>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	201d      	movs	r0, #29
 8002928:	f000 fdeb 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800292c:	201d      	movs	r0, #29
 800292e:	f000 fe04 	bl	800353a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40000400 	.word	0x40000400
 8002940:	40023800 	.word	0x40023800

08002944 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_USART1_UART_Init+0x58>)
 800294a:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <MX_USART1_UART_Init+0x5c>)
 800294c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <MX_USART1_UART_Init+0x58>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_USART1_UART_Init+0x58>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_USART1_UART_Init+0x58>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_USART1_UART_Init+0x58>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_USART1_UART_Init+0x58>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MX_USART1_UART_Init+0x58>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_USART1_UART_Init+0x58>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <MX_USART1_UART_Init+0x58>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_USART1_UART_Init+0x58>)
 8002982:	2200      	movs	r2, #0
 8002984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_USART1_UART_Init+0x58>)
 8002988:	f003 f9ee 	bl	8005d68 <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002992:	f7ff fdb3 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200109e4 	.word	0x200109e4
 80029a0:	40011000 	.word	0x40011000

080029a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0ac      	sub	sp, #176	; 0xb0
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029bc:	f107 0318 	add.w	r3, r7, #24
 80029c0:	2284      	movs	r2, #132	; 0x84
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 fdc7 	bl	8008558 <memset>
  if(uartHandle->Instance==USART1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <HAL_UART_MspInit+0xf4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d15c      	bne.n	8002a8e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029d4:	2340      	movs	r3, #64	; 0x40
 80029d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80029d8:	2302      	movs	r3, #2
 80029da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029dc:	f107 0318 	add.w	r3, r7, #24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 f8d7 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029ec:	f7ff fd86 	bl	80024fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029f0:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	6453      	str	r3, [r2, #68]	; 0x44
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	6313      	str	r3, [r2, #48]	; 0x30
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_UART_MspInit+0xf8>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a50:	2307      	movs	r3, #7
 8002a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <HAL_UART_MspInit+0xfc>)
 8002a5e:	f001 f8e1 	bl	8003c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a7c:	2307      	movs	r3, #7
 8002a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a86:	4619      	mov	r1, r3
 8002a88:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <HAL_UART_MspInit+0x100>)
 8002a8a:	f001 f8cb 	bl	8003c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a8e:	bf00      	nop
 8002a90:	37b0      	adds	r7, #176	; 0xb0
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40011000 	.word	0x40011000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aae:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac4:	4c0b      	ldr	r4, [pc, #44]	; (8002af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ad2:	f7ff feb1 	bl	8002838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ad6:	f005 fd51 	bl	800857c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ada:	f7fe fec7 	bl	800186c <main>
  bx  lr    
 8002ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ae0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae8:	20002d7c 	.word	0x20002d7c
  ldr r2, =_sidata
 8002aec:	0800ba38 	.word	0x0800ba38
  ldr r2, =_sbss
 8002af0:	20002d7c 	.word	0x20002d7c
  ldr r4, =_ebss
 8002af4:	20010bd0 	.word	0x20010bd0

08002af8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af8:	e7fe      	b.n	8002af8 <CAN1_RX0_IRQHandler>

08002afa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afe:	2003      	movs	r0, #3
 8002b00:	f000 fcf4 	bl	80034ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b04:	200f      	movs	r0, #15
 8002b06:	f000 f805 	bl	8002b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b0a:	f7ff fd7f 	bl	800260c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_InitTick+0x54>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_InitTick+0x58>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fd0f 	bl	8003556 <HAL_SYSTICK_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00e      	b.n	8002b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d80a      	bhi.n	8002b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b50:	f000 fcd7 	bl	8003502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b54:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <HAL_InitTick+0x5c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20002b94 	.word	0x20002b94
 8002b6c:	20002b9c 	.word	0x20002b9c
 8002b70:	20002b98 	.word	0x20002b98

08002b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x20>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_IncTick+0x24>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_IncTick+0x24>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20002b9c 	.word	0x20002b9c
 8002b98:	20010a6c 	.word	0x20010a6c

08002b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_GetTick+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20010a6c 	.word	0x20010a6c

08002bb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e031      	b.n	8002c2e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe faa8 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d116      	bne.n	8002c20 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_ADC_Init+0x84>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	f043 0202 	orr.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa9e 	bl	8003144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c1e:	e001      	b.n	8002c24 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	ffffeefd 	.word	0xffffeefd

08002c3c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d049      	beq.n	8002d06 <HAL_ADC_IRQHandler+0xca>
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d046      	beq.n	8002d06 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d12b      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d127      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d119      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0220 	bic.w	r2, r2, #32
 8002cd0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f8b0 	bl	8002e5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0212 	mvn.w	r2, #18
 8002d04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d057      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x190>
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d054      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d139      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12b      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d124      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d11d      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d119      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fabb 	bl	8003338 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f06f 020c 	mvn.w	r2, #12
 8002dca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d017      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x1d6>
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d014      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10d      	bne.n	8002e12 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f834 	bl	8002e70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e20:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x218>
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d012      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f06f 0220 	mvn.w	r2, #32
 8002e42:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f81d 	bl	8002e84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f06f 0220 	mvn.w	r2, #32
 8002e52:	601a      	str	r2, [r3, #0]
  }
}
 8002e54:	bf00      	nop
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1c>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e136      	b.n	8003122 <HAL_ADC_ConfigChannel+0x28a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d93a      	bls.n	8002f3a <HAL_ADC_ConfigChannel+0xa2>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ecc:	d035      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68d9      	ldr	r1, [r3, #12]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b1e      	subs	r3, #30
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43da      	mvns	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a8d      	ldr	r2, [pc, #564]	; (8003130 <HAL_ADC_ConfigChannel+0x298>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10a      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68d9      	ldr	r1, [r3, #12]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	061a      	lsls	r2, r3, #24
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f12:	e035      	b.n	8002f80 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68d9      	ldr	r1, [r3, #12]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4618      	mov	r0, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4403      	add	r3, r0
 8002f2c:	3b1e      	subs	r3, #30
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f38:	e022      	b.n	8002f80 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6919      	ldr	r1, [r3, #16]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	2207      	movs	r2, #7
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43da      	mvns	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6919      	ldr	r1, [r3, #16]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4603      	mov	r3, r0
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4403      	add	r3, r0
 8002f76:	409a      	lsls	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d824      	bhi.n	8002fd2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	3b05      	subs	r3, #5
 8002f9a:	221f      	movs	r2, #31
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3b05      	subs	r3, #5
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd0:	e04c      	b.n	800306c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d824      	bhi.n	8003024 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b23      	subs	r3, #35	; 0x23
 8002fec:	221f      	movs	r2, #31
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	3b23      	subs	r3, #35	; 0x23
 8003016:	fa00 f203 	lsl.w	r2, r0, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
 8003022:	e023      	b.n	800306c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b41      	subs	r3, #65	; 0x41
 8003036:	221f      	movs	r2, #31
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43da      	mvns	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	400a      	ands	r2, r1
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	3b41      	subs	r3, #65	; 0x41
 8003060:	fa00 f203 	lsl.w	r2, r0, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a30      	ldr	r2, [pc, #192]	; (8003134 <HAL_ADC_ConfigChannel+0x29c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10a      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1f4>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800307e:	d105      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 8003086:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800308a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a28      	ldr	r2, [pc, #160]	; (8003134 <HAL_ADC_ConfigChannel+0x29c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10f      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x21e>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b12      	cmp	r3, #18
 800309c:	d10b      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_ADC_ConfigChannel+0x29c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d12b      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x280>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <HAL_ADC_ConfigChannel+0x298>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x23a>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b11      	cmp	r3, #17
 80030d0:	d122      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a15      	ldr	r2, [pc, #84]	; (8003138 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a10      	ldr	r2, [pc, #64]	; (8003130 <HAL_ADC_ConfigChannel+0x298>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d111      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_ADC_ConfigChannel+0x2a4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_ADC_ConfigChannel+0x2a8>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9a      	lsrs	r2, r3, #18
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800310a:	e002      	b.n	8003112 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3b01      	subs	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f9      	bne.n	800310c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	10000012 	.word	0x10000012
 8003134:	40012000 	.word	0x40012000
 8003138:	40012300 	.word	0x40012300
 800313c:	20002b94 	.word	0x20002b94
 8003140:	431bde83 	.word	0x431bde83

08003144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800314c:	4b78      	ldr	r3, [pc, #480]	; (8003330 <ADC_Init+0x1ec>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a77      	ldr	r2, [pc, #476]	; (8003330 <ADC_Init+0x1ec>)
 8003152:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003156:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003158:	4b75      	ldr	r3, [pc, #468]	; (8003330 <ADC_Init+0x1ec>)
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4973      	ldr	r1, [pc, #460]	; (8003330 <ADC_Init+0x1ec>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	021a      	lsls	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <ADC_Init+0x1f0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	e00f      	b.n	800323e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800323c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0202 	bic.w	r2, r2, #2
 800324c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	005a      	lsls	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800328a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	3b01      	subs	r3, #1
 8003298:	035a      	lsls	r2, r3, #13
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	e007      	b.n	80032b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	051a      	lsls	r2, r3, #20
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6899      	ldr	r1, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032f6:	025a      	lsls	r2, r3, #9
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	029a      	lsls	r2, r3, #10
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40012300 	.word	0x40012300
 8003334:	0f000001 	.word	0x0f000001

08003338 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <__NVIC_SetPriorityGrouping+0x40>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003368:	4013      	ands	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 8003376:	4313      	orrs	r3, r2
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <__NVIC_SetPriorityGrouping+0x40>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00
 8003390:	05fa0000 	.word	0x05fa0000

08003394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <__NVIC_GetPriorityGrouping+0x18>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0307 	and.w	r3, r3, #7
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db0b      	blt.n	80033da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4907      	ldr	r1, [pc, #28]	; (80033e8 <__NVIC_EnableIRQ+0x38>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2001      	movs	r0, #1
 80033d2:	fa00 f202 	lsl.w	r2, r0, r2
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000e100 	.word	0xe000e100

080033ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	db0a      	blt.n	8003416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	490c      	ldr	r1, [pc, #48]	; (8003438 <__NVIC_SetPriority+0x4c>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	440b      	add	r3, r1
 8003410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003414:	e00a      	b.n	800342c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4908      	ldr	r1, [pc, #32]	; (800343c <__NVIC_SetPriority+0x50>)
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	3b04      	subs	r3, #4
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	440b      	add	r3, r1
 800342a:	761a      	strb	r2, [r3, #24]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f1c3 0307 	rsb	r3, r3, #7
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf28      	it	cs
 800345e:	2304      	movcs	r3, #4
 8003460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3304      	adds	r3, #4
 8003466:	2b06      	cmp	r3, #6
 8003468:	d902      	bls.n	8003470 <NVIC_EncodePriority+0x30>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3b03      	subs	r3, #3
 800346e:	e000      	b.n	8003472 <NVIC_EncodePriority+0x32>
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	401a      	ands	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43d9      	mvns	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	4313      	orrs	r3, r2
         );
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b8:	d301      	bcc.n	80034be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00f      	b.n	80034de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <SysTick_Config+0x40>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c6:	210f      	movs	r1, #15
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034cc:	f7ff ff8e 	bl	80033ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <SysTick_Config+0x40>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <SysTick_Config+0x40>)
 80034d8:	2207      	movs	r2, #7
 80034da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000e010 	.word	0xe000e010

080034ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff29 	bl	800334c <__NVIC_SetPriorityGrouping>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003514:	f7ff ff3e 	bl	8003394 <__NVIC_GetPriorityGrouping>
 8003518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f7ff ff8e 	bl	8003440 <NVIC_EncodePriority>
 8003524:	4602      	mov	r2, r0
 8003526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff5d 	bl	80033ec <__NVIC_SetPriority>
}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff31 	bl	80033b0 <__NVIC_EnableIRQ>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffa2 	bl	80034a8 <SysTick_Config>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e014      	b.n	80035aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	791b      	ldrb	r3, [r3, #4]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fd fe89 	bl	80012a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b087      	sub	sp, #28
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	795b      	ldrb	r3, [r3, #5]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_DAC_ConfigChannel+0x18>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e03c      	b.n	8003644 <HAL_DAC_ConfigChannel+0x92>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2202      	movs	r2, #2
 80035d4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4013      	ands	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6819      	ldr	r1, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	22c0      	movs	r2, #192	; 0xc0
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43da      	mvns	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7ff fa9e 	bl	8002b9c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e099      	b.n	80037a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368c:	e00f      	b.n	80036ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800368e:	f7ff fa85 	bl	8002b9c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b05      	cmp	r3, #5
 800369a:	d908      	bls.n	80036ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2203      	movs	r2, #3
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e078      	b.n	80037a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e8      	bne.n	800368e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_DMA_Init+0x158>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4313      	orrs	r3, r2
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0307 	bic.w	r3, r3, #7
 800372e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b04      	cmp	r3, #4
 8003740:	d117      	bne.n	8003772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f9e9 	bl	8003b2c <DMA_CheckFifoParam>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2240      	movs	r2, #64	; 0x40
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800376e:	2301      	movs	r3, #1
 8003770:	e016      	b.n	80037a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9a0 	bl	8003ac0 <DMA_CalcBaseAndBitshift>
 8003780:	4603      	mov	r3, r0
 8003782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	223f      	movs	r2, #63	; 0x3f
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	f010803f 	.word	0xf010803f

080037ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037b8:	4b8e      	ldr	r3, [pc, #568]	; (80039f4 <HAL_DMA_IRQHandler+0x248>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a8e      	ldr	r2, [pc, #568]	; (80039f8 <HAL_DMA_IRQHandler+0x24c>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2208      	movs	r2, #8
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01a      	beq.n	8003818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0204 	bic.w	r2, r2, #4
 80037fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	2208      	movs	r2, #8
 8003806:	409a      	lsls	r2, r3
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	2201      	movs	r2, #1
 800381e:	409a      	lsls	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	2201      	movs	r2, #1
 800383c:	409a      	lsls	r2, r3
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	2204      	movs	r2, #4
 8003854:	409a      	lsls	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d012      	beq.n	8003884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00b      	beq.n	8003884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	2204      	movs	r2, #4
 8003872:	409a      	lsls	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	f043 0204 	orr.w	r2, r3, #4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2210      	movs	r2, #16
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d043      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d03c      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2210      	movs	r2, #16
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d018      	beq.n	80038ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d024      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
 80038da:	e01f      	b.n	800391c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
 80038ec:	e016      	b.n	800391c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0208 	bic.w	r2, r2, #8
 800390a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	2220      	movs	r2, #32
 8003922:	409a      	lsls	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 808f 	beq.w	8003a4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8087 	beq.w	8003a4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2220      	movs	r2, #32
 8003944:	409a      	lsls	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b05      	cmp	r3, #5
 8003954:	d136      	bne.n	80039c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0216 	bic.w	r2, r2, #22
 8003964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_DMA_IRQHandler+0x1da>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0208 	bic.w	r2, r2, #8
 8003994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	223f      	movs	r2, #63	; 0x3f
 800399c:	409a      	lsls	r2, r3
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d07e      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
        }
        return;
 80039c2:	e079      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d031      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
 80039f0:	e02c      	b.n	8003a4c <HAL_DMA_IRQHandler+0x2a0>
 80039f2:	bf00      	nop
 80039f4:	20002b94 	.word	0x20002b94
 80039f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d023      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
 8003a0c:	e01e      	b.n	8003a4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10f      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0210 	bic.w	r2, r2, #16
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d032      	beq.n	8003aba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d022      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2205      	movs	r2, #5
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d307      	bcc.n	8003a94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f2      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x2cc>
 8003a92:	e000      	b.n	8003a96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e000      	b.n	8003aba <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ab8:	bf00      	nop
    }
  }
}
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3b10      	subs	r3, #16
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <DMA_CalcBaseAndBitshift+0x60>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <DMA_CalcBaseAndBitshift+0x64>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d908      	bls.n	8003b00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <DMA_CalcBaseAndBitshift+0x68>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	1d1a      	adds	r2, r3, #4
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	659a      	str	r2, [r3, #88]	; 0x58
 8003afe:	e006      	b.n	8003b0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <DMA_CalcBaseAndBitshift+0x68>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	aaaaaaab 	.word	0xaaaaaaab
 8003b24:	0800b5cc 	.word	0x0800b5cc
 8003b28:	fffffc00 	.word	0xfffffc00

08003b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d11f      	bne.n	8003b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d856      	bhi.n	8003bfa <DMA_CheckFifoParam+0xce>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <DMA_CheckFifoParam+0x28>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b77 	.word	0x08003b77
 8003b5c:	08003b65 	.word	0x08003b65
 8003b60:	08003bfb 	.word	0x08003bfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d046      	beq.n	8003bfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b74:	e043      	b.n	8003bfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b7e:	d140      	bne.n	8003c02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e03d      	b.n	8003c02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	d121      	bne.n	8003bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d837      	bhi.n	8003c06 <DMA_CheckFifoParam+0xda>
 8003b96:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <DMA_CheckFifoParam+0x70>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bb3 	.word	0x08003bb3
 8003ba4:	08003bad 	.word	0x08003bad
 8003ba8:	08003bc5 	.word	0x08003bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e030      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d025      	beq.n	8003c0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc2:	e022      	b.n	8003c0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bcc:	d11f      	bne.n	8003c0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bd2:	e01c      	b.n	8003c0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d903      	bls.n	8003be2 <DMA_CheckFifoParam+0xb6>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d003      	beq.n	8003be8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003be0:	e018      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
      break;
 8003be6:	e015      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e00b      	b.n	8003c12 <DMA_CheckFifoParam+0xe6>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e00a      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e008      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e006      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c06:	bf00      	nop
 8003c08:	e004      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <DMA_CheckFifoParam+0xe8>
      break;
 8003c12:	bf00      	nop
    }
  } 
  
  return status; 
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e175      	b.n	8003f30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c44:	2201      	movs	r2, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 8164 	bne.w	8003f2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d005      	beq.n	8003c7a <HAL_GPIO_Init+0x56>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d130      	bne.n	8003cdc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 0201 	and.w	r2, r3, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d017      	beq.n	8003d18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d123      	bne.n	8003d6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80be 	beq.w	8003f2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_GPIO_Init+0x324>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_GPIO_Init+0x324>)
 8003db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dba:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <HAL_GPIO_Init+0x324>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003dc6:	4a61      	ldr	r2, [pc, #388]	; (8003f4c <HAL_GPIO_Init+0x328>)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	3302      	adds	r3, #2
 8003dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	220f      	movs	r2, #15
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_GPIO_Init+0x32c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d037      	beq.n	8003e62 <HAL_GPIO_Init+0x23e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_GPIO_Init+0x330>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d031      	beq.n	8003e5e <HAL_GPIO_Init+0x23a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a56      	ldr	r2, [pc, #344]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d02b      	beq.n	8003e5a <HAL_GPIO_Init+0x236>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a55      	ldr	r2, [pc, #340]	; (8003f5c <HAL_GPIO_Init+0x338>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d025      	beq.n	8003e56 <HAL_GPIO_Init+0x232>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a54      	ldr	r2, [pc, #336]	; (8003f60 <HAL_GPIO_Init+0x33c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01f      	beq.n	8003e52 <HAL_GPIO_Init+0x22e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a53      	ldr	r2, [pc, #332]	; (8003f64 <HAL_GPIO_Init+0x340>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d019      	beq.n	8003e4e <HAL_GPIO_Init+0x22a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_GPIO_Init+0x344>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_GPIO_Init+0x226>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a51      	ldr	r2, [pc, #324]	; (8003f6c <HAL_GPIO_Init+0x348>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00d      	beq.n	8003e46 <HAL_GPIO_Init+0x222>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a50      	ldr	r2, [pc, #320]	; (8003f70 <HAL_GPIO_Init+0x34c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <HAL_GPIO_Init+0x21e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4f      	ldr	r2, [pc, #316]	; (8003f74 <HAL_GPIO_Init+0x350>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <HAL_GPIO_Init+0x21a>
 8003e3a:	2309      	movs	r3, #9
 8003e3c:	e012      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e3e:	230a      	movs	r3, #10
 8003e40:	e010      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e42:	2308      	movs	r3, #8
 8003e44:	e00e      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e46:	2307      	movs	r3, #7
 8003e48:	e00c      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	e00a      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e4e:	2305      	movs	r3, #5
 8003e50:	e008      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e52:	2304      	movs	r3, #4
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e56:	2303      	movs	r3, #3
 8003e58:	e004      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e002      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_GPIO_Init+0x240>
 8003e62:	2300      	movs	r3, #0
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f002 0203 	and.w	r2, r2, #3
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	4093      	lsls	r3, r2
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e74:	4935      	ldr	r1, [pc, #212]	; (8003f4c <HAL_GPIO_Init+0x328>)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea6:	4a34      	ldr	r2, [pc, #208]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eac:	4b32      	ldr	r3, [pc, #200]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed0:	4a29      	ldr	r2, [pc, #164]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ed6:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003efa:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <HAL_GPIO_Init+0x354>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	f67f ae86 	bls.w	8003c44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020c00 	.word	0x40020c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40021400 	.word	0x40021400
 8003f68:	40021800 	.word	0x40021800
 8003f6c:	40021c00 	.word	0x40021c00
 8003f70:	40022000 	.word	0x40022000
 8003f74:	40022400 	.word	0x40022400
 8003f78:	40013c00 	.word	0x40013c00

08003f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f8c:	787b      	ldrb	r3, [r7, #1]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f98:	e003      	b.n	8003fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	041a      	lsls	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	619a      	str	r2, [r3, #24]
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07f      	b.n	80040c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd fb5a 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004000:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004010:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	e006      	b.n	8004038 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004036:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d104      	bne.n	800404a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_I2C_Init+0x11c>)
 8004056:	430b      	orrs	r3, r1
 8004058:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004068:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69d9      	ldr	r1, [r3, #28]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	02008000 	.word	0x02008000

080040d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d138      	bne.n	8004158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e032      	b.n	800415a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6819      	ldr	r1, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e000      	b.n	800415a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b20      	cmp	r3, #32
 800417a:	d139      	bne.n	80041f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004186:	2302      	movs	r3, #2
 8004188:	e033      	b.n	80041f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2224      	movs	r2, #36	; 0x24
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004208:	2300      	movs	r3, #0
 800420a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e291      	b.n	800473a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8087 	beq.w	8004332 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004224:	4b96      	ldr	r3, [pc, #600]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b04      	cmp	r3, #4
 800422e:	d00c      	beq.n	800424a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004230:	4b93      	ldr	r3, [pc, #588]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b08      	cmp	r3, #8
 800423a:	d112      	bne.n	8004262 <HAL_RCC_OscConfig+0x62>
 800423c:	4b90      	ldr	r3, [pc, #576]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004248:	d10b      	bne.n	8004262 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d06c      	beq.n	8004330 <HAL_RCC_OscConfig+0x130>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d168      	bne.n	8004330 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e26b      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x7a>
 800426c:	4b84      	ldr	r3, [pc, #528]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a83      	ldr	r2, [pc, #524]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e02e      	b.n	80042d8 <HAL_RCC_OscConfig+0xd8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x9c>
 8004282:	4b7f      	ldr	r3, [pc, #508]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7e      	ldr	r2, [pc, #504]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a7b      	ldr	r2, [pc, #492]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e01d      	b.n	80042d8 <HAL_RCC_OscConfig+0xd8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0xc0>
 80042a6:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a75      	ldr	r2, [pc, #468]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b73      	ldr	r3, [pc, #460]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a72      	ldr	r2, [pc, #456]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0xd8>
 80042c0:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a6e      	ldr	r2, [pc, #440]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b6c      	ldr	r3, [pc, #432]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a6b      	ldr	r2, [pc, #428]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fe fc5c 	bl	8002b9c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fe fc58 	bl	8002b9c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e21f      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe8>
 8004306:	e014      	b.n	8004332 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fc48 	bl	8002b9c <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe fc44 	bl	8002b9c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e20b      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	4b57      	ldr	r3, [pc, #348]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x110>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d069      	beq.n	8004412 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800433e:	4b50      	ldr	r3, [pc, #320]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434a:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d11c      	bne.n	8004390 <HAL_RCC_OscConfig+0x190>
 8004356:	4b4a      	ldr	r3, [pc, #296]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d116      	bne.n	8004390 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_RCC_OscConfig+0x17a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e1df      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437a:	4b41      	ldr	r3, [pc, #260]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	493d      	ldr	r1, [pc, #244]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	e040      	b.n	8004412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d023      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004398:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a38      	ldr	r2, [pc, #224]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fe fbfa 	bl	8002b9c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fe fbf6 	bl	8002b9c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1bd      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b30      	ldr	r3, [pc, #192]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ca:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4929      	ldr	r1, [pc, #164]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]
 80043de:	e018      	b.n	8004412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fe fbd6 	bl	8002b9c <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fe fbd2 	bl	8002b9c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e199      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d038      	beq.n	8004490 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d019      	beq.n	800445a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004426:	4b16      	ldr	r3, [pc, #88]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fe fbb3 	bl	8002b9c <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fe fbaf 	bl	8002b9c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e176      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x23a>
 8004458:	e01a      	b.n	8004490 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <HAL_RCC_OscConfig+0x280>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe fb99 	bl	8002b9c <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fe fb95 	bl	8002b9c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d903      	bls.n	8004484 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e15c      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
 8004480:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	4b91      	ldr	r3, [pc, #580]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a4 	beq.w	80045e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449e:	4b8b      	ldr	r3, [pc, #556]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a87      	ldr	r2, [pc, #540]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
 80044b6:	4b85      	ldr	r3, [pc, #532]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c6:	4b82      	ldr	r3, [pc, #520]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044d2:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7e      	ldr	r2, [pc, #504]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044de:	f7fe fb5d 	bl	8002b9c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e6:	f7fe fb59 	bl	8002b9c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b64      	cmp	r3, #100	; 0x64
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e120      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044f8:	4b75      	ldr	r3, [pc, #468]	; (80046d0 <HAL_RCC_OscConfig+0x4d0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x31a>
 800450c:	4b6f      	ldr	r3, [pc, #444]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a6e      	ldr	r2, [pc, #440]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	e02d      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x33c>
 8004522:	4b6a      	ldr	r3, [pc, #424]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a69      	ldr	r2, [pc, #420]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	4b67      	ldr	r3, [pc, #412]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a66      	ldr	r2, [pc, #408]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004534:	f023 0304 	bic.w	r3, r3, #4
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	e01c      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b05      	cmp	r3, #5
 8004542:	d10c      	bne.n	800455e <HAL_RCC_OscConfig+0x35e>
 8004544:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a60      	ldr	r2, [pc, #384]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	4b5e      	ldr	r3, [pc, #376]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	4a5d      	ldr	r2, [pc, #372]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	; 0x70
 800455c:	e00b      	b.n	8004576 <HAL_RCC_OscConfig+0x376>
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a5a      	ldr	r2, [pc, #360]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
 800456a:	4b58      	ldr	r3, [pc, #352]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a57      	ldr	r2, [pc, #348]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d015      	beq.n	80045aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fe fb0d 	bl	8002b9c <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fe fb09 	bl	8002b9c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0ce      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ee      	beq.n	8004586 <HAL_RCC_OscConfig+0x386>
 80045a8:	e014      	b.n	80045d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fe faf7 	bl	8002b9c <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fe faf3 	bl	8002b9c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0b8      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ee      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d105      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b3c      	ldr	r3, [pc, #240]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a3b      	ldr	r2, [pc, #236]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80a4 	beq.w	8004738 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f0:	4b36      	ldr	r3, [pc, #216]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 030c 	and.w	r3, r3, #12
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d06b      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d149      	bne.n	8004698 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004604:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a30      	ldr	r2, [pc, #192]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800460a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800460e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fe fac4 	bl	8002b9c <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fe fac0 	bl	8002b9c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e087      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	4313      	orrs	r3, r2
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800465e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004662:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fe fa94 	bl	8002b9c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fe fa90 	bl	8002b9c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e057      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x478>
 8004696:	e04f      	b.n	8004738 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe fa7a 	bl	8002b9c <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fe fa76 	bl	8002b9c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e03d      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b03      	ldr	r3, [pc, #12]	; (80046cc <HAL_RCC_OscConfig+0x4cc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x4ac>
 80046ca:	e035      	b.n	8004738 <HAL_RCC_OscConfig+0x538>
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x544>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d028      	beq.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d121      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d11a      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004704:	4013      	ands	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800470a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800470c:	4293      	cmp	r3, r2
 800470e:	d111      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	3b01      	subs	r3, #1
 800471e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0d0      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b6a      	ldr	r3, [pc, #424]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d910      	bls.n	8004790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b67      	ldr	r3, [pc, #412]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	4965      	ldr	r1, [pc, #404]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b63      	ldr	r3, [pc, #396]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0b8      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a8:	4b59      	ldr	r3, [pc, #356]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	4a58      	ldr	r2, [pc, #352]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a52      	ldr	r2, [pc, #328]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047cc:	4b50      	ldr	r3, [pc, #320]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	494d      	ldr	r1, [pc, #308]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d040      	beq.n	800486c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d115      	bne.n	800482a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e073      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e06b      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4936      	ldr	r1, [pc, #216]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483c:	f7fe f9ae 	bl	8002b9c <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fe f9aa 	bl	8002b9c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e053      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d210      	bcs.n	800489c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 020f 	bic.w	r2, r3, #15
 8004882:	4922      	ldr	r1, [pc, #136]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e032      	b.n	8004902 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4916      	ldr	r1, [pc, #88]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048da:	f000 f821 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048de:	4602      	mov	r2, r0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	490a      	ldr	r1, [pc, #40]	; (8004914 <HAL_RCC_ClockConfig+0x1cc>)
 80048ec:	5ccb      	ldrb	r3, [r1, r3]
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <HAL_RCC_ClockConfig+0x1d0>)
 80048f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1d4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe f90a 	bl	8002b14 <HAL_InitTick>

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023c00 	.word	0x40023c00
 8004910:	40023800 	.word	0x40023800
 8004914:	0800b5b4 	.word	0x0800b5b4
 8004918:	20002b94 	.word	0x20002b94
 800491c:	20002b98 	.word	0x20002b98

08004920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b094      	sub	sp, #80	; 0x50
 8004926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
 800492c:	2300      	movs	r3, #0
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004930:	2300      	movs	r3, #0
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004938:	4b79      	ldr	r3, [pc, #484]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d00d      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x40>
 8004944:	2b08      	cmp	r3, #8
 8004946:	f200 80e1 	bhi.w	8004b0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x34>
 800494e:	2b04      	cmp	r3, #4
 8004950:	d003      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x3a>
 8004952:	e0db      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004954:	4b73      	ldr	r3, [pc, #460]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004958:	e0db      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495a:	4b73      	ldr	r3, [pc, #460]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x208>)
 800495c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800495e:	e0d8      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004960:	4b6f      	ldr	r3, [pc, #444]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004968:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800496a:	4b6d      	ldr	r3, [pc, #436]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d063      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004976:	4b6a      	ldr	r3, [pc, #424]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	2200      	movs	r2, #0
 800497e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004980:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	633b      	str	r3, [r7, #48]	; 0x30
 800498a:	2300      	movs	r3, #0
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
 800498e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	f04f 0000 	mov.w	r0, #0
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	0159      	lsls	r1, r3, #5
 80049a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a4:	0150      	lsls	r0, r2, #5
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4621      	mov	r1, r4
 80049ac:	1a51      	subs	r1, r2, r1
 80049ae:	6139      	str	r1, [r7, #16]
 80049b0:	4629      	mov	r1, r5
 80049b2:	eb63 0301 	sbc.w	r3, r3, r1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c4:	4659      	mov	r1, fp
 80049c6:	018b      	lsls	r3, r1, #6
 80049c8:	4651      	mov	r1, sl
 80049ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ce:	4651      	mov	r1, sl
 80049d0:	018a      	lsls	r2, r1, #6
 80049d2:	4651      	mov	r1, sl
 80049d4:	ebb2 0801 	subs.w	r8, r2, r1
 80049d8:	4659      	mov	r1, fp
 80049da:	eb63 0901 	sbc.w	r9, r3, r1
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f2:	4690      	mov	r8, r2
 80049f4:	4699      	mov	r9, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	eb18 0303 	adds.w	r3, r8, r3
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	462b      	mov	r3, r5
 8004a00:	eb49 0303 	adc.w	r3, r9, r3
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a12:	4629      	mov	r1, r5
 8004a14:	024b      	lsls	r3, r1, #9
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	024a      	lsls	r2, r1, #9
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a26:	2200      	movs	r2, #0
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a30:	f7fc f94a 	bl	8000cc8 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3c:	e058      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3e:	4b38      	ldr	r3, [pc, #224]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	2200      	movs	r2, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	4611      	mov	r1, r2
 8004a4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	2300      	movs	r3, #0
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0159      	lsls	r1, r3, #5
 8004a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6a:	0150      	lsls	r0, r2, #5
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4641      	mov	r1, r8
 8004a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a76:	4649      	mov	r1, r9
 8004a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a90:	ebb2 040a 	subs.w	r4, r2, sl
 8004a94:	eb63 050b 	sbc.w	r5, r3, fp
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	00eb      	lsls	r3, r5, #3
 8004aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa6:	00e2      	lsls	r2, r4, #3
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	461d      	mov	r5, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	18e3      	adds	r3, r4, r3
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	eb45 0303 	adc.w	r3, r5, r3
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	028b      	lsls	r3, r1, #10
 8004aca:	4621      	mov	r1, r4
 8004acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	028a      	lsls	r2, r1, #10
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ada:	2200      	movs	r2, #0
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	61fa      	str	r2, [r7, #28]
 8004ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae4:	f7fc f8f0 	bl	8000cc8 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4613      	mov	r3, r2
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3750      	adds	r7, #80	; 0x50
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	007a1200 	.word	0x007a1200

08004b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20002b94 	.word	0x20002b94

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a9b      	lsrs	r3, r3, #10
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800b5c4 	.word	0x0800b5c4

08004b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b70:	f7ff ffdc 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800b5c4 	.word	0x0800b5c4

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d012      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a68      	ldr	r2, [pc, #416]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004bc6:	6093      	str	r3, [r2, #8]
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	4964      	ldr	r1, [pc, #400]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bee:	4b5d      	ldr	r3, [pc, #372]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	4959      	ldr	r1, [pc, #356]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d017      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	494a      	ldr	r1, [pc, #296]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c48:	d101      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 808b 	beq.w	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c78:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6413      	str	r3, [r2, #64]	; 0x40
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a34      	ldr	r2, [pc, #208]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9c:	f7fd ff7e 	bl	8002b9c <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fd ff7a 	bl	8002b9c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e357      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc2:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d035      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d02e      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d114      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd ff42 	bl	8002b9c <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fd ff3e 	bl	8002b9c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e319      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ee      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4a:	d111      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	4901      	ldr	r1, [pc, #4]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
 8004d62:	e00b      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40007000 	.word	0x40007000
 8004d6c:	0ffffcff 	.word	0x0ffffcff
 8004d70:	4baa      	ldr	r3, [pc, #680]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4aa9      	ldr	r2, [pc, #676]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d7a:	6093      	str	r3, [r2, #8]
 8004d7c:	4ba7      	ldr	r3, [pc, #668]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d88:	49a4      	ldr	r1, [pc, #656]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d9a:	4ba0      	ldr	r3, [pc, #640]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da0:	4a9e      	ldr	r2, [pc, #632]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004daa:	4b9c      	ldr	r3, [pc, #624]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	4999      	ldr	r1, [pc, #612]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc8:	4b94      	ldr	r3, [pc, #592]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd6:	4991      	ldr	r1, [pc, #580]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dea:	4b8c      	ldr	r3, [pc, #560]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df8:	4988      	ldr	r1, [pc, #544]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0c:	4b83      	ldr	r3, [pc, #524]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1a:	4980      	ldr	r1, [pc, #512]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e2e:	4b7b      	ldr	r3, [pc, #492]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	4977      	ldr	r1, [pc, #476]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e50:	4b72      	ldr	r3, [pc, #456]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	496f      	ldr	r1, [pc, #444]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f023 020c 	bic.w	r2, r3, #12
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	4966      	ldr	r1, [pc, #408]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e94:	4b61      	ldr	r3, [pc, #388]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	495e      	ldr	r1, [pc, #376]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eb6:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	4955      	ldr	r1, [pc, #340]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ed8:	4b50      	ldr	r3, [pc, #320]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	494d      	ldr	r1, [pc, #308]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004efa:	4b48      	ldr	r3, [pc, #288]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	4944      	ldr	r1, [pc, #272]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f1c:	4b3f      	ldr	r3, [pc, #252]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	493c      	ldr	r1, [pc, #240]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	4933      	ldr	r1, [pc, #204]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f60:	4b2e      	ldr	r3, [pc, #184]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6e:	492b      	ldr	r1, [pc, #172]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d011      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f82:	4b26      	ldr	r3, [pc, #152]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f90:	4922      	ldr	r1, [pc, #136]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd0:	4912      	ldr	r1, [pc, #72]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff4:	4909      	ldr	r1, [pc, #36]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d006      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80d9 	beq.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005010:	4b02      	ldr	r3, [pc, #8]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a01      	ldr	r2, [pc, #4]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800501a:	e001      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800501c:	40023800 	.word	0x40023800
 8005020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fd fdbb 	bl	8002b9c <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005028:	e008      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800502a:	f7fd fdb7 	bl	8002b9c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	; 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e194      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800503c:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d021      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11d      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800505c:	4b64      	ldr	r3, [pc, #400]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800506a:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800506c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005070:	0e1b      	lsrs	r3, r3, #24
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	019a      	lsls	r2, r3, #6
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	431a      	orrs	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	071b      	lsls	r3, r3, #28
 8005090:	4957      	ldr	r1, [pc, #348]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02e      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c2:	d129      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050c4:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050d2:	4b47      	ldr	r3, [pc, #284]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d8:	0f1b      	lsrs	r3, r3, #28
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	019a      	lsls	r2, r3, #6
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	431a      	orrs	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	071b      	lsls	r3, r3, #28
 80050f8:	493d      	ldr	r1, [pc, #244]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005100:	4b3b      	ldr	r3, [pc, #236]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005106:	f023 021f 	bic.w	r2, r3, #31
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	3b01      	subs	r3, #1
 8005110:	4937      	ldr	r1, [pc, #220]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01d      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005124:	4b32      	ldr	r3, [pc, #200]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	0e1b      	lsrs	r3, r3, #24
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005132:	4b2f      	ldr	r3, [pc, #188]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	0f1b      	lsrs	r3, r3, #28
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	019a      	lsls	r2, r3, #6
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	431a      	orrs	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	071b      	lsls	r3, r3, #28
 8005158:	4925      	ldr	r1, [pc, #148]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d011      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	019a      	lsls	r2, r3, #6
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	071b      	lsls	r3, r3, #28
 8005188:	4919      	ldr	r1, [pc, #100]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519c:	f7fd fcfe 	bl	8002b9c <HAL_GetTick>
 80051a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051a4:	f7fd fcfa 	bl	8002b9c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0d7      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b6:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	f040 80cd 	bne.w	8005364 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d6:	f7fd fce1 	bl	8002b9c <HAL_GetTick>
 80051da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051de:	f7fd fcdd 	bl	8002b9c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b64      	cmp	r3, #100	; 0x64
 80051ea:	d903      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0ba      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80051f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051f4:	4b5e      	ldr	r3, [pc, #376]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005200:	d0ed      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800521e:	2b00      	cmp	r3, #0
 8005220:	d02e      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d12a      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800522a:	4b51      	ldr	r3, [pc, #324]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005238:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	0f1b      	lsrs	r3, r3, #28
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	019a      	lsls	r2, r3, #6
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	061b      	lsls	r3, r3, #24
 8005258:	431a      	orrs	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	071b      	lsls	r3, r3, #28
 800525e:	4944      	ldr	r1, [pc, #272]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005266:	4b42      	ldr	r3, [pc, #264]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	3b01      	subs	r3, #1
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	493d      	ldr	r1, [pc, #244]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d022      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005294:	d11d      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005296:	4b36      	ldr	r3, [pc, #216]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	0e1b      	lsrs	r3, r3, #24
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052a4:	4b32      	ldr	r3, [pc, #200]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	0f1b      	lsrs	r3, r3, #28
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4929      	ldr	r1, [pc, #164]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d028      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052de:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	019a      	lsls	r2, r3, #6
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	431a      	orrs	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	4917      	ldr	r1, [pc, #92]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800531c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4911      	ldr	r1, [pc, #68]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0e      	ldr	r2, [pc, #56]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533c:	f7fd fc2e 	bl	8002b9c <HAL_GetTick>
 8005340:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005344:	f7fd fc2a 	bl	8002b9c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e007      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800535e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005362:	d1ef      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800

08005374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e09d      	b.n	80054c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d108      	bne.n	80053a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005396:	d009      	beq.n	80053ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	61da      	str	r2, [r3, #28]
 800539e:	e005      	b.n	80053ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fd f8dc 	bl	8002584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ec:	d902      	bls.n	80053f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e002      	b.n	80053fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005402:	d007      	beq.n	8005414 <HAL_SPI_Init+0xa0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800540c:	d002      	beq.n	8005414 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	ea42 0103 	orr.w	r1, r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	0c1b      	lsrs	r3, r3, #16
 8005470:	f003 0204 	and.w	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005490:	ea42 0103 	orr.w	r1, r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e049      	b.n	8005570 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7fd fa01 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f000 fa47 	bl	800599c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0202 	mvn.w	r2, #2
 80055a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9d0 	bl	8005960 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9c2 	bl	800594c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9d3 	bl	8005974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0204 	mvn.w	r2, #4
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f9a6 	bl	8005960 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f998 	bl	800594c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9a9 	bl	8005974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0208 	mvn.w	r2, #8
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f97c 	bl	8005960 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f96e 	bl	800594c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f97f 	bl	8005974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b10      	cmp	r3, #16
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0210 	mvn.w	r2, #16
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2208      	movs	r2, #8
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f952 	bl	8005960 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f944 	bl	800594c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f955 	bl	8005974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0201 	mvn.w	r2, #1
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fb3e 	bl	8001d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fb0c 	bl	8005d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	d10e      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d107      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 faff 	bl	8005d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d10e      	bne.n	8005782 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f903 	bl	8005988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b20      	cmp	r3, #32
 800578e:	d10e      	bne.n	80057ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b20      	cmp	r3, #32
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0220 	mvn.w	r2, #32
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fabf 	bl	8005d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_ConfigClockSource+0x1c>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e0b4      	b.n	800593e <HAL_TIM_ConfigClockSource+0x186>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	4b56      	ldr	r3, [pc, #344]	; (8005948 <HAL_TIM_ConfigClockSource+0x190>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580c:	d03e      	beq.n	800588c <HAL_TIM_ConfigClockSource+0xd4>
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	f200 8087 	bhi.w	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	f000 8086 	beq.w	800592a <HAL_TIM_ConfigClockSource+0x172>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d87f      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b70      	cmp	r3, #112	; 0x70
 8005826:	d01a      	beq.n	800585e <HAL_TIM_ConfigClockSource+0xa6>
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d87b      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b60      	cmp	r3, #96	; 0x60
 800582e:	d050      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d877      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b50      	cmp	r3, #80	; 0x50
 8005836:	d03c      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005838:	2b50      	cmp	r3, #80	; 0x50
 800583a:	d873      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d058      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d86f      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d064      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	2b30      	cmp	r3, #48	; 0x30
 800584a:	d86b      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b20      	cmp	r3, #32
 800584e:	d060      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d867      	bhi.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d05c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d05a      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x15a>
 800585c:	e062      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800586e:	f000 f9af 	bl	8005bd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	609a      	str	r2, [r3, #8]
      break;
 800588a:	e04f      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800589c:	f000 f998 	bl	8005bd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ae:	609a      	str	r2, [r3, #8]
      break;
 80058b0:	e03c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	461a      	mov	r2, r3
 80058c0:	f000 f90c 	bl	8005adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2150      	movs	r1, #80	; 0x50
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f965 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058d0:	e02c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058de:	461a      	mov	r2, r3
 80058e0:	f000 f92b 	bl	8005b3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2160      	movs	r1, #96	; 0x60
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f955 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058f0:	e01c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 f8ec 	bl	8005adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2140      	movs	r1, #64	; 0x40
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f945 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005910:	e00c      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f000 f93c 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005922:	e003      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e000      	b.n	800592c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800592a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	fffeff88 	.word	0xfffeff88

0800594c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a40      	ldr	r2, [pc, #256]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d00f      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3d      	ldr	r2, [pc, #244]	; (8005ab4 <TIM_Base_SetConfig+0x118>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3c      	ldr	r2, [pc, #240]	; (8005ab8 <TIM_Base_SetConfig+0x11c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3b      	ldr	r2, [pc, #236]	; (8005abc <TIM_Base_SetConfig+0x120>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3a      	ldr	r2, [pc, #232]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d108      	bne.n	80059ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2f      	ldr	r2, [pc, #188]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d027      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2c      	ldr	r2, [pc, #176]	; (8005ab4 <TIM_Base_SetConfig+0x118>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d023      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2b      	ldr	r2, [pc, #172]	; (8005ab8 <TIM_Base_SetConfig+0x11c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01f      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <TIM_Base_SetConfig+0x120>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a29      	ldr	r2, [pc, #164]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d017      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <TIM_Base_SetConfig+0x128>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <TIM_Base_SetConfig+0x12c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00f      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a26      	ldr	r2, [pc, #152]	; (8005acc <TIM_Base_SetConfig+0x130>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a25      	ldr	r2, [pc, #148]	; (8005ad0 <TIM_Base_SetConfig+0x134>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <TIM_Base_SetConfig+0x138>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <TIM_Base_SetConfig+0x13c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d108      	bne.n	8005a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_Base_SetConfig+0xf8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0c      	ldr	r2, [pc, #48]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d103      	bne.n	8005a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40010400 	.word	0x40010400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800
 8005ad0:	40001800 	.word	0x40001800
 8005ad4:	40001c00 	.word	0x40001c00
 8005ad8:	40002000 	.word	0x40002000

08005adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f043 0307 	orr.w	r3, r3, #7
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e06d      	b.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a30      	ldr	r2, [pc, #192]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2f      	ldr	r2, [pc, #188]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d10c      	bne.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40001800 	.word	0x40001800

08005d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e040      	b.n	8005dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fc fe0a 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2224      	movs	r2, #36	; 0x24
 8005d94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8b0 	bl	8005f0c <UART_SetConfig>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e022      	b.n	8005dfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fb08 	bl	80063d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fb8f 	bl	8006518 <UART_CheckIdleState>
 8005dfa:	4603      	mov	r3, r0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	; 0x28
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d171      	bne.n	8005f00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Transmit+0x24>
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e06a      	b.n	8005f02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2221      	movs	r2, #33	; 0x21
 8005e38:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e3a:	f7fc feaf 	bl	8002b9c <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e58:	d108      	bne.n	8005e6c <HAL_UART_Transmit+0x68>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e003      	b.n	8005e74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e74:	e02c      	b.n	8005ed0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fb80 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e038      	b.n	8005f02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10b      	bne.n	8005eae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e007      	b.n	8005ebe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1cc      	bne.n	8005e76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2140      	movs	r1, #64	; 0x40
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fb4d 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e005      	b.n	8005f02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e000      	b.n	8005f02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4ba6      	ldr	r3, [pc, #664]	; (80061d0 <UART_SetConfig+0x2c4>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6812      	ldr	r2, [r2, #0]
 8005f3e:	6979      	ldr	r1, [r7, #20]
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a94      	ldr	r2, [pc, #592]	; (80061d4 <UART_SetConfig+0x2c8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d120      	bne.n	8005fca <UART_SetConfig+0xbe>
 8005f88:	4b93      	ldr	r3, [pc, #588]	; (80061d8 <UART_SetConfig+0x2cc>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d816      	bhi.n	8005fc4 <UART_SetConfig+0xb8>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <UART_SetConfig+0x90>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fb9 	.word	0x08005fb9
 8005fa4:	08005fb3 	.word	0x08005fb3
 8005fa8:	08005fbf 	.word	0x08005fbf
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e150      	b.n	8006254 <UART_SetConfig+0x348>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e14d      	b.n	8006254 <UART_SetConfig+0x348>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e14a      	b.n	8006254 <UART_SetConfig+0x348>
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e147      	b.n	8006254 <UART_SetConfig+0x348>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e144      	b.n	8006254 <UART_SetConfig+0x348>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a83      	ldr	r2, [pc, #524]	; (80061dc <UART_SetConfig+0x2d0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d132      	bne.n	800603a <UART_SetConfig+0x12e>
 8005fd4:	4b80      	ldr	r3, [pc, #512]	; (80061d8 <UART_SetConfig+0x2cc>)
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fda:	f003 030c 	and.w	r3, r3, #12
 8005fde:	2b0c      	cmp	r3, #12
 8005fe0:	d828      	bhi.n	8006034 <UART_SetConfig+0x128>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0xdc>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800601d 	.word	0x0800601d
 8005fec:	08006035 	.word	0x08006035
 8005ff0:	08006035 	.word	0x08006035
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	08006029 	.word	0x08006029
 8005ffc:	08006035 	.word	0x08006035
 8006000:	08006035 	.word	0x08006035
 8006004:	08006035 	.word	0x08006035
 8006008:	08006023 	.word	0x08006023
 800600c:	08006035 	.word	0x08006035
 8006010:	08006035 	.word	0x08006035
 8006014:	08006035 	.word	0x08006035
 8006018:	0800602f 	.word	0x0800602f
 800601c:	2300      	movs	r3, #0
 800601e:	77fb      	strb	r3, [r7, #31]
 8006020:	e118      	b.n	8006254 <UART_SetConfig+0x348>
 8006022:	2302      	movs	r3, #2
 8006024:	77fb      	strb	r3, [r7, #31]
 8006026:	e115      	b.n	8006254 <UART_SetConfig+0x348>
 8006028:	2304      	movs	r3, #4
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e112      	b.n	8006254 <UART_SetConfig+0x348>
 800602e:	2308      	movs	r3, #8
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e10f      	b.n	8006254 <UART_SetConfig+0x348>
 8006034:	2310      	movs	r3, #16
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e10c      	b.n	8006254 <UART_SetConfig+0x348>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a68      	ldr	r2, [pc, #416]	; (80061e0 <UART_SetConfig+0x2d4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d120      	bne.n	8006086 <UART_SetConfig+0x17a>
 8006044:	4b64      	ldr	r3, [pc, #400]	; (80061d8 <UART_SetConfig+0x2cc>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800604e:	2b30      	cmp	r3, #48	; 0x30
 8006050:	d013      	beq.n	800607a <UART_SetConfig+0x16e>
 8006052:	2b30      	cmp	r3, #48	; 0x30
 8006054:	d814      	bhi.n	8006080 <UART_SetConfig+0x174>
 8006056:	2b20      	cmp	r3, #32
 8006058:	d009      	beq.n	800606e <UART_SetConfig+0x162>
 800605a:	2b20      	cmp	r3, #32
 800605c:	d810      	bhi.n	8006080 <UART_SetConfig+0x174>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <UART_SetConfig+0x15c>
 8006062:	2b10      	cmp	r3, #16
 8006064:	d006      	beq.n	8006074 <UART_SetConfig+0x168>
 8006066:	e00b      	b.n	8006080 <UART_SetConfig+0x174>
 8006068:	2300      	movs	r3, #0
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e0f2      	b.n	8006254 <UART_SetConfig+0x348>
 800606e:	2302      	movs	r3, #2
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e0ef      	b.n	8006254 <UART_SetConfig+0x348>
 8006074:	2304      	movs	r3, #4
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e0ec      	b.n	8006254 <UART_SetConfig+0x348>
 800607a:	2308      	movs	r3, #8
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e0e9      	b.n	8006254 <UART_SetConfig+0x348>
 8006080:	2310      	movs	r3, #16
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e0e6      	b.n	8006254 <UART_SetConfig+0x348>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a56      	ldr	r2, [pc, #344]	; (80061e4 <UART_SetConfig+0x2d8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d120      	bne.n	80060d2 <UART_SetConfig+0x1c6>
 8006090:	4b51      	ldr	r3, [pc, #324]	; (80061d8 <UART_SetConfig+0x2cc>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006096:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800609a:	2bc0      	cmp	r3, #192	; 0xc0
 800609c:	d013      	beq.n	80060c6 <UART_SetConfig+0x1ba>
 800609e:	2bc0      	cmp	r3, #192	; 0xc0
 80060a0:	d814      	bhi.n	80060cc <UART_SetConfig+0x1c0>
 80060a2:	2b80      	cmp	r3, #128	; 0x80
 80060a4:	d009      	beq.n	80060ba <UART_SetConfig+0x1ae>
 80060a6:	2b80      	cmp	r3, #128	; 0x80
 80060a8:	d810      	bhi.n	80060cc <UART_SetConfig+0x1c0>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <UART_SetConfig+0x1a8>
 80060ae:	2b40      	cmp	r3, #64	; 0x40
 80060b0:	d006      	beq.n	80060c0 <UART_SetConfig+0x1b4>
 80060b2:	e00b      	b.n	80060cc <UART_SetConfig+0x1c0>
 80060b4:	2300      	movs	r3, #0
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e0cc      	b.n	8006254 <UART_SetConfig+0x348>
 80060ba:	2302      	movs	r3, #2
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e0c9      	b.n	8006254 <UART_SetConfig+0x348>
 80060c0:	2304      	movs	r3, #4
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e0c6      	b.n	8006254 <UART_SetConfig+0x348>
 80060c6:	2308      	movs	r3, #8
 80060c8:	77fb      	strb	r3, [r7, #31]
 80060ca:	e0c3      	b.n	8006254 <UART_SetConfig+0x348>
 80060cc:	2310      	movs	r3, #16
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e0c0      	b.n	8006254 <UART_SetConfig+0x348>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a44      	ldr	r2, [pc, #272]	; (80061e8 <UART_SetConfig+0x2dc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d125      	bne.n	8006128 <UART_SetConfig+0x21c>
 80060dc:	4b3e      	ldr	r3, [pc, #248]	; (80061d8 <UART_SetConfig+0x2cc>)
 80060de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ea:	d017      	beq.n	800611c <UART_SetConfig+0x210>
 80060ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f0:	d817      	bhi.n	8006122 <UART_SetConfig+0x216>
 80060f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f6:	d00b      	beq.n	8006110 <UART_SetConfig+0x204>
 80060f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fc:	d811      	bhi.n	8006122 <UART_SetConfig+0x216>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <UART_SetConfig+0x1fe>
 8006102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006106:	d006      	beq.n	8006116 <UART_SetConfig+0x20a>
 8006108:	e00b      	b.n	8006122 <UART_SetConfig+0x216>
 800610a:	2300      	movs	r3, #0
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e0a1      	b.n	8006254 <UART_SetConfig+0x348>
 8006110:	2302      	movs	r3, #2
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e09e      	b.n	8006254 <UART_SetConfig+0x348>
 8006116:	2304      	movs	r3, #4
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e09b      	b.n	8006254 <UART_SetConfig+0x348>
 800611c:	2308      	movs	r3, #8
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e098      	b.n	8006254 <UART_SetConfig+0x348>
 8006122:	2310      	movs	r3, #16
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e095      	b.n	8006254 <UART_SetConfig+0x348>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <UART_SetConfig+0x2e0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d125      	bne.n	800617e <UART_SetConfig+0x272>
 8006132:	4b29      	ldr	r3, [pc, #164]	; (80061d8 <UART_SetConfig+0x2cc>)
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800613c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006140:	d017      	beq.n	8006172 <UART_SetConfig+0x266>
 8006142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006146:	d817      	bhi.n	8006178 <UART_SetConfig+0x26c>
 8006148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800614c:	d00b      	beq.n	8006166 <UART_SetConfig+0x25a>
 800614e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006152:	d811      	bhi.n	8006178 <UART_SetConfig+0x26c>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <UART_SetConfig+0x254>
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d006      	beq.n	800616c <UART_SetConfig+0x260>
 800615e:	e00b      	b.n	8006178 <UART_SetConfig+0x26c>
 8006160:	2301      	movs	r3, #1
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e076      	b.n	8006254 <UART_SetConfig+0x348>
 8006166:	2302      	movs	r3, #2
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e073      	b.n	8006254 <UART_SetConfig+0x348>
 800616c:	2304      	movs	r3, #4
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e070      	b.n	8006254 <UART_SetConfig+0x348>
 8006172:	2308      	movs	r3, #8
 8006174:	77fb      	strb	r3, [r7, #31]
 8006176:	e06d      	b.n	8006254 <UART_SetConfig+0x348>
 8006178:	2310      	movs	r3, #16
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e06a      	b.n	8006254 <UART_SetConfig+0x348>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <UART_SetConfig+0x2e4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d138      	bne.n	80061fa <UART_SetConfig+0x2ee>
 8006188:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <UART_SetConfig+0x2cc>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006196:	d017      	beq.n	80061c8 <UART_SetConfig+0x2bc>
 8006198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800619c:	d82a      	bhi.n	80061f4 <UART_SetConfig+0x2e8>
 800619e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a2:	d00b      	beq.n	80061bc <UART_SetConfig+0x2b0>
 80061a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a8:	d824      	bhi.n	80061f4 <UART_SetConfig+0x2e8>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <UART_SetConfig+0x2aa>
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	d006      	beq.n	80061c2 <UART_SetConfig+0x2b6>
 80061b4:	e01e      	b.n	80061f4 <UART_SetConfig+0x2e8>
 80061b6:	2300      	movs	r3, #0
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e04b      	b.n	8006254 <UART_SetConfig+0x348>
 80061bc:	2302      	movs	r3, #2
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e048      	b.n	8006254 <UART_SetConfig+0x348>
 80061c2:	2304      	movs	r3, #4
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e045      	b.n	8006254 <UART_SetConfig+0x348>
 80061c8:	2308      	movs	r3, #8
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e042      	b.n	8006254 <UART_SetConfig+0x348>
 80061ce:	bf00      	nop
 80061d0:	efff69f3 	.word	0xefff69f3
 80061d4:	40011000 	.word	0x40011000
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40004400 	.word	0x40004400
 80061e0:	40004800 	.word	0x40004800
 80061e4:	40004c00 	.word	0x40004c00
 80061e8:	40005000 	.word	0x40005000
 80061ec:	40011400 	.word	0x40011400
 80061f0:	40007800 	.word	0x40007800
 80061f4:	2310      	movs	r3, #16
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e02c      	b.n	8006254 <UART_SetConfig+0x348>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a72      	ldr	r2, [pc, #456]	; (80063c8 <UART_SetConfig+0x4bc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d125      	bne.n	8006250 <UART_SetConfig+0x344>
 8006204:	4b71      	ldr	r3, [pc, #452]	; (80063cc <UART_SetConfig+0x4c0>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800620e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006212:	d017      	beq.n	8006244 <UART_SetConfig+0x338>
 8006214:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006218:	d817      	bhi.n	800624a <UART_SetConfig+0x33e>
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d00b      	beq.n	8006238 <UART_SetConfig+0x32c>
 8006220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006224:	d811      	bhi.n	800624a <UART_SetConfig+0x33e>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <UART_SetConfig+0x326>
 800622a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800622e:	d006      	beq.n	800623e <UART_SetConfig+0x332>
 8006230:	e00b      	b.n	800624a <UART_SetConfig+0x33e>
 8006232:	2300      	movs	r3, #0
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e00d      	b.n	8006254 <UART_SetConfig+0x348>
 8006238:	2302      	movs	r3, #2
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e00a      	b.n	8006254 <UART_SetConfig+0x348>
 800623e:	2304      	movs	r3, #4
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e007      	b.n	8006254 <UART_SetConfig+0x348>
 8006244:	2308      	movs	r3, #8
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e004      	b.n	8006254 <UART_SetConfig+0x348>
 800624a:	2310      	movs	r3, #16
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	e001      	b.n	8006254 <UART_SetConfig+0x348>
 8006250:	2310      	movs	r3, #16
 8006252:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625c:	d15b      	bne.n	8006316 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800625e:	7ffb      	ldrb	r3, [r7, #31]
 8006260:	2b08      	cmp	r3, #8
 8006262:	d828      	bhi.n	80062b6 <UART_SetConfig+0x3aa>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0x360>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	08006291 	.word	0x08006291
 8006270:	08006299 	.word	0x08006299
 8006274:	080062a1 	.word	0x080062a1
 8006278:	080062b7 	.word	0x080062b7
 800627c:	080062a7 	.word	0x080062a7
 8006280:	080062b7 	.word	0x080062b7
 8006284:	080062b7 	.word	0x080062b7
 8006288:	080062b7 	.word	0x080062b7
 800628c:	080062af 	.word	0x080062af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7fe fc58 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8006294:	61b8      	str	r0, [r7, #24]
        break;
 8006296:	e013      	b.n	80062c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006298:	f7fe fc68 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 800629c:	61b8      	str	r0, [r7, #24]
        break;
 800629e:	e00f      	b.n	80062c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a0:	4b4b      	ldr	r3, [pc, #300]	; (80063d0 <UART_SetConfig+0x4c4>)
 80062a2:	61bb      	str	r3, [r7, #24]
        break;
 80062a4:	e00c      	b.n	80062c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062a6:	f7fe fb3b 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80062aa:	61b8      	str	r0, [r7, #24]
        break;
 80062ac:	e008      	b.n	80062c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	61bb      	str	r3, [r7, #24]
        break;
 80062b4:	e004      	b.n	80062c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	77bb      	strb	r3, [r7, #30]
        break;
 80062be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d074      	beq.n	80063b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	005a      	lsls	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	441a      	add	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d916      	bls.n	8006310 <UART_SetConfig+0x404>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d212      	bcs.n	8006310 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f023 030f 	bic.w	r3, r3, #15
 80062f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	b29a      	uxth	r2, r3
 8006300:	89fb      	ldrh	r3, [r7, #14]
 8006302:	4313      	orrs	r3, r2
 8006304:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	89fa      	ldrh	r2, [r7, #14]
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	e04f      	b.n	80063b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	77bb      	strb	r3, [r7, #30]
 8006314:	e04c      	b.n	80063b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006316:	7ffb      	ldrb	r3, [r7, #31]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d828      	bhi.n	800636e <UART_SetConfig+0x462>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0x418>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006349 	.word	0x08006349
 8006328:	08006351 	.word	0x08006351
 800632c:	08006359 	.word	0x08006359
 8006330:	0800636f 	.word	0x0800636f
 8006334:	0800635f 	.word	0x0800635f
 8006338:	0800636f 	.word	0x0800636f
 800633c:	0800636f 	.word	0x0800636f
 8006340:	0800636f 	.word	0x0800636f
 8006344:	08006367 	.word	0x08006367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fe fbfc 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 800634c:	61b8      	str	r0, [r7, #24]
        break;
 800634e:	e013      	b.n	8006378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7fe fc0c 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8006354:	61b8      	str	r0, [r7, #24]
        break;
 8006356:	e00f      	b.n	8006378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <UART_SetConfig+0x4c4>)
 800635a:	61bb      	str	r3, [r7, #24]
        break;
 800635c:	e00c      	b.n	8006378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635e:	f7fe fadf 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 8006362:	61b8      	str	r0, [r7, #24]
        break;
 8006364:	e008      	b.n	8006378 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636a:	61bb      	str	r3, [r7, #24]
        break;
 800636c:	e004      	b.n	8006378 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	77bb      	strb	r3, [r7, #30]
        break;
 8006376:	bf00      	nop
    }

    if (pclk != 0U)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d018      	beq.n	80063b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	085a      	lsrs	r2, r3, #1
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	441a      	add	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b0f      	cmp	r3, #15
 8006396:	d909      	bls.n	80063ac <UART_SetConfig+0x4a0>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639e:	d205      	bcs.n	80063ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	e001      	b.n	80063b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40007c00 	.word	0x40007c00
 80063cc:	40023800 	.word	0x40023800
 80063d0:	00f42400 	.word	0x00f42400

080063d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d2:	d10a      	bne.n	80064ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af02      	add	r7, sp, #8
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006528:	f7fc fb38 	bl	8002b9c <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d10e      	bne.n	800655a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800653c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f81b 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e011      	b.n	800657e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b09c      	sub	sp, #112	; 0x70
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	e0a7      	b.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800659e:	f000 80a3 	beq.w	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a2:	f7fc fafb 	bl	8002b9c <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d302      	bcc.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80065b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d13f      	bne.n	8006638 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065cc:	667b      	str	r3, [r7, #100]	; 0x64
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e6      	bne.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	663b      	str	r3, [r7, #96]	; 0x60
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800660a:	64ba      	str	r2, [r7, #72]	; 0x48
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e068      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d050      	beq.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006654:	d148      	bne.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e6      	bne.n	8006660 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	613b      	str	r3, [r7, #16]
   return(result);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066b2:	623a      	str	r2, [r7, #32]
 80066b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	69f9      	ldr	r1, [r7, #28]
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e010      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69da      	ldr	r2, [r3, #28]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4013      	ands	r3, r2
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	bf0c      	ite	eq
 80066f8:	2301      	moveq	r3, #1
 80066fa:	2300      	movne	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	429a      	cmp	r2, r3
 8006704:	f43f af48 	beq.w	8006598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3770      	adds	r7, #112	; 0x70
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006718:	4904      	ldr	r1, [pc, #16]	; (800672c <MX_FATFS_Init+0x18>)
 800671a:	4805      	ldr	r0, [pc, #20]	; (8006730 <MX_FATFS_Init+0x1c>)
 800671c:	f000 f8b0 	bl	8006880 <FATFS_LinkDriver>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	4b03      	ldr	r3, [pc, #12]	; (8006734 <MX_FATFS_Init+0x20>)
 8006726:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006728:	bf00      	nop
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20010a74 	.word	0x20010a74
 8006730:	20002ba0 	.word	0x20002ba0
 8006734:	20010a70 	.word	0x20010a70

08006738 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <USER_initialize+0x24>)
 8006744:	2201      	movs	r2, #1
 8006746:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <USER_initialize+0x24>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20002b9d 	.word	0x20002b9d

08006760 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <USER_status+0x24>)
 800676c:	2201      	movs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <USER_status+0x24>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20002b9d 	.word	0x20002b9d

08006788 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006798:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80067b6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	603a      	str	r2, [r7, #0]
 80067ce:	71fb      	strb	r3, [r7, #7]
 80067d0:	460b      	mov	r3, r1
 80067d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
    return res;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80067fe:	4b1f      	ldr	r3, [pc, #124]	; (800687c <FATFS_LinkDriverEx+0x94>)
 8006800:	7a5b      	ldrb	r3, [r3, #9]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d131      	bne.n	800686c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006808:	4b1c      	ldr	r3, [pc, #112]	; (800687c <FATFS_LinkDriverEx+0x94>)
 800680a:	7a5b      	ldrb	r3, [r3, #9]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	4b1a      	ldr	r3, [pc, #104]	; (800687c <FATFS_LinkDriverEx+0x94>)
 8006812:	2100      	movs	r1, #0
 8006814:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006816:	4b19      	ldr	r3, [pc, #100]	; (800687c <FATFS_LinkDriverEx+0x94>)
 8006818:	7a5b      	ldrb	r3, [r3, #9]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	4a17      	ldr	r2, [pc, #92]	; (800687c <FATFS_LinkDriverEx+0x94>)
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <FATFS_LinkDriverEx+0x94>)
 8006828:	7a5b      	ldrb	r3, [r3, #9]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	4b13      	ldr	r3, [pc, #76]	; (800687c <FATFS_LinkDriverEx+0x94>)
 8006830:	4413      	add	r3, r2
 8006832:	79fa      	ldrb	r2, [r7, #7]
 8006834:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <FATFS_LinkDriverEx+0x94>)
 8006838:	7a5b      	ldrb	r3, [r3, #9]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	b2d1      	uxtb	r1, r2
 8006840:	4a0e      	ldr	r2, [pc, #56]	; (800687c <FATFS_LinkDriverEx+0x94>)
 8006842:	7251      	strb	r1, [r2, #9]
 8006844:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006846:	7dbb      	ldrb	r3, [r7, #22]
 8006848:	3330      	adds	r3, #48	; 0x30
 800684a:	b2da      	uxtb	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	3301      	adds	r3, #1
 8006854:	223a      	movs	r2, #58	; 0x3a
 8006856:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3302      	adds	r3, #2
 800685c:	222f      	movs	r2, #47	; 0x2f
 800685e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3303      	adds	r3, #3
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
}
 800686e:	4618      	mov	r0, r3
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	20010a78 	.word	0x20010a78

08006880 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800688a:	2200      	movs	r2, #0
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff ffaa 	bl	80067e8 <FATFS_LinkDriverEx>
 8006894:	4603      	mov	r3, r0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <__cvt>:
 800689e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a2:	ec55 4b10 	vmov	r4, r5, d0
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	460e      	mov	r6, r1
 80068aa:	4619      	mov	r1, r3
 80068ac:	462b      	mov	r3, r5
 80068ae:	bfbb      	ittet	lt
 80068b0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068b4:	461d      	movlt	r5, r3
 80068b6:	2300      	movge	r3, #0
 80068b8:	232d      	movlt	r3, #45	; 0x2d
 80068ba:	700b      	strb	r3, [r1, #0]
 80068bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068c2:	4691      	mov	r9, r2
 80068c4:	f023 0820 	bic.w	r8, r3, #32
 80068c8:	bfbc      	itt	lt
 80068ca:	4622      	movlt	r2, r4
 80068cc:	4614      	movlt	r4, r2
 80068ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068d2:	d005      	beq.n	80068e0 <__cvt+0x42>
 80068d4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068d8:	d100      	bne.n	80068dc <__cvt+0x3e>
 80068da:	3601      	adds	r6, #1
 80068dc:	2102      	movs	r1, #2
 80068de:	e000      	b.n	80068e2 <__cvt+0x44>
 80068e0:	2103      	movs	r1, #3
 80068e2:	ab03      	add	r3, sp, #12
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	ab02      	add	r3, sp, #8
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	ec45 4b10 	vmov	d0, r4, r5
 80068ee:	4653      	mov	r3, sl
 80068f0:	4632      	mov	r2, r6
 80068f2:	f001 ff11 	bl	8008718 <_dtoa_r>
 80068f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068fa:	4607      	mov	r7, r0
 80068fc:	d102      	bne.n	8006904 <__cvt+0x66>
 80068fe:	f019 0f01 	tst.w	r9, #1
 8006902:	d022      	beq.n	800694a <__cvt+0xac>
 8006904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006908:	eb07 0906 	add.w	r9, r7, r6
 800690c:	d110      	bne.n	8006930 <__cvt+0x92>
 800690e:	783b      	ldrb	r3, [r7, #0]
 8006910:	2b30      	cmp	r3, #48	; 0x30
 8006912:	d10a      	bne.n	800692a <__cvt+0x8c>
 8006914:	2200      	movs	r2, #0
 8006916:	2300      	movs	r3, #0
 8006918:	4620      	mov	r0, r4
 800691a:	4629      	mov	r1, r5
 800691c:	f7fa f8f4 	bl	8000b08 <__aeabi_dcmpeq>
 8006920:	b918      	cbnz	r0, 800692a <__cvt+0x8c>
 8006922:	f1c6 0601 	rsb	r6, r6, #1
 8006926:	f8ca 6000 	str.w	r6, [sl]
 800692a:	f8da 3000 	ldr.w	r3, [sl]
 800692e:	4499      	add	r9, r3
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	4620      	mov	r0, r4
 8006936:	4629      	mov	r1, r5
 8006938:	f7fa f8e6 	bl	8000b08 <__aeabi_dcmpeq>
 800693c:	b108      	cbz	r0, 8006942 <__cvt+0xa4>
 800693e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006942:	2230      	movs	r2, #48	; 0x30
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	454b      	cmp	r3, r9
 8006948:	d307      	bcc.n	800695a <__cvt+0xbc>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800694e:	1bdb      	subs	r3, r3, r7
 8006950:	4638      	mov	r0, r7
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	b004      	add	sp, #16
 8006956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695a:	1c59      	adds	r1, r3, #1
 800695c:	9103      	str	r1, [sp, #12]
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	e7f0      	b.n	8006944 <__cvt+0xa6>

08006962 <__exponent>:
 8006962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006964:	4603      	mov	r3, r0
 8006966:	2900      	cmp	r1, #0
 8006968:	bfb8      	it	lt
 800696a:	4249      	neglt	r1, r1
 800696c:	f803 2b02 	strb.w	r2, [r3], #2
 8006970:	bfb4      	ite	lt
 8006972:	222d      	movlt	r2, #45	; 0x2d
 8006974:	222b      	movge	r2, #43	; 0x2b
 8006976:	2909      	cmp	r1, #9
 8006978:	7042      	strb	r2, [r0, #1]
 800697a:	dd2a      	ble.n	80069d2 <__exponent+0x70>
 800697c:	f10d 0207 	add.w	r2, sp, #7
 8006980:	4617      	mov	r7, r2
 8006982:	260a      	movs	r6, #10
 8006984:	4694      	mov	ip, r2
 8006986:	fb91 f5f6 	sdiv	r5, r1, r6
 800698a:	fb06 1415 	mls	r4, r6, r5, r1
 800698e:	3430      	adds	r4, #48	; 0x30
 8006990:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006994:	460c      	mov	r4, r1
 8006996:	2c63      	cmp	r4, #99	; 0x63
 8006998:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800699c:	4629      	mov	r1, r5
 800699e:	dcf1      	bgt.n	8006984 <__exponent+0x22>
 80069a0:	3130      	adds	r1, #48	; 0x30
 80069a2:	f1ac 0402 	sub.w	r4, ip, #2
 80069a6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80069aa:	1c41      	adds	r1, r0, #1
 80069ac:	4622      	mov	r2, r4
 80069ae:	42ba      	cmp	r2, r7
 80069b0:	d30a      	bcc.n	80069c8 <__exponent+0x66>
 80069b2:	f10d 0209 	add.w	r2, sp, #9
 80069b6:	eba2 020c 	sub.w	r2, r2, ip
 80069ba:	42bc      	cmp	r4, r7
 80069bc:	bf88      	it	hi
 80069be:	2200      	movhi	r2, #0
 80069c0:	4413      	add	r3, r2
 80069c2:	1a18      	subs	r0, r3, r0
 80069c4:	b003      	add	sp, #12
 80069c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80069cc:	f801 5f01 	strb.w	r5, [r1, #1]!
 80069d0:	e7ed      	b.n	80069ae <__exponent+0x4c>
 80069d2:	2330      	movs	r3, #48	; 0x30
 80069d4:	3130      	adds	r1, #48	; 0x30
 80069d6:	7083      	strb	r3, [r0, #2]
 80069d8:	70c1      	strb	r1, [r0, #3]
 80069da:	1d03      	adds	r3, r0, #4
 80069dc:	e7f1      	b.n	80069c2 <__exponent+0x60>
	...

080069e0 <_printf_float>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	ed2d 8b02 	vpush	{d8}
 80069e8:	b08d      	sub	sp, #52	; 0x34
 80069ea:	460c      	mov	r4, r1
 80069ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069f0:	4616      	mov	r6, r2
 80069f2:	461f      	mov	r7, r3
 80069f4:	4605      	mov	r5, r0
 80069f6:	f001 fdb7 	bl	8008568 <_localeconv_r>
 80069fa:	f8d0 a000 	ldr.w	sl, [r0]
 80069fe:	4650      	mov	r0, sl
 8006a00:	f7f9 fc56 	bl	80002b0 <strlen>
 8006a04:	2300      	movs	r3, #0
 8006a06:	930a      	str	r3, [sp, #40]	; 0x28
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	9305      	str	r3, [sp, #20]
 8006a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a14:	3307      	adds	r3, #7
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	f103 0208 	add.w	r2, r3, #8
 8006a1e:	f8c8 2000 	str.w	r2, [r8]
 8006a22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a2a:	9307      	str	r3, [sp, #28]
 8006a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a30:	ee08 0a10 	vmov	s16, r0
 8006a34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a3c:	4b9e      	ldr	r3, [pc, #632]	; (8006cb8 <_printf_float+0x2d8>)
 8006a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a42:	f7fa f893 	bl	8000b6c <__aeabi_dcmpun>
 8006a46:	bb88      	cbnz	r0, 8006aac <_printf_float+0xcc>
 8006a48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a4c:	4b9a      	ldr	r3, [pc, #616]	; (8006cb8 <_printf_float+0x2d8>)
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a52:	f7fa f86d 	bl	8000b30 <__aeabi_dcmple>
 8006a56:	bb48      	cbnz	r0, 8006aac <_printf_float+0xcc>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f85c 	bl	8000b1c <__aeabi_dcmplt>
 8006a64:	b110      	cbz	r0, 8006a6c <_printf_float+0x8c>
 8006a66:	232d      	movs	r3, #45	; 0x2d
 8006a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a6c:	4a93      	ldr	r2, [pc, #588]	; (8006cbc <_printf_float+0x2dc>)
 8006a6e:	4b94      	ldr	r3, [pc, #592]	; (8006cc0 <_printf_float+0x2e0>)
 8006a70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a74:	bf94      	ite	ls
 8006a76:	4690      	movls	r8, r2
 8006a78:	4698      	movhi	r8, r3
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	9b05      	ldr	r3, [sp, #20]
 8006a80:	f023 0304 	bic.w	r3, r3, #4
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	9700      	str	r7, [sp, #0]
 8006a8c:	4633      	mov	r3, r6
 8006a8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a90:	4621      	mov	r1, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f9da 	bl	8006e4c <_printf_common>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f040 8090 	bne.w	8006bbe <_printf_float+0x1de>
 8006a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa2:	b00d      	add	sp, #52	; 0x34
 8006aa4:	ecbd 8b02 	vpop	{d8}
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	4642      	mov	r2, r8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	f7fa f85a 	bl	8000b6c <__aeabi_dcmpun>
 8006ab8:	b140      	cbz	r0, 8006acc <_printf_float+0xec>
 8006aba:	464b      	mov	r3, r9
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfbc      	itt	lt
 8006ac0:	232d      	movlt	r3, #45	; 0x2d
 8006ac2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ac6:	4a7f      	ldr	r2, [pc, #508]	; (8006cc4 <_printf_float+0x2e4>)
 8006ac8:	4b7f      	ldr	r3, [pc, #508]	; (8006cc8 <_printf_float+0x2e8>)
 8006aca:	e7d1      	b.n	8006a70 <_printf_float+0x90>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ad2:	9206      	str	r2, [sp, #24]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	d13f      	bne.n	8006b58 <_printf_float+0x178>
 8006ad8:	2306      	movs	r3, #6
 8006ada:	6063      	str	r3, [r4, #4]
 8006adc:	9b05      	ldr	r3, [sp, #20]
 8006ade:	6861      	ldr	r1, [r4, #4]
 8006ae0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9303      	str	r3, [sp, #12]
 8006ae8:	ab0a      	add	r3, sp, #40	; 0x28
 8006aea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006aee:	ab09      	add	r3, sp, #36	; 0x24
 8006af0:	ec49 8b10 	vmov	d0, r8, r9
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	6022      	str	r2, [r4, #0]
 8006af8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006afc:	4628      	mov	r0, r5
 8006afe:	f7ff fece 	bl	800689e <__cvt>
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b06:	2b47      	cmp	r3, #71	; 0x47
 8006b08:	4680      	mov	r8, r0
 8006b0a:	d108      	bne.n	8006b1e <_printf_float+0x13e>
 8006b0c:	1cc8      	adds	r0, r1, #3
 8006b0e:	db02      	blt.n	8006b16 <_printf_float+0x136>
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	4299      	cmp	r1, r3
 8006b14:	dd41      	ble.n	8006b9a <_printf_float+0x1ba>
 8006b16:	f1ab 0302 	sub.w	r3, fp, #2
 8006b1a:	fa5f fb83 	uxtb.w	fp, r3
 8006b1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b22:	d820      	bhi.n	8006b66 <_printf_float+0x186>
 8006b24:	3901      	subs	r1, #1
 8006b26:	465a      	mov	r2, fp
 8006b28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006b2e:	f7ff ff18 	bl	8006962 <__exponent>
 8006b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b34:	1813      	adds	r3, r2, r0
 8006b36:	2a01      	cmp	r2, #1
 8006b38:	4681      	mov	r9, r0
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	dc02      	bgt.n	8006b44 <_printf_float+0x164>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	07d2      	lsls	r2, r2, #31
 8006b42:	d501      	bpl.n	8006b48 <_printf_float+0x168>
 8006b44:	3301      	adds	r3, #1
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d09c      	beq.n	8006a8a <_printf_float+0xaa>
 8006b50:	232d      	movs	r3, #45	; 0x2d
 8006b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b56:	e798      	b.n	8006a8a <_printf_float+0xaa>
 8006b58:	9a06      	ldr	r2, [sp, #24]
 8006b5a:	2a47      	cmp	r2, #71	; 0x47
 8006b5c:	d1be      	bne.n	8006adc <_printf_float+0xfc>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1bc      	bne.n	8006adc <_printf_float+0xfc>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7b9      	b.n	8006ada <_printf_float+0xfa>
 8006b66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b6a:	d118      	bne.n	8006b9e <_printf_float+0x1be>
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	dd0b      	ble.n	8006b8a <_printf_float+0x1aa>
 8006b72:	6121      	str	r1, [r4, #16]
 8006b74:	b913      	cbnz	r3, 8006b7c <_printf_float+0x19c>
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	07d0      	lsls	r0, r2, #31
 8006b7a:	d502      	bpl.n	8006b82 <_printf_float+0x1a2>
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	440b      	add	r3, r1
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b84:	f04f 0900 	mov.w	r9, #0
 8006b88:	e7de      	b.n	8006b48 <_printf_float+0x168>
 8006b8a:	b913      	cbnz	r3, 8006b92 <_printf_float+0x1b2>
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	07d2      	lsls	r2, r2, #31
 8006b90:	d501      	bpl.n	8006b96 <_printf_float+0x1b6>
 8006b92:	3302      	adds	r3, #2
 8006b94:	e7f4      	b.n	8006b80 <_printf_float+0x1a0>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e7f2      	b.n	8006b80 <_printf_float+0x1a0>
 8006b9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	db05      	blt.n	8006bb0 <_printf_float+0x1d0>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	6121      	str	r1, [r4, #16]
 8006ba8:	07d8      	lsls	r0, r3, #31
 8006baa:	d5ea      	bpl.n	8006b82 <_printf_float+0x1a2>
 8006bac:	1c4b      	adds	r3, r1, #1
 8006bae:	e7e7      	b.n	8006b80 <_printf_float+0x1a0>
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	bfd4      	ite	le
 8006bb4:	f1c1 0202 	rsble	r2, r1, #2
 8006bb8:	2201      	movgt	r2, #1
 8006bba:	4413      	add	r3, r2
 8006bbc:	e7e0      	b.n	8006b80 <_printf_float+0x1a0>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	055a      	lsls	r2, r3, #21
 8006bc2:	d407      	bmi.n	8006bd4 <_printf_float+0x1f4>
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d12c      	bne.n	8006c2c <_printf_float+0x24c>
 8006bd2:	e764      	b.n	8006a9e <_printf_float+0xbe>
 8006bd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bd8:	f240 80e0 	bls.w	8006d9c <_printf_float+0x3bc>
 8006bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006be0:	2200      	movs	r2, #0
 8006be2:	2300      	movs	r3, #0
 8006be4:	f7f9 ff90 	bl	8000b08 <__aeabi_dcmpeq>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d034      	beq.n	8006c56 <_printf_float+0x276>
 8006bec:	4a37      	ldr	r2, [pc, #220]	; (8006ccc <_printf_float+0x2ec>)
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af51 	beq.w	8006a9e <_printf_float+0xbe>
 8006bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c00:	429a      	cmp	r2, r3
 8006c02:	db02      	blt.n	8006c0a <_printf_float+0x22a>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07d8      	lsls	r0, r3, #31
 8006c08:	d510      	bpl.n	8006c2c <_printf_float+0x24c>
 8006c0a:	ee18 3a10 	vmov	r3, s16
 8006c0e:	4652      	mov	r2, sl
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f af41 	beq.w	8006a9e <_printf_float+0xbe>
 8006c1c:	f04f 0800 	mov.w	r8, #0
 8006c20:	f104 091a 	add.w	r9, r4, #26
 8006c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4543      	cmp	r3, r8
 8006c2a:	dc09      	bgt.n	8006c40 <_printf_float+0x260>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	f100 8107 	bmi.w	8006e42 <_printf_float+0x462>
 8006c34:	68e0      	ldr	r0, [r4, #12]
 8006c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c38:	4298      	cmp	r0, r3
 8006c3a:	bfb8      	it	lt
 8006c3c:	4618      	movlt	r0, r3
 8006c3e:	e730      	b.n	8006aa2 <_printf_float+0xc2>
 8006c40:	2301      	movs	r3, #1
 8006c42:	464a      	mov	r2, r9
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f43f af27 	beq.w	8006a9e <_printf_float+0xbe>
 8006c50:	f108 0801 	add.w	r8, r8, #1
 8006c54:	e7e6      	b.n	8006c24 <_printf_float+0x244>
 8006c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dc39      	bgt.n	8006cd0 <_printf_float+0x2f0>
 8006c5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ccc <_printf_float+0x2ec>)
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4631      	mov	r1, r6
 8006c62:	4628      	mov	r0, r5
 8006c64:	47b8      	blx	r7
 8006c66:	3001      	adds	r0, #1
 8006c68:	f43f af19 	beq.w	8006a9e <_printf_float+0xbe>
 8006c6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c70:	4313      	orrs	r3, r2
 8006c72:	d102      	bne.n	8006c7a <_printf_float+0x29a>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	07d9      	lsls	r1, r3, #31
 8006c78:	d5d8      	bpl.n	8006c2c <_printf_float+0x24c>
 8006c7a:	ee18 3a10 	vmov	r3, s16
 8006c7e:	4652      	mov	r2, sl
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b8      	blx	r7
 8006c86:	3001      	adds	r0, #1
 8006c88:	f43f af09 	beq.w	8006a9e <_printf_float+0xbe>
 8006c8c:	f04f 0900 	mov.w	r9, #0
 8006c90:	f104 0a1a 	add.w	sl, r4, #26
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	425b      	negs	r3, r3
 8006c98:	454b      	cmp	r3, r9
 8006c9a:	dc01      	bgt.n	8006ca0 <_printf_float+0x2c0>
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9e:	e792      	b.n	8006bc6 <_printf_float+0x1e6>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f aef7 	beq.w	8006a9e <_printf_float+0xbe>
 8006cb0:	f109 0901 	add.w	r9, r9, #1
 8006cb4:	e7ee      	b.n	8006c94 <_printf_float+0x2b4>
 8006cb6:	bf00      	nop
 8006cb8:	7fefffff 	.word	0x7fefffff
 8006cbc:	0800b5d4 	.word	0x0800b5d4
 8006cc0:	0800b5d8 	.word	0x0800b5d8
 8006cc4:	0800b5dc 	.word	0x0800b5dc
 8006cc8:	0800b5e0 	.word	0x0800b5e0
 8006ccc:	0800b5e4 	.word	0x0800b5e4
 8006cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	bfa8      	it	ge
 8006cd8:	461a      	movge	r2, r3
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	4691      	mov	r9, r2
 8006cde:	dc37      	bgt.n	8006d50 <_printf_float+0x370>
 8006ce0:	f04f 0b00 	mov.w	fp, #0
 8006ce4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ce8:	f104 021a 	add.w	r2, r4, #26
 8006cec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cee:	9305      	str	r3, [sp, #20]
 8006cf0:	eba3 0309 	sub.w	r3, r3, r9
 8006cf4:	455b      	cmp	r3, fp
 8006cf6:	dc33      	bgt.n	8006d60 <_printf_float+0x380>
 8006cf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	db3b      	blt.n	8006d78 <_printf_float+0x398>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07da      	lsls	r2, r3, #31
 8006d04:	d438      	bmi.n	8006d78 <_printf_float+0x398>
 8006d06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d0a:	eba2 0903 	sub.w	r9, r2, r3
 8006d0e:	9b05      	ldr	r3, [sp, #20]
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	4591      	cmp	r9, r2
 8006d14:	bfa8      	it	ge
 8006d16:	4691      	movge	r9, r2
 8006d18:	f1b9 0f00 	cmp.w	r9, #0
 8006d1c:	dc35      	bgt.n	8006d8a <_printf_float+0x3aa>
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d26:	f104 0a1a 	add.w	sl, r4, #26
 8006d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	eba3 0309 	sub.w	r3, r3, r9
 8006d34:	4543      	cmp	r3, r8
 8006d36:	f77f af79 	ble.w	8006c2c <_printf_float+0x24c>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f aeaa 	beq.w	8006a9e <_printf_float+0xbe>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	e7ec      	b.n	8006d2a <_printf_float+0x34a>
 8006d50:	4613      	mov	r3, r2
 8006d52:	4631      	mov	r1, r6
 8006d54:	4642      	mov	r2, r8
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d1c0      	bne.n	8006ce0 <_printf_float+0x300>
 8006d5e:	e69e      	b.n	8006a9e <_printf_float+0xbe>
 8006d60:	2301      	movs	r3, #1
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	9205      	str	r2, [sp, #20]
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f43f ae97 	beq.w	8006a9e <_printf_float+0xbe>
 8006d70:	9a05      	ldr	r2, [sp, #20]
 8006d72:	f10b 0b01 	add.w	fp, fp, #1
 8006d76:	e7b9      	b.n	8006cec <_printf_float+0x30c>
 8006d78:	ee18 3a10 	vmov	r3, s16
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	d1be      	bne.n	8006d06 <_printf_float+0x326>
 8006d88:	e689      	b.n	8006a9e <_printf_float+0xbe>
 8006d8a:	9a05      	ldr	r2, [sp, #20]
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	4442      	add	r2, r8
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	d1c1      	bne.n	8006d1e <_printf_float+0x33e>
 8006d9a:	e680      	b.n	8006a9e <_printf_float+0xbe>
 8006d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d9e:	2a01      	cmp	r2, #1
 8006da0:	dc01      	bgt.n	8006da6 <_printf_float+0x3c6>
 8006da2:	07db      	lsls	r3, r3, #31
 8006da4:	d53a      	bpl.n	8006e1c <_printf_float+0x43c>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4642      	mov	r2, r8
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f ae74 	beq.w	8006a9e <_printf_float+0xbe>
 8006db6:	ee18 3a10 	vmov	r3, s16
 8006dba:	4652      	mov	r2, sl
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f ae6b 	beq.w	8006a9e <_printf_float+0xbe>
 8006dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006dd4:	f7f9 fe98 	bl	8000b08 <__aeabi_dcmpeq>
 8006dd8:	b9d8      	cbnz	r0, 8006e12 <_printf_float+0x432>
 8006dda:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006dde:	f108 0201 	add.w	r2, r8, #1
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	d10e      	bne.n	8006e0a <_printf_float+0x42a>
 8006dec:	e657      	b.n	8006a9e <_printf_float+0xbe>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4652      	mov	r2, sl
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f ae50 	beq.w	8006a9e <_printf_float+0xbe>
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e04:	3b01      	subs	r3, #1
 8006e06:	4543      	cmp	r3, r8
 8006e08:	dcf1      	bgt.n	8006dee <_printf_float+0x40e>
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e10:	e6da      	b.n	8006bc8 <_printf_float+0x1e8>
 8006e12:	f04f 0800 	mov.w	r8, #0
 8006e16:	f104 0a1a 	add.w	sl, r4, #26
 8006e1a:	e7f2      	b.n	8006e02 <_printf_float+0x422>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4642      	mov	r2, r8
 8006e20:	e7df      	b.n	8006de2 <_printf_float+0x402>
 8006e22:	2301      	movs	r3, #1
 8006e24:	464a      	mov	r2, r9
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f ae36 	beq.w	8006a9e <_printf_float+0xbe>
 8006e32:	f108 0801 	add.w	r8, r8, #1
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e3a:	1a5b      	subs	r3, r3, r1
 8006e3c:	4543      	cmp	r3, r8
 8006e3e:	dcf0      	bgt.n	8006e22 <_printf_float+0x442>
 8006e40:	e6f8      	b.n	8006c34 <_printf_float+0x254>
 8006e42:	f04f 0800 	mov.w	r8, #0
 8006e46:	f104 0919 	add.w	r9, r4, #25
 8006e4a:	e7f4      	b.n	8006e36 <_printf_float+0x456>

08006e4c <_printf_common>:
 8006e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e50:	4616      	mov	r6, r2
 8006e52:	4699      	mov	r9, r3
 8006e54:	688a      	ldr	r2, [r1, #8]
 8006e56:	690b      	ldr	r3, [r1, #16]
 8006e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	bfb8      	it	lt
 8006e60:	4613      	movlt	r3, r2
 8006e62:	6033      	str	r3, [r6, #0]
 8006e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e68:	4607      	mov	r7, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	b10a      	cbz	r2, 8006e72 <_printf_common+0x26>
 8006e6e:	3301      	adds	r3, #1
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	0699      	lsls	r1, r3, #26
 8006e76:	bf42      	ittt	mi
 8006e78:	6833      	ldrmi	r3, [r6, #0]
 8006e7a:	3302      	addmi	r3, #2
 8006e7c:	6033      	strmi	r3, [r6, #0]
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	f015 0506 	ands.w	r5, r5, #6
 8006e84:	d106      	bne.n	8006e94 <_printf_common+0x48>
 8006e86:	f104 0a19 	add.w	sl, r4, #25
 8006e8a:	68e3      	ldr	r3, [r4, #12]
 8006e8c:	6832      	ldr	r2, [r6, #0]
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	42ab      	cmp	r3, r5
 8006e92:	dc26      	bgt.n	8006ee2 <_printf_common+0x96>
 8006e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e98:	1e13      	subs	r3, r2, #0
 8006e9a:	6822      	ldr	r2, [r4, #0]
 8006e9c:	bf18      	it	ne
 8006e9e:	2301      	movne	r3, #1
 8006ea0:	0692      	lsls	r2, r2, #26
 8006ea2:	d42b      	bmi.n	8006efc <_printf_common+0xb0>
 8006ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4638      	mov	r0, r7
 8006eac:	47c0      	blx	r8
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d01e      	beq.n	8006ef0 <_printf_common+0xa4>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	6922      	ldr	r2, [r4, #16]
 8006eb6:	f003 0306 	and.w	r3, r3, #6
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	bf02      	ittt	eq
 8006ebe:	68e5      	ldreq	r5, [r4, #12]
 8006ec0:	6833      	ldreq	r3, [r6, #0]
 8006ec2:	1aed      	subeq	r5, r5, r3
 8006ec4:	68a3      	ldr	r3, [r4, #8]
 8006ec6:	bf0c      	ite	eq
 8006ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ecc:	2500      	movne	r5, #0
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	bfc4      	itt	gt
 8006ed2:	1a9b      	subgt	r3, r3, r2
 8006ed4:	18ed      	addgt	r5, r5, r3
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	341a      	adds	r4, #26
 8006eda:	42b5      	cmp	r5, r6
 8006edc:	d11a      	bne.n	8006f14 <_printf_common+0xc8>
 8006ede:	2000      	movs	r0, #0
 8006ee0:	e008      	b.n	8006ef4 <_printf_common+0xa8>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4652      	mov	r2, sl
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	4638      	mov	r0, r7
 8006eea:	47c0      	blx	r8
 8006eec:	3001      	adds	r0, #1
 8006eee:	d103      	bne.n	8006ef8 <_printf_common+0xac>
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef8:	3501      	adds	r5, #1
 8006efa:	e7c6      	b.n	8006e8a <_printf_common+0x3e>
 8006efc:	18e1      	adds	r1, r4, r3
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	2030      	movs	r0, #48	; 0x30
 8006f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f06:	4422      	add	r2, r4
 8006f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f10:	3302      	adds	r3, #2
 8006f12:	e7c7      	b.n	8006ea4 <_printf_common+0x58>
 8006f14:	2301      	movs	r3, #1
 8006f16:	4622      	mov	r2, r4
 8006f18:	4649      	mov	r1, r9
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	47c0      	blx	r8
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d0e6      	beq.n	8006ef0 <_printf_common+0xa4>
 8006f22:	3601      	adds	r6, #1
 8006f24:	e7d9      	b.n	8006eda <_printf_common+0x8e>
	...

08006f28 <_printf_i>:
 8006f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f2c:	7e0f      	ldrb	r7, [r1, #24]
 8006f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f30:	2f78      	cmp	r7, #120	; 0x78
 8006f32:	4691      	mov	r9, r2
 8006f34:	4680      	mov	r8, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	469a      	mov	sl, r3
 8006f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f3e:	d807      	bhi.n	8006f50 <_printf_i+0x28>
 8006f40:	2f62      	cmp	r7, #98	; 0x62
 8006f42:	d80a      	bhi.n	8006f5a <_printf_i+0x32>
 8006f44:	2f00      	cmp	r7, #0
 8006f46:	f000 80d4 	beq.w	80070f2 <_printf_i+0x1ca>
 8006f4a:	2f58      	cmp	r7, #88	; 0x58
 8006f4c:	f000 80c0 	beq.w	80070d0 <_printf_i+0x1a8>
 8006f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f58:	e03a      	b.n	8006fd0 <_printf_i+0xa8>
 8006f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f5e:	2b15      	cmp	r3, #21
 8006f60:	d8f6      	bhi.n	8006f50 <_printf_i+0x28>
 8006f62:	a101      	add	r1, pc, #4	; (adr r1, 8006f68 <_printf_i+0x40>)
 8006f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f68:	08006fc1 	.word	0x08006fc1
 8006f6c:	08006fd5 	.word	0x08006fd5
 8006f70:	08006f51 	.word	0x08006f51
 8006f74:	08006f51 	.word	0x08006f51
 8006f78:	08006f51 	.word	0x08006f51
 8006f7c:	08006f51 	.word	0x08006f51
 8006f80:	08006fd5 	.word	0x08006fd5
 8006f84:	08006f51 	.word	0x08006f51
 8006f88:	08006f51 	.word	0x08006f51
 8006f8c:	08006f51 	.word	0x08006f51
 8006f90:	08006f51 	.word	0x08006f51
 8006f94:	080070d9 	.word	0x080070d9
 8006f98:	08007001 	.word	0x08007001
 8006f9c:	08007093 	.word	0x08007093
 8006fa0:	08006f51 	.word	0x08006f51
 8006fa4:	08006f51 	.word	0x08006f51
 8006fa8:	080070fb 	.word	0x080070fb
 8006fac:	08006f51 	.word	0x08006f51
 8006fb0:	08007001 	.word	0x08007001
 8006fb4:	08006f51 	.word	0x08006f51
 8006fb8:	08006f51 	.word	0x08006f51
 8006fbc:	0800709b 	.word	0x0800709b
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	1d1a      	adds	r2, r3, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	602a      	str	r2, [r5, #0]
 8006fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e09f      	b.n	8007114 <_printf_i+0x1ec>
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	682b      	ldr	r3, [r5, #0]
 8006fd8:	0607      	lsls	r7, r0, #24
 8006fda:	f103 0104 	add.w	r1, r3, #4
 8006fde:	6029      	str	r1, [r5, #0]
 8006fe0:	d501      	bpl.n	8006fe6 <_printf_i+0xbe>
 8006fe2:	681e      	ldr	r6, [r3, #0]
 8006fe4:	e003      	b.n	8006fee <_printf_i+0xc6>
 8006fe6:	0646      	lsls	r6, r0, #25
 8006fe8:	d5fb      	bpl.n	8006fe2 <_printf_i+0xba>
 8006fea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	da03      	bge.n	8006ffa <_printf_i+0xd2>
 8006ff2:	232d      	movs	r3, #45	; 0x2d
 8006ff4:	4276      	negs	r6, r6
 8006ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ffa:	485a      	ldr	r0, [pc, #360]	; (8007164 <_printf_i+0x23c>)
 8006ffc:	230a      	movs	r3, #10
 8006ffe:	e012      	b.n	8007026 <_printf_i+0xfe>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	6820      	ldr	r0, [r4, #0]
 8007004:	1d19      	adds	r1, r3, #4
 8007006:	6029      	str	r1, [r5, #0]
 8007008:	0605      	lsls	r5, r0, #24
 800700a:	d501      	bpl.n	8007010 <_printf_i+0xe8>
 800700c:	681e      	ldr	r6, [r3, #0]
 800700e:	e002      	b.n	8007016 <_printf_i+0xee>
 8007010:	0641      	lsls	r1, r0, #25
 8007012:	d5fb      	bpl.n	800700c <_printf_i+0xe4>
 8007014:	881e      	ldrh	r6, [r3, #0]
 8007016:	4853      	ldr	r0, [pc, #332]	; (8007164 <_printf_i+0x23c>)
 8007018:	2f6f      	cmp	r7, #111	; 0x6f
 800701a:	bf0c      	ite	eq
 800701c:	2308      	moveq	r3, #8
 800701e:	230a      	movne	r3, #10
 8007020:	2100      	movs	r1, #0
 8007022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007026:	6865      	ldr	r5, [r4, #4]
 8007028:	60a5      	str	r5, [r4, #8]
 800702a:	2d00      	cmp	r5, #0
 800702c:	bfa2      	ittt	ge
 800702e:	6821      	ldrge	r1, [r4, #0]
 8007030:	f021 0104 	bicge.w	r1, r1, #4
 8007034:	6021      	strge	r1, [r4, #0]
 8007036:	b90e      	cbnz	r6, 800703c <_printf_i+0x114>
 8007038:	2d00      	cmp	r5, #0
 800703a:	d04b      	beq.n	80070d4 <_printf_i+0x1ac>
 800703c:	4615      	mov	r5, r2
 800703e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007042:	fb03 6711 	mls	r7, r3, r1, r6
 8007046:	5dc7      	ldrb	r7, [r0, r7]
 8007048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800704c:	4637      	mov	r7, r6
 800704e:	42bb      	cmp	r3, r7
 8007050:	460e      	mov	r6, r1
 8007052:	d9f4      	bls.n	800703e <_printf_i+0x116>
 8007054:	2b08      	cmp	r3, #8
 8007056:	d10b      	bne.n	8007070 <_printf_i+0x148>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07de      	lsls	r6, r3, #31
 800705c:	d508      	bpl.n	8007070 <_printf_i+0x148>
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	4299      	cmp	r1, r3
 8007064:	bfde      	ittt	le
 8007066:	2330      	movle	r3, #48	; 0x30
 8007068:	f805 3c01 	strble.w	r3, [r5, #-1]
 800706c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007070:	1b52      	subs	r2, r2, r5
 8007072:	6122      	str	r2, [r4, #16]
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	464b      	mov	r3, r9
 800707a:	aa03      	add	r2, sp, #12
 800707c:	4621      	mov	r1, r4
 800707e:	4640      	mov	r0, r8
 8007080:	f7ff fee4 	bl	8006e4c <_printf_common>
 8007084:	3001      	adds	r0, #1
 8007086:	d14a      	bne.n	800711e <_printf_i+0x1f6>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800708c:	b004      	add	sp, #16
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	f043 0320 	orr.w	r3, r3, #32
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	4833      	ldr	r0, [pc, #204]	; (8007168 <_printf_i+0x240>)
 800709c:	2778      	movs	r7, #120	; 0x78
 800709e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	6829      	ldr	r1, [r5, #0]
 80070a6:	061f      	lsls	r7, r3, #24
 80070a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80070ac:	d402      	bmi.n	80070b4 <_printf_i+0x18c>
 80070ae:	065f      	lsls	r7, r3, #25
 80070b0:	bf48      	it	mi
 80070b2:	b2b6      	uxthmi	r6, r6
 80070b4:	07df      	lsls	r7, r3, #31
 80070b6:	bf48      	it	mi
 80070b8:	f043 0320 	orrmi.w	r3, r3, #32
 80070bc:	6029      	str	r1, [r5, #0]
 80070be:	bf48      	it	mi
 80070c0:	6023      	strmi	r3, [r4, #0]
 80070c2:	b91e      	cbnz	r6, 80070cc <_printf_i+0x1a4>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	f023 0320 	bic.w	r3, r3, #32
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	2310      	movs	r3, #16
 80070ce:	e7a7      	b.n	8007020 <_printf_i+0xf8>
 80070d0:	4824      	ldr	r0, [pc, #144]	; (8007164 <_printf_i+0x23c>)
 80070d2:	e7e4      	b.n	800709e <_printf_i+0x176>
 80070d4:	4615      	mov	r5, r2
 80070d6:	e7bd      	b.n	8007054 <_printf_i+0x12c>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	6826      	ldr	r6, [r4, #0]
 80070dc:	6961      	ldr	r1, [r4, #20]
 80070de:	1d18      	adds	r0, r3, #4
 80070e0:	6028      	str	r0, [r5, #0]
 80070e2:	0635      	lsls	r5, r6, #24
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0x1c4>
 80070e8:	6019      	str	r1, [r3, #0]
 80070ea:	e002      	b.n	80070f2 <_printf_i+0x1ca>
 80070ec:	0670      	lsls	r0, r6, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0x1c0>
 80070f0:	8019      	strh	r1, [r3, #0]
 80070f2:	2300      	movs	r3, #0
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	4615      	mov	r5, r2
 80070f8:	e7bc      	b.n	8007074 <_printf_i+0x14c>
 80070fa:	682b      	ldr	r3, [r5, #0]
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	602a      	str	r2, [r5, #0]
 8007100:	681d      	ldr	r5, [r3, #0]
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	2100      	movs	r1, #0
 8007106:	4628      	mov	r0, r5
 8007108:	f7f9 f882 	bl	8000210 <memchr>
 800710c:	b108      	cbz	r0, 8007112 <_printf_i+0x1ea>
 800710e:	1b40      	subs	r0, r0, r5
 8007110:	6060      	str	r0, [r4, #4]
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	2300      	movs	r3, #0
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800711c:	e7aa      	b.n	8007074 <_printf_i+0x14c>
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	462a      	mov	r2, r5
 8007122:	4649      	mov	r1, r9
 8007124:	4640      	mov	r0, r8
 8007126:	47d0      	blx	sl
 8007128:	3001      	adds	r0, #1
 800712a:	d0ad      	beq.n	8007088 <_printf_i+0x160>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	079b      	lsls	r3, r3, #30
 8007130:	d413      	bmi.n	800715a <_printf_i+0x232>
 8007132:	68e0      	ldr	r0, [r4, #12]
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	4298      	cmp	r0, r3
 8007138:	bfb8      	it	lt
 800713a:	4618      	movlt	r0, r3
 800713c:	e7a6      	b.n	800708c <_printf_i+0x164>
 800713e:	2301      	movs	r3, #1
 8007140:	4632      	mov	r2, r6
 8007142:	4649      	mov	r1, r9
 8007144:	4640      	mov	r0, r8
 8007146:	47d0      	blx	sl
 8007148:	3001      	adds	r0, #1
 800714a:	d09d      	beq.n	8007088 <_printf_i+0x160>
 800714c:	3501      	adds	r5, #1
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	9903      	ldr	r1, [sp, #12]
 8007152:	1a5b      	subs	r3, r3, r1
 8007154:	42ab      	cmp	r3, r5
 8007156:	dcf2      	bgt.n	800713e <_printf_i+0x216>
 8007158:	e7eb      	b.n	8007132 <_printf_i+0x20a>
 800715a:	2500      	movs	r5, #0
 800715c:	f104 0619 	add.w	r6, r4, #25
 8007160:	e7f5      	b.n	800714e <_printf_i+0x226>
 8007162:	bf00      	nop
 8007164:	0800b5e6 	.word	0x0800b5e6
 8007168:	0800b5f7 	.word	0x0800b5f7

0800716c <_scanf_float>:
 800716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	b087      	sub	sp, #28
 8007172:	4617      	mov	r7, r2
 8007174:	9303      	str	r3, [sp, #12]
 8007176:	688b      	ldr	r3, [r1, #8]
 8007178:	1e5a      	subs	r2, r3, #1
 800717a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800717e:	bf83      	ittte	hi
 8007180:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007184:	195b      	addhi	r3, r3, r5
 8007186:	9302      	strhi	r3, [sp, #8]
 8007188:	2300      	movls	r3, #0
 800718a:	bf86      	itte	hi
 800718c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007190:	608b      	strhi	r3, [r1, #8]
 8007192:	9302      	strls	r3, [sp, #8]
 8007194:	680b      	ldr	r3, [r1, #0]
 8007196:	468b      	mov	fp, r1
 8007198:	2500      	movs	r5, #0
 800719a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800719e:	f84b 3b1c 	str.w	r3, [fp], #28
 80071a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071a6:	4680      	mov	r8, r0
 80071a8:	460c      	mov	r4, r1
 80071aa:	465e      	mov	r6, fp
 80071ac:	46aa      	mov	sl, r5
 80071ae:	46a9      	mov	r9, r5
 80071b0:	9501      	str	r5, [sp, #4]
 80071b2:	68a2      	ldr	r2, [r4, #8]
 80071b4:	b152      	cbz	r2, 80071cc <_scanf_float+0x60>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b4e      	cmp	r3, #78	; 0x4e
 80071bc:	d864      	bhi.n	8007288 <_scanf_float+0x11c>
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d83c      	bhi.n	800723c <_scanf_float+0xd0>
 80071c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80071c6:	b2c8      	uxtb	r0, r1
 80071c8:	280e      	cmp	r0, #14
 80071ca:	d93a      	bls.n	8007242 <_scanf_float+0xd6>
 80071cc:	f1b9 0f00 	cmp.w	r9, #0
 80071d0:	d003      	beq.n	80071da <_scanf_float+0x6e>
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80071de:	f1ba 0f01 	cmp.w	sl, #1
 80071e2:	f200 8113 	bhi.w	800740c <_scanf_float+0x2a0>
 80071e6:	455e      	cmp	r6, fp
 80071e8:	f200 8105 	bhi.w	80073f6 <_scanf_float+0x28a>
 80071ec:	2501      	movs	r5, #1
 80071ee:	4628      	mov	r0, r5
 80071f0:	b007      	add	sp, #28
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80071fa:	2a0d      	cmp	r2, #13
 80071fc:	d8e6      	bhi.n	80071cc <_scanf_float+0x60>
 80071fe:	a101      	add	r1, pc, #4	; (adr r1, 8007204 <_scanf_float+0x98>)
 8007200:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007204:	08007343 	.word	0x08007343
 8007208:	080071cd 	.word	0x080071cd
 800720c:	080071cd 	.word	0x080071cd
 8007210:	080071cd 	.word	0x080071cd
 8007214:	080073a3 	.word	0x080073a3
 8007218:	0800737b 	.word	0x0800737b
 800721c:	080071cd 	.word	0x080071cd
 8007220:	080071cd 	.word	0x080071cd
 8007224:	08007351 	.word	0x08007351
 8007228:	080071cd 	.word	0x080071cd
 800722c:	080071cd 	.word	0x080071cd
 8007230:	080071cd 	.word	0x080071cd
 8007234:	080071cd 	.word	0x080071cd
 8007238:	08007309 	.word	0x08007309
 800723c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007240:	e7db      	b.n	80071fa <_scanf_float+0x8e>
 8007242:	290e      	cmp	r1, #14
 8007244:	d8c2      	bhi.n	80071cc <_scanf_float+0x60>
 8007246:	a001      	add	r0, pc, #4	; (adr r0, 800724c <_scanf_float+0xe0>)
 8007248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800724c:	080072fb 	.word	0x080072fb
 8007250:	080071cd 	.word	0x080071cd
 8007254:	080072fb 	.word	0x080072fb
 8007258:	0800738f 	.word	0x0800738f
 800725c:	080071cd 	.word	0x080071cd
 8007260:	080072a9 	.word	0x080072a9
 8007264:	080072e5 	.word	0x080072e5
 8007268:	080072e5 	.word	0x080072e5
 800726c:	080072e5 	.word	0x080072e5
 8007270:	080072e5 	.word	0x080072e5
 8007274:	080072e5 	.word	0x080072e5
 8007278:	080072e5 	.word	0x080072e5
 800727c:	080072e5 	.word	0x080072e5
 8007280:	080072e5 	.word	0x080072e5
 8007284:	080072e5 	.word	0x080072e5
 8007288:	2b6e      	cmp	r3, #110	; 0x6e
 800728a:	d809      	bhi.n	80072a0 <_scanf_float+0x134>
 800728c:	2b60      	cmp	r3, #96	; 0x60
 800728e:	d8b2      	bhi.n	80071f6 <_scanf_float+0x8a>
 8007290:	2b54      	cmp	r3, #84	; 0x54
 8007292:	d077      	beq.n	8007384 <_scanf_float+0x218>
 8007294:	2b59      	cmp	r3, #89	; 0x59
 8007296:	d199      	bne.n	80071cc <_scanf_float+0x60>
 8007298:	2d07      	cmp	r5, #7
 800729a:	d197      	bne.n	80071cc <_scanf_float+0x60>
 800729c:	2508      	movs	r5, #8
 800729e:	e029      	b.n	80072f4 <_scanf_float+0x188>
 80072a0:	2b74      	cmp	r3, #116	; 0x74
 80072a2:	d06f      	beq.n	8007384 <_scanf_float+0x218>
 80072a4:	2b79      	cmp	r3, #121	; 0x79
 80072a6:	e7f6      	b.n	8007296 <_scanf_float+0x12a>
 80072a8:	6821      	ldr	r1, [r4, #0]
 80072aa:	05c8      	lsls	r0, r1, #23
 80072ac:	d51a      	bpl.n	80072e4 <_scanf_float+0x178>
 80072ae:	9b02      	ldr	r3, [sp, #8]
 80072b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80072b4:	6021      	str	r1, [r4, #0]
 80072b6:	f109 0901 	add.w	r9, r9, #1
 80072ba:	b11b      	cbz	r3, 80072c4 <_scanf_float+0x158>
 80072bc:	3b01      	subs	r3, #1
 80072be:	3201      	adds	r2, #1
 80072c0:	9302      	str	r3, [sp, #8]
 80072c2:	60a2      	str	r2, [r4, #8]
 80072c4:	68a3      	ldr	r3, [r4, #8]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	60a3      	str	r3, [r4, #8]
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	3301      	adds	r3, #1
 80072ce:	6123      	str	r3, [r4, #16]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	f340 8084 	ble.w	80073e4 <_scanf_float+0x278>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	3301      	adds	r3, #1
 80072e0:	603b      	str	r3, [r7, #0]
 80072e2:	e766      	b.n	80071b2 <_scanf_float+0x46>
 80072e4:	eb1a 0f05 	cmn.w	sl, r5
 80072e8:	f47f af70 	bne.w	80071cc <_scanf_float+0x60>
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80072f2:	6022      	str	r2, [r4, #0]
 80072f4:	f806 3b01 	strb.w	r3, [r6], #1
 80072f8:	e7e4      	b.n	80072c4 <_scanf_float+0x158>
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	0610      	lsls	r0, r2, #24
 80072fe:	f57f af65 	bpl.w	80071cc <_scanf_float+0x60>
 8007302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007306:	e7f4      	b.n	80072f2 <_scanf_float+0x186>
 8007308:	f1ba 0f00 	cmp.w	sl, #0
 800730c:	d10e      	bne.n	800732c <_scanf_float+0x1c0>
 800730e:	f1b9 0f00 	cmp.w	r9, #0
 8007312:	d10e      	bne.n	8007332 <_scanf_float+0x1c6>
 8007314:	6822      	ldr	r2, [r4, #0]
 8007316:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800731a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800731e:	d108      	bne.n	8007332 <_scanf_float+0x1c6>
 8007320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	f04f 0a01 	mov.w	sl, #1
 800732a:	e7e3      	b.n	80072f4 <_scanf_float+0x188>
 800732c:	f1ba 0f02 	cmp.w	sl, #2
 8007330:	d055      	beq.n	80073de <_scanf_float+0x272>
 8007332:	2d01      	cmp	r5, #1
 8007334:	d002      	beq.n	800733c <_scanf_float+0x1d0>
 8007336:	2d04      	cmp	r5, #4
 8007338:	f47f af48 	bne.w	80071cc <_scanf_float+0x60>
 800733c:	3501      	adds	r5, #1
 800733e:	b2ed      	uxtb	r5, r5
 8007340:	e7d8      	b.n	80072f4 <_scanf_float+0x188>
 8007342:	f1ba 0f01 	cmp.w	sl, #1
 8007346:	f47f af41 	bne.w	80071cc <_scanf_float+0x60>
 800734a:	f04f 0a02 	mov.w	sl, #2
 800734e:	e7d1      	b.n	80072f4 <_scanf_float+0x188>
 8007350:	b97d      	cbnz	r5, 8007372 <_scanf_float+0x206>
 8007352:	f1b9 0f00 	cmp.w	r9, #0
 8007356:	f47f af3c 	bne.w	80071d2 <_scanf_float+0x66>
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007360:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007364:	f47f af39 	bne.w	80071da <_scanf_float+0x6e>
 8007368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	2501      	movs	r5, #1
 8007370:	e7c0      	b.n	80072f4 <_scanf_float+0x188>
 8007372:	2d03      	cmp	r5, #3
 8007374:	d0e2      	beq.n	800733c <_scanf_float+0x1d0>
 8007376:	2d05      	cmp	r5, #5
 8007378:	e7de      	b.n	8007338 <_scanf_float+0x1cc>
 800737a:	2d02      	cmp	r5, #2
 800737c:	f47f af26 	bne.w	80071cc <_scanf_float+0x60>
 8007380:	2503      	movs	r5, #3
 8007382:	e7b7      	b.n	80072f4 <_scanf_float+0x188>
 8007384:	2d06      	cmp	r5, #6
 8007386:	f47f af21 	bne.w	80071cc <_scanf_float+0x60>
 800738a:	2507      	movs	r5, #7
 800738c:	e7b2      	b.n	80072f4 <_scanf_float+0x188>
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	0591      	lsls	r1, r2, #22
 8007392:	f57f af1b 	bpl.w	80071cc <_scanf_float+0x60>
 8007396:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	f8cd 9004 	str.w	r9, [sp, #4]
 80073a0:	e7a8      	b.n	80072f4 <_scanf_float+0x188>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80073a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80073ac:	d006      	beq.n	80073bc <_scanf_float+0x250>
 80073ae:	0550      	lsls	r0, r2, #21
 80073b0:	f57f af0c 	bpl.w	80071cc <_scanf_float+0x60>
 80073b4:	f1b9 0f00 	cmp.w	r9, #0
 80073b8:	f43f af0f 	beq.w	80071da <_scanf_float+0x6e>
 80073bc:	0591      	lsls	r1, r2, #22
 80073be:	bf58      	it	pl
 80073c0:	9901      	ldrpl	r1, [sp, #4]
 80073c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80073c6:	bf58      	it	pl
 80073c8:	eba9 0101 	subpl.w	r1, r9, r1
 80073cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80073d0:	bf58      	it	pl
 80073d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073d6:	6022      	str	r2, [r4, #0]
 80073d8:	f04f 0900 	mov.w	r9, #0
 80073dc:	e78a      	b.n	80072f4 <_scanf_float+0x188>
 80073de:	f04f 0a03 	mov.w	sl, #3
 80073e2:	e787      	b.n	80072f4 <_scanf_float+0x188>
 80073e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073e8:	4639      	mov	r1, r7
 80073ea:	4640      	mov	r0, r8
 80073ec:	4798      	blx	r3
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f43f aedf 	beq.w	80071b2 <_scanf_float+0x46>
 80073f4:	e6ea      	b.n	80071cc <_scanf_float+0x60>
 80073f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073fe:	463a      	mov	r2, r7
 8007400:	4640      	mov	r0, r8
 8007402:	4798      	blx	r3
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	3b01      	subs	r3, #1
 8007408:	6123      	str	r3, [r4, #16]
 800740a:	e6ec      	b.n	80071e6 <_scanf_float+0x7a>
 800740c:	1e6b      	subs	r3, r5, #1
 800740e:	2b06      	cmp	r3, #6
 8007410:	d825      	bhi.n	800745e <_scanf_float+0x2f2>
 8007412:	2d02      	cmp	r5, #2
 8007414:	d836      	bhi.n	8007484 <_scanf_float+0x318>
 8007416:	455e      	cmp	r6, fp
 8007418:	f67f aee8 	bls.w	80071ec <_scanf_float+0x80>
 800741c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007420:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007424:	463a      	mov	r2, r7
 8007426:	4640      	mov	r0, r8
 8007428:	4798      	blx	r3
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	3b01      	subs	r3, #1
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	e7f1      	b.n	8007416 <_scanf_float+0x2aa>
 8007432:	9802      	ldr	r0, [sp, #8]
 8007434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007438:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800743c:	9002      	str	r0, [sp, #8]
 800743e:	463a      	mov	r2, r7
 8007440:	4640      	mov	r0, r8
 8007442:	4798      	blx	r3
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	3b01      	subs	r3, #1
 8007448:	6123      	str	r3, [r4, #16]
 800744a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800744e:	fa5f fa8a 	uxtb.w	sl, sl
 8007452:	f1ba 0f02 	cmp.w	sl, #2
 8007456:	d1ec      	bne.n	8007432 <_scanf_float+0x2c6>
 8007458:	3d03      	subs	r5, #3
 800745a:	b2ed      	uxtb	r5, r5
 800745c:	1b76      	subs	r6, r6, r5
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	05da      	lsls	r2, r3, #23
 8007462:	d52f      	bpl.n	80074c4 <_scanf_float+0x358>
 8007464:	055b      	lsls	r3, r3, #21
 8007466:	d510      	bpl.n	800748a <_scanf_float+0x31e>
 8007468:	455e      	cmp	r6, fp
 800746a:	f67f aebf 	bls.w	80071ec <_scanf_float+0x80>
 800746e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007476:	463a      	mov	r2, r7
 8007478:	4640      	mov	r0, r8
 800747a:	4798      	blx	r3
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	3b01      	subs	r3, #1
 8007480:	6123      	str	r3, [r4, #16]
 8007482:	e7f1      	b.n	8007468 <_scanf_float+0x2fc>
 8007484:	46aa      	mov	sl, r5
 8007486:	9602      	str	r6, [sp, #8]
 8007488:	e7df      	b.n	800744a <_scanf_float+0x2de>
 800748a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	2965      	cmp	r1, #101	; 0x65
 8007492:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007496:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800749a:	6123      	str	r3, [r4, #16]
 800749c:	d00c      	beq.n	80074b8 <_scanf_float+0x34c>
 800749e:	2945      	cmp	r1, #69	; 0x45
 80074a0:	d00a      	beq.n	80074b8 <_scanf_float+0x34c>
 80074a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074a6:	463a      	mov	r2, r7
 80074a8:	4640      	mov	r0, r8
 80074aa:	4798      	blx	r3
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	1eb5      	subs	r5, r6, #2
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074bc:	463a      	mov	r2, r7
 80074be:	4640      	mov	r0, r8
 80074c0:	4798      	blx	r3
 80074c2:	462e      	mov	r6, r5
 80074c4:	6825      	ldr	r5, [r4, #0]
 80074c6:	f015 0510 	ands.w	r5, r5, #16
 80074ca:	d158      	bne.n	800757e <_scanf_float+0x412>
 80074cc:	7035      	strb	r5, [r6, #0]
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d11c      	bne.n	8007514 <_scanf_float+0x3a8>
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	454b      	cmp	r3, r9
 80074de:	eba3 0209 	sub.w	r2, r3, r9
 80074e2:	d124      	bne.n	800752e <_scanf_float+0x3c2>
 80074e4:	2200      	movs	r2, #0
 80074e6:	4659      	mov	r1, fp
 80074e8:	4640      	mov	r0, r8
 80074ea:	f000 ff0d 	bl	8008308 <_strtod_r>
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	6821      	ldr	r1, [r4, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f011 0f02 	tst.w	r1, #2
 80074f8:	ec57 6b10 	vmov	r6, r7, d0
 80074fc:	f103 0204 	add.w	r2, r3, #4
 8007500:	d020      	beq.n	8007544 <_scanf_float+0x3d8>
 8007502:	9903      	ldr	r1, [sp, #12]
 8007504:	600a      	str	r2, [r1, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	e9c3 6700 	strd	r6, r7, [r3]
 800750c:	68e3      	ldr	r3, [r4, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60e3      	str	r3, [r4, #12]
 8007512:	e66c      	b.n	80071ee <_scanf_float+0x82>
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0e4      	beq.n	80074e4 <_scanf_float+0x378>
 800751a:	9905      	ldr	r1, [sp, #20]
 800751c:	230a      	movs	r3, #10
 800751e:	462a      	mov	r2, r5
 8007520:	3101      	adds	r1, #1
 8007522:	4640      	mov	r0, r8
 8007524:	f000 ff78 	bl	8008418 <_strtol_r>
 8007528:	9b04      	ldr	r3, [sp, #16]
 800752a:	9e05      	ldr	r6, [sp, #20]
 800752c:	1ac2      	subs	r2, r0, r3
 800752e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007532:	429e      	cmp	r6, r3
 8007534:	bf28      	it	cs
 8007536:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800753a:	4912      	ldr	r1, [pc, #72]	; (8007584 <_scanf_float+0x418>)
 800753c:	4630      	mov	r0, r6
 800753e:	f000 f825 	bl	800758c <siprintf>
 8007542:	e7cf      	b.n	80074e4 <_scanf_float+0x378>
 8007544:	f011 0f04 	tst.w	r1, #4
 8007548:	9903      	ldr	r1, [sp, #12]
 800754a:	600a      	str	r2, [r1, #0]
 800754c:	d1db      	bne.n	8007506 <_scanf_float+0x39a>
 800754e:	f8d3 8000 	ldr.w	r8, [r3]
 8007552:	ee10 2a10 	vmov	r2, s0
 8007556:	ee10 0a10 	vmov	r0, s0
 800755a:	463b      	mov	r3, r7
 800755c:	4639      	mov	r1, r7
 800755e:	f7f9 fb05 	bl	8000b6c <__aeabi_dcmpun>
 8007562:	b128      	cbz	r0, 8007570 <_scanf_float+0x404>
 8007564:	4808      	ldr	r0, [pc, #32]	; (8007588 <_scanf_float+0x41c>)
 8007566:	f001 f847 	bl	80085f8 <nanf>
 800756a:	ed88 0a00 	vstr	s0, [r8]
 800756e:	e7cd      	b.n	800750c <_scanf_float+0x3a0>
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 fb58 	bl	8000c28 <__aeabi_d2f>
 8007578:	f8c8 0000 	str.w	r0, [r8]
 800757c:	e7c6      	b.n	800750c <_scanf_float+0x3a0>
 800757e:	2500      	movs	r5, #0
 8007580:	e635      	b.n	80071ee <_scanf_float+0x82>
 8007582:	bf00      	nop
 8007584:	0800b608 	.word	0x0800b608
 8007588:	0800b9f7 	.word	0x0800b9f7

0800758c <siprintf>:
 800758c:	b40e      	push	{r1, r2, r3}
 800758e:	b500      	push	{lr}
 8007590:	b09c      	sub	sp, #112	; 0x70
 8007592:	ab1d      	add	r3, sp, #116	; 0x74
 8007594:	9002      	str	r0, [sp, #8]
 8007596:	9006      	str	r0, [sp, #24]
 8007598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800759c:	4809      	ldr	r0, [pc, #36]	; (80075c4 <siprintf+0x38>)
 800759e:	9107      	str	r1, [sp, #28]
 80075a0:	9104      	str	r1, [sp, #16]
 80075a2:	4909      	ldr	r1, [pc, #36]	; (80075c8 <siprintf+0x3c>)
 80075a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a8:	9105      	str	r1, [sp, #20]
 80075aa:	6800      	ldr	r0, [r0, #0]
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	a902      	add	r1, sp, #8
 80075b0:	f002 fa56 	bl	8009a60 <_svfiprintf_r>
 80075b4:	9b02      	ldr	r3, [sp, #8]
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	b01c      	add	sp, #112	; 0x70
 80075bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075c0:	b003      	add	sp, #12
 80075c2:	4770      	bx	lr
 80075c4:	20002d78 	.word	0x20002d78
 80075c8:	ffff0208 	.word	0xffff0208

080075cc <std>:
 80075cc:	2300      	movs	r3, #0
 80075ce:	b510      	push	{r4, lr}
 80075d0:	4604      	mov	r4, r0
 80075d2:	e9c0 3300 	strd	r3, r3, [r0]
 80075d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075da:	6083      	str	r3, [r0, #8]
 80075dc:	8181      	strh	r1, [r0, #12]
 80075de:	6643      	str	r3, [r0, #100]	; 0x64
 80075e0:	81c2      	strh	r2, [r0, #14]
 80075e2:	6183      	str	r3, [r0, #24]
 80075e4:	4619      	mov	r1, r3
 80075e6:	2208      	movs	r2, #8
 80075e8:	305c      	adds	r0, #92	; 0x5c
 80075ea:	f000 ffb5 	bl	8008558 <memset>
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <std+0x38>)
 80075f0:	6263      	str	r3, [r4, #36]	; 0x24
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x3c>)
 80075f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <std+0x40>)
 80075f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <std+0x44>)
 80075fc:	6224      	str	r4, [r4, #32]
 80075fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007600:	bd10      	pop	{r4, pc}
 8007602:	bf00      	nop
 8007604:	0800ab27 	.word	0x0800ab27
 8007608:	0800ab49 	.word	0x0800ab49
 800760c:	0800ab81 	.word	0x0800ab81
 8007610:	0800aba5 	.word	0x0800aba5

08007614 <stdio_exit_handler>:
 8007614:	4a02      	ldr	r2, [pc, #8]	; (8007620 <stdio_exit_handler+0xc>)
 8007616:	4903      	ldr	r1, [pc, #12]	; (8007624 <stdio_exit_handler+0x10>)
 8007618:	4803      	ldr	r0, [pc, #12]	; (8007628 <stdio_exit_handler+0x14>)
 800761a:	f000 beff 	b.w	800841c <_fwalk_sglue>
 800761e:	bf00      	nop
 8007620:	20002bb4 	.word	0x20002bb4
 8007624:	0800a165 	.word	0x0800a165
 8007628:	20002d2c 	.word	0x20002d2c

0800762c <cleanup_stdio>:
 800762c:	6841      	ldr	r1, [r0, #4]
 800762e:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <cleanup_stdio+0x34>)
 8007630:	4299      	cmp	r1, r3
 8007632:	b510      	push	{r4, lr}
 8007634:	4604      	mov	r4, r0
 8007636:	d001      	beq.n	800763c <cleanup_stdio+0x10>
 8007638:	f002 fd94 	bl	800a164 <_fflush_r>
 800763c:	68a1      	ldr	r1, [r4, #8]
 800763e:	4b09      	ldr	r3, [pc, #36]	; (8007664 <cleanup_stdio+0x38>)
 8007640:	4299      	cmp	r1, r3
 8007642:	d002      	beq.n	800764a <cleanup_stdio+0x1e>
 8007644:	4620      	mov	r0, r4
 8007646:	f002 fd8d 	bl	800a164 <_fflush_r>
 800764a:	68e1      	ldr	r1, [r4, #12]
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <cleanup_stdio+0x3c>)
 800764e:	4299      	cmp	r1, r3
 8007650:	d004      	beq.n	800765c <cleanup_stdio+0x30>
 8007652:	4620      	mov	r0, r4
 8007654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007658:	f002 bd84 	b.w	800a164 <_fflush_r>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	bf00      	nop
 8007660:	20010a84 	.word	0x20010a84
 8007664:	20010aec 	.word	0x20010aec
 8007668:	20010b54 	.word	0x20010b54

0800766c <global_stdio_init.part.0>:
 800766c:	b510      	push	{r4, lr}
 800766e:	4b0b      	ldr	r3, [pc, #44]	; (800769c <global_stdio_init.part.0+0x30>)
 8007670:	4c0b      	ldr	r4, [pc, #44]	; (80076a0 <global_stdio_init.part.0+0x34>)
 8007672:	4a0c      	ldr	r2, [pc, #48]	; (80076a4 <global_stdio_init.part.0+0x38>)
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	4620      	mov	r0, r4
 8007678:	2200      	movs	r2, #0
 800767a:	2104      	movs	r1, #4
 800767c:	f7ff ffa6 	bl	80075cc <std>
 8007680:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007684:	2201      	movs	r2, #1
 8007686:	2109      	movs	r1, #9
 8007688:	f7ff ffa0 	bl	80075cc <std>
 800768c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007690:	2202      	movs	r2, #2
 8007692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007696:	2112      	movs	r1, #18
 8007698:	f7ff bf98 	b.w	80075cc <std>
 800769c:	20010bbc 	.word	0x20010bbc
 80076a0:	20010a84 	.word	0x20010a84
 80076a4:	08007615 	.word	0x08007615

080076a8 <__sfp_lock_acquire>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__sfp_lock_acquire+0x8>)
 80076aa:	f000 bf8b 	b.w	80085c4 <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	20010bc1 	.word	0x20010bc1

080076b4 <__sfp_lock_release>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__sfp_lock_release+0x8>)
 80076b6:	f000 bf86 	b.w	80085c6 <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	20010bc1 	.word	0x20010bc1

080076c0 <__sinit>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	4604      	mov	r4, r0
 80076c4:	f7ff fff0 	bl	80076a8 <__sfp_lock_acquire>
 80076c8:	6a23      	ldr	r3, [r4, #32]
 80076ca:	b11b      	cbz	r3, 80076d4 <__sinit+0x14>
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d0:	f7ff bff0 	b.w	80076b4 <__sfp_lock_release>
 80076d4:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <__sinit+0x28>)
 80076d6:	6223      	str	r3, [r4, #32]
 80076d8:	4b04      	ldr	r3, [pc, #16]	; (80076ec <__sinit+0x2c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f5      	bne.n	80076cc <__sinit+0xc>
 80076e0:	f7ff ffc4 	bl	800766c <global_stdio_init.part.0>
 80076e4:	e7f2      	b.n	80076cc <__sinit+0xc>
 80076e6:	bf00      	nop
 80076e8:	0800762d 	.word	0x0800762d
 80076ec:	20010bbc 	.word	0x20010bbc

080076f0 <sulp>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	4604      	mov	r4, r0
 80076f4:	460d      	mov	r5, r1
 80076f6:	ec45 4b10 	vmov	d0, r4, r5
 80076fa:	4616      	mov	r6, r2
 80076fc:	f003 f8d2 	bl	800a8a4 <__ulp>
 8007700:	ec51 0b10 	vmov	r0, r1, d0
 8007704:	b17e      	cbz	r6, 8007726 <sulp+0x36>
 8007706:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800770a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800770e:	2b00      	cmp	r3, #0
 8007710:	dd09      	ble.n	8007726 <sulp+0x36>
 8007712:	051b      	lsls	r3, r3, #20
 8007714:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007718:	2400      	movs	r4, #0
 800771a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800771e:	4622      	mov	r2, r4
 8007720:	462b      	mov	r3, r5
 8007722:	f7f8 ff89 	bl	8000638 <__aeabi_dmul>
 8007726:	bd70      	pop	{r4, r5, r6, pc}

08007728 <_strtod_l>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	ed2d 8b02 	vpush	{d8}
 8007730:	b09b      	sub	sp, #108	; 0x6c
 8007732:	4604      	mov	r4, r0
 8007734:	9213      	str	r2, [sp, #76]	; 0x4c
 8007736:	2200      	movs	r2, #0
 8007738:	9216      	str	r2, [sp, #88]	; 0x58
 800773a:	460d      	mov	r5, r1
 800773c:	f04f 0800 	mov.w	r8, #0
 8007740:	f04f 0900 	mov.w	r9, #0
 8007744:	460a      	mov	r2, r1
 8007746:	9215      	str	r2, [sp, #84]	; 0x54
 8007748:	7811      	ldrb	r1, [r2, #0]
 800774a:	292b      	cmp	r1, #43	; 0x2b
 800774c:	d04c      	beq.n	80077e8 <_strtod_l+0xc0>
 800774e:	d83a      	bhi.n	80077c6 <_strtod_l+0x9e>
 8007750:	290d      	cmp	r1, #13
 8007752:	d834      	bhi.n	80077be <_strtod_l+0x96>
 8007754:	2908      	cmp	r1, #8
 8007756:	d834      	bhi.n	80077c2 <_strtod_l+0x9a>
 8007758:	2900      	cmp	r1, #0
 800775a:	d03d      	beq.n	80077d8 <_strtod_l+0xb0>
 800775c:	2200      	movs	r2, #0
 800775e:	920a      	str	r2, [sp, #40]	; 0x28
 8007760:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007762:	7832      	ldrb	r2, [r6, #0]
 8007764:	2a30      	cmp	r2, #48	; 0x30
 8007766:	f040 80b4 	bne.w	80078d2 <_strtod_l+0x1aa>
 800776a:	7872      	ldrb	r2, [r6, #1]
 800776c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007770:	2a58      	cmp	r2, #88	; 0x58
 8007772:	d170      	bne.n	8007856 <_strtod_l+0x12e>
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	ab16      	add	r3, sp, #88	; 0x58
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	4a8e      	ldr	r2, [pc, #568]	; (80079b8 <_strtod_l+0x290>)
 8007780:	ab17      	add	r3, sp, #92	; 0x5c
 8007782:	a915      	add	r1, sp, #84	; 0x54
 8007784:	4620      	mov	r0, r4
 8007786:	f001 fe21 	bl	80093cc <__gethex>
 800778a:	f010 070f 	ands.w	r7, r0, #15
 800778e:	4605      	mov	r5, r0
 8007790:	d005      	beq.n	800779e <_strtod_l+0x76>
 8007792:	2f06      	cmp	r7, #6
 8007794:	d12a      	bne.n	80077ec <_strtod_l+0xc4>
 8007796:	3601      	adds	r6, #1
 8007798:	2300      	movs	r3, #0
 800779a:	9615      	str	r6, [sp, #84]	; 0x54
 800779c:	930a      	str	r3, [sp, #40]	; 0x28
 800779e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 857f 	bne.w	80082a4 <_strtod_l+0xb7c>
 80077a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a8:	b1db      	cbz	r3, 80077e2 <_strtod_l+0xba>
 80077aa:	4642      	mov	r2, r8
 80077ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077b0:	ec43 2b10 	vmov	d0, r2, r3
 80077b4:	b01b      	add	sp, #108	; 0x6c
 80077b6:	ecbd 8b02 	vpop	{d8}
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	2920      	cmp	r1, #32
 80077c0:	d1cc      	bne.n	800775c <_strtod_l+0x34>
 80077c2:	3201      	adds	r2, #1
 80077c4:	e7bf      	b.n	8007746 <_strtod_l+0x1e>
 80077c6:	292d      	cmp	r1, #45	; 0x2d
 80077c8:	d1c8      	bne.n	800775c <_strtod_l+0x34>
 80077ca:	2101      	movs	r1, #1
 80077cc:	910a      	str	r1, [sp, #40]	; 0x28
 80077ce:	1c51      	adds	r1, r2, #1
 80077d0:	9115      	str	r1, [sp, #84]	; 0x54
 80077d2:	7852      	ldrb	r2, [r2, #1]
 80077d4:	2a00      	cmp	r2, #0
 80077d6:	d1c3      	bne.n	8007760 <_strtod_l+0x38>
 80077d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077da:	9515      	str	r5, [sp, #84]	; 0x54
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f040 855f 	bne.w	80082a0 <_strtod_l+0xb78>
 80077e2:	4642      	mov	r2, r8
 80077e4:	464b      	mov	r3, r9
 80077e6:	e7e3      	b.n	80077b0 <_strtod_l+0x88>
 80077e8:	2100      	movs	r1, #0
 80077ea:	e7ef      	b.n	80077cc <_strtod_l+0xa4>
 80077ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077ee:	b13a      	cbz	r2, 8007800 <_strtod_l+0xd8>
 80077f0:	2135      	movs	r1, #53	; 0x35
 80077f2:	a818      	add	r0, sp, #96	; 0x60
 80077f4:	f003 f953 	bl	800aa9e <__copybits>
 80077f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077fa:	4620      	mov	r0, r4
 80077fc:	f002 fd26 	bl	800a24c <_Bfree>
 8007800:	3f01      	subs	r7, #1
 8007802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007804:	2f04      	cmp	r7, #4
 8007806:	d806      	bhi.n	8007816 <_strtod_l+0xee>
 8007808:	e8df f007 	tbb	[pc, r7]
 800780c:	201d0314 	.word	0x201d0314
 8007810:	14          	.byte	0x14
 8007811:	00          	.byte	0x00
 8007812:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007816:	05e9      	lsls	r1, r5, #23
 8007818:	bf48      	it	mi
 800781a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800781e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007822:	0d1b      	lsrs	r3, r3, #20
 8007824:	051b      	lsls	r3, r3, #20
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1b9      	bne.n	800779e <_strtod_l+0x76>
 800782a:	f000 fea1 	bl	8008570 <__errno>
 800782e:	2322      	movs	r3, #34	; 0x22
 8007830:	6003      	str	r3, [r0, #0]
 8007832:	e7b4      	b.n	800779e <_strtod_l+0x76>
 8007834:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007838:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800783c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007840:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007844:	e7e7      	b.n	8007816 <_strtod_l+0xee>
 8007846:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80079c0 <_strtod_l+0x298>
 800784a:	e7e4      	b.n	8007816 <_strtod_l+0xee>
 800784c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007850:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007854:	e7df      	b.n	8007816 <_strtod_l+0xee>
 8007856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	9215      	str	r2, [sp, #84]	; 0x54
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b30      	cmp	r3, #48	; 0x30
 8007860:	d0f9      	beq.n	8007856 <_strtod_l+0x12e>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d09b      	beq.n	800779e <_strtod_l+0x76>
 8007866:	2301      	movs	r3, #1
 8007868:	f04f 0a00 	mov.w	sl, #0
 800786c:	9304      	str	r3, [sp, #16]
 800786e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007870:	930b      	str	r3, [sp, #44]	; 0x2c
 8007872:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007876:	46d3      	mov	fp, sl
 8007878:	220a      	movs	r2, #10
 800787a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800787c:	7806      	ldrb	r6, [r0, #0]
 800787e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007882:	b2d9      	uxtb	r1, r3
 8007884:	2909      	cmp	r1, #9
 8007886:	d926      	bls.n	80078d6 <_strtod_l+0x1ae>
 8007888:	494c      	ldr	r1, [pc, #304]	; (80079bc <_strtod_l+0x294>)
 800788a:	2201      	movs	r2, #1
 800788c:	f000 fe52 	bl	8008534 <strncmp>
 8007890:	2800      	cmp	r0, #0
 8007892:	d030      	beq.n	80078f6 <_strtod_l+0x1ce>
 8007894:	2000      	movs	r0, #0
 8007896:	4632      	mov	r2, r6
 8007898:	9005      	str	r0, [sp, #20]
 800789a:	465e      	mov	r6, fp
 800789c:	4603      	mov	r3, r0
 800789e:	2a65      	cmp	r2, #101	; 0x65
 80078a0:	d001      	beq.n	80078a6 <_strtod_l+0x17e>
 80078a2:	2a45      	cmp	r2, #69	; 0x45
 80078a4:	d113      	bne.n	80078ce <_strtod_l+0x1a6>
 80078a6:	b91e      	cbnz	r6, 80078b0 <_strtod_l+0x188>
 80078a8:	9a04      	ldr	r2, [sp, #16]
 80078aa:	4302      	orrs	r2, r0
 80078ac:	d094      	beq.n	80077d8 <_strtod_l+0xb0>
 80078ae:	2600      	movs	r6, #0
 80078b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80078b2:	1c6a      	adds	r2, r5, #1
 80078b4:	9215      	str	r2, [sp, #84]	; 0x54
 80078b6:	786a      	ldrb	r2, [r5, #1]
 80078b8:	2a2b      	cmp	r2, #43	; 0x2b
 80078ba:	d074      	beq.n	80079a6 <_strtod_l+0x27e>
 80078bc:	2a2d      	cmp	r2, #45	; 0x2d
 80078be:	d078      	beq.n	80079b2 <_strtod_l+0x28a>
 80078c0:	f04f 0c00 	mov.w	ip, #0
 80078c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80078c8:	2909      	cmp	r1, #9
 80078ca:	d97f      	bls.n	80079cc <_strtod_l+0x2a4>
 80078cc:	9515      	str	r5, [sp, #84]	; 0x54
 80078ce:	2700      	movs	r7, #0
 80078d0:	e09e      	b.n	8007a10 <_strtod_l+0x2e8>
 80078d2:	2300      	movs	r3, #0
 80078d4:	e7c8      	b.n	8007868 <_strtod_l+0x140>
 80078d6:	f1bb 0f08 	cmp.w	fp, #8
 80078da:	bfd8      	it	le
 80078dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80078de:	f100 0001 	add.w	r0, r0, #1
 80078e2:	bfda      	itte	le
 80078e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80078e8:	9309      	strle	r3, [sp, #36]	; 0x24
 80078ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80078ee:	f10b 0b01 	add.w	fp, fp, #1
 80078f2:	9015      	str	r0, [sp, #84]	; 0x54
 80078f4:	e7c1      	b.n	800787a <_strtod_l+0x152>
 80078f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	9215      	str	r2, [sp, #84]	; 0x54
 80078fc:	785a      	ldrb	r2, [r3, #1]
 80078fe:	f1bb 0f00 	cmp.w	fp, #0
 8007902:	d037      	beq.n	8007974 <_strtod_l+0x24c>
 8007904:	9005      	str	r0, [sp, #20]
 8007906:	465e      	mov	r6, fp
 8007908:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800790c:	2b09      	cmp	r3, #9
 800790e:	d912      	bls.n	8007936 <_strtod_l+0x20e>
 8007910:	2301      	movs	r3, #1
 8007912:	e7c4      	b.n	800789e <_strtod_l+0x176>
 8007914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	9215      	str	r2, [sp, #84]	; 0x54
 800791a:	785a      	ldrb	r2, [r3, #1]
 800791c:	3001      	adds	r0, #1
 800791e:	2a30      	cmp	r2, #48	; 0x30
 8007920:	d0f8      	beq.n	8007914 <_strtod_l+0x1ec>
 8007922:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007926:	2b08      	cmp	r3, #8
 8007928:	f200 84c1 	bhi.w	80082ae <_strtod_l+0xb86>
 800792c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800792e:	9005      	str	r0, [sp, #20]
 8007930:	2000      	movs	r0, #0
 8007932:	930b      	str	r3, [sp, #44]	; 0x2c
 8007934:	4606      	mov	r6, r0
 8007936:	3a30      	subs	r2, #48	; 0x30
 8007938:	f100 0301 	add.w	r3, r0, #1
 800793c:	d014      	beq.n	8007968 <_strtod_l+0x240>
 800793e:	9905      	ldr	r1, [sp, #20]
 8007940:	4419      	add	r1, r3
 8007942:	9105      	str	r1, [sp, #20]
 8007944:	4633      	mov	r3, r6
 8007946:	eb00 0c06 	add.w	ip, r0, r6
 800794a:	210a      	movs	r1, #10
 800794c:	4563      	cmp	r3, ip
 800794e:	d113      	bne.n	8007978 <_strtod_l+0x250>
 8007950:	1833      	adds	r3, r6, r0
 8007952:	2b08      	cmp	r3, #8
 8007954:	f106 0601 	add.w	r6, r6, #1
 8007958:	4406      	add	r6, r0
 800795a:	dc1a      	bgt.n	8007992 <_strtod_l+0x26a>
 800795c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800795e:	230a      	movs	r3, #10
 8007960:	fb03 2301 	mla	r3, r3, r1, r2
 8007964:	9309      	str	r3, [sp, #36]	; 0x24
 8007966:	2300      	movs	r3, #0
 8007968:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800796a:	1c51      	adds	r1, r2, #1
 800796c:	9115      	str	r1, [sp, #84]	; 0x54
 800796e:	7852      	ldrb	r2, [r2, #1]
 8007970:	4618      	mov	r0, r3
 8007972:	e7c9      	b.n	8007908 <_strtod_l+0x1e0>
 8007974:	4658      	mov	r0, fp
 8007976:	e7d2      	b.n	800791e <_strtod_l+0x1f6>
 8007978:	2b08      	cmp	r3, #8
 800797a:	f103 0301 	add.w	r3, r3, #1
 800797e:	dc03      	bgt.n	8007988 <_strtod_l+0x260>
 8007980:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007982:	434f      	muls	r7, r1
 8007984:	9709      	str	r7, [sp, #36]	; 0x24
 8007986:	e7e1      	b.n	800794c <_strtod_l+0x224>
 8007988:	2b10      	cmp	r3, #16
 800798a:	bfd8      	it	le
 800798c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007990:	e7dc      	b.n	800794c <_strtod_l+0x224>
 8007992:	2e10      	cmp	r6, #16
 8007994:	bfdc      	itt	le
 8007996:	230a      	movle	r3, #10
 8007998:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800799c:	e7e3      	b.n	8007966 <_strtod_l+0x23e>
 800799e:	2300      	movs	r3, #0
 80079a0:	9305      	str	r3, [sp, #20]
 80079a2:	2301      	movs	r3, #1
 80079a4:	e780      	b.n	80078a8 <_strtod_l+0x180>
 80079a6:	f04f 0c00 	mov.w	ip, #0
 80079aa:	1caa      	adds	r2, r5, #2
 80079ac:	9215      	str	r2, [sp, #84]	; 0x54
 80079ae:	78aa      	ldrb	r2, [r5, #2]
 80079b0:	e788      	b.n	80078c4 <_strtod_l+0x19c>
 80079b2:	f04f 0c01 	mov.w	ip, #1
 80079b6:	e7f8      	b.n	80079aa <_strtod_l+0x282>
 80079b8:	0800b610 	.word	0x0800b610
 80079bc:	0800b60d 	.word	0x0800b60d
 80079c0:	7ff00000 	.word	0x7ff00000
 80079c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079c6:	1c51      	adds	r1, r2, #1
 80079c8:	9115      	str	r1, [sp, #84]	; 0x54
 80079ca:	7852      	ldrb	r2, [r2, #1]
 80079cc:	2a30      	cmp	r2, #48	; 0x30
 80079ce:	d0f9      	beq.n	80079c4 <_strtod_l+0x29c>
 80079d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80079d4:	2908      	cmp	r1, #8
 80079d6:	f63f af7a 	bhi.w	80078ce <_strtod_l+0x1a6>
 80079da:	3a30      	subs	r2, #48	; 0x30
 80079dc:	9208      	str	r2, [sp, #32]
 80079de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079e0:	920c      	str	r2, [sp, #48]	; 0x30
 80079e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079e4:	1c57      	adds	r7, r2, #1
 80079e6:	9715      	str	r7, [sp, #84]	; 0x54
 80079e8:	7852      	ldrb	r2, [r2, #1]
 80079ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80079ee:	f1be 0f09 	cmp.w	lr, #9
 80079f2:	d938      	bls.n	8007a66 <_strtod_l+0x33e>
 80079f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079f6:	1a7f      	subs	r7, r7, r1
 80079f8:	2f08      	cmp	r7, #8
 80079fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80079fe:	dc03      	bgt.n	8007a08 <_strtod_l+0x2e0>
 8007a00:	9908      	ldr	r1, [sp, #32]
 8007a02:	428f      	cmp	r7, r1
 8007a04:	bfa8      	it	ge
 8007a06:	460f      	movge	r7, r1
 8007a08:	f1bc 0f00 	cmp.w	ip, #0
 8007a0c:	d000      	beq.n	8007a10 <_strtod_l+0x2e8>
 8007a0e:	427f      	negs	r7, r7
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	d14f      	bne.n	8007ab4 <_strtod_l+0x38c>
 8007a14:	9904      	ldr	r1, [sp, #16]
 8007a16:	4301      	orrs	r1, r0
 8007a18:	f47f aec1 	bne.w	800779e <_strtod_l+0x76>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f47f aedb 	bne.w	80077d8 <_strtod_l+0xb0>
 8007a22:	2a69      	cmp	r2, #105	; 0x69
 8007a24:	d029      	beq.n	8007a7a <_strtod_l+0x352>
 8007a26:	dc26      	bgt.n	8007a76 <_strtod_l+0x34e>
 8007a28:	2a49      	cmp	r2, #73	; 0x49
 8007a2a:	d026      	beq.n	8007a7a <_strtod_l+0x352>
 8007a2c:	2a4e      	cmp	r2, #78	; 0x4e
 8007a2e:	f47f aed3 	bne.w	80077d8 <_strtod_l+0xb0>
 8007a32:	499b      	ldr	r1, [pc, #620]	; (8007ca0 <_strtod_l+0x578>)
 8007a34:	a815      	add	r0, sp, #84	; 0x54
 8007a36:	f001 ff09 	bl	800984c <__match>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f43f aecc 	beq.w	80077d8 <_strtod_l+0xb0>
 8007a40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b28      	cmp	r3, #40	; 0x28
 8007a46:	d12f      	bne.n	8007aa8 <_strtod_l+0x380>
 8007a48:	4996      	ldr	r1, [pc, #600]	; (8007ca4 <_strtod_l+0x57c>)
 8007a4a:	aa18      	add	r2, sp, #96	; 0x60
 8007a4c:	a815      	add	r0, sp, #84	; 0x54
 8007a4e:	f001 ff11 	bl	8009874 <__hexnan>
 8007a52:	2805      	cmp	r0, #5
 8007a54:	d128      	bne.n	8007aa8 <_strtod_l+0x380>
 8007a56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007a60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007a64:	e69b      	b.n	800779e <_strtod_l+0x76>
 8007a66:	9f08      	ldr	r7, [sp, #32]
 8007a68:	210a      	movs	r1, #10
 8007a6a:	fb01 2107 	mla	r1, r1, r7, r2
 8007a6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007a72:	9208      	str	r2, [sp, #32]
 8007a74:	e7b5      	b.n	80079e2 <_strtod_l+0x2ba>
 8007a76:	2a6e      	cmp	r2, #110	; 0x6e
 8007a78:	e7d9      	b.n	8007a2e <_strtod_l+0x306>
 8007a7a:	498b      	ldr	r1, [pc, #556]	; (8007ca8 <_strtod_l+0x580>)
 8007a7c:	a815      	add	r0, sp, #84	; 0x54
 8007a7e:	f001 fee5 	bl	800984c <__match>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f43f aea8 	beq.w	80077d8 <_strtod_l+0xb0>
 8007a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a8a:	4988      	ldr	r1, [pc, #544]	; (8007cac <_strtod_l+0x584>)
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	a815      	add	r0, sp, #84	; 0x54
 8007a90:	9315      	str	r3, [sp, #84]	; 0x54
 8007a92:	f001 fedb 	bl	800984c <__match>
 8007a96:	b910      	cbnz	r0, 8007a9e <_strtod_l+0x376>
 8007a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	9315      	str	r3, [sp, #84]	; 0x54
 8007a9e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007cbc <_strtod_l+0x594>
 8007aa2:	f04f 0800 	mov.w	r8, #0
 8007aa6:	e67a      	b.n	800779e <_strtod_l+0x76>
 8007aa8:	4881      	ldr	r0, [pc, #516]	; (8007cb0 <_strtod_l+0x588>)
 8007aaa:	f000 fd9d 	bl	80085e8 <nan>
 8007aae:	ec59 8b10 	vmov	r8, r9, d0
 8007ab2:	e674      	b.n	800779e <_strtod_l+0x76>
 8007ab4:	9b05      	ldr	r3, [sp, #20]
 8007ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ab8:	1afb      	subs	r3, r7, r3
 8007aba:	f1bb 0f00 	cmp.w	fp, #0
 8007abe:	bf08      	it	eq
 8007ac0:	46b3      	moveq	fp, r6
 8007ac2:	2e10      	cmp	r6, #16
 8007ac4:	9308      	str	r3, [sp, #32]
 8007ac6:	4635      	mov	r5, r6
 8007ac8:	bfa8      	it	ge
 8007aca:	2510      	movge	r5, #16
 8007acc:	f7f8 fd3a 	bl	8000544 <__aeabi_ui2d>
 8007ad0:	2e09      	cmp	r6, #9
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	4689      	mov	r9, r1
 8007ad6:	dd13      	ble.n	8007b00 <_strtod_l+0x3d8>
 8007ad8:	4b76      	ldr	r3, [pc, #472]	; (8007cb4 <_strtod_l+0x58c>)
 8007ada:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ade:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ae2:	f7f8 fda9 	bl	8000638 <__aeabi_dmul>
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	4650      	mov	r0, sl
 8007aea:	4689      	mov	r9, r1
 8007aec:	f7f8 fd2a 	bl	8000544 <__aeabi_ui2d>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4640      	mov	r0, r8
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 fbe8 	bl	80002cc <__adddf3>
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	2e0f      	cmp	r6, #15
 8007b02:	dc38      	bgt.n	8007b76 <_strtod_l+0x44e>
 8007b04:	9b08      	ldr	r3, [sp, #32]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f43f ae49 	beq.w	800779e <_strtod_l+0x76>
 8007b0c:	dd24      	ble.n	8007b58 <_strtod_l+0x430>
 8007b0e:	2b16      	cmp	r3, #22
 8007b10:	dc0b      	bgt.n	8007b2a <_strtod_l+0x402>
 8007b12:	4968      	ldr	r1, [pc, #416]	; (8007cb4 <_strtod_l+0x58c>)
 8007b14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	f7f8 fd8a 	bl	8000638 <__aeabi_dmul>
 8007b24:	4680      	mov	r8, r0
 8007b26:	4689      	mov	r9, r1
 8007b28:	e639      	b.n	800779e <_strtod_l+0x76>
 8007b2a:	9a08      	ldr	r2, [sp, #32]
 8007b2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007b30:	4293      	cmp	r3, r2
 8007b32:	db20      	blt.n	8007b76 <_strtod_l+0x44e>
 8007b34:	4c5f      	ldr	r4, [pc, #380]	; (8007cb4 <_strtod_l+0x58c>)
 8007b36:	f1c6 060f 	rsb	r6, r6, #15
 8007b3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007b3e:	4642      	mov	r2, r8
 8007b40:	464b      	mov	r3, r9
 8007b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b46:	f7f8 fd77 	bl	8000638 <__aeabi_dmul>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	1b9e      	subs	r6, r3, r6
 8007b4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007b52:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b56:	e7e3      	b.n	8007b20 <_strtod_l+0x3f8>
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	3316      	adds	r3, #22
 8007b5c:	db0b      	blt.n	8007b76 <_strtod_l+0x44e>
 8007b5e:	9b05      	ldr	r3, [sp, #20]
 8007b60:	1bdf      	subs	r7, r3, r7
 8007b62:	4b54      	ldr	r3, [pc, #336]	; (8007cb4 <_strtod_l+0x58c>)
 8007b64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 fe8c 	bl	800088c <__aeabi_ddiv>
 8007b74:	e7d6      	b.n	8007b24 <_strtod_l+0x3fc>
 8007b76:	9b08      	ldr	r3, [sp, #32]
 8007b78:	1b75      	subs	r5, r6, r5
 8007b7a:	441d      	add	r5, r3
 8007b7c:	2d00      	cmp	r5, #0
 8007b7e:	dd70      	ble.n	8007c62 <_strtod_l+0x53a>
 8007b80:	f015 030f 	ands.w	r3, r5, #15
 8007b84:	d00a      	beq.n	8007b9c <_strtod_l+0x474>
 8007b86:	494b      	ldr	r1, [pc, #300]	; (8007cb4 <_strtod_l+0x58c>)
 8007b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b94:	f7f8 fd50 	bl	8000638 <__aeabi_dmul>
 8007b98:	4680      	mov	r8, r0
 8007b9a:	4689      	mov	r9, r1
 8007b9c:	f035 050f 	bics.w	r5, r5, #15
 8007ba0:	d04d      	beq.n	8007c3e <_strtod_l+0x516>
 8007ba2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007ba6:	dd22      	ble.n	8007bee <_strtod_l+0x4c6>
 8007ba8:	2500      	movs	r5, #0
 8007baa:	46ab      	mov	fp, r5
 8007bac:	9509      	str	r5, [sp, #36]	; 0x24
 8007bae:	9505      	str	r5, [sp, #20]
 8007bb0:	2322      	movs	r3, #34	; 0x22
 8007bb2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007cbc <_strtod_l+0x594>
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	f04f 0800 	mov.w	r8, #0
 8007bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f43f aded 	beq.w	800779e <_strtod_l+0x76>
 8007bc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f002 fb40 	bl	800a24c <_Bfree>
 8007bcc:	9905      	ldr	r1, [sp, #20]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f002 fb3c 	bl	800a24c <_Bfree>
 8007bd4:	4659      	mov	r1, fp
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f002 fb38 	bl	800a24c <_Bfree>
 8007bdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bde:	4620      	mov	r0, r4
 8007be0:	f002 fb34 	bl	800a24c <_Bfree>
 8007be4:	4629      	mov	r1, r5
 8007be6:	4620      	mov	r0, r4
 8007be8:	f002 fb30 	bl	800a24c <_Bfree>
 8007bec:	e5d7      	b.n	800779e <_strtod_l+0x76>
 8007bee:	4b32      	ldr	r3, [pc, #200]	; (8007cb8 <_strtod_l+0x590>)
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	112d      	asrs	r5, r5, #4
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	469a      	mov	sl, r3
 8007bfc:	2d01      	cmp	r5, #1
 8007bfe:	dc21      	bgt.n	8007c44 <_strtod_l+0x51c>
 8007c00:	b10b      	cbz	r3, 8007c06 <_strtod_l+0x4de>
 8007c02:	4680      	mov	r8, r0
 8007c04:	4689      	mov	r9, r1
 8007c06:	492c      	ldr	r1, [pc, #176]	; (8007cb8 <_strtod_l+0x590>)
 8007c08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007c0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c18:	f7f8 fd0e 	bl	8000638 <__aeabi_dmul>
 8007c1c:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <_strtod_l+0x594>)
 8007c1e:	460a      	mov	r2, r1
 8007c20:	400b      	ands	r3, r1
 8007c22:	4927      	ldr	r1, [pc, #156]	; (8007cc0 <_strtod_l+0x598>)
 8007c24:	428b      	cmp	r3, r1
 8007c26:	4680      	mov	r8, r0
 8007c28:	d8be      	bhi.n	8007ba8 <_strtod_l+0x480>
 8007c2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c2e:	428b      	cmp	r3, r1
 8007c30:	bf86      	itte	hi
 8007c32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007cc4 <_strtod_l+0x59c>
 8007c36:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007c3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	e07b      	b.n	8007d3c <_strtod_l+0x614>
 8007c44:	07ea      	lsls	r2, r5, #31
 8007c46:	d505      	bpl.n	8007c54 <_strtod_l+0x52c>
 8007c48:	9b04      	ldr	r3, [sp, #16]
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 fcf3 	bl	8000638 <__aeabi_dmul>
 8007c52:	2301      	movs	r3, #1
 8007c54:	9a04      	ldr	r2, [sp, #16]
 8007c56:	3208      	adds	r2, #8
 8007c58:	f10a 0a01 	add.w	sl, sl, #1
 8007c5c:	106d      	asrs	r5, r5, #1
 8007c5e:	9204      	str	r2, [sp, #16]
 8007c60:	e7cc      	b.n	8007bfc <_strtod_l+0x4d4>
 8007c62:	d0ec      	beq.n	8007c3e <_strtod_l+0x516>
 8007c64:	426d      	negs	r5, r5
 8007c66:	f015 020f 	ands.w	r2, r5, #15
 8007c6a:	d00a      	beq.n	8007c82 <_strtod_l+0x55a>
 8007c6c:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <_strtod_l+0x58c>)
 8007c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fe07 	bl	800088c <__aeabi_ddiv>
 8007c7e:	4680      	mov	r8, r0
 8007c80:	4689      	mov	r9, r1
 8007c82:	112d      	asrs	r5, r5, #4
 8007c84:	d0db      	beq.n	8007c3e <_strtod_l+0x516>
 8007c86:	2d1f      	cmp	r5, #31
 8007c88:	dd1e      	ble.n	8007cc8 <_strtod_l+0x5a0>
 8007c8a:	2500      	movs	r5, #0
 8007c8c:	46ab      	mov	fp, r5
 8007c8e:	9509      	str	r5, [sp, #36]	; 0x24
 8007c90:	9505      	str	r5, [sp, #20]
 8007c92:	2322      	movs	r3, #34	; 0x22
 8007c94:	f04f 0800 	mov.w	r8, #0
 8007c98:	f04f 0900 	mov.w	r9, #0
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	e78d      	b.n	8007bbc <_strtod_l+0x494>
 8007ca0:	0800b5e1 	.word	0x0800b5e1
 8007ca4:	0800b624 	.word	0x0800b624
 8007ca8:	0800b5d9 	.word	0x0800b5d9
 8007cac:	0800b76c 	.word	0x0800b76c
 8007cb0:	0800b9f7 	.word	0x0800b9f7
 8007cb4:	0800b8e8 	.word	0x0800b8e8
 8007cb8:	0800b8c0 	.word	0x0800b8c0
 8007cbc:	7ff00000 	.word	0x7ff00000
 8007cc0:	7ca00000 	.word	0x7ca00000
 8007cc4:	7fefffff 	.word	0x7fefffff
 8007cc8:	f015 0310 	ands.w	r3, r5, #16
 8007ccc:	bf18      	it	ne
 8007cce:	236a      	movne	r3, #106	; 0x6a
 8007cd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008074 <_strtod_l+0x94c>
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	2300      	movs	r3, #0
 8007cdc:	07ea      	lsls	r2, r5, #31
 8007cde:	d504      	bpl.n	8007cea <_strtod_l+0x5c2>
 8007ce0:	e9da 2300 	ldrd	r2, r3, [sl]
 8007ce4:	f7f8 fca8 	bl	8000638 <__aeabi_dmul>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	106d      	asrs	r5, r5, #1
 8007cec:	f10a 0a08 	add.w	sl, sl, #8
 8007cf0:	d1f4      	bne.n	8007cdc <_strtod_l+0x5b4>
 8007cf2:	b10b      	cbz	r3, 8007cf8 <_strtod_l+0x5d0>
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	4689      	mov	r9, r1
 8007cf8:	9b04      	ldr	r3, [sp, #16]
 8007cfa:	b1bb      	cbz	r3, 8007d2c <_strtod_l+0x604>
 8007cfc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007d00:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	4649      	mov	r1, r9
 8007d08:	dd10      	ble.n	8007d2c <_strtod_l+0x604>
 8007d0a:	2b1f      	cmp	r3, #31
 8007d0c:	f340 811e 	ble.w	8007f4c <_strtod_l+0x824>
 8007d10:	2b34      	cmp	r3, #52	; 0x34
 8007d12:	bfde      	ittt	le
 8007d14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007d18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007d1c:	4093      	lslle	r3, r2
 8007d1e:	f04f 0800 	mov.w	r8, #0
 8007d22:	bfcc      	ite	gt
 8007d24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d28:	ea03 0901 	andle.w	r9, r3, r1
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4640      	mov	r0, r8
 8007d32:	4649      	mov	r1, r9
 8007d34:	f7f8 fee8 	bl	8000b08 <__aeabi_dcmpeq>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d1a6      	bne.n	8007c8a <_strtod_l+0x562>
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d42:	4633      	mov	r3, r6
 8007d44:	465a      	mov	r2, fp
 8007d46:	4620      	mov	r0, r4
 8007d48:	f002 fae8 	bl	800a31c <__s2b>
 8007d4c:	9009      	str	r0, [sp, #36]	; 0x24
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	f43f af2a 	beq.w	8007ba8 <_strtod_l+0x480>
 8007d54:	9a08      	ldr	r2, [sp, #32]
 8007d56:	9b05      	ldr	r3, [sp, #20]
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	eba3 0307 	sub.w	r3, r3, r7
 8007d5e:	bfa8      	it	ge
 8007d60:	2300      	movge	r3, #0
 8007d62:	930c      	str	r3, [sp, #48]	; 0x30
 8007d64:	2500      	movs	r5, #0
 8007d66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007d6a:	9312      	str	r3, [sp, #72]	; 0x48
 8007d6c:	46ab      	mov	fp, r5
 8007d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d70:	4620      	mov	r0, r4
 8007d72:	6859      	ldr	r1, [r3, #4]
 8007d74:	f002 fa2a 	bl	800a1cc <_Balloc>
 8007d78:	9005      	str	r0, [sp, #20]
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	f43f af18 	beq.w	8007bb0 <_strtod_l+0x488>
 8007d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d82:	691a      	ldr	r2, [r3, #16]
 8007d84:	3202      	adds	r2, #2
 8007d86:	f103 010c 	add.w	r1, r3, #12
 8007d8a:	0092      	lsls	r2, r2, #2
 8007d8c:	300c      	adds	r0, #12
 8007d8e:	f000 fc1b 	bl	80085c8 <memcpy>
 8007d92:	ec49 8b10 	vmov	d0, r8, r9
 8007d96:	aa18      	add	r2, sp, #96	; 0x60
 8007d98:	a917      	add	r1, sp, #92	; 0x5c
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f002 fdf2 	bl	800a984 <__d2b>
 8007da0:	ec49 8b18 	vmov	d8, r8, r9
 8007da4:	9016      	str	r0, [sp, #88]	; 0x58
 8007da6:	2800      	cmp	r0, #0
 8007da8:	f43f af02 	beq.w	8007bb0 <_strtod_l+0x488>
 8007dac:	2101      	movs	r1, #1
 8007dae:	4620      	mov	r0, r4
 8007db0:	f002 fb4c 	bl	800a44c <__i2b>
 8007db4:	4683      	mov	fp, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f43f aefa 	beq.w	8007bb0 <_strtod_l+0x488>
 8007dbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007dbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007dc0:	2e00      	cmp	r6, #0
 8007dc2:	bfab      	itete	ge
 8007dc4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007dc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007dc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007dca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007dce:	bfac      	ite	ge
 8007dd0:	eb06 0a03 	addge.w	sl, r6, r3
 8007dd4:	1b9f      	sublt	r7, r3, r6
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	1af6      	subs	r6, r6, r3
 8007dda:	4416      	add	r6, r2
 8007ddc:	4ba0      	ldr	r3, [pc, #640]	; (8008060 <_strtod_l+0x938>)
 8007dde:	3e01      	subs	r6, #1
 8007de0:	429e      	cmp	r6, r3
 8007de2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007de6:	f280 80c4 	bge.w	8007f72 <_strtod_l+0x84a>
 8007dea:	1b9b      	subs	r3, r3, r6
 8007dec:	2b1f      	cmp	r3, #31
 8007dee:	eba2 0203 	sub.w	r2, r2, r3
 8007df2:	f04f 0101 	mov.w	r1, #1
 8007df6:	f300 80b0 	bgt.w	8007f5a <_strtod_l+0x832>
 8007dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007dfe:	930e      	str	r3, [sp, #56]	; 0x38
 8007e00:	2300      	movs	r3, #0
 8007e02:	930d      	str	r3, [sp, #52]	; 0x34
 8007e04:	eb0a 0602 	add.w	r6, sl, r2
 8007e08:	9b04      	ldr	r3, [sp, #16]
 8007e0a:	45b2      	cmp	sl, r6
 8007e0c:	4417      	add	r7, r2
 8007e0e:	441f      	add	r7, r3
 8007e10:	4653      	mov	r3, sl
 8007e12:	bfa8      	it	ge
 8007e14:	4633      	movge	r3, r6
 8007e16:	42bb      	cmp	r3, r7
 8007e18:	bfa8      	it	ge
 8007e1a:	463b      	movge	r3, r7
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfc2      	ittt	gt
 8007e20:	1af6      	subgt	r6, r6, r3
 8007e22:	1aff      	subgt	r7, r7, r3
 8007e24:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	dd17      	ble.n	8007e5e <_strtod_l+0x736>
 8007e2e:	4659      	mov	r1, fp
 8007e30:	461a      	mov	r2, r3
 8007e32:	4620      	mov	r0, r4
 8007e34:	f002 fbca 	bl	800a5cc <__pow5mult>
 8007e38:	4683      	mov	fp, r0
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f43f aeb8 	beq.w	8007bb0 <_strtod_l+0x488>
 8007e40:	4601      	mov	r1, r0
 8007e42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e44:	4620      	mov	r0, r4
 8007e46:	f002 fb17 	bl	800a478 <__multiply>
 8007e4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f43f aeaf 	beq.w	8007bb0 <_strtod_l+0x488>
 8007e52:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e54:	4620      	mov	r0, r4
 8007e56:	f002 f9f9 	bl	800a24c <_Bfree>
 8007e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5c:	9316      	str	r3, [sp, #88]	; 0x58
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	f300 808c 	bgt.w	8007f7c <_strtod_l+0x854>
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd08      	ble.n	8007e7c <_strtod_l+0x754>
 8007e6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e6c:	9905      	ldr	r1, [sp, #20]
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f002 fbac 	bl	800a5cc <__pow5mult>
 8007e74:	9005      	str	r0, [sp, #20]
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f43f ae9a 	beq.w	8007bb0 <_strtod_l+0x488>
 8007e7c:	2f00      	cmp	r7, #0
 8007e7e:	dd08      	ble.n	8007e92 <_strtod_l+0x76a>
 8007e80:	9905      	ldr	r1, [sp, #20]
 8007e82:	463a      	mov	r2, r7
 8007e84:	4620      	mov	r0, r4
 8007e86:	f002 fbfb 	bl	800a680 <__lshift>
 8007e8a:	9005      	str	r0, [sp, #20]
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f43f ae8f 	beq.w	8007bb0 <_strtod_l+0x488>
 8007e92:	f1ba 0f00 	cmp.w	sl, #0
 8007e96:	dd08      	ble.n	8007eaa <_strtod_l+0x782>
 8007e98:	4659      	mov	r1, fp
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f002 fbef 	bl	800a680 <__lshift>
 8007ea2:	4683      	mov	fp, r0
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	f43f ae83 	beq.w	8007bb0 <_strtod_l+0x488>
 8007eaa:	9a05      	ldr	r2, [sp, #20]
 8007eac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f002 fc6e 	bl	800a790 <__mdiff>
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f43f ae7a 	beq.w	8007bb0 <_strtod_l+0x488>
 8007ebc:	68c3      	ldr	r3, [r0, #12]
 8007ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60c3      	str	r3, [r0, #12]
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	f002 fc47 	bl	800a758 <__mcmp>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	da60      	bge.n	8007f90 <_strtod_l+0x868>
 8007ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed0:	ea53 0308 	orrs.w	r3, r3, r8
 8007ed4:	f040 8084 	bne.w	8007fe0 <_strtod_l+0x8b8>
 8007ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d17f      	bne.n	8007fe0 <_strtod_l+0x8b8>
 8007ee0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ee4:	0d1b      	lsrs	r3, r3, #20
 8007ee6:	051b      	lsls	r3, r3, #20
 8007ee8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007eec:	d978      	bls.n	8007fe0 <_strtod_l+0x8b8>
 8007eee:	696b      	ldr	r3, [r5, #20]
 8007ef0:	b913      	cbnz	r3, 8007ef8 <_strtod_l+0x7d0>
 8007ef2:	692b      	ldr	r3, [r5, #16]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	dd73      	ble.n	8007fe0 <_strtod_l+0x8b8>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	2201      	movs	r2, #1
 8007efc:	4620      	mov	r0, r4
 8007efe:	f002 fbbf 	bl	800a680 <__lshift>
 8007f02:	4659      	mov	r1, fp
 8007f04:	4605      	mov	r5, r0
 8007f06:	f002 fc27 	bl	800a758 <__mcmp>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	dd68      	ble.n	8007fe0 <_strtod_l+0x8b8>
 8007f0e:	9904      	ldr	r1, [sp, #16]
 8007f10:	4a54      	ldr	r2, [pc, #336]	; (8008064 <_strtod_l+0x93c>)
 8007f12:	464b      	mov	r3, r9
 8007f14:	2900      	cmp	r1, #0
 8007f16:	f000 8084 	beq.w	8008022 <_strtod_l+0x8fa>
 8007f1a:	ea02 0109 	and.w	r1, r2, r9
 8007f1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f22:	dc7e      	bgt.n	8008022 <_strtod_l+0x8fa>
 8007f24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f28:	f77f aeb3 	ble.w	8007c92 <_strtod_l+0x56a>
 8007f2c:	4b4e      	ldr	r3, [pc, #312]	; (8008068 <_strtod_l+0x940>)
 8007f2e:	4640      	mov	r0, r8
 8007f30:	4649      	mov	r1, r9
 8007f32:	2200      	movs	r2, #0
 8007f34:	f7f8 fb80 	bl	8000638 <__aeabi_dmul>
 8007f38:	4b4a      	ldr	r3, [pc, #296]	; (8008064 <_strtod_l+0x93c>)
 8007f3a:	400b      	ands	r3, r1
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	4689      	mov	r9, r1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f47f ae3f 	bne.w	8007bc4 <_strtod_l+0x49c>
 8007f46:	2322      	movs	r3, #34	; 0x22
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	e63b      	b.n	8007bc4 <_strtod_l+0x49c>
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	ea03 0808 	and.w	r8, r3, r8
 8007f58:	e6e8      	b.n	8007d2c <_strtod_l+0x604>
 8007f5a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007f5e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007f62:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007f66:	36e2      	adds	r6, #226	; 0xe2
 8007f68:	fa01 f306 	lsl.w	r3, r1, r6
 8007f6c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007f70:	e748      	b.n	8007e04 <_strtod_l+0x6dc>
 8007f72:	2100      	movs	r1, #0
 8007f74:	2301      	movs	r3, #1
 8007f76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007f7a:	e743      	b.n	8007e04 <_strtod_l+0x6dc>
 8007f7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f7e:	4632      	mov	r2, r6
 8007f80:	4620      	mov	r0, r4
 8007f82:	f002 fb7d 	bl	800a680 <__lshift>
 8007f86:	9016      	str	r0, [sp, #88]	; 0x58
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f47f af6b 	bne.w	8007e64 <_strtod_l+0x73c>
 8007f8e:	e60f      	b.n	8007bb0 <_strtod_l+0x488>
 8007f90:	46ca      	mov	sl, r9
 8007f92:	d171      	bne.n	8008078 <_strtod_l+0x950>
 8007f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f9a:	b352      	cbz	r2, 8007ff2 <_strtod_l+0x8ca>
 8007f9c:	4a33      	ldr	r2, [pc, #204]	; (800806c <_strtod_l+0x944>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d12a      	bne.n	8007ff8 <_strtod_l+0x8d0>
 8007fa2:	9b04      	ldr	r3, [sp, #16]
 8007fa4:	4641      	mov	r1, r8
 8007fa6:	b1fb      	cbz	r3, 8007fe8 <_strtod_l+0x8c0>
 8007fa8:	4b2e      	ldr	r3, [pc, #184]	; (8008064 <_strtod_l+0x93c>)
 8007faa:	ea09 0303 	and.w	r3, r9, r3
 8007fae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fb6:	d81a      	bhi.n	8007fee <_strtod_l+0x8c6>
 8007fb8:	0d1b      	lsrs	r3, r3, #20
 8007fba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	d118      	bne.n	8007ff8 <_strtod_l+0x8d0>
 8007fc6:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <_strtod_l+0x948>)
 8007fc8:	459a      	cmp	sl, r3
 8007fca:	d102      	bne.n	8007fd2 <_strtod_l+0x8aa>
 8007fcc:	3101      	adds	r1, #1
 8007fce:	f43f adef 	beq.w	8007bb0 <_strtod_l+0x488>
 8007fd2:	4b24      	ldr	r3, [pc, #144]	; (8008064 <_strtod_l+0x93c>)
 8007fd4:	ea0a 0303 	and.w	r3, sl, r3
 8007fd8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007fdc:	f04f 0800 	mov.w	r8, #0
 8007fe0:	9b04      	ldr	r3, [sp, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1a2      	bne.n	8007f2c <_strtod_l+0x804>
 8007fe6:	e5ed      	b.n	8007bc4 <_strtod_l+0x49c>
 8007fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fec:	e7e9      	b.n	8007fc2 <_strtod_l+0x89a>
 8007fee:	4613      	mov	r3, r2
 8007ff0:	e7e7      	b.n	8007fc2 <_strtod_l+0x89a>
 8007ff2:	ea53 0308 	orrs.w	r3, r3, r8
 8007ff6:	d08a      	beq.n	8007f0e <_strtod_l+0x7e6>
 8007ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ffa:	b1e3      	cbz	r3, 8008036 <_strtod_l+0x90e>
 8007ffc:	ea13 0f0a 	tst.w	r3, sl
 8008000:	d0ee      	beq.n	8007fe0 <_strtod_l+0x8b8>
 8008002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008004:	9a04      	ldr	r2, [sp, #16]
 8008006:	4640      	mov	r0, r8
 8008008:	4649      	mov	r1, r9
 800800a:	b1c3      	cbz	r3, 800803e <_strtod_l+0x916>
 800800c:	f7ff fb70 	bl	80076f0 <sulp>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	ec51 0b18 	vmov	r0, r1, d8
 8008018:	f7f8 f958 	bl	80002cc <__adddf3>
 800801c:	4680      	mov	r8, r0
 800801e:	4689      	mov	r9, r1
 8008020:	e7de      	b.n	8007fe0 <_strtod_l+0x8b8>
 8008022:	4013      	ands	r3, r2
 8008024:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008028:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800802c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008030:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008034:	e7d4      	b.n	8007fe0 <_strtod_l+0x8b8>
 8008036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008038:	ea13 0f08 	tst.w	r3, r8
 800803c:	e7e0      	b.n	8008000 <_strtod_l+0x8d8>
 800803e:	f7ff fb57 	bl	80076f0 <sulp>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	ec51 0b18 	vmov	r0, r1, d8
 800804a:	f7f8 f93d 	bl	80002c8 <__aeabi_dsub>
 800804e:	2200      	movs	r2, #0
 8008050:	2300      	movs	r3, #0
 8008052:	4680      	mov	r8, r0
 8008054:	4689      	mov	r9, r1
 8008056:	f7f8 fd57 	bl	8000b08 <__aeabi_dcmpeq>
 800805a:	2800      	cmp	r0, #0
 800805c:	d0c0      	beq.n	8007fe0 <_strtod_l+0x8b8>
 800805e:	e618      	b.n	8007c92 <_strtod_l+0x56a>
 8008060:	fffffc02 	.word	0xfffffc02
 8008064:	7ff00000 	.word	0x7ff00000
 8008068:	39500000 	.word	0x39500000
 800806c:	000fffff 	.word	0x000fffff
 8008070:	7fefffff 	.word	0x7fefffff
 8008074:	0800b638 	.word	0x0800b638
 8008078:	4659      	mov	r1, fp
 800807a:	4628      	mov	r0, r5
 800807c:	f002 fcdc 	bl	800aa38 <__ratio>
 8008080:	ec57 6b10 	vmov	r6, r7, d0
 8008084:	ee10 0a10 	vmov	r0, s0
 8008088:	2200      	movs	r2, #0
 800808a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 fd4e 	bl	8000b30 <__aeabi_dcmple>
 8008094:	2800      	cmp	r0, #0
 8008096:	d071      	beq.n	800817c <_strtod_l+0xa54>
 8008098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d17c      	bne.n	8008198 <_strtod_l+0xa70>
 800809e:	f1b8 0f00 	cmp.w	r8, #0
 80080a2:	d15a      	bne.n	800815a <_strtod_l+0xa32>
 80080a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d15d      	bne.n	8008168 <_strtod_l+0xa40>
 80080ac:	4b90      	ldr	r3, [pc, #576]	; (80082f0 <_strtod_l+0xbc8>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fd32 	bl	8000b1c <__aeabi_dcmplt>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d15c      	bne.n	8008176 <_strtod_l+0xa4e>
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	4b8c      	ldr	r3, [pc, #560]	; (80082f4 <_strtod_l+0xbcc>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	f7f8 fab8 	bl	8000638 <__aeabi_dmul>
 80080c8:	4606      	mov	r6, r0
 80080ca:	460f      	mov	r7, r1
 80080cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80080d0:	9606      	str	r6, [sp, #24]
 80080d2:	9307      	str	r3, [sp, #28]
 80080d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80080dc:	4b86      	ldr	r3, [pc, #536]	; (80082f8 <_strtod_l+0xbd0>)
 80080de:	ea0a 0303 	and.w	r3, sl, r3
 80080e2:	930d      	str	r3, [sp, #52]	; 0x34
 80080e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080e6:	4b85      	ldr	r3, [pc, #532]	; (80082fc <_strtod_l+0xbd4>)
 80080e8:	429a      	cmp	r2, r3
 80080ea:	f040 8090 	bne.w	800820e <_strtod_l+0xae6>
 80080ee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80080f2:	ec49 8b10 	vmov	d0, r8, r9
 80080f6:	f002 fbd5 	bl	800a8a4 <__ulp>
 80080fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080fe:	ec51 0b10 	vmov	r0, r1, d0
 8008102:	f7f8 fa99 	bl	8000638 <__aeabi_dmul>
 8008106:	4642      	mov	r2, r8
 8008108:	464b      	mov	r3, r9
 800810a:	f7f8 f8df 	bl	80002cc <__adddf3>
 800810e:	460b      	mov	r3, r1
 8008110:	4979      	ldr	r1, [pc, #484]	; (80082f8 <_strtod_l+0xbd0>)
 8008112:	4a7b      	ldr	r2, [pc, #492]	; (8008300 <_strtod_l+0xbd8>)
 8008114:	4019      	ands	r1, r3
 8008116:	4291      	cmp	r1, r2
 8008118:	4680      	mov	r8, r0
 800811a:	d944      	bls.n	80081a6 <_strtod_l+0xa7e>
 800811c:	ee18 2a90 	vmov	r2, s17
 8008120:	4b78      	ldr	r3, [pc, #480]	; (8008304 <_strtod_l+0xbdc>)
 8008122:	429a      	cmp	r2, r3
 8008124:	d104      	bne.n	8008130 <_strtod_l+0xa08>
 8008126:	ee18 3a10 	vmov	r3, s16
 800812a:	3301      	adds	r3, #1
 800812c:	f43f ad40 	beq.w	8007bb0 <_strtod_l+0x488>
 8008130:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008304 <_strtod_l+0xbdc>
 8008134:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008138:	9916      	ldr	r1, [sp, #88]	; 0x58
 800813a:	4620      	mov	r0, r4
 800813c:	f002 f886 	bl	800a24c <_Bfree>
 8008140:	9905      	ldr	r1, [sp, #20]
 8008142:	4620      	mov	r0, r4
 8008144:	f002 f882 	bl	800a24c <_Bfree>
 8008148:	4659      	mov	r1, fp
 800814a:	4620      	mov	r0, r4
 800814c:	f002 f87e 	bl	800a24c <_Bfree>
 8008150:	4629      	mov	r1, r5
 8008152:	4620      	mov	r0, r4
 8008154:	f002 f87a 	bl	800a24c <_Bfree>
 8008158:	e609      	b.n	8007d6e <_strtod_l+0x646>
 800815a:	f1b8 0f01 	cmp.w	r8, #1
 800815e:	d103      	bne.n	8008168 <_strtod_l+0xa40>
 8008160:	f1b9 0f00 	cmp.w	r9, #0
 8008164:	f43f ad95 	beq.w	8007c92 <_strtod_l+0x56a>
 8008168:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80082c0 <_strtod_l+0xb98>
 800816c:	4f60      	ldr	r7, [pc, #384]	; (80082f0 <_strtod_l+0xbc8>)
 800816e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008172:	2600      	movs	r6, #0
 8008174:	e7ae      	b.n	80080d4 <_strtod_l+0x9ac>
 8008176:	4f5f      	ldr	r7, [pc, #380]	; (80082f4 <_strtod_l+0xbcc>)
 8008178:	2600      	movs	r6, #0
 800817a:	e7a7      	b.n	80080cc <_strtod_l+0x9a4>
 800817c:	4b5d      	ldr	r3, [pc, #372]	; (80082f4 <_strtod_l+0xbcc>)
 800817e:	4630      	mov	r0, r6
 8008180:	4639      	mov	r1, r7
 8008182:	2200      	movs	r2, #0
 8008184:	f7f8 fa58 	bl	8000638 <__aeabi_dmul>
 8008188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818a:	4606      	mov	r6, r0
 800818c:	460f      	mov	r7, r1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d09c      	beq.n	80080cc <_strtod_l+0x9a4>
 8008192:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008196:	e79d      	b.n	80080d4 <_strtod_l+0x9ac>
 8008198:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80082c8 <_strtod_l+0xba0>
 800819c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80081a0:	ec57 6b17 	vmov	r6, r7, d7
 80081a4:	e796      	b.n	80080d4 <_strtod_l+0x9ac>
 80081a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80081aa:	9b04      	ldr	r3, [sp, #16]
 80081ac:	46ca      	mov	sl, r9
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1c2      	bne.n	8008138 <_strtod_l+0xa10>
 80081b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081b8:	0d1b      	lsrs	r3, r3, #20
 80081ba:	051b      	lsls	r3, r3, #20
 80081bc:	429a      	cmp	r2, r3
 80081be:	d1bb      	bne.n	8008138 <_strtod_l+0xa10>
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7f8 fd98 	bl	8000cf8 <__aeabi_d2lz>
 80081c8:	f7f8 fa08 	bl	80005dc <__aeabi_l2d>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f8 f878 	bl	80002c8 <__aeabi_dsub>
 80081d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081de:	ea43 0308 	orr.w	r3, r3, r8
 80081e2:	4313      	orrs	r3, r2
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	d054      	beq.n	8008294 <_strtod_l+0xb6c>
 80081ea:	a339      	add	r3, pc, #228	; (adr r3, 80082d0 <_strtod_l+0xba8>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f7f8 fc94 	bl	8000b1c <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f47f ace5 	bne.w	8007bc4 <_strtod_l+0x49c>
 80081fa:	a337      	add	r3, pc, #220	; (adr r3, 80082d8 <_strtod_l+0xbb0>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fca8 	bl	8000b58 <__aeabi_dcmpgt>
 8008208:	2800      	cmp	r0, #0
 800820a:	d095      	beq.n	8008138 <_strtod_l+0xa10>
 800820c:	e4da      	b.n	8007bc4 <_strtod_l+0x49c>
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	b333      	cbz	r3, 8008260 <_strtod_l+0xb38>
 8008212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008214:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008218:	d822      	bhi.n	8008260 <_strtod_l+0xb38>
 800821a:	a331      	add	r3, pc, #196	; (adr r3, 80082e0 <_strtod_l+0xbb8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fc84 	bl	8000b30 <__aeabi_dcmple>
 8008228:	b1a0      	cbz	r0, 8008254 <_strtod_l+0xb2c>
 800822a:	4639      	mov	r1, r7
 800822c:	4630      	mov	r0, r6
 800822e:	f7f8 fcdb 	bl	8000be8 <__aeabi_d2uiz>
 8008232:	2801      	cmp	r0, #1
 8008234:	bf38      	it	cc
 8008236:	2001      	movcc	r0, #1
 8008238:	f7f8 f984 	bl	8000544 <__aeabi_ui2d>
 800823c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823e:	4606      	mov	r6, r0
 8008240:	460f      	mov	r7, r1
 8008242:	bb23      	cbnz	r3, 800828e <_strtod_l+0xb66>
 8008244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008248:	9010      	str	r0, [sp, #64]	; 0x40
 800824a:	9311      	str	r3, [sp, #68]	; 0x44
 800824c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008250:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008258:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800825c:	1a9b      	subs	r3, r3, r2
 800825e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008260:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008264:	eeb0 0a48 	vmov.f32	s0, s16
 8008268:	eef0 0a68 	vmov.f32	s1, s17
 800826c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008270:	f002 fb18 	bl	800a8a4 <__ulp>
 8008274:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008278:	ec53 2b10 	vmov	r2, r3, d0
 800827c:	f7f8 f9dc 	bl	8000638 <__aeabi_dmul>
 8008280:	ec53 2b18 	vmov	r2, r3, d8
 8008284:	f7f8 f822 	bl	80002cc <__adddf3>
 8008288:	4680      	mov	r8, r0
 800828a:	4689      	mov	r9, r1
 800828c:	e78d      	b.n	80081aa <_strtod_l+0xa82>
 800828e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008292:	e7db      	b.n	800824c <_strtod_l+0xb24>
 8008294:	a314      	add	r3, pc, #80	; (adr r3, 80082e8 <_strtod_l+0xbc0>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f8 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800829e:	e7b3      	b.n	8008208 <_strtod_l+0xae0>
 80082a0:	2300      	movs	r3, #0
 80082a2:	930a      	str	r3, [sp, #40]	; 0x28
 80082a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	f7ff ba7c 	b.w	80077a6 <_strtod_l+0x7e>
 80082ae:	2a65      	cmp	r2, #101	; 0x65
 80082b0:	f43f ab75 	beq.w	800799e <_strtod_l+0x276>
 80082b4:	2a45      	cmp	r2, #69	; 0x45
 80082b6:	f43f ab72 	beq.w	800799e <_strtod_l+0x276>
 80082ba:	2301      	movs	r3, #1
 80082bc:	f7ff bbaa 	b.w	8007a14 <_strtod_l+0x2ec>
 80082c0:	00000000 	.word	0x00000000
 80082c4:	bff00000 	.word	0xbff00000
 80082c8:	00000000 	.word	0x00000000
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	94a03595 	.word	0x94a03595
 80082d4:	3fdfffff 	.word	0x3fdfffff
 80082d8:	35afe535 	.word	0x35afe535
 80082dc:	3fe00000 	.word	0x3fe00000
 80082e0:	ffc00000 	.word	0xffc00000
 80082e4:	41dfffff 	.word	0x41dfffff
 80082e8:	94a03595 	.word	0x94a03595
 80082ec:	3fcfffff 	.word	0x3fcfffff
 80082f0:	3ff00000 	.word	0x3ff00000
 80082f4:	3fe00000 	.word	0x3fe00000
 80082f8:	7ff00000 	.word	0x7ff00000
 80082fc:	7fe00000 	.word	0x7fe00000
 8008300:	7c9fffff 	.word	0x7c9fffff
 8008304:	7fefffff 	.word	0x7fefffff

08008308 <_strtod_r>:
 8008308:	4b01      	ldr	r3, [pc, #4]	; (8008310 <_strtod_r+0x8>)
 800830a:	f7ff ba0d 	b.w	8007728 <_strtod_l>
 800830e:	bf00      	nop
 8008310:	20002bc0 	.word	0x20002bc0

08008314 <_strtol_l.constprop.0>:
 8008314:	2b01      	cmp	r3, #1
 8008316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831a:	d001      	beq.n	8008320 <_strtol_l.constprop.0+0xc>
 800831c:	2b24      	cmp	r3, #36	; 0x24
 800831e:	d906      	bls.n	800832e <_strtol_l.constprop.0+0x1a>
 8008320:	f000 f926 	bl	8008570 <__errno>
 8008324:	2316      	movs	r3, #22
 8008326:	6003      	str	r3, [r0, #0]
 8008328:	2000      	movs	r0, #0
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008414 <_strtol_l.constprop.0+0x100>
 8008332:	460d      	mov	r5, r1
 8008334:	462e      	mov	r6, r5
 8008336:	f815 4b01 	ldrb.w	r4, [r5], #1
 800833a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800833e:	f017 0708 	ands.w	r7, r7, #8
 8008342:	d1f7      	bne.n	8008334 <_strtol_l.constprop.0+0x20>
 8008344:	2c2d      	cmp	r4, #45	; 0x2d
 8008346:	d132      	bne.n	80083ae <_strtol_l.constprop.0+0x9a>
 8008348:	782c      	ldrb	r4, [r5, #0]
 800834a:	2701      	movs	r7, #1
 800834c:	1cb5      	adds	r5, r6, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d05b      	beq.n	800840a <_strtol_l.constprop.0+0xf6>
 8008352:	2b10      	cmp	r3, #16
 8008354:	d109      	bne.n	800836a <_strtol_l.constprop.0+0x56>
 8008356:	2c30      	cmp	r4, #48	; 0x30
 8008358:	d107      	bne.n	800836a <_strtol_l.constprop.0+0x56>
 800835a:	782c      	ldrb	r4, [r5, #0]
 800835c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008360:	2c58      	cmp	r4, #88	; 0x58
 8008362:	d14d      	bne.n	8008400 <_strtol_l.constprop.0+0xec>
 8008364:	786c      	ldrb	r4, [r5, #1]
 8008366:	2310      	movs	r3, #16
 8008368:	3502      	adds	r5, #2
 800836a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800836e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008372:	f04f 0e00 	mov.w	lr, #0
 8008376:	fbb8 f9f3 	udiv	r9, r8, r3
 800837a:	4676      	mov	r6, lr
 800837c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008380:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008384:	f1bc 0f09 	cmp.w	ip, #9
 8008388:	d816      	bhi.n	80083b8 <_strtol_l.constprop.0+0xa4>
 800838a:	4664      	mov	r4, ip
 800838c:	42a3      	cmp	r3, r4
 800838e:	dd24      	ble.n	80083da <_strtol_l.constprop.0+0xc6>
 8008390:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008394:	d008      	beq.n	80083a8 <_strtol_l.constprop.0+0x94>
 8008396:	45b1      	cmp	r9, r6
 8008398:	d31c      	bcc.n	80083d4 <_strtol_l.constprop.0+0xc0>
 800839a:	d101      	bne.n	80083a0 <_strtol_l.constprop.0+0x8c>
 800839c:	45a2      	cmp	sl, r4
 800839e:	db19      	blt.n	80083d4 <_strtol_l.constprop.0+0xc0>
 80083a0:	fb06 4603 	mla	r6, r6, r3, r4
 80083a4:	f04f 0e01 	mov.w	lr, #1
 80083a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083ac:	e7e8      	b.n	8008380 <_strtol_l.constprop.0+0x6c>
 80083ae:	2c2b      	cmp	r4, #43	; 0x2b
 80083b0:	bf04      	itt	eq
 80083b2:	782c      	ldrbeq	r4, [r5, #0]
 80083b4:	1cb5      	addeq	r5, r6, #2
 80083b6:	e7ca      	b.n	800834e <_strtol_l.constprop.0+0x3a>
 80083b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083bc:	f1bc 0f19 	cmp.w	ip, #25
 80083c0:	d801      	bhi.n	80083c6 <_strtol_l.constprop.0+0xb2>
 80083c2:	3c37      	subs	r4, #55	; 0x37
 80083c4:	e7e2      	b.n	800838c <_strtol_l.constprop.0+0x78>
 80083c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083ca:	f1bc 0f19 	cmp.w	ip, #25
 80083ce:	d804      	bhi.n	80083da <_strtol_l.constprop.0+0xc6>
 80083d0:	3c57      	subs	r4, #87	; 0x57
 80083d2:	e7db      	b.n	800838c <_strtol_l.constprop.0+0x78>
 80083d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80083d8:	e7e6      	b.n	80083a8 <_strtol_l.constprop.0+0x94>
 80083da:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80083de:	d105      	bne.n	80083ec <_strtol_l.constprop.0+0xd8>
 80083e0:	2322      	movs	r3, #34	; 0x22
 80083e2:	6003      	str	r3, [r0, #0]
 80083e4:	4646      	mov	r6, r8
 80083e6:	b942      	cbnz	r2, 80083fa <_strtol_l.constprop.0+0xe6>
 80083e8:	4630      	mov	r0, r6
 80083ea:	e79e      	b.n	800832a <_strtol_l.constprop.0+0x16>
 80083ec:	b107      	cbz	r7, 80083f0 <_strtol_l.constprop.0+0xdc>
 80083ee:	4276      	negs	r6, r6
 80083f0:	2a00      	cmp	r2, #0
 80083f2:	d0f9      	beq.n	80083e8 <_strtol_l.constprop.0+0xd4>
 80083f4:	f1be 0f00 	cmp.w	lr, #0
 80083f8:	d000      	beq.n	80083fc <_strtol_l.constprop.0+0xe8>
 80083fa:	1e69      	subs	r1, r5, #1
 80083fc:	6011      	str	r1, [r2, #0]
 80083fe:	e7f3      	b.n	80083e8 <_strtol_l.constprop.0+0xd4>
 8008400:	2430      	movs	r4, #48	; 0x30
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1b1      	bne.n	800836a <_strtol_l.constprop.0+0x56>
 8008406:	2308      	movs	r3, #8
 8008408:	e7af      	b.n	800836a <_strtol_l.constprop.0+0x56>
 800840a:	2c30      	cmp	r4, #48	; 0x30
 800840c:	d0a5      	beq.n	800835a <_strtol_l.constprop.0+0x46>
 800840e:	230a      	movs	r3, #10
 8008410:	e7ab      	b.n	800836a <_strtol_l.constprop.0+0x56>
 8008412:	bf00      	nop
 8008414:	0800b669 	.word	0x0800b669

08008418 <_strtol_r>:
 8008418:	f7ff bf7c 	b.w	8008314 <_strtol_l.constprop.0>

0800841c <_fwalk_sglue>:
 800841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008420:	4607      	mov	r7, r0
 8008422:	4688      	mov	r8, r1
 8008424:	4614      	mov	r4, r2
 8008426:	2600      	movs	r6, #0
 8008428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800842c:	f1b9 0901 	subs.w	r9, r9, #1
 8008430:	d505      	bpl.n	800843e <_fwalk_sglue+0x22>
 8008432:	6824      	ldr	r4, [r4, #0]
 8008434:	2c00      	cmp	r4, #0
 8008436:	d1f7      	bne.n	8008428 <_fwalk_sglue+0xc>
 8008438:	4630      	mov	r0, r6
 800843a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843e:	89ab      	ldrh	r3, [r5, #12]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d907      	bls.n	8008454 <_fwalk_sglue+0x38>
 8008444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008448:	3301      	adds	r3, #1
 800844a:	d003      	beq.n	8008454 <_fwalk_sglue+0x38>
 800844c:	4629      	mov	r1, r5
 800844e:	4638      	mov	r0, r7
 8008450:	47c0      	blx	r8
 8008452:	4306      	orrs	r6, r0
 8008454:	3568      	adds	r5, #104	; 0x68
 8008456:	e7e9      	b.n	800842c <_fwalk_sglue+0x10>

08008458 <iprintf>:
 8008458:	b40f      	push	{r0, r1, r2, r3}
 800845a:	b507      	push	{r0, r1, r2, lr}
 800845c:	4906      	ldr	r1, [pc, #24]	; (8008478 <iprintf+0x20>)
 800845e:	ab04      	add	r3, sp, #16
 8008460:	6808      	ldr	r0, [r1, #0]
 8008462:	f853 2b04 	ldr.w	r2, [r3], #4
 8008466:	6881      	ldr	r1, [r0, #8]
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	f001 fc21 	bl	8009cb0 <_vfiprintf_r>
 800846e:	b003      	add	sp, #12
 8008470:	f85d eb04 	ldr.w	lr, [sp], #4
 8008474:	b004      	add	sp, #16
 8008476:	4770      	bx	lr
 8008478:	20002d78 	.word	0x20002d78

0800847c <_puts_r>:
 800847c:	6a03      	ldr	r3, [r0, #32]
 800847e:	b570      	push	{r4, r5, r6, lr}
 8008480:	6884      	ldr	r4, [r0, #8]
 8008482:	4605      	mov	r5, r0
 8008484:	460e      	mov	r6, r1
 8008486:	b90b      	cbnz	r3, 800848c <_puts_r+0x10>
 8008488:	f7ff f91a 	bl	80076c0 <__sinit>
 800848c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800848e:	07db      	lsls	r3, r3, #31
 8008490:	d405      	bmi.n	800849e <_puts_r+0x22>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	0598      	lsls	r0, r3, #22
 8008496:	d402      	bmi.n	800849e <_puts_r+0x22>
 8008498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849a:	f000 f893 	bl	80085c4 <__retarget_lock_acquire_recursive>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	0719      	lsls	r1, r3, #28
 80084a2:	d513      	bpl.n	80084cc <_puts_r+0x50>
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	b18b      	cbz	r3, 80084cc <_puts_r+0x50>
 80084a8:	3e01      	subs	r6, #1
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084b0:	3b01      	subs	r3, #1
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	b9e9      	cbnz	r1, 80084f2 <_puts_r+0x76>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	da2e      	bge.n	8008518 <_puts_r+0x9c>
 80084ba:	4622      	mov	r2, r4
 80084bc:	210a      	movs	r1, #10
 80084be:	4628      	mov	r0, r5
 80084c0:	f002 fba3 	bl	800ac0a <__swbuf_r>
 80084c4:	3001      	adds	r0, #1
 80084c6:	d007      	beq.n	80084d8 <_puts_r+0x5c>
 80084c8:	250a      	movs	r5, #10
 80084ca:	e007      	b.n	80084dc <_puts_r+0x60>
 80084cc:	4621      	mov	r1, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	f002 fbd8 	bl	800ac84 <__swsetup_r>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d0e7      	beq.n	80084a8 <_puts_r+0x2c>
 80084d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80084dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084de:	07da      	lsls	r2, r3, #31
 80084e0:	d405      	bmi.n	80084ee <_puts_r+0x72>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	059b      	lsls	r3, r3, #22
 80084e6:	d402      	bmi.n	80084ee <_puts_r+0x72>
 80084e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ea:	f000 f86c 	bl	80085c6 <__retarget_lock_release_recursive>
 80084ee:	4628      	mov	r0, r5
 80084f0:	bd70      	pop	{r4, r5, r6, pc}
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da04      	bge.n	8008500 <_puts_r+0x84>
 80084f6:	69a2      	ldr	r2, [r4, #24]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	dc06      	bgt.n	800850a <_puts_r+0x8e>
 80084fc:	290a      	cmp	r1, #10
 80084fe:	d004      	beq.n	800850a <_puts_r+0x8e>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	6022      	str	r2, [r4, #0]
 8008506:	7019      	strb	r1, [r3, #0]
 8008508:	e7cf      	b.n	80084aa <_puts_r+0x2e>
 800850a:	4622      	mov	r2, r4
 800850c:	4628      	mov	r0, r5
 800850e:	f002 fb7c 	bl	800ac0a <__swbuf_r>
 8008512:	3001      	adds	r0, #1
 8008514:	d1c9      	bne.n	80084aa <_puts_r+0x2e>
 8008516:	e7df      	b.n	80084d8 <_puts_r+0x5c>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	250a      	movs	r5, #10
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	6022      	str	r2, [r4, #0]
 8008520:	701d      	strb	r5, [r3, #0]
 8008522:	e7db      	b.n	80084dc <_puts_r+0x60>

08008524 <puts>:
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <puts+0xc>)
 8008526:	4601      	mov	r1, r0
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f7ff bfa7 	b.w	800847c <_puts_r>
 800852e:	bf00      	nop
 8008530:	20002d78 	.word	0x20002d78

08008534 <strncmp>:
 8008534:	b510      	push	{r4, lr}
 8008536:	b16a      	cbz	r2, 8008554 <strncmp+0x20>
 8008538:	3901      	subs	r1, #1
 800853a:	1884      	adds	r4, r0, r2
 800853c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008540:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008544:	429a      	cmp	r2, r3
 8008546:	d103      	bne.n	8008550 <strncmp+0x1c>
 8008548:	42a0      	cmp	r0, r4
 800854a:	d001      	beq.n	8008550 <strncmp+0x1c>
 800854c:	2a00      	cmp	r2, #0
 800854e:	d1f5      	bne.n	800853c <strncmp+0x8>
 8008550:	1ad0      	subs	r0, r2, r3
 8008552:	bd10      	pop	{r4, pc}
 8008554:	4610      	mov	r0, r2
 8008556:	e7fc      	b.n	8008552 <strncmp+0x1e>

08008558 <memset>:
 8008558:	4402      	add	r2, r0
 800855a:	4603      	mov	r3, r0
 800855c:	4293      	cmp	r3, r2
 800855e:	d100      	bne.n	8008562 <memset+0xa>
 8008560:	4770      	bx	lr
 8008562:	f803 1b01 	strb.w	r1, [r3], #1
 8008566:	e7f9      	b.n	800855c <memset+0x4>

08008568 <_localeconv_r>:
 8008568:	4800      	ldr	r0, [pc, #0]	; (800856c <_localeconv_r+0x4>)
 800856a:	4770      	bx	lr
 800856c:	20002cb0 	.word	0x20002cb0

08008570 <__errno>:
 8008570:	4b01      	ldr	r3, [pc, #4]	; (8008578 <__errno+0x8>)
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20002d78 	.word	0x20002d78

0800857c <__libc_init_array>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	4d0d      	ldr	r5, [pc, #52]	; (80085b4 <__libc_init_array+0x38>)
 8008580:	4c0d      	ldr	r4, [pc, #52]	; (80085b8 <__libc_init_array+0x3c>)
 8008582:	1b64      	subs	r4, r4, r5
 8008584:	10a4      	asrs	r4, r4, #2
 8008586:	2600      	movs	r6, #0
 8008588:	42a6      	cmp	r6, r4
 800858a:	d109      	bne.n	80085a0 <__libc_init_array+0x24>
 800858c:	4d0b      	ldr	r5, [pc, #44]	; (80085bc <__libc_init_array+0x40>)
 800858e:	4c0c      	ldr	r4, [pc, #48]	; (80085c0 <__libc_init_array+0x44>)
 8008590:	f002 ffc0 	bl	800b514 <_init>
 8008594:	1b64      	subs	r4, r4, r5
 8008596:	10a4      	asrs	r4, r4, #2
 8008598:	2600      	movs	r6, #0
 800859a:	42a6      	cmp	r6, r4
 800859c:	d105      	bne.n	80085aa <__libc_init_array+0x2e>
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a4:	4798      	blx	r3
 80085a6:	3601      	adds	r6, #1
 80085a8:	e7ee      	b.n	8008588 <__libc_init_array+0xc>
 80085aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ae:	4798      	blx	r3
 80085b0:	3601      	adds	r6, #1
 80085b2:	e7f2      	b.n	800859a <__libc_init_array+0x1e>
 80085b4:	0800ba30 	.word	0x0800ba30
 80085b8:	0800ba30 	.word	0x0800ba30
 80085bc:	0800ba30 	.word	0x0800ba30
 80085c0:	0800ba34 	.word	0x0800ba34

080085c4 <__retarget_lock_acquire_recursive>:
 80085c4:	4770      	bx	lr

080085c6 <__retarget_lock_release_recursive>:
 80085c6:	4770      	bx	lr

080085c8 <memcpy>:
 80085c8:	440a      	add	r2, r1
 80085ca:	4291      	cmp	r1, r2
 80085cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085d0:	d100      	bne.n	80085d4 <memcpy+0xc>
 80085d2:	4770      	bx	lr
 80085d4:	b510      	push	{r4, lr}
 80085d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085de:	4291      	cmp	r1, r2
 80085e0:	d1f9      	bne.n	80085d6 <memcpy+0xe>
 80085e2:	bd10      	pop	{r4, pc}
 80085e4:	0000      	movs	r0, r0
	...

080085e8 <nan>:
 80085e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80085f0 <nan+0x8>
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	00000000 	.word	0x00000000
 80085f4:	7ff80000 	.word	0x7ff80000

080085f8 <nanf>:
 80085f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008600 <nanf+0x8>
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	7fc00000 	.word	0x7fc00000

08008604 <quorem>:
 8008604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	6903      	ldr	r3, [r0, #16]
 800860a:	690c      	ldr	r4, [r1, #16]
 800860c:	42a3      	cmp	r3, r4
 800860e:	4607      	mov	r7, r0
 8008610:	db7e      	blt.n	8008710 <quorem+0x10c>
 8008612:	3c01      	subs	r4, #1
 8008614:	f101 0814 	add.w	r8, r1, #20
 8008618:	f100 0514 	add.w	r5, r0, #20
 800861c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008626:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800862a:	3301      	adds	r3, #1
 800862c:	429a      	cmp	r2, r3
 800862e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008632:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008636:	fbb2 f6f3 	udiv	r6, r2, r3
 800863a:	d331      	bcc.n	80086a0 <quorem+0x9c>
 800863c:	f04f 0e00 	mov.w	lr, #0
 8008640:	4640      	mov	r0, r8
 8008642:	46ac      	mov	ip, r5
 8008644:	46f2      	mov	sl, lr
 8008646:	f850 2b04 	ldr.w	r2, [r0], #4
 800864a:	b293      	uxth	r3, r2
 800864c:	fb06 e303 	mla	r3, r6, r3, lr
 8008650:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008654:	0c1a      	lsrs	r2, r3, #16
 8008656:	b29b      	uxth	r3, r3
 8008658:	ebaa 0303 	sub.w	r3, sl, r3
 800865c:	f8dc a000 	ldr.w	sl, [ip]
 8008660:	fa13 f38a 	uxtah	r3, r3, sl
 8008664:	fb06 220e 	mla	r2, r6, lr, r2
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	9b00      	ldr	r3, [sp, #0]
 800866c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008670:	b292      	uxth	r2, r2
 8008672:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008676:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800867a:	f8bd 3000 	ldrh.w	r3, [sp]
 800867e:	4581      	cmp	r9, r0
 8008680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008684:	f84c 3b04 	str.w	r3, [ip], #4
 8008688:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800868c:	d2db      	bcs.n	8008646 <quorem+0x42>
 800868e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008692:	b92b      	cbnz	r3, 80086a0 <quorem+0x9c>
 8008694:	9b01      	ldr	r3, [sp, #4]
 8008696:	3b04      	subs	r3, #4
 8008698:	429d      	cmp	r5, r3
 800869a:	461a      	mov	r2, r3
 800869c:	d32c      	bcc.n	80086f8 <quorem+0xf4>
 800869e:	613c      	str	r4, [r7, #16]
 80086a0:	4638      	mov	r0, r7
 80086a2:	f002 f859 	bl	800a758 <__mcmp>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	db22      	blt.n	80086f0 <quorem+0xec>
 80086aa:	3601      	adds	r6, #1
 80086ac:	4629      	mov	r1, r5
 80086ae:	2000      	movs	r0, #0
 80086b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80086b4:	f8d1 c000 	ldr.w	ip, [r1]
 80086b8:	b293      	uxth	r3, r2
 80086ba:	1ac3      	subs	r3, r0, r3
 80086bc:	0c12      	lsrs	r2, r2, #16
 80086be:	fa13 f38c 	uxtah	r3, r3, ip
 80086c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80086c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086d0:	45c1      	cmp	r9, r8
 80086d2:	f841 3b04 	str.w	r3, [r1], #4
 80086d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80086da:	d2e9      	bcs.n	80086b0 <quorem+0xac>
 80086dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086e4:	b922      	cbnz	r2, 80086f0 <quorem+0xec>
 80086e6:	3b04      	subs	r3, #4
 80086e8:	429d      	cmp	r5, r3
 80086ea:	461a      	mov	r2, r3
 80086ec:	d30a      	bcc.n	8008704 <quorem+0x100>
 80086ee:	613c      	str	r4, [r7, #16]
 80086f0:	4630      	mov	r0, r6
 80086f2:	b003      	add	sp, #12
 80086f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	3b04      	subs	r3, #4
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	d1ce      	bne.n	800869e <quorem+0x9a>
 8008700:	3c01      	subs	r4, #1
 8008702:	e7c9      	b.n	8008698 <quorem+0x94>
 8008704:	6812      	ldr	r2, [r2, #0]
 8008706:	3b04      	subs	r3, #4
 8008708:	2a00      	cmp	r2, #0
 800870a:	d1f0      	bne.n	80086ee <quorem+0xea>
 800870c:	3c01      	subs	r4, #1
 800870e:	e7eb      	b.n	80086e8 <quorem+0xe4>
 8008710:	2000      	movs	r0, #0
 8008712:	e7ee      	b.n	80086f2 <quorem+0xee>
 8008714:	0000      	movs	r0, r0
	...

08008718 <_dtoa_r>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	ed2d 8b04 	vpush	{d8-d9}
 8008720:	69c5      	ldr	r5, [r0, #28]
 8008722:	b093      	sub	sp, #76	; 0x4c
 8008724:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008728:	ec57 6b10 	vmov	r6, r7, d0
 800872c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008730:	9107      	str	r1, [sp, #28]
 8008732:	4604      	mov	r4, r0
 8008734:	920a      	str	r2, [sp, #40]	; 0x28
 8008736:	930d      	str	r3, [sp, #52]	; 0x34
 8008738:	b975      	cbnz	r5, 8008758 <_dtoa_r+0x40>
 800873a:	2010      	movs	r0, #16
 800873c:	f001 fbd2 	bl	8009ee4 <malloc>
 8008740:	4602      	mov	r2, r0
 8008742:	61e0      	str	r0, [r4, #28]
 8008744:	b920      	cbnz	r0, 8008750 <_dtoa_r+0x38>
 8008746:	4bae      	ldr	r3, [pc, #696]	; (8008a00 <_dtoa_r+0x2e8>)
 8008748:	21ef      	movs	r1, #239	; 0xef
 800874a:	48ae      	ldr	r0, [pc, #696]	; (8008a04 <_dtoa_r+0x2ec>)
 800874c:	f002 fbf4 	bl	800af38 <__assert_func>
 8008750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008754:	6005      	str	r5, [r0, #0]
 8008756:	60c5      	str	r5, [r0, #12]
 8008758:	69e3      	ldr	r3, [r4, #28]
 800875a:	6819      	ldr	r1, [r3, #0]
 800875c:	b151      	cbz	r1, 8008774 <_dtoa_r+0x5c>
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	604a      	str	r2, [r1, #4]
 8008762:	2301      	movs	r3, #1
 8008764:	4093      	lsls	r3, r2
 8008766:	608b      	str	r3, [r1, #8]
 8008768:	4620      	mov	r0, r4
 800876a:	f001 fd6f 	bl	800a24c <_Bfree>
 800876e:	69e3      	ldr	r3, [r4, #28]
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	1e3b      	subs	r3, r7, #0
 8008776:	bfbb      	ittet	lt
 8008778:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800877c:	9303      	strlt	r3, [sp, #12]
 800877e:	2300      	movge	r3, #0
 8008780:	2201      	movlt	r2, #1
 8008782:	bfac      	ite	ge
 8008784:	f8c8 3000 	strge.w	r3, [r8]
 8008788:	f8c8 2000 	strlt.w	r2, [r8]
 800878c:	4b9e      	ldr	r3, [pc, #632]	; (8008a08 <_dtoa_r+0x2f0>)
 800878e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008792:	ea33 0308 	bics.w	r3, r3, r8
 8008796:	d11b      	bne.n	80087d0 <_dtoa_r+0xb8>
 8008798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800879a:	f242 730f 	movw	r3, #9999	; 0x270f
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80087a4:	4333      	orrs	r3, r6
 80087a6:	f000 8593 	beq.w	80092d0 <_dtoa_r+0xbb8>
 80087aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087ac:	b963      	cbnz	r3, 80087c8 <_dtoa_r+0xb0>
 80087ae:	4b97      	ldr	r3, [pc, #604]	; (8008a0c <_dtoa_r+0x2f4>)
 80087b0:	e027      	b.n	8008802 <_dtoa_r+0xea>
 80087b2:	4b97      	ldr	r3, [pc, #604]	; (8008a10 <_dtoa_r+0x2f8>)
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	3308      	adds	r3, #8
 80087b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	9800      	ldr	r0, [sp, #0]
 80087be:	b013      	add	sp, #76	; 0x4c
 80087c0:	ecbd 8b04 	vpop	{d8-d9}
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	4b90      	ldr	r3, [pc, #576]	; (8008a0c <_dtoa_r+0x2f4>)
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	3303      	adds	r3, #3
 80087ce:	e7f3      	b.n	80087b8 <_dtoa_r+0xa0>
 80087d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087d4:	2200      	movs	r2, #0
 80087d6:	ec51 0b17 	vmov	r0, r1, d7
 80087da:	eeb0 8a47 	vmov.f32	s16, s14
 80087de:	eef0 8a67 	vmov.f32	s17, s15
 80087e2:	2300      	movs	r3, #0
 80087e4:	f7f8 f990 	bl	8000b08 <__aeabi_dcmpeq>
 80087e8:	4681      	mov	r9, r0
 80087ea:	b160      	cbz	r0, 8008806 <_dtoa_r+0xee>
 80087ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087ee:	2301      	movs	r3, #1
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 8568 	beq.w	80092ca <_dtoa_r+0xbb2>
 80087fa:	4b86      	ldr	r3, [pc, #536]	; (8008a14 <_dtoa_r+0x2fc>)
 80087fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	3b01      	subs	r3, #1
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	e7da      	b.n	80087bc <_dtoa_r+0xa4>
 8008806:	aa10      	add	r2, sp, #64	; 0x40
 8008808:	a911      	add	r1, sp, #68	; 0x44
 800880a:	4620      	mov	r0, r4
 800880c:	eeb0 0a48 	vmov.f32	s0, s16
 8008810:	eef0 0a68 	vmov.f32	s1, s17
 8008814:	f002 f8b6 	bl	800a984 <__d2b>
 8008818:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800881c:	4682      	mov	sl, r0
 800881e:	2d00      	cmp	r5, #0
 8008820:	d07f      	beq.n	8008922 <_dtoa_r+0x20a>
 8008822:	ee18 3a90 	vmov	r3, s17
 8008826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800882a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800882e:	ec51 0b18 	vmov	r0, r1, d8
 8008832:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800883a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800883e:	4619      	mov	r1, r3
 8008840:	2200      	movs	r2, #0
 8008842:	4b75      	ldr	r3, [pc, #468]	; (8008a18 <_dtoa_r+0x300>)
 8008844:	f7f7 fd40 	bl	80002c8 <__aeabi_dsub>
 8008848:	a367      	add	r3, pc, #412	; (adr r3, 80089e8 <_dtoa_r+0x2d0>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fef3 	bl	8000638 <__aeabi_dmul>
 8008852:	a367      	add	r3, pc, #412	; (adr r3, 80089f0 <_dtoa_r+0x2d8>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f7 fd38 	bl	80002cc <__adddf3>
 800885c:	4606      	mov	r6, r0
 800885e:	4628      	mov	r0, r5
 8008860:	460f      	mov	r7, r1
 8008862:	f7f7 fe7f 	bl	8000564 <__aeabi_i2d>
 8008866:	a364      	add	r3, pc, #400	; (adr r3, 80089f8 <_dtoa_r+0x2e0>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 fee4 	bl	8000638 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4630      	mov	r0, r6
 8008876:	4639      	mov	r1, r7
 8008878:	f7f7 fd28 	bl	80002cc <__adddf3>
 800887c:	4606      	mov	r6, r0
 800887e:	460f      	mov	r7, r1
 8008880:	f7f8 f98a 	bl	8000b98 <__aeabi_d2iz>
 8008884:	2200      	movs	r2, #0
 8008886:	4683      	mov	fp, r0
 8008888:	2300      	movs	r3, #0
 800888a:	4630      	mov	r0, r6
 800888c:	4639      	mov	r1, r7
 800888e:	f7f8 f945 	bl	8000b1c <__aeabi_dcmplt>
 8008892:	b148      	cbz	r0, 80088a8 <_dtoa_r+0x190>
 8008894:	4658      	mov	r0, fp
 8008896:	f7f7 fe65 	bl	8000564 <__aeabi_i2d>
 800889a:	4632      	mov	r2, r6
 800889c:	463b      	mov	r3, r7
 800889e:	f7f8 f933 	bl	8000b08 <__aeabi_dcmpeq>
 80088a2:	b908      	cbnz	r0, 80088a8 <_dtoa_r+0x190>
 80088a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80088a8:	f1bb 0f16 	cmp.w	fp, #22
 80088ac:	d857      	bhi.n	800895e <_dtoa_r+0x246>
 80088ae:	4b5b      	ldr	r3, [pc, #364]	; (8008a1c <_dtoa_r+0x304>)
 80088b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	ec51 0b18 	vmov	r0, r1, d8
 80088bc:	f7f8 f92e 	bl	8000b1c <__aeabi_dcmplt>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d04e      	beq.n	8008962 <_dtoa_r+0x24a>
 80088c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80088c8:	2300      	movs	r3, #0
 80088ca:	930c      	str	r3, [sp, #48]	; 0x30
 80088cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ce:	1b5b      	subs	r3, r3, r5
 80088d0:	1e5a      	subs	r2, r3, #1
 80088d2:	bf45      	ittet	mi
 80088d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80088d8:	9305      	strmi	r3, [sp, #20]
 80088da:	2300      	movpl	r3, #0
 80088dc:	2300      	movmi	r3, #0
 80088de:	9206      	str	r2, [sp, #24]
 80088e0:	bf54      	ite	pl
 80088e2:	9305      	strpl	r3, [sp, #20]
 80088e4:	9306      	strmi	r3, [sp, #24]
 80088e6:	f1bb 0f00 	cmp.w	fp, #0
 80088ea:	db3c      	blt.n	8008966 <_dtoa_r+0x24e>
 80088ec:	9b06      	ldr	r3, [sp, #24]
 80088ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80088f2:	445b      	add	r3, fp
 80088f4:	9306      	str	r3, [sp, #24]
 80088f6:	2300      	movs	r3, #0
 80088f8:	9308      	str	r3, [sp, #32]
 80088fa:	9b07      	ldr	r3, [sp, #28]
 80088fc:	2b09      	cmp	r3, #9
 80088fe:	d868      	bhi.n	80089d2 <_dtoa_r+0x2ba>
 8008900:	2b05      	cmp	r3, #5
 8008902:	bfc4      	itt	gt
 8008904:	3b04      	subgt	r3, #4
 8008906:	9307      	strgt	r3, [sp, #28]
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	f1a3 0302 	sub.w	r3, r3, #2
 800890e:	bfcc      	ite	gt
 8008910:	2500      	movgt	r5, #0
 8008912:	2501      	movle	r5, #1
 8008914:	2b03      	cmp	r3, #3
 8008916:	f200 8085 	bhi.w	8008a24 <_dtoa_r+0x30c>
 800891a:	e8df f003 	tbb	[pc, r3]
 800891e:	3b2e      	.short	0x3b2e
 8008920:	5839      	.short	0x5839
 8008922:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008926:	441d      	add	r5, r3
 8008928:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800892c:	2b20      	cmp	r3, #32
 800892e:	bfc1      	itttt	gt
 8008930:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008934:	fa08 f803 	lslgt.w	r8, r8, r3
 8008938:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800893c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008940:	bfd6      	itet	le
 8008942:	f1c3 0320 	rsble	r3, r3, #32
 8008946:	ea48 0003 	orrgt.w	r0, r8, r3
 800894a:	fa06 f003 	lslle.w	r0, r6, r3
 800894e:	f7f7 fdf9 	bl	8000544 <__aeabi_ui2d>
 8008952:	2201      	movs	r2, #1
 8008954:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008958:	3d01      	subs	r5, #1
 800895a:	920e      	str	r2, [sp, #56]	; 0x38
 800895c:	e76f      	b.n	800883e <_dtoa_r+0x126>
 800895e:	2301      	movs	r3, #1
 8008960:	e7b3      	b.n	80088ca <_dtoa_r+0x1b2>
 8008962:	900c      	str	r0, [sp, #48]	; 0x30
 8008964:	e7b2      	b.n	80088cc <_dtoa_r+0x1b4>
 8008966:	9b05      	ldr	r3, [sp, #20]
 8008968:	eba3 030b 	sub.w	r3, r3, fp
 800896c:	9305      	str	r3, [sp, #20]
 800896e:	f1cb 0300 	rsb	r3, fp, #0
 8008972:	9308      	str	r3, [sp, #32]
 8008974:	2300      	movs	r3, #0
 8008976:	930b      	str	r3, [sp, #44]	; 0x2c
 8008978:	e7bf      	b.n	80088fa <_dtoa_r+0x1e2>
 800897a:	2300      	movs	r3, #0
 800897c:	9309      	str	r3, [sp, #36]	; 0x24
 800897e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008980:	2b00      	cmp	r3, #0
 8008982:	dc52      	bgt.n	8008a2a <_dtoa_r+0x312>
 8008984:	2301      	movs	r3, #1
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	461a      	mov	r2, r3
 800898c:	920a      	str	r2, [sp, #40]	; 0x28
 800898e:	e00b      	b.n	80089a8 <_dtoa_r+0x290>
 8008990:	2301      	movs	r3, #1
 8008992:	e7f3      	b.n	800897c <_dtoa_r+0x264>
 8008994:	2300      	movs	r3, #0
 8008996:	9309      	str	r3, [sp, #36]	; 0x24
 8008998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899a:	445b      	add	r3, fp
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	3301      	adds	r3, #1
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	9304      	str	r3, [sp, #16]
 80089a4:	bfb8      	it	lt
 80089a6:	2301      	movlt	r3, #1
 80089a8:	69e0      	ldr	r0, [r4, #28]
 80089aa:	2100      	movs	r1, #0
 80089ac:	2204      	movs	r2, #4
 80089ae:	f102 0614 	add.w	r6, r2, #20
 80089b2:	429e      	cmp	r6, r3
 80089b4:	d93d      	bls.n	8008a32 <_dtoa_r+0x31a>
 80089b6:	6041      	str	r1, [r0, #4]
 80089b8:	4620      	mov	r0, r4
 80089ba:	f001 fc07 	bl	800a1cc <_Balloc>
 80089be:	9000      	str	r0, [sp, #0]
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d139      	bne.n	8008a38 <_dtoa_r+0x320>
 80089c4:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <_dtoa_r+0x308>)
 80089c6:	4602      	mov	r2, r0
 80089c8:	f240 11af 	movw	r1, #431	; 0x1af
 80089cc:	e6bd      	b.n	800874a <_dtoa_r+0x32>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e7e1      	b.n	8008996 <_dtoa_r+0x27e>
 80089d2:	2501      	movs	r5, #1
 80089d4:	2300      	movs	r3, #0
 80089d6:	9307      	str	r3, [sp, #28]
 80089d8:	9509      	str	r5, [sp, #36]	; 0x24
 80089da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	2200      	movs	r2, #0
 80089e4:	2312      	movs	r3, #18
 80089e6:	e7d1      	b.n	800898c <_dtoa_r+0x274>
 80089e8:	636f4361 	.word	0x636f4361
 80089ec:	3fd287a7 	.word	0x3fd287a7
 80089f0:	8b60c8b3 	.word	0x8b60c8b3
 80089f4:	3fc68a28 	.word	0x3fc68a28
 80089f8:	509f79fb 	.word	0x509f79fb
 80089fc:	3fd34413 	.word	0x3fd34413
 8008a00:	0800b776 	.word	0x0800b776
 8008a04:	0800b78d 	.word	0x0800b78d
 8008a08:	7ff00000 	.word	0x7ff00000
 8008a0c:	0800b772 	.word	0x0800b772
 8008a10:	0800b769 	.word	0x0800b769
 8008a14:	0800b5e5 	.word	0x0800b5e5
 8008a18:	3ff80000 	.word	0x3ff80000
 8008a1c:	0800b8e8 	.word	0x0800b8e8
 8008a20:	0800b7e5 	.word	0x0800b7e5
 8008a24:	2301      	movs	r3, #1
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
 8008a28:	e7d7      	b.n	80089da <_dtoa_r+0x2c2>
 8008a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	9304      	str	r3, [sp, #16]
 8008a30:	e7ba      	b.n	80089a8 <_dtoa_r+0x290>
 8008a32:	3101      	adds	r1, #1
 8008a34:	0052      	lsls	r2, r2, #1
 8008a36:	e7ba      	b.n	80089ae <_dtoa_r+0x296>
 8008a38:	69e3      	ldr	r3, [r4, #28]
 8008a3a:	9a00      	ldr	r2, [sp, #0]
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	2b0e      	cmp	r3, #14
 8008a42:	f200 80a8 	bhi.w	8008b96 <_dtoa_r+0x47e>
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	f000 80a5 	beq.w	8008b96 <_dtoa_r+0x47e>
 8008a4c:	f1bb 0f00 	cmp.w	fp, #0
 8008a50:	dd38      	ble.n	8008ac4 <_dtoa_r+0x3ac>
 8008a52:	4bc0      	ldr	r3, [pc, #768]	; (8008d54 <_dtoa_r+0x63c>)
 8008a54:	f00b 020f 	and.w	r2, fp, #15
 8008a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008a60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008a64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008a68:	d019      	beq.n	8008a9e <_dtoa_r+0x386>
 8008a6a:	4bbb      	ldr	r3, [pc, #748]	; (8008d58 <_dtoa_r+0x640>)
 8008a6c:	ec51 0b18 	vmov	r0, r1, d8
 8008a70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a74:	f7f7 ff0a 	bl	800088c <__aeabi_ddiv>
 8008a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a7c:	f008 080f 	and.w	r8, r8, #15
 8008a80:	2503      	movs	r5, #3
 8008a82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008d58 <_dtoa_r+0x640>
 8008a86:	f1b8 0f00 	cmp.w	r8, #0
 8008a8a:	d10a      	bne.n	8008aa2 <_dtoa_r+0x38a>
 8008a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a90:	4632      	mov	r2, r6
 8008a92:	463b      	mov	r3, r7
 8008a94:	f7f7 fefa 	bl	800088c <__aeabi_ddiv>
 8008a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a9c:	e02b      	b.n	8008af6 <_dtoa_r+0x3de>
 8008a9e:	2502      	movs	r5, #2
 8008aa0:	e7ef      	b.n	8008a82 <_dtoa_r+0x36a>
 8008aa2:	f018 0f01 	tst.w	r8, #1
 8008aa6:	d008      	beq.n	8008aba <_dtoa_r+0x3a2>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ab0:	f7f7 fdc2 	bl	8000638 <__aeabi_dmul>
 8008ab4:	3501      	adds	r5, #1
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008abe:	f109 0908 	add.w	r9, r9, #8
 8008ac2:	e7e0      	b.n	8008a86 <_dtoa_r+0x36e>
 8008ac4:	f000 809f 	beq.w	8008c06 <_dtoa_r+0x4ee>
 8008ac8:	f1cb 0600 	rsb	r6, fp, #0
 8008acc:	4ba1      	ldr	r3, [pc, #644]	; (8008d54 <_dtoa_r+0x63c>)
 8008ace:	4fa2      	ldr	r7, [pc, #648]	; (8008d58 <_dtoa_r+0x640>)
 8008ad0:	f006 020f 	and.w	r2, r6, #15
 8008ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	ec51 0b18 	vmov	r0, r1, d8
 8008ae0:	f7f7 fdaa 	bl	8000638 <__aeabi_dmul>
 8008ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae8:	1136      	asrs	r6, r6, #4
 8008aea:	2300      	movs	r3, #0
 8008aec:	2502      	movs	r5, #2
 8008aee:	2e00      	cmp	r6, #0
 8008af0:	d17e      	bne.n	8008bf0 <_dtoa_r+0x4d8>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1d0      	bne.n	8008a98 <_dtoa_r+0x380>
 8008af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008af8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8084 	beq.w	8008c0a <_dtoa_r+0x4f2>
 8008b02:	4b96      	ldr	r3, [pc, #600]	; (8008d5c <_dtoa_r+0x644>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f8 f807 	bl	8000b1c <__aeabi_dcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d07b      	beq.n	8008c0a <_dtoa_r+0x4f2>
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d078      	beq.n	8008c0a <_dtoa_r+0x4f2>
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	dd39      	ble.n	8008b92 <_dtoa_r+0x47a>
 8008b1e:	4b90      	ldr	r3, [pc, #576]	; (8008d60 <_dtoa_r+0x648>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	f7f7 fd87 	bl	8000638 <__aeabi_dmul>
 8008b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2e:	9e01      	ldr	r6, [sp, #4]
 8008b30:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008b34:	3501      	adds	r5, #1
 8008b36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7f7 fd12 	bl	8000564 <__aeabi_i2d>
 8008b40:	4642      	mov	r2, r8
 8008b42:	464b      	mov	r3, r9
 8008b44:	f7f7 fd78 	bl	8000638 <__aeabi_dmul>
 8008b48:	4b86      	ldr	r3, [pc, #536]	; (8008d64 <_dtoa_r+0x64c>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f7f7 fbbe 	bl	80002cc <__adddf3>
 8008b50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	d158      	bne.n	8008c10 <_dtoa_r+0x4f8>
 8008b5e:	4b82      	ldr	r3, [pc, #520]	; (8008d68 <_dtoa_r+0x650>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	4640      	mov	r0, r8
 8008b64:	4649      	mov	r1, r9
 8008b66:	f7f7 fbaf 	bl	80002c8 <__aeabi_dsub>
 8008b6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b6e:	4680      	mov	r8, r0
 8008b70:	4689      	mov	r9, r1
 8008b72:	f7f7 fff1 	bl	8000b58 <__aeabi_dcmpgt>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f040 8296 	bne.w	80090a8 <_dtoa_r+0x990>
 8008b7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b80:	4640      	mov	r0, r8
 8008b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b86:	4649      	mov	r1, r9
 8008b88:	f7f7 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	f040 8289 	bne.w	80090a4 <_dtoa_r+0x98c>
 8008b92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f2c0 814e 	blt.w	8008e3a <_dtoa_r+0x722>
 8008b9e:	f1bb 0f0e 	cmp.w	fp, #14
 8008ba2:	f300 814a 	bgt.w	8008e3a <_dtoa_r+0x722>
 8008ba6:	4b6b      	ldr	r3, [pc, #428]	; (8008d54 <_dtoa_r+0x63c>)
 8008ba8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f280 80dc 	bge.w	8008d70 <_dtoa_r+0x658>
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f300 80d8 	bgt.w	8008d70 <_dtoa_r+0x658>
 8008bc0:	f040 826f 	bne.w	80090a2 <_dtoa_r+0x98a>
 8008bc4:	4b68      	ldr	r3, [pc, #416]	; (8008d68 <_dtoa_r+0x650>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4649      	mov	r1, r9
 8008bcc:	f7f7 fd34 	bl	8000638 <__aeabi_dmul>
 8008bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd4:	f7f7 ffb6 	bl	8000b44 <__aeabi_dcmpge>
 8008bd8:	9e04      	ldr	r6, [sp, #16]
 8008bda:	4637      	mov	r7, r6
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f040 8245 	bne.w	800906c <_dtoa_r+0x954>
 8008be2:	9d00      	ldr	r5, [sp, #0]
 8008be4:	2331      	movs	r3, #49	; 0x31
 8008be6:	f805 3b01 	strb.w	r3, [r5], #1
 8008bea:	f10b 0b01 	add.w	fp, fp, #1
 8008bee:	e241      	b.n	8009074 <_dtoa_r+0x95c>
 8008bf0:	07f2      	lsls	r2, r6, #31
 8008bf2:	d505      	bpl.n	8008c00 <_dtoa_r+0x4e8>
 8008bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf8:	f7f7 fd1e 	bl	8000638 <__aeabi_dmul>
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	2301      	movs	r3, #1
 8008c00:	1076      	asrs	r6, r6, #1
 8008c02:	3708      	adds	r7, #8
 8008c04:	e773      	b.n	8008aee <_dtoa_r+0x3d6>
 8008c06:	2502      	movs	r5, #2
 8008c08:	e775      	b.n	8008af6 <_dtoa_r+0x3de>
 8008c0a:	9e04      	ldr	r6, [sp, #16]
 8008c0c:	465f      	mov	r7, fp
 8008c0e:	e792      	b.n	8008b36 <_dtoa_r+0x41e>
 8008c10:	9900      	ldr	r1, [sp, #0]
 8008c12:	4b50      	ldr	r3, [pc, #320]	; (8008d54 <_dtoa_r+0x63c>)
 8008c14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c18:	4431      	add	r1, r6
 8008c1a:	9102      	str	r1, [sp, #8]
 8008c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c1e:	eeb0 9a47 	vmov.f32	s18, s14
 8008c22:	eef0 9a67 	vmov.f32	s19, s15
 8008c26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c2e:	2900      	cmp	r1, #0
 8008c30:	d044      	beq.n	8008cbc <_dtoa_r+0x5a4>
 8008c32:	494e      	ldr	r1, [pc, #312]	; (8008d6c <_dtoa_r+0x654>)
 8008c34:	2000      	movs	r0, #0
 8008c36:	f7f7 fe29 	bl	800088c <__aeabi_ddiv>
 8008c3a:	ec53 2b19 	vmov	r2, r3, d9
 8008c3e:	f7f7 fb43 	bl	80002c8 <__aeabi_dsub>
 8008c42:	9d00      	ldr	r5, [sp, #0]
 8008c44:	ec41 0b19 	vmov	d9, r0, r1
 8008c48:	4649      	mov	r1, r9
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	f7f7 ffa4 	bl	8000b98 <__aeabi_d2iz>
 8008c50:	4606      	mov	r6, r0
 8008c52:	f7f7 fc87 	bl	8000564 <__aeabi_i2d>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	f7f7 fb33 	bl	80002c8 <__aeabi_dsub>
 8008c62:	3630      	adds	r6, #48	; 0x30
 8008c64:	f805 6b01 	strb.w	r6, [r5], #1
 8008c68:	ec53 2b19 	vmov	r2, r3, d9
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	4689      	mov	r9, r1
 8008c70:	f7f7 ff54 	bl	8000b1c <__aeabi_dcmplt>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d164      	bne.n	8008d42 <_dtoa_r+0x62a>
 8008c78:	4642      	mov	r2, r8
 8008c7a:	464b      	mov	r3, r9
 8008c7c:	4937      	ldr	r1, [pc, #220]	; (8008d5c <_dtoa_r+0x644>)
 8008c7e:	2000      	movs	r0, #0
 8008c80:	f7f7 fb22 	bl	80002c8 <__aeabi_dsub>
 8008c84:	ec53 2b19 	vmov	r2, r3, d9
 8008c88:	f7f7 ff48 	bl	8000b1c <__aeabi_dcmplt>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f040 80b6 	bne.w	8008dfe <_dtoa_r+0x6e6>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	429d      	cmp	r5, r3
 8008c96:	f43f af7c 	beq.w	8008b92 <_dtoa_r+0x47a>
 8008c9a:	4b31      	ldr	r3, [pc, #196]	; (8008d60 <_dtoa_r+0x648>)
 8008c9c:	ec51 0b19 	vmov	r0, r1, d9
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f7f7 fcc9 	bl	8000638 <__aeabi_dmul>
 8008ca6:	4b2e      	ldr	r3, [pc, #184]	; (8008d60 <_dtoa_r+0x648>)
 8008ca8:	ec41 0b19 	vmov	d9, r0, r1
 8008cac:	2200      	movs	r2, #0
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	f7f7 fcc1 	bl	8000638 <__aeabi_dmul>
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	4689      	mov	r9, r1
 8008cba:	e7c5      	b.n	8008c48 <_dtoa_r+0x530>
 8008cbc:	ec51 0b17 	vmov	r0, r1, d7
 8008cc0:	f7f7 fcba 	bl	8000638 <__aeabi_dmul>
 8008cc4:	9b02      	ldr	r3, [sp, #8]
 8008cc6:	9d00      	ldr	r5, [sp, #0]
 8008cc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cca:	ec41 0b19 	vmov	d9, r0, r1
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	f7f7 ff61 	bl	8000b98 <__aeabi_d2iz>
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	f7f7 fc44 	bl	8000564 <__aeabi_i2d>
 8008cdc:	3630      	adds	r6, #48	; 0x30
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	f7f7 faef 	bl	80002c8 <__aeabi_dsub>
 8008cea:	f805 6b01 	strb.w	r6, [r5], #1
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	429d      	cmp	r5, r3
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4689      	mov	r9, r1
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	d124      	bne.n	8008d46 <_dtoa_r+0x62e>
 8008cfc:	4b1b      	ldr	r3, [pc, #108]	; (8008d6c <_dtoa_r+0x654>)
 8008cfe:	ec51 0b19 	vmov	r0, r1, d9
 8008d02:	f7f7 fae3 	bl	80002cc <__adddf3>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d173      	bne.n	8008dfe <_dtoa_r+0x6e6>
 8008d16:	ec53 2b19 	vmov	r2, r3, d9
 8008d1a:	4914      	ldr	r1, [pc, #80]	; (8008d6c <_dtoa_r+0x654>)
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f7f7 fad3 	bl	80002c8 <__aeabi_dsub>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4640      	mov	r0, r8
 8008d28:	4649      	mov	r1, r9
 8008d2a:	f7f7 fef7 	bl	8000b1c <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f43f af2f 	beq.w	8008b92 <_dtoa_r+0x47a>
 8008d34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d36:	1e6b      	subs	r3, r5, #1
 8008d38:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	d0f8      	beq.n	8008d34 <_dtoa_r+0x61c>
 8008d42:	46bb      	mov	fp, r7
 8008d44:	e04a      	b.n	8008ddc <_dtoa_r+0x6c4>
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <_dtoa_r+0x648>)
 8008d48:	f7f7 fc76 	bl	8000638 <__aeabi_dmul>
 8008d4c:	4680      	mov	r8, r0
 8008d4e:	4689      	mov	r9, r1
 8008d50:	e7bd      	b.n	8008cce <_dtoa_r+0x5b6>
 8008d52:	bf00      	nop
 8008d54:	0800b8e8 	.word	0x0800b8e8
 8008d58:	0800b8c0 	.word	0x0800b8c0
 8008d5c:	3ff00000 	.word	0x3ff00000
 8008d60:	40240000 	.word	0x40240000
 8008d64:	401c0000 	.word	0x401c0000
 8008d68:	40140000 	.word	0x40140000
 8008d6c:	3fe00000 	.word	0x3fe00000
 8008d70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d74:	9d00      	ldr	r5, [sp, #0]
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fd85 	bl	800088c <__aeabi_ddiv>
 8008d82:	f7f7 ff09 	bl	8000b98 <__aeabi_d2iz>
 8008d86:	9001      	str	r0, [sp, #4]
 8008d88:	f7f7 fbec 	bl	8000564 <__aeabi_i2d>
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	464b      	mov	r3, r9
 8008d90:	f7f7 fc52 	bl	8000638 <__aeabi_dmul>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fa94 	bl	80002c8 <__aeabi_dsub>
 8008da0:	9e01      	ldr	r6, [sp, #4]
 8008da2:	9f04      	ldr	r7, [sp, #16]
 8008da4:	3630      	adds	r6, #48	; 0x30
 8008da6:	f805 6b01 	strb.w	r6, [r5], #1
 8008daa:	9e00      	ldr	r6, [sp, #0]
 8008dac:	1bae      	subs	r6, r5, r6
 8008dae:	42b7      	cmp	r7, r6
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	d134      	bne.n	8008e20 <_dtoa_r+0x708>
 8008db6:	f7f7 fa89 	bl	80002cc <__adddf3>
 8008dba:	4642      	mov	r2, r8
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	f7f7 fec9 	bl	8000b58 <__aeabi_dcmpgt>
 8008dc6:	b9c8      	cbnz	r0, 8008dfc <_dtoa_r+0x6e4>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8008dd4:	b110      	cbz	r0, 8008ddc <_dtoa_r+0x6c4>
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	07db      	lsls	r3, r3, #31
 8008dda:	d40f      	bmi.n	8008dfc <_dtoa_r+0x6e4>
 8008ddc:	4651      	mov	r1, sl
 8008dde:	4620      	mov	r0, r4
 8008de0:	f001 fa34 	bl	800a24c <_Bfree>
 8008de4:	2300      	movs	r3, #0
 8008de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008de8:	702b      	strb	r3, [r5, #0]
 8008dea:	f10b 0301 	add.w	r3, fp, #1
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f43f ace2 	beq.w	80087bc <_dtoa_r+0xa4>
 8008df8:	601d      	str	r5, [r3, #0]
 8008dfa:	e4df      	b.n	80087bc <_dtoa_r+0xa4>
 8008dfc:	465f      	mov	r7, fp
 8008dfe:	462b      	mov	r3, r5
 8008e00:	461d      	mov	r5, r3
 8008e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e06:	2a39      	cmp	r2, #57	; 0x39
 8008e08:	d106      	bne.n	8008e18 <_dtoa_r+0x700>
 8008e0a:	9a00      	ldr	r2, [sp, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d1f7      	bne.n	8008e00 <_dtoa_r+0x6e8>
 8008e10:	9900      	ldr	r1, [sp, #0]
 8008e12:	2230      	movs	r2, #48	; 0x30
 8008e14:	3701      	adds	r7, #1
 8008e16:	700a      	strb	r2, [r1, #0]
 8008e18:	781a      	ldrb	r2, [r3, #0]
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	e790      	b.n	8008d42 <_dtoa_r+0x62a>
 8008e20:	4ba3      	ldr	r3, [pc, #652]	; (80090b0 <_dtoa_r+0x998>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7f7 fc08 	bl	8000638 <__aeabi_dmul>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	f7f7 fe6a 	bl	8000b08 <__aeabi_dcmpeq>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d09e      	beq.n	8008d76 <_dtoa_r+0x65e>
 8008e38:	e7d0      	b.n	8008ddc <_dtoa_r+0x6c4>
 8008e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	f000 80ca 	beq.w	8008fd6 <_dtoa_r+0x8be>
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	2a01      	cmp	r2, #1
 8008e46:	f300 80ad 	bgt.w	8008fa4 <_dtoa_r+0x88c>
 8008e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	f000 80a5 	beq.w	8008f9c <_dtoa_r+0x884>
 8008e52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e56:	9e08      	ldr	r6, [sp, #32]
 8008e58:	9d05      	ldr	r5, [sp, #20]
 8008e5a:	9a05      	ldr	r2, [sp, #20]
 8008e5c:	441a      	add	r2, r3
 8008e5e:	9205      	str	r2, [sp, #20]
 8008e60:	9a06      	ldr	r2, [sp, #24]
 8008e62:	2101      	movs	r1, #1
 8008e64:	441a      	add	r2, r3
 8008e66:	4620      	mov	r0, r4
 8008e68:	9206      	str	r2, [sp, #24]
 8008e6a:	f001 faef 	bl	800a44c <__i2b>
 8008e6e:	4607      	mov	r7, r0
 8008e70:	b165      	cbz	r5, 8008e8c <_dtoa_r+0x774>
 8008e72:	9b06      	ldr	r3, [sp, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dd09      	ble.n	8008e8c <_dtoa_r+0x774>
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	9a05      	ldr	r2, [sp, #20]
 8008e7c:	bfa8      	it	ge
 8008e7e:	462b      	movge	r3, r5
 8008e80:	1ad2      	subs	r2, r2, r3
 8008e82:	9205      	str	r2, [sp, #20]
 8008e84:	9a06      	ldr	r2, [sp, #24]
 8008e86:	1aed      	subs	r5, r5, r3
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	9b08      	ldr	r3, [sp, #32]
 8008e8e:	b1f3      	cbz	r3, 8008ece <_dtoa_r+0x7b6>
 8008e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80a3 	beq.w	8008fde <_dtoa_r+0x8c6>
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	dd10      	ble.n	8008ebe <_dtoa_r+0x7a6>
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	4632      	mov	r2, r6
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f001 fb93 	bl	800a5cc <__pow5mult>
 8008ea6:	4652      	mov	r2, sl
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	4607      	mov	r7, r0
 8008eac:	4620      	mov	r0, r4
 8008eae:	f001 fae3 	bl	800a478 <__multiply>
 8008eb2:	4651      	mov	r1, sl
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f001 f9c8 	bl	800a24c <_Bfree>
 8008ebc:	46c2      	mov	sl, r8
 8008ebe:	9b08      	ldr	r3, [sp, #32]
 8008ec0:	1b9a      	subs	r2, r3, r6
 8008ec2:	d004      	beq.n	8008ece <_dtoa_r+0x7b6>
 8008ec4:	4651      	mov	r1, sl
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f001 fb80 	bl	800a5cc <__pow5mult>
 8008ecc:	4682      	mov	sl, r0
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f001 fabb 	bl	800a44c <__i2b>
 8008ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	4606      	mov	r6, r0
 8008edc:	f340 8081 	ble.w	8008fe2 <_dtoa_r+0x8ca>
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f001 fb71 	bl	800a5cc <__pow5mult>
 8008eea:	9b07      	ldr	r3, [sp, #28]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	4606      	mov	r6, r0
 8008ef0:	dd7a      	ble.n	8008fe8 <_dtoa_r+0x8d0>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	6933      	ldr	r3, [r6, #16]
 8008ef8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008efc:	6918      	ldr	r0, [r3, #16]
 8008efe:	f001 fa57 	bl	800a3b0 <__hi0bits>
 8008f02:	f1c0 0020 	rsb	r0, r0, #32
 8008f06:	9b06      	ldr	r3, [sp, #24]
 8008f08:	4418      	add	r0, r3
 8008f0a:	f010 001f 	ands.w	r0, r0, #31
 8008f0e:	f000 8094 	beq.w	800903a <_dtoa_r+0x922>
 8008f12:	f1c0 0320 	rsb	r3, r0, #32
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	f340 8085 	ble.w	8009026 <_dtoa_r+0x90e>
 8008f1c:	9b05      	ldr	r3, [sp, #20]
 8008f1e:	f1c0 001c 	rsb	r0, r0, #28
 8008f22:	4403      	add	r3, r0
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	4403      	add	r3, r0
 8008f2a:	4405      	add	r5, r0
 8008f2c:	9306      	str	r3, [sp, #24]
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dd05      	ble.n	8008f40 <_dtoa_r+0x828>
 8008f34:	4651      	mov	r1, sl
 8008f36:	461a      	mov	r2, r3
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f001 fba1 	bl	800a680 <__lshift>
 8008f3e:	4682      	mov	sl, r0
 8008f40:	9b06      	ldr	r3, [sp, #24]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dd05      	ble.n	8008f52 <_dtoa_r+0x83a>
 8008f46:	4631      	mov	r1, r6
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f001 fb98 	bl	800a680 <__lshift>
 8008f50:	4606      	mov	r6, r0
 8008f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d072      	beq.n	800903e <_dtoa_r+0x926>
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4650      	mov	r0, sl
 8008f5c:	f001 fbfc 	bl	800a758 <__mcmp>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	da6c      	bge.n	800903e <_dtoa_r+0x926>
 8008f64:	2300      	movs	r3, #0
 8008f66:	4651      	mov	r1, sl
 8008f68:	220a      	movs	r2, #10
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f001 f990 	bl	800a290 <__multadd>
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008f76:	4682      	mov	sl, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 81b0 	beq.w	80092de <_dtoa_r+0xbc6>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4639      	mov	r1, r7
 8008f82:	220a      	movs	r2, #10
 8008f84:	4620      	mov	r0, r4
 8008f86:	f001 f983 	bl	800a290 <__multadd>
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	4607      	mov	r7, r0
 8008f90:	f300 8096 	bgt.w	80090c0 <_dtoa_r+0x9a8>
 8008f94:	9b07      	ldr	r3, [sp, #28]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	dc59      	bgt.n	800904e <_dtoa_r+0x936>
 8008f9a:	e091      	b.n	80090c0 <_dtoa_r+0x9a8>
 8008f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fa2:	e758      	b.n	8008e56 <_dtoa_r+0x73e>
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	1e5e      	subs	r6, r3, #1
 8008fa8:	9b08      	ldr	r3, [sp, #32]
 8008faa:	42b3      	cmp	r3, r6
 8008fac:	bfbf      	itttt	lt
 8008fae:	9b08      	ldrlt	r3, [sp, #32]
 8008fb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008fb2:	9608      	strlt	r6, [sp, #32]
 8008fb4:	1af3      	sublt	r3, r6, r3
 8008fb6:	bfb4      	ite	lt
 8008fb8:	18d2      	addlt	r2, r2, r3
 8008fba:	1b9e      	subge	r6, r3, r6
 8008fbc:	9b04      	ldr	r3, [sp, #16]
 8008fbe:	bfbc      	itt	lt
 8008fc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008fc2:	2600      	movlt	r6, #0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfb7      	itett	lt
 8008fc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008fcc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008fd0:	1a9d      	sublt	r5, r3, r2
 8008fd2:	2300      	movlt	r3, #0
 8008fd4:	e741      	b.n	8008e5a <_dtoa_r+0x742>
 8008fd6:	9e08      	ldr	r6, [sp, #32]
 8008fd8:	9d05      	ldr	r5, [sp, #20]
 8008fda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fdc:	e748      	b.n	8008e70 <_dtoa_r+0x758>
 8008fde:	9a08      	ldr	r2, [sp, #32]
 8008fe0:	e770      	b.n	8008ec4 <_dtoa_r+0x7ac>
 8008fe2:	9b07      	ldr	r3, [sp, #28]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	dc19      	bgt.n	800901c <_dtoa_r+0x904>
 8008fe8:	9b02      	ldr	r3, [sp, #8]
 8008fea:	b9bb      	cbnz	r3, 800901c <_dtoa_r+0x904>
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff2:	b99b      	cbnz	r3, 800901c <_dtoa_r+0x904>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ffa:	0d1b      	lsrs	r3, r3, #20
 8008ffc:	051b      	lsls	r3, r3, #20
 8008ffe:	b183      	cbz	r3, 8009022 <_dtoa_r+0x90a>
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	3301      	adds	r3, #1
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	9b06      	ldr	r3, [sp, #24]
 8009008:	3301      	adds	r3, #1
 800900a:	9306      	str	r3, [sp, #24]
 800900c:	f04f 0801 	mov.w	r8, #1
 8009010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009012:	2b00      	cmp	r3, #0
 8009014:	f47f af6f 	bne.w	8008ef6 <_dtoa_r+0x7de>
 8009018:	2001      	movs	r0, #1
 800901a:	e774      	b.n	8008f06 <_dtoa_r+0x7ee>
 800901c:	f04f 0800 	mov.w	r8, #0
 8009020:	e7f6      	b.n	8009010 <_dtoa_r+0x8f8>
 8009022:	4698      	mov	r8, r3
 8009024:	e7f4      	b.n	8009010 <_dtoa_r+0x8f8>
 8009026:	d082      	beq.n	8008f2e <_dtoa_r+0x816>
 8009028:	9a05      	ldr	r2, [sp, #20]
 800902a:	331c      	adds	r3, #28
 800902c:	441a      	add	r2, r3
 800902e:	9205      	str	r2, [sp, #20]
 8009030:	9a06      	ldr	r2, [sp, #24]
 8009032:	441a      	add	r2, r3
 8009034:	441d      	add	r5, r3
 8009036:	9206      	str	r2, [sp, #24]
 8009038:	e779      	b.n	8008f2e <_dtoa_r+0x816>
 800903a:	4603      	mov	r3, r0
 800903c:	e7f4      	b.n	8009028 <_dtoa_r+0x910>
 800903e:	9b04      	ldr	r3, [sp, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	dc37      	bgt.n	80090b4 <_dtoa_r+0x99c>
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	2b02      	cmp	r3, #2
 8009048:	dd34      	ble.n	80090b4 <_dtoa_r+0x99c>
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	b963      	cbnz	r3, 800906c <_dtoa_r+0x954>
 8009052:	4631      	mov	r1, r6
 8009054:	2205      	movs	r2, #5
 8009056:	4620      	mov	r0, r4
 8009058:	f001 f91a 	bl	800a290 <__multadd>
 800905c:	4601      	mov	r1, r0
 800905e:	4606      	mov	r6, r0
 8009060:	4650      	mov	r0, sl
 8009062:	f001 fb79 	bl	800a758 <__mcmp>
 8009066:	2800      	cmp	r0, #0
 8009068:	f73f adbb 	bgt.w	8008be2 <_dtoa_r+0x4ca>
 800906c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906e:	9d00      	ldr	r5, [sp, #0]
 8009070:	ea6f 0b03 	mvn.w	fp, r3
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	4631      	mov	r1, r6
 800907a:	4620      	mov	r0, r4
 800907c:	f001 f8e6 	bl	800a24c <_Bfree>
 8009080:	2f00      	cmp	r7, #0
 8009082:	f43f aeab 	beq.w	8008ddc <_dtoa_r+0x6c4>
 8009086:	f1b8 0f00 	cmp.w	r8, #0
 800908a:	d005      	beq.n	8009098 <_dtoa_r+0x980>
 800908c:	45b8      	cmp	r8, r7
 800908e:	d003      	beq.n	8009098 <_dtoa_r+0x980>
 8009090:	4641      	mov	r1, r8
 8009092:	4620      	mov	r0, r4
 8009094:	f001 f8da 	bl	800a24c <_Bfree>
 8009098:	4639      	mov	r1, r7
 800909a:	4620      	mov	r0, r4
 800909c:	f001 f8d6 	bl	800a24c <_Bfree>
 80090a0:	e69c      	b.n	8008ddc <_dtoa_r+0x6c4>
 80090a2:	2600      	movs	r6, #0
 80090a4:	4637      	mov	r7, r6
 80090a6:	e7e1      	b.n	800906c <_dtoa_r+0x954>
 80090a8:	46bb      	mov	fp, r7
 80090aa:	4637      	mov	r7, r6
 80090ac:	e599      	b.n	8008be2 <_dtoa_r+0x4ca>
 80090ae:	bf00      	nop
 80090b0:	40240000 	.word	0x40240000
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 80c8 	beq.w	800924c <_dtoa_r+0xb34>
 80090bc:	9b04      	ldr	r3, [sp, #16]
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	dd05      	ble.n	80090d0 <_dtoa_r+0x9b8>
 80090c4:	4639      	mov	r1, r7
 80090c6:	462a      	mov	r2, r5
 80090c8:	4620      	mov	r0, r4
 80090ca:	f001 fad9 	bl	800a680 <__lshift>
 80090ce:	4607      	mov	r7, r0
 80090d0:	f1b8 0f00 	cmp.w	r8, #0
 80090d4:	d05b      	beq.n	800918e <_dtoa_r+0xa76>
 80090d6:	6879      	ldr	r1, [r7, #4]
 80090d8:	4620      	mov	r0, r4
 80090da:	f001 f877 	bl	800a1cc <_Balloc>
 80090de:	4605      	mov	r5, r0
 80090e0:	b928      	cbnz	r0, 80090ee <_dtoa_r+0x9d6>
 80090e2:	4b83      	ldr	r3, [pc, #524]	; (80092f0 <_dtoa_r+0xbd8>)
 80090e4:	4602      	mov	r2, r0
 80090e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80090ea:	f7ff bb2e 	b.w	800874a <_dtoa_r+0x32>
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	3202      	adds	r2, #2
 80090f2:	0092      	lsls	r2, r2, #2
 80090f4:	f107 010c 	add.w	r1, r7, #12
 80090f8:	300c      	adds	r0, #12
 80090fa:	f7ff fa65 	bl	80085c8 <memcpy>
 80090fe:	2201      	movs	r2, #1
 8009100:	4629      	mov	r1, r5
 8009102:	4620      	mov	r0, r4
 8009104:	f001 fabc 	bl	800a680 <__lshift>
 8009108:	9b00      	ldr	r3, [sp, #0]
 800910a:	3301      	adds	r3, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009112:	4413      	add	r3, r2
 8009114:	9308      	str	r3, [sp, #32]
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	46b8      	mov	r8, r7
 800911e:	9306      	str	r3, [sp, #24]
 8009120:	4607      	mov	r7, r0
 8009122:	9b04      	ldr	r3, [sp, #16]
 8009124:	4631      	mov	r1, r6
 8009126:	3b01      	subs	r3, #1
 8009128:	4650      	mov	r0, sl
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	f7ff fa6a 	bl	8008604 <quorem>
 8009130:	4641      	mov	r1, r8
 8009132:	9002      	str	r0, [sp, #8]
 8009134:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009138:	4650      	mov	r0, sl
 800913a:	f001 fb0d 	bl	800a758 <__mcmp>
 800913e:	463a      	mov	r2, r7
 8009140:	9005      	str	r0, [sp, #20]
 8009142:	4631      	mov	r1, r6
 8009144:	4620      	mov	r0, r4
 8009146:	f001 fb23 	bl	800a790 <__mdiff>
 800914a:	68c2      	ldr	r2, [r0, #12]
 800914c:	4605      	mov	r5, r0
 800914e:	bb02      	cbnz	r2, 8009192 <_dtoa_r+0xa7a>
 8009150:	4601      	mov	r1, r0
 8009152:	4650      	mov	r0, sl
 8009154:	f001 fb00 	bl	800a758 <__mcmp>
 8009158:	4602      	mov	r2, r0
 800915a:	4629      	mov	r1, r5
 800915c:	4620      	mov	r0, r4
 800915e:	9209      	str	r2, [sp, #36]	; 0x24
 8009160:	f001 f874 	bl	800a24c <_Bfree>
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009168:	9d04      	ldr	r5, [sp, #16]
 800916a:	ea43 0102 	orr.w	r1, r3, r2
 800916e:	9b06      	ldr	r3, [sp, #24]
 8009170:	4319      	orrs	r1, r3
 8009172:	d110      	bne.n	8009196 <_dtoa_r+0xa7e>
 8009174:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009178:	d029      	beq.n	80091ce <_dtoa_r+0xab6>
 800917a:	9b05      	ldr	r3, [sp, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	dd02      	ble.n	8009186 <_dtoa_r+0xa6e>
 8009180:	9b02      	ldr	r3, [sp, #8]
 8009182:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	f883 9000 	strb.w	r9, [r3]
 800918c:	e774      	b.n	8009078 <_dtoa_r+0x960>
 800918e:	4638      	mov	r0, r7
 8009190:	e7ba      	b.n	8009108 <_dtoa_r+0x9f0>
 8009192:	2201      	movs	r2, #1
 8009194:	e7e1      	b.n	800915a <_dtoa_r+0xa42>
 8009196:	9b05      	ldr	r3, [sp, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	db04      	blt.n	80091a6 <_dtoa_r+0xa8e>
 800919c:	9907      	ldr	r1, [sp, #28]
 800919e:	430b      	orrs	r3, r1
 80091a0:	9906      	ldr	r1, [sp, #24]
 80091a2:	430b      	orrs	r3, r1
 80091a4:	d120      	bne.n	80091e8 <_dtoa_r+0xad0>
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	dded      	ble.n	8009186 <_dtoa_r+0xa6e>
 80091aa:	4651      	mov	r1, sl
 80091ac:	2201      	movs	r2, #1
 80091ae:	4620      	mov	r0, r4
 80091b0:	f001 fa66 	bl	800a680 <__lshift>
 80091b4:	4631      	mov	r1, r6
 80091b6:	4682      	mov	sl, r0
 80091b8:	f001 face 	bl	800a758 <__mcmp>
 80091bc:	2800      	cmp	r0, #0
 80091be:	dc03      	bgt.n	80091c8 <_dtoa_r+0xab0>
 80091c0:	d1e1      	bne.n	8009186 <_dtoa_r+0xa6e>
 80091c2:	f019 0f01 	tst.w	r9, #1
 80091c6:	d0de      	beq.n	8009186 <_dtoa_r+0xa6e>
 80091c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80091cc:	d1d8      	bne.n	8009180 <_dtoa_r+0xa68>
 80091ce:	9a01      	ldr	r2, [sp, #4]
 80091d0:	2339      	movs	r3, #57	; 0x39
 80091d2:	7013      	strb	r3, [r2, #0]
 80091d4:	462b      	mov	r3, r5
 80091d6:	461d      	mov	r5, r3
 80091d8:	3b01      	subs	r3, #1
 80091da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091de:	2a39      	cmp	r2, #57	; 0x39
 80091e0:	d06c      	beq.n	80092bc <_dtoa_r+0xba4>
 80091e2:	3201      	adds	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	e747      	b.n	8009078 <_dtoa_r+0x960>
 80091e8:	2a00      	cmp	r2, #0
 80091ea:	dd07      	ble.n	80091fc <_dtoa_r+0xae4>
 80091ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80091f0:	d0ed      	beq.n	80091ce <_dtoa_r+0xab6>
 80091f2:	9a01      	ldr	r2, [sp, #4]
 80091f4:	f109 0301 	add.w	r3, r9, #1
 80091f8:	7013      	strb	r3, [r2, #0]
 80091fa:	e73d      	b.n	8009078 <_dtoa_r+0x960>
 80091fc:	9b04      	ldr	r3, [sp, #16]
 80091fe:	9a08      	ldr	r2, [sp, #32]
 8009200:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009204:	4293      	cmp	r3, r2
 8009206:	d043      	beq.n	8009290 <_dtoa_r+0xb78>
 8009208:	4651      	mov	r1, sl
 800920a:	2300      	movs	r3, #0
 800920c:	220a      	movs	r2, #10
 800920e:	4620      	mov	r0, r4
 8009210:	f001 f83e 	bl	800a290 <__multadd>
 8009214:	45b8      	cmp	r8, r7
 8009216:	4682      	mov	sl, r0
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	f04f 020a 	mov.w	r2, #10
 8009220:	4641      	mov	r1, r8
 8009222:	4620      	mov	r0, r4
 8009224:	d107      	bne.n	8009236 <_dtoa_r+0xb1e>
 8009226:	f001 f833 	bl	800a290 <__multadd>
 800922a:	4680      	mov	r8, r0
 800922c:	4607      	mov	r7, r0
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	3301      	adds	r3, #1
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	e775      	b.n	8009122 <_dtoa_r+0xa0a>
 8009236:	f001 f82b 	bl	800a290 <__multadd>
 800923a:	4639      	mov	r1, r7
 800923c:	4680      	mov	r8, r0
 800923e:	2300      	movs	r3, #0
 8009240:	220a      	movs	r2, #10
 8009242:	4620      	mov	r0, r4
 8009244:	f001 f824 	bl	800a290 <__multadd>
 8009248:	4607      	mov	r7, r0
 800924a:	e7f0      	b.n	800922e <_dtoa_r+0xb16>
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	9d00      	ldr	r5, [sp, #0]
 8009252:	4631      	mov	r1, r6
 8009254:	4650      	mov	r0, sl
 8009256:	f7ff f9d5 	bl	8008604 <quorem>
 800925a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800925e:	9b00      	ldr	r3, [sp, #0]
 8009260:	f805 9b01 	strb.w	r9, [r5], #1
 8009264:	1aea      	subs	r2, r5, r3
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	4293      	cmp	r3, r2
 800926a:	dd07      	ble.n	800927c <_dtoa_r+0xb64>
 800926c:	4651      	mov	r1, sl
 800926e:	2300      	movs	r3, #0
 8009270:	220a      	movs	r2, #10
 8009272:	4620      	mov	r0, r4
 8009274:	f001 f80c 	bl	800a290 <__multadd>
 8009278:	4682      	mov	sl, r0
 800927a:	e7ea      	b.n	8009252 <_dtoa_r+0xb3a>
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfc8      	it	gt
 8009282:	461d      	movgt	r5, r3
 8009284:	9b00      	ldr	r3, [sp, #0]
 8009286:	bfd8      	it	le
 8009288:	2501      	movle	r5, #1
 800928a:	441d      	add	r5, r3
 800928c:	f04f 0800 	mov.w	r8, #0
 8009290:	4651      	mov	r1, sl
 8009292:	2201      	movs	r2, #1
 8009294:	4620      	mov	r0, r4
 8009296:	f001 f9f3 	bl	800a680 <__lshift>
 800929a:	4631      	mov	r1, r6
 800929c:	4682      	mov	sl, r0
 800929e:	f001 fa5b 	bl	800a758 <__mcmp>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	dc96      	bgt.n	80091d4 <_dtoa_r+0xabc>
 80092a6:	d102      	bne.n	80092ae <_dtoa_r+0xb96>
 80092a8:	f019 0f01 	tst.w	r9, #1
 80092ac:	d192      	bne.n	80091d4 <_dtoa_r+0xabc>
 80092ae:	462b      	mov	r3, r5
 80092b0:	461d      	mov	r5, r3
 80092b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092b6:	2a30      	cmp	r2, #48	; 0x30
 80092b8:	d0fa      	beq.n	80092b0 <_dtoa_r+0xb98>
 80092ba:	e6dd      	b.n	8009078 <_dtoa_r+0x960>
 80092bc:	9a00      	ldr	r2, [sp, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d189      	bne.n	80091d6 <_dtoa_r+0xabe>
 80092c2:	f10b 0b01 	add.w	fp, fp, #1
 80092c6:	2331      	movs	r3, #49	; 0x31
 80092c8:	e796      	b.n	80091f8 <_dtoa_r+0xae0>
 80092ca:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <_dtoa_r+0xbdc>)
 80092cc:	f7ff ba99 	b.w	8008802 <_dtoa_r+0xea>
 80092d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f47f aa6d 	bne.w	80087b2 <_dtoa_r+0x9a>
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <_dtoa_r+0xbe0>)
 80092da:	f7ff ba92 	b.w	8008802 <_dtoa_r+0xea>
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dcb5      	bgt.n	8009250 <_dtoa_r+0xb38>
 80092e4:	9b07      	ldr	r3, [sp, #28]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	f73f aeb1 	bgt.w	800904e <_dtoa_r+0x936>
 80092ec:	e7b0      	b.n	8009250 <_dtoa_r+0xb38>
 80092ee:	bf00      	nop
 80092f0:	0800b7e5 	.word	0x0800b7e5
 80092f4:	0800b5e4 	.word	0x0800b5e4
 80092f8:	0800b769 	.word	0x0800b769

080092fc <rshift>:
 80092fc:	6903      	ldr	r3, [r0, #16]
 80092fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009306:	ea4f 1261 	mov.w	r2, r1, asr #5
 800930a:	f100 0414 	add.w	r4, r0, #20
 800930e:	dd45      	ble.n	800939c <rshift+0xa0>
 8009310:	f011 011f 	ands.w	r1, r1, #31
 8009314:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009318:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800931c:	d10c      	bne.n	8009338 <rshift+0x3c>
 800931e:	f100 0710 	add.w	r7, r0, #16
 8009322:	4629      	mov	r1, r5
 8009324:	42b1      	cmp	r1, r6
 8009326:	d334      	bcc.n	8009392 <rshift+0x96>
 8009328:	1a9b      	subs	r3, r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	1eea      	subs	r2, r5, #3
 800932e:	4296      	cmp	r6, r2
 8009330:	bf38      	it	cc
 8009332:	2300      	movcc	r3, #0
 8009334:	4423      	add	r3, r4
 8009336:	e015      	b.n	8009364 <rshift+0x68>
 8009338:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800933c:	f1c1 0820 	rsb	r8, r1, #32
 8009340:	40cf      	lsrs	r7, r1
 8009342:	f105 0e04 	add.w	lr, r5, #4
 8009346:	46a1      	mov	r9, r4
 8009348:	4576      	cmp	r6, lr
 800934a:	46f4      	mov	ip, lr
 800934c:	d815      	bhi.n	800937a <rshift+0x7e>
 800934e:	1a9a      	subs	r2, r3, r2
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	3a04      	subs	r2, #4
 8009354:	3501      	adds	r5, #1
 8009356:	42ae      	cmp	r6, r5
 8009358:	bf38      	it	cc
 800935a:	2200      	movcc	r2, #0
 800935c:	18a3      	adds	r3, r4, r2
 800935e:	50a7      	str	r7, [r4, r2]
 8009360:	b107      	cbz	r7, 8009364 <rshift+0x68>
 8009362:	3304      	adds	r3, #4
 8009364:	1b1a      	subs	r2, r3, r4
 8009366:	42a3      	cmp	r3, r4
 8009368:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800936c:	bf08      	it	eq
 800936e:	2300      	moveq	r3, #0
 8009370:	6102      	str	r2, [r0, #16]
 8009372:	bf08      	it	eq
 8009374:	6143      	streq	r3, [r0, #20]
 8009376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800937a:	f8dc c000 	ldr.w	ip, [ip]
 800937e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009382:	ea4c 0707 	orr.w	r7, ip, r7
 8009386:	f849 7b04 	str.w	r7, [r9], #4
 800938a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800938e:	40cf      	lsrs	r7, r1
 8009390:	e7da      	b.n	8009348 <rshift+0x4c>
 8009392:	f851 cb04 	ldr.w	ip, [r1], #4
 8009396:	f847 cf04 	str.w	ip, [r7, #4]!
 800939a:	e7c3      	b.n	8009324 <rshift+0x28>
 800939c:	4623      	mov	r3, r4
 800939e:	e7e1      	b.n	8009364 <rshift+0x68>

080093a0 <__hexdig_fun>:
 80093a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093a4:	2b09      	cmp	r3, #9
 80093a6:	d802      	bhi.n	80093ae <__hexdig_fun+0xe>
 80093a8:	3820      	subs	r0, #32
 80093aa:	b2c0      	uxtb	r0, r0
 80093ac:	4770      	bx	lr
 80093ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d801      	bhi.n	80093ba <__hexdig_fun+0x1a>
 80093b6:	3847      	subs	r0, #71	; 0x47
 80093b8:	e7f7      	b.n	80093aa <__hexdig_fun+0xa>
 80093ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d801      	bhi.n	80093c6 <__hexdig_fun+0x26>
 80093c2:	3827      	subs	r0, #39	; 0x27
 80093c4:	e7f1      	b.n	80093aa <__hexdig_fun+0xa>
 80093c6:	2000      	movs	r0, #0
 80093c8:	4770      	bx	lr
	...

080093cc <__gethex>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	4617      	mov	r7, r2
 80093d2:	680a      	ldr	r2, [r1, #0]
 80093d4:	b085      	sub	sp, #20
 80093d6:	f102 0b02 	add.w	fp, r2, #2
 80093da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80093de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80093e2:	4681      	mov	r9, r0
 80093e4:	468a      	mov	sl, r1
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	32fe      	adds	r2, #254	; 0xfe
 80093ea:	eb02 030b 	add.w	r3, r2, fp
 80093ee:	46d8      	mov	r8, fp
 80093f0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	2830      	cmp	r0, #48	; 0x30
 80093f8:	d0f7      	beq.n	80093ea <__gethex+0x1e>
 80093fa:	f7ff ffd1 	bl	80093a0 <__hexdig_fun>
 80093fe:	4604      	mov	r4, r0
 8009400:	2800      	cmp	r0, #0
 8009402:	d138      	bne.n	8009476 <__gethex+0xaa>
 8009404:	49a7      	ldr	r1, [pc, #668]	; (80096a4 <__gethex+0x2d8>)
 8009406:	2201      	movs	r2, #1
 8009408:	4640      	mov	r0, r8
 800940a:	f7ff f893 	bl	8008534 <strncmp>
 800940e:	4606      	mov	r6, r0
 8009410:	2800      	cmp	r0, #0
 8009412:	d169      	bne.n	80094e8 <__gethex+0x11c>
 8009414:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009418:	465d      	mov	r5, fp
 800941a:	f7ff ffc1 	bl	80093a0 <__hexdig_fun>
 800941e:	2800      	cmp	r0, #0
 8009420:	d064      	beq.n	80094ec <__gethex+0x120>
 8009422:	465a      	mov	r2, fp
 8009424:	7810      	ldrb	r0, [r2, #0]
 8009426:	2830      	cmp	r0, #48	; 0x30
 8009428:	4690      	mov	r8, r2
 800942a:	f102 0201 	add.w	r2, r2, #1
 800942e:	d0f9      	beq.n	8009424 <__gethex+0x58>
 8009430:	f7ff ffb6 	bl	80093a0 <__hexdig_fun>
 8009434:	2301      	movs	r3, #1
 8009436:	fab0 f480 	clz	r4, r0
 800943a:	0964      	lsrs	r4, r4, #5
 800943c:	465e      	mov	r6, fp
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	4642      	mov	r2, r8
 8009442:	4615      	mov	r5, r2
 8009444:	3201      	adds	r2, #1
 8009446:	7828      	ldrb	r0, [r5, #0]
 8009448:	f7ff ffaa 	bl	80093a0 <__hexdig_fun>
 800944c:	2800      	cmp	r0, #0
 800944e:	d1f8      	bne.n	8009442 <__gethex+0x76>
 8009450:	4994      	ldr	r1, [pc, #592]	; (80096a4 <__gethex+0x2d8>)
 8009452:	2201      	movs	r2, #1
 8009454:	4628      	mov	r0, r5
 8009456:	f7ff f86d 	bl	8008534 <strncmp>
 800945a:	b978      	cbnz	r0, 800947c <__gethex+0xb0>
 800945c:	b946      	cbnz	r6, 8009470 <__gethex+0xa4>
 800945e:	1c6e      	adds	r6, r5, #1
 8009460:	4632      	mov	r2, r6
 8009462:	4615      	mov	r5, r2
 8009464:	3201      	adds	r2, #1
 8009466:	7828      	ldrb	r0, [r5, #0]
 8009468:	f7ff ff9a 	bl	80093a0 <__hexdig_fun>
 800946c:	2800      	cmp	r0, #0
 800946e:	d1f8      	bne.n	8009462 <__gethex+0x96>
 8009470:	1b73      	subs	r3, r6, r5
 8009472:	009e      	lsls	r6, r3, #2
 8009474:	e004      	b.n	8009480 <__gethex+0xb4>
 8009476:	2400      	movs	r4, #0
 8009478:	4626      	mov	r6, r4
 800947a:	e7e1      	b.n	8009440 <__gethex+0x74>
 800947c:	2e00      	cmp	r6, #0
 800947e:	d1f7      	bne.n	8009470 <__gethex+0xa4>
 8009480:	782b      	ldrb	r3, [r5, #0]
 8009482:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009486:	2b50      	cmp	r3, #80	; 0x50
 8009488:	d13d      	bne.n	8009506 <__gethex+0x13a>
 800948a:	786b      	ldrb	r3, [r5, #1]
 800948c:	2b2b      	cmp	r3, #43	; 0x2b
 800948e:	d02f      	beq.n	80094f0 <__gethex+0x124>
 8009490:	2b2d      	cmp	r3, #45	; 0x2d
 8009492:	d031      	beq.n	80094f8 <__gethex+0x12c>
 8009494:	1c69      	adds	r1, r5, #1
 8009496:	f04f 0b00 	mov.w	fp, #0
 800949a:	7808      	ldrb	r0, [r1, #0]
 800949c:	f7ff ff80 	bl	80093a0 <__hexdig_fun>
 80094a0:	1e42      	subs	r2, r0, #1
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	2a18      	cmp	r2, #24
 80094a6:	d82e      	bhi.n	8009506 <__gethex+0x13a>
 80094a8:	f1a0 0210 	sub.w	r2, r0, #16
 80094ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094b0:	f7ff ff76 	bl	80093a0 <__hexdig_fun>
 80094b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80094b8:	fa5f fc8c 	uxtb.w	ip, ip
 80094bc:	f1bc 0f18 	cmp.w	ip, #24
 80094c0:	d91d      	bls.n	80094fe <__gethex+0x132>
 80094c2:	f1bb 0f00 	cmp.w	fp, #0
 80094c6:	d000      	beq.n	80094ca <__gethex+0xfe>
 80094c8:	4252      	negs	r2, r2
 80094ca:	4416      	add	r6, r2
 80094cc:	f8ca 1000 	str.w	r1, [sl]
 80094d0:	b1dc      	cbz	r4, 800950a <__gethex+0x13e>
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bf14      	ite	ne
 80094d8:	f04f 0800 	movne.w	r8, #0
 80094dc:	f04f 0806 	moveq.w	r8, #6
 80094e0:	4640      	mov	r0, r8
 80094e2:	b005      	add	sp, #20
 80094e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	4645      	mov	r5, r8
 80094ea:	4626      	mov	r6, r4
 80094ec:	2401      	movs	r4, #1
 80094ee:	e7c7      	b.n	8009480 <__gethex+0xb4>
 80094f0:	f04f 0b00 	mov.w	fp, #0
 80094f4:	1ca9      	adds	r1, r5, #2
 80094f6:	e7d0      	b.n	800949a <__gethex+0xce>
 80094f8:	f04f 0b01 	mov.w	fp, #1
 80094fc:	e7fa      	b.n	80094f4 <__gethex+0x128>
 80094fe:	230a      	movs	r3, #10
 8009500:	fb03 0002 	mla	r0, r3, r2, r0
 8009504:	e7d0      	b.n	80094a8 <__gethex+0xdc>
 8009506:	4629      	mov	r1, r5
 8009508:	e7e0      	b.n	80094cc <__gethex+0x100>
 800950a:	eba5 0308 	sub.w	r3, r5, r8
 800950e:	3b01      	subs	r3, #1
 8009510:	4621      	mov	r1, r4
 8009512:	2b07      	cmp	r3, #7
 8009514:	dc0a      	bgt.n	800952c <__gethex+0x160>
 8009516:	4648      	mov	r0, r9
 8009518:	f000 fe58 	bl	800a1cc <_Balloc>
 800951c:	4604      	mov	r4, r0
 800951e:	b940      	cbnz	r0, 8009532 <__gethex+0x166>
 8009520:	4b61      	ldr	r3, [pc, #388]	; (80096a8 <__gethex+0x2dc>)
 8009522:	4602      	mov	r2, r0
 8009524:	21e4      	movs	r1, #228	; 0xe4
 8009526:	4861      	ldr	r0, [pc, #388]	; (80096ac <__gethex+0x2e0>)
 8009528:	f001 fd06 	bl	800af38 <__assert_func>
 800952c:	3101      	adds	r1, #1
 800952e:	105b      	asrs	r3, r3, #1
 8009530:	e7ef      	b.n	8009512 <__gethex+0x146>
 8009532:	f100 0a14 	add.w	sl, r0, #20
 8009536:	2300      	movs	r3, #0
 8009538:	495a      	ldr	r1, [pc, #360]	; (80096a4 <__gethex+0x2d8>)
 800953a:	f8cd a004 	str.w	sl, [sp, #4]
 800953e:	469b      	mov	fp, r3
 8009540:	45a8      	cmp	r8, r5
 8009542:	d342      	bcc.n	80095ca <__gethex+0x1fe>
 8009544:	9801      	ldr	r0, [sp, #4]
 8009546:	f840 bb04 	str.w	fp, [r0], #4
 800954a:	eba0 000a 	sub.w	r0, r0, sl
 800954e:	1080      	asrs	r0, r0, #2
 8009550:	6120      	str	r0, [r4, #16]
 8009552:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009556:	4658      	mov	r0, fp
 8009558:	f000 ff2a 	bl	800a3b0 <__hi0bits>
 800955c:	683d      	ldr	r5, [r7, #0]
 800955e:	eba8 0000 	sub.w	r0, r8, r0
 8009562:	42a8      	cmp	r0, r5
 8009564:	dd59      	ble.n	800961a <__gethex+0x24e>
 8009566:	eba0 0805 	sub.w	r8, r0, r5
 800956a:	4641      	mov	r1, r8
 800956c:	4620      	mov	r0, r4
 800956e:	f001 fab9 	bl	800aae4 <__any_on>
 8009572:	4683      	mov	fp, r0
 8009574:	b1b8      	cbz	r0, 80095a6 <__gethex+0x1da>
 8009576:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800957a:	1159      	asrs	r1, r3, #5
 800957c:	f003 021f 	and.w	r2, r3, #31
 8009580:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009584:	f04f 0b01 	mov.w	fp, #1
 8009588:	fa0b f202 	lsl.w	r2, fp, r2
 800958c:	420a      	tst	r2, r1
 800958e:	d00a      	beq.n	80095a6 <__gethex+0x1da>
 8009590:	455b      	cmp	r3, fp
 8009592:	dd06      	ble.n	80095a2 <__gethex+0x1d6>
 8009594:	f1a8 0102 	sub.w	r1, r8, #2
 8009598:	4620      	mov	r0, r4
 800959a:	f001 faa3 	bl	800aae4 <__any_on>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d138      	bne.n	8009614 <__gethex+0x248>
 80095a2:	f04f 0b02 	mov.w	fp, #2
 80095a6:	4641      	mov	r1, r8
 80095a8:	4620      	mov	r0, r4
 80095aa:	f7ff fea7 	bl	80092fc <rshift>
 80095ae:	4446      	add	r6, r8
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	42b3      	cmp	r3, r6
 80095b4:	da41      	bge.n	800963a <__gethex+0x26e>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4648      	mov	r0, r9
 80095ba:	f000 fe47 	bl	800a24c <_Bfree>
 80095be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095c0:	2300      	movs	r3, #0
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80095c8:	e78a      	b.n	80094e0 <__gethex+0x114>
 80095ca:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80095ce:	2a2e      	cmp	r2, #46	; 0x2e
 80095d0:	d014      	beq.n	80095fc <__gethex+0x230>
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	d106      	bne.n	80095e4 <__gethex+0x218>
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	f843 bb04 	str.w	fp, [r3], #4
 80095dc:	f04f 0b00 	mov.w	fp, #0
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	465b      	mov	r3, fp
 80095e4:	7828      	ldrb	r0, [r5, #0]
 80095e6:	9303      	str	r3, [sp, #12]
 80095e8:	f7ff feda 	bl	80093a0 <__hexdig_fun>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	f000 000f 	and.w	r0, r0, #15
 80095f2:	4098      	lsls	r0, r3
 80095f4:	ea4b 0b00 	orr.w	fp, fp, r0
 80095f8:	3304      	adds	r3, #4
 80095fa:	e7a1      	b.n	8009540 <__gethex+0x174>
 80095fc:	45a8      	cmp	r8, r5
 80095fe:	d8e8      	bhi.n	80095d2 <__gethex+0x206>
 8009600:	2201      	movs	r2, #1
 8009602:	4628      	mov	r0, r5
 8009604:	9303      	str	r3, [sp, #12]
 8009606:	f7fe ff95 	bl	8008534 <strncmp>
 800960a:	4926      	ldr	r1, [pc, #152]	; (80096a4 <__gethex+0x2d8>)
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	2800      	cmp	r0, #0
 8009610:	d1df      	bne.n	80095d2 <__gethex+0x206>
 8009612:	e795      	b.n	8009540 <__gethex+0x174>
 8009614:	f04f 0b03 	mov.w	fp, #3
 8009618:	e7c5      	b.n	80095a6 <__gethex+0x1da>
 800961a:	da0b      	bge.n	8009634 <__gethex+0x268>
 800961c:	eba5 0800 	sub.w	r8, r5, r0
 8009620:	4621      	mov	r1, r4
 8009622:	4642      	mov	r2, r8
 8009624:	4648      	mov	r0, r9
 8009626:	f001 f82b 	bl	800a680 <__lshift>
 800962a:	eba6 0608 	sub.w	r6, r6, r8
 800962e:	4604      	mov	r4, r0
 8009630:	f100 0a14 	add.w	sl, r0, #20
 8009634:	f04f 0b00 	mov.w	fp, #0
 8009638:	e7ba      	b.n	80095b0 <__gethex+0x1e4>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	42b3      	cmp	r3, r6
 800963e:	dd73      	ble.n	8009728 <__gethex+0x35c>
 8009640:	1b9e      	subs	r6, r3, r6
 8009642:	42b5      	cmp	r5, r6
 8009644:	dc34      	bgt.n	80096b0 <__gethex+0x2e4>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d023      	beq.n	8009694 <__gethex+0x2c8>
 800964c:	2b03      	cmp	r3, #3
 800964e:	d025      	beq.n	800969c <__gethex+0x2d0>
 8009650:	2b01      	cmp	r3, #1
 8009652:	d115      	bne.n	8009680 <__gethex+0x2b4>
 8009654:	42b5      	cmp	r5, r6
 8009656:	d113      	bne.n	8009680 <__gethex+0x2b4>
 8009658:	2d01      	cmp	r5, #1
 800965a:	d10b      	bne.n	8009674 <__gethex+0x2a8>
 800965c:	9a02      	ldr	r2, [sp, #8]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	2301      	movs	r3, #1
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	f8ca 3000 	str.w	r3, [sl]
 800966a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800966c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009670:	601c      	str	r4, [r3, #0]
 8009672:	e735      	b.n	80094e0 <__gethex+0x114>
 8009674:	1e69      	subs	r1, r5, #1
 8009676:	4620      	mov	r0, r4
 8009678:	f001 fa34 	bl	800aae4 <__any_on>
 800967c:	2800      	cmp	r0, #0
 800967e:	d1ed      	bne.n	800965c <__gethex+0x290>
 8009680:	4621      	mov	r1, r4
 8009682:	4648      	mov	r0, r9
 8009684:	f000 fde2 	bl	800a24c <_Bfree>
 8009688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800968a:	2300      	movs	r3, #0
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009692:	e725      	b.n	80094e0 <__gethex+0x114>
 8009694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1f2      	bne.n	8009680 <__gethex+0x2b4>
 800969a:	e7df      	b.n	800965c <__gethex+0x290>
 800969c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1dc      	bne.n	800965c <__gethex+0x290>
 80096a2:	e7ed      	b.n	8009680 <__gethex+0x2b4>
 80096a4:	0800b60d 	.word	0x0800b60d
 80096a8:	0800b7e5 	.word	0x0800b7e5
 80096ac:	0800b7f6 	.word	0x0800b7f6
 80096b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80096b4:	f1bb 0f00 	cmp.w	fp, #0
 80096b8:	d133      	bne.n	8009722 <__gethex+0x356>
 80096ba:	f1b8 0f00 	cmp.w	r8, #0
 80096be:	d004      	beq.n	80096ca <__gethex+0x2fe>
 80096c0:	4641      	mov	r1, r8
 80096c2:	4620      	mov	r0, r4
 80096c4:	f001 fa0e 	bl	800aae4 <__any_on>
 80096c8:	4683      	mov	fp, r0
 80096ca:	ea4f 1268 	mov.w	r2, r8, asr #5
 80096ce:	2301      	movs	r3, #1
 80096d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80096d4:	f008 081f 	and.w	r8, r8, #31
 80096d8:	fa03 f308 	lsl.w	r3, r3, r8
 80096dc:	4213      	tst	r3, r2
 80096de:	4631      	mov	r1, r6
 80096e0:	4620      	mov	r0, r4
 80096e2:	bf18      	it	ne
 80096e4:	f04b 0b02 	orrne.w	fp, fp, #2
 80096e8:	1bad      	subs	r5, r5, r6
 80096ea:	f7ff fe07 	bl	80092fc <rshift>
 80096ee:	687e      	ldr	r6, [r7, #4]
 80096f0:	f04f 0802 	mov.w	r8, #2
 80096f4:	f1bb 0f00 	cmp.w	fp, #0
 80096f8:	d04a      	beq.n	8009790 <__gethex+0x3c4>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d016      	beq.n	800972e <__gethex+0x362>
 8009700:	2b03      	cmp	r3, #3
 8009702:	d018      	beq.n	8009736 <__gethex+0x36a>
 8009704:	2b01      	cmp	r3, #1
 8009706:	d109      	bne.n	800971c <__gethex+0x350>
 8009708:	f01b 0f02 	tst.w	fp, #2
 800970c:	d006      	beq.n	800971c <__gethex+0x350>
 800970e:	f8da 3000 	ldr.w	r3, [sl]
 8009712:	ea4b 0b03 	orr.w	fp, fp, r3
 8009716:	f01b 0f01 	tst.w	fp, #1
 800971a:	d10f      	bne.n	800973c <__gethex+0x370>
 800971c:	f048 0810 	orr.w	r8, r8, #16
 8009720:	e036      	b.n	8009790 <__gethex+0x3c4>
 8009722:	f04f 0b01 	mov.w	fp, #1
 8009726:	e7d0      	b.n	80096ca <__gethex+0x2fe>
 8009728:	f04f 0801 	mov.w	r8, #1
 800972c:	e7e2      	b.n	80096f4 <__gethex+0x328>
 800972e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009730:	f1c3 0301 	rsb	r3, r3, #1
 8009734:	930f      	str	r3, [sp, #60]	; 0x3c
 8009736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0ef      	beq.n	800971c <__gethex+0x350>
 800973c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009740:	f104 0214 	add.w	r2, r4, #20
 8009744:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800974e:	2300      	movs	r3, #0
 8009750:	4694      	mov	ip, r2
 8009752:	f852 1b04 	ldr.w	r1, [r2], #4
 8009756:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800975a:	d01e      	beq.n	800979a <__gethex+0x3ce>
 800975c:	3101      	adds	r1, #1
 800975e:	f8cc 1000 	str.w	r1, [ip]
 8009762:	f1b8 0f02 	cmp.w	r8, #2
 8009766:	f104 0214 	add.w	r2, r4, #20
 800976a:	d13d      	bne.n	80097e8 <__gethex+0x41c>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	3b01      	subs	r3, #1
 8009770:	42ab      	cmp	r3, r5
 8009772:	d10b      	bne.n	800978c <__gethex+0x3c0>
 8009774:	1169      	asrs	r1, r5, #5
 8009776:	2301      	movs	r3, #1
 8009778:	f005 051f 	and.w	r5, r5, #31
 800977c:	fa03 f505 	lsl.w	r5, r3, r5
 8009780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009784:	421d      	tst	r5, r3
 8009786:	bf18      	it	ne
 8009788:	f04f 0801 	movne.w	r8, #1
 800978c:	f048 0820 	orr.w	r8, r8, #32
 8009790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009792:	601c      	str	r4, [r3, #0]
 8009794:	9b02      	ldr	r3, [sp, #8]
 8009796:	601e      	str	r6, [r3, #0]
 8009798:	e6a2      	b.n	80094e0 <__gethex+0x114>
 800979a:	4290      	cmp	r0, r2
 800979c:	f842 3c04 	str.w	r3, [r2, #-4]
 80097a0:	d8d6      	bhi.n	8009750 <__gethex+0x384>
 80097a2:	68a2      	ldr	r2, [r4, #8]
 80097a4:	4593      	cmp	fp, r2
 80097a6:	db17      	blt.n	80097d8 <__gethex+0x40c>
 80097a8:	6861      	ldr	r1, [r4, #4]
 80097aa:	4648      	mov	r0, r9
 80097ac:	3101      	adds	r1, #1
 80097ae:	f000 fd0d 	bl	800a1cc <_Balloc>
 80097b2:	4682      	mov	sl, r0
 80097b4:	b918      	cbnz	r0, 80097be <__gethex+0x3f2>
 80097b6:	4b1b      	ldr	r3, [pc, #108]	; (8009824 <__gethex+0x458>)
 80097b8:	4602      	mov	r2, r0
 80097ba:	2184      	movs	r1, #132	; 0x84
 80097bc:	e6b3      	b.n	8009526 <__gethex+0x15a>
 80097be:	6922      	ldr	r2, [r4, #16]
 80097c0:	3202      	adds	r2, #2
 80097c2:	f104 010c 	add.w	r1, r4, #12
 80097c6:	0092      	lsls	r2, r2, #2
 80097c8:	300c      	adds	r0, #12
 80097ca:	f7fe fefd 	bl	80085c8 <memcpy>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4648      	mov	r0, r9
 80097d2:	f000 fd3b 	bl	800a24c <_Bfree>
 80097d6:	4654      	mov	r4, sl
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	1c51      	adds	r1, r2, #1
 80097dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80097e0:	6121      	str	r1, [r4, #16]
 80097e2:	2101      	movs	r1, #1
 80097e4:	6151      	str	r1, [r2, #20]
 80097e6:	e7bc      	b.n	8009762 <__gethex+0x396>
 80097e8:	6921      	ldr	r1, [r4, #16]
 80097ea:	4559      	cmp	r1, fp
 80097ec:	dd0b      	ble.n	8009806 <__gethex+0x43a>
 80097ee:	2101      	movs	r1, #1
 80097f0:	4620      	mov	r0, r4
 80097f2:	f7ff fd83 	bl	80092fc <rshift>
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	3601      	adds	r6, #1
 80097fa:	42b3      	cmp	r3, r6
 80097fc:	f6ff aedb 	blt.w	80095b6 <__gethex+0x1ea>
 8009800:	f04f 0801 	mov.w	r8, #1
 8009804:	e7c2      	b.n	800978c <__gethex+0x3c0>
 8009806:	f015 051f 	ands.w	r5, r5, #31
 800980a:	d0f9      	beq.n	8009800 <__gethex+0x434>
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	441a      	add	r2, r3
 8009810:	f1c5 0520 	rsb	r5, r5, #32
 8009814:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009818:	f000 fdca 	bl	800a3b0 <__hi0bits>
 800981c:	42a8      	cmp	r0, r5
 800981e:	dbe6      	blt.n	80097ee <__gethex+0x422>
 8009820:	e7ee      	b.n	8009800 <__gethex+0x434>
 8009822:	bf00      	nop
 8009824:	0800b7e5 	.word	0x0800b7e5

08009828 <L_shift>:
 8009828:	f1c2 0208 	rsb	r2, r2, #8
 800982c:	0092      	lsls	r2, r2, #2
 800982e:	b570      	push	{r4, r5, r6, lr}
 8009830:	f1c2 0620 	rsb	r6, r2, #32
 8009834:	6843      	ldr	r3, [r0, #4]
 8009836:	6804      	ldr	r4, [r0, #0]
 8009838:	fa03 f506 	lsl.w	r5, r3, r6
 800983c:	432c      	orrs	r4, r5
 800983e:	40d3      	lsrs	r3, r2
 8009840:	6004      	str	r4, [r0, #0]
 8009842:	f840 3f04 	str.w	r3, [r0, #4]!
 8009846:	4288      	cmp	r0, r1
 8009848:	d3f4      	bcc.n	8009834 <L_shift+0xc>
 800984a:	bd70      	pop	{r4, r5, r6, pc}

0800984c <__match>:
 800984c:	b530      	push	{r4, r5, lr}
 800984e:	6803      	ldr	r3, [r0, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009856:	b914      	cbnz	r4, 800985e <__match+0x12>
 8009858:	6003      	str	r3, [r0, #0]
 800985a:	2001      	movs	r0, #1
 800985c:	bd30      	pop	{r4, r5, pc}
 800985e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009862:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009866:	2d19      	cmp	r5, #25
 8009868:	bf98      	it	ls
 800986a:	3220      	addls	r2, #32
 800986c:	42a2      	cmp	r2, r4
 800986e:	d0f0      	beq.n	8009852 <__match+0x6>
 8009870:	2000      	movs	r0, #0
 8009872:	e7f3      	b.n	800985c <__match+0x10>

08009874 <__hexnan>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	680b      	ldr	r3, [r1, #0]
 800987a:	6801      	ldr	r1, [r0, #0]
 800987c:	115e      	asrs	r6, r3, #5
 800987e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009882:	f013 031f 	ands.w	r3, r3, #31
 8009886:	b087      	sub	sp, #28
 8009888:	bf18      	it	ne
 800988a:	3604      	addne	r6, #4
 800988c:	2500      	movs	r5, #0
 800988e:	1f37      	subs	r7, r6, #4
 8009890:	4682      	mov	sl, r0
 8009892:	4690      	mov	r8, r2
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	f846 5c04 	str.w	r5, [r6, #-4]
 800989a:	46b9      	mov	r9, r7
 800989c:	463c      	mov	r4, r7
 800989e:	9502      	str	r5, [sp, #8]
 80098a0:	46ab      	mov	fp, r5
 80098a2:	784a      	ldrb	r2, [r1, #1]
 80098a4:	1c4b      	adds	r3, r1, #1
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	b342      	cbz	r2, 80098fc <__hexnan+0x88>
 80098aa:	4610      	mov	r0, r2
 80098ac:	9105      	str	r1, [sp, #20]
 80098ae:	9204      	str	r2, [sp, #16]
 80098b0:	f7ff fd76 	bl	80093a0 <__hexdig_fun>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d14f      	bne.n	8009958 <__hexnan+0xe4>
 80098b8:	9a04      	ldr	r2, [sp, #16]
 80098ba:	9905      	ldr	r1, [sp, #20]
 80098bc:	2a20      	cmp	r2, #32
 80098be:	d818      	bhi.n	80098f2 <__hexnan+0x7e>
 80098c0:	9b02      	ldr	r3, [sp, #8]
 80098c2:	459b      	cmp	fp, r3
 80098c4:	dd13      	ble.n	80098ee <__hexnan+0x7a>
 80098c6:	454c      	cmp	r4, r9
 80098c8:	d206      	bcs.n	80098d8 <__hexnan+0x64>
 80098ca:	2d07      	cmp	r5, #7
 80098cc:	dc04      	bgt.n	80098d8 <__hexnan+0x64>
 80098ce:	462a      	mov	r2, r5
 80098d0:	4649      	mov	r1, r9
 80098d2:	4620      	mov	r0, r4
 80098d4:	f7ff ffa8 	bl	8009828 <L_shift>
 80098d8:	4544      	cmp	r4, r8
 80098da:	d950      	bls.n	800997e <__hexnan+0x10a>
 80098dc:	2300      	movs	r3, #0
 80098de:	f1a4 0904 	sub.w	r9, r4, #4
 80098e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80098e6:	f8cd b008 	str.w	fp, [sp, #8]
 80098ea:	464c      	mov	r4, r9
 80098ec:	461d      	mov	r5, r3
 80098ee:	9903      	ldr	r1, [sp, #12]
 80098f0:	e7d7      	b.n	80098a2 <__hexnan+0x2e>
 80098f2:	2a29      	cmp	r2, #41	; 0x29
 80098f4:	d155      	bne.n	80099a2 <__hexnan+0x12e>
 80098f6:	3102      	adds	r1, #2
 80098f8:	f8ca 1000 	str.w	r1, [sl]
 80098fc:	f1bb 0f00 	cmp.w	fp, #0
 8009900:	d04f      	beq.n	80099a2 <__hexnan+0x12e>
 8009902:	454c      	cmp	r4, r9
 8009904:	d206      	bcs.n	8009914 <__hexnan+0xa0>
 8009906:	2d07      	cmp	r5, #7
 8009908:	dc04      	bgt.n	8009914 <__hexnan+0xa0>
 800990a:	462a      	mov	r2, r5
 800990c:	4649      	mov	r1, r9
 800990e:	4620      	mov	r0, r4
 8009910:	f7ff ff8a 	bl	8009828 <L_shift>
 8009914:	4544      	cmp	r4, r8
 8009916:	d934      	bls.n	8009982 <__hexnan+0x10e>
 8009918:	f1a8 0204 	sub.w	r2, r8, #4
 800991c:	4623      	mov	r3, r4
 800991e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009922:	f842 1f04 	str.w	r1, [r2, #4]!
 8009926:	429f      	cmp	r7, r3
 8009928:	d2f9      	bcs.n	800991e <__hexnan+0xaa>
 800992a:	1b3b      	subs	r3, r7, r4
 800992c:	f023 0303 	bic.w	r3, r3, #3
 8009930:	3304      	adds	r3, #4
 8009932:	3e03      	subs	r6, #3
 8009934:	3401      	adds	r4, #1
 8009936:	42a6      	cmp	r6, r4
 8009938:	bf38      	it	cc
 800993a:	2304      	movcc	r3, #4
 800993c:	4443      	add	r3, r8
 800993e:	2200      	movs	r2, #0
 8009940:	f843 2b04 	str.w	r2, [r3], #4
 8009944:	429f      	cmp	r7, r3
 8009946:	d2fb      	bcs.n	8009940 <__hexnan+0xcc>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	b91b      	cbnz	r3, 8009954 <__hexnan+0xe0>
 800994c:	4547      	cmp	r7, r8
 800994e:	d126      	bne.n	800999e <__hexnan+0x12a>
 8009950:	2301      	movs	r3, #1
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	2005      	movs	r0, #5
 8009956:	e025      	b.n	80099a4 <__hexnan+0x130>
 8009958:	3501      	adds	r5, #1
 800995a:	2d08      	cmp	r5, #8
 800995c:	f10b 0b01 	add.w	fp, fp, #1
 8009960:	dd06      	ble.n	8009970 <__hexnan+0xfc>
 8009962:	4544      	cmp	r4, r8
 8009964:	d9c3      	bls.n	80098ee <__hexnan+0x7a>
 8009966:	2300      	movs	r3, #0
 8009968:	f844 3c04 	str.w	r3, [r4, #-4]
 800996c:	2501      	movs	r5, #1
 800996e:	3c04      	subs	r4, #4
 8009970:	6822      	ldr	r2, [r4, #0]
 8009972:	f000 000f 	and.w	r0, r0, #15
 8009976:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800997a:	6020      	str	r0, [r4, #0]
 800997c:	e7b7      	b.n	80098ee <__hexnan+0x7a>
 800997e:	2508      	movs	r5, #8
 8009980:	e7b5      	b.n	80098ee <__hexnan+0x7a>
 8009982:	9b01      	ldr	r3, [sp, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0df      	beq.n	8009948 <__hexnan+0xd4>
 8009988:	f1c3 0320 	rsb	r3, r3, #32
 800998c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009990:	40da      	lsrs	r2, r3
 8009992:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009996:	4013      	ands	r3, r2
 8009998:	f846 3c04 	str.w	r3, [r6, #-4]
 800999c:	e7d4      	b.n	8009948 <__hexnan+0xd4>
 800999e:	3f04      	subs	r7, #4
 80099a0:	e7d2      	b.n	8009948 <__hexnan+0xd4>
 80099a2:	2004      	movs	r0, #4
 80099a4:	b007      	add	sp, #28
 80099a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099aa <__ssputs_r>:
 80099aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ae:	688e      	ldr	r6, [r1, #8]
 80099b0:	461f      	mov	r7, r3
 80099b2:	42be      	cmp	r6, r7
 80099b4:	680b      	ldr	r3, [r1, #0]
 80099b6:	4682      	mov	sl, r0
 80099b8:	460c      	mov	r4, r1
 80099ba:	4690      	mov	r8, r2
 80099bc:	d82c      	bhi.n	8009a18 <__ssputs_r+0x6e>
 80099be:	898a      	ldrh	r2, [r1, #12]
 80099c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099c4:	d026      	beq.n	8009a14 <__ssputs_r+0x6a>
 80099c6:	6965      	ldr	r5, [r4, #20]
 80099c8:	6909      	ldr	r1, [r1, #16]
 80099ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099ce:	eba3 0901 	sub.w	r9, r3, r1
 80099d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099d6:	1c7b      	adds	r3, r7, #1
 80099d8:	444b      	add	r3, r9
 80099da:	106d      	asrs	r5, r5, #1
 80099dc:	429d      	cmp	r5, r3
 80099de:	bf38      	it	cc
 80099e0:	461d      	movcc	r5, r3
 80099e2:	0553      	lsls	r3, r2, #21
 80099e4:	d527      	bpl.n	8009a36 <__ssputs_r+0x8c>
 80099e6:	4629      	mov	r1, r5
 80099e8:	f000 faa4 	bl	8009f34 <_malloc_r>
 80099ec:	4606      	mov	r6, r0
 80099ee:	b360      	cbz	r0, 8009a4a <__ssputs_r+0xa0>
 80099f0:	6921      	ldr	r1, [r4, #16]
 80099f2:	464a      	mov	r2, r9
 80099f4:	f7fe fde8 	bl	80085c8 <memcpy>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a02:	81a3      	strh	r3, [r4, #12]
 8009a04:	6126      	str	r6, [r4, #16]
 8009a06:	6165      	str	r5, [r4, #20]
 8009a08:	444e      	add	r6, r9
 8009a0a:	eba5 0509 	sub.w	r5, r5, r9
 8009a0e:	6026      	str	r6, [r4, #0]
 8009a10:	60a5      	str	r5, [r4, #8]
 8009a12:	463e      	mov	r6, r7
 8009a14:	42be      	cmp	r6, r7
 8009a16:	d900      	bls.n	8009a1a <__ssputs_r+0x70>
 8009a18:	463e      	mov	r6, r7
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	4641      	mov	r1, r8
 8009a20:	f001 f9f7 	bl	800ae12 <memmove>
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	1b9b      	subs	r3, r3, r6
 8009a28:	60a3      	str	r3, [r4, #8]
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	4433      	add	r3, r6
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	2000      	movs	r0, #0
 8009a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a36:	462a      	mov	r2, r5
 8009a38:	f001 f8b8 	bl	800abac <_realloc_r>
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d1e0      	bne.n	8009a04 <__ssputs_r+0x5a>
 8009a42:	6921      	ldr	r1, [r4, #16]
 8009a44:	4650      	mov	r0, sl
 8009a46:	f001 faab 	bl	800afa0 <_free_r>
 8009a4a:	230c      	movs	r3, #12
 8009a4c:	f8ca 3000 	str.w	r3, [sl]
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a5c:	e7e9      	b.n	8009a32 <__ssputs_r+0x88>
	...

08009a60 <_svfiprintf_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	4698      	mov	r8, r3
 8009a66:	898b      	ldrh	r3, [r1, #12]
 8009a68:	061b      	lsls	r3, r3, #24
 8009a6a:	b09d      	sub	sp, #116	; 0x74
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	460d      	mov	r5, r1
 8009a70:	4614      	mov	r4, r2
 8009a72:	d50e      	bpl.n	8009a92 <_svfiprintf_r+0x32>
 8009a74:	690b      	ldr	r3, [r1, #16]
 8009a76:	b963      	cbnz	r3, 8009a92 <_svfiprintf_r+0x32>
 8009a78:	2140      	movs	r1, #64	; 0x40
 8009a7a:	f000 fa5b 	bl	8009f34 <_malloc_r>
 8009a7e:	6028      	str	r0, [r5, #0]
 8009a80:	6128      	str	r0, [r5, #16]
 8009a82:	b920      	cbnz	r0, 8009a8e <_svfiprintf_r+0x2e>
 8009a84:	230c      	movs	r3, #12
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a8c:	e0d0      	b.n	8009c30 <_svfiprintf_r+0x1d0>
 8009a8e:	2340      	movs	r3, #64	; 0x40
 8009a90:	616b      	str	r3, [r5, #20]
 8009a92:	2300      	movs	r3, #0
 8009a94:	9309      	str	r3, [sp, #36]	; 0x24
 8009a96:	2320      	movs	r3, #32
 8009a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa0:	2330      	movs	r3, #48	; 0x30
 8009aa2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c48 <_svfiprintf_r+0x1e8>
 8009aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aaa:	f04f 0901 	mov.w	r9, #1
 8009aae:	4623      	mov	r3, r4
 8009ab0:	469a      	mov	sl, r3
 8009ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab6:	b10a      	cbz	r2, 8009abc <_svfiprintf_r+0x5c>
 8009ab8:	2a25      	cmp	r2, #37	; 0x25
 8009aba:	d1f9      	bne.n	8009ab0 <_svfiprintf_r+0x50>
 8009abc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac0:	d00b      	beq.n	8009ada <_svfiprintf_r+0x7a>
 8009ac2:	465b      	mov	r3, fp
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff ff6e 	bl	80099aa <__ssputs_r>
 8009ace:	3001      	adds	r0, #1
 8009ad0:	f000 80a9 	beq.w	8009c26 <_svfiprintf_r+0x1c6>
 8009ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad6:	445a      	add	r2, fp
 8009ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8009ada:	f89a 3000 	ldrb.w	r3, [sl]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 80a1 	beq.w	8009c26 <_svfiprintf_r+0x1c6>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aee:	f10a 0a01 	add.w	sl, sl, #1
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	9307      	str	r3, [sp, #28]
 8009af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009afa:	931a      	str	r3, [sp, #104]	; 0x68
 8009afc:	4654      	mov	r4, sl
 8009afe:	2205      	movs	r2, #5
 8009b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b04:	4850      	ldr	r0, [pc, #320]	; (8009c48 <_svfiprintf_r+0x1e8>)
 8009b06:	f7f6 fb83 	bl	8000210 <memchr>
 8009b0a:	9a04      	ldr	r2, [sp, #16]
 8009b0c:	b9d8      	cbnz	r0, 8009b46 <_svfiprintf_r+0xe6>
 8009b0e:	06d0      	lsls	r0, r2, #27
 8009b10:	bf44      	itt	mi
 8009b12:	2320      	movmi	r3, #32
 8009b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b18:	0711      	lsls	r1, r2, #28
 8009b1a:	bf44      	itt	mi
 8009b1c:	232b      	movmi	r3, #43	; 0x2b
 8009b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b22:	f89a 3000 	ldrb.w	r3, [sl]
 8009b26:	2b2a      	cmp	r3, #42	; 0x2a
 8009b28:	d015      	beq.n	8009b56 <_svfiprintf_r+0xf6>
 8009b2a:	9a07      	ldr	r2, [sp, #28]
 8009b2c:	4654      	mov	r4, sl
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f04f 0c0a 	mov.w	ip, #10
 8009b34:	4621      	mov	r1, r4
 8009b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b3a:	3b30      	subs	r3, #48	; 0x30
 8009b3c:	2b09      	cmp	r3, #9
 8009b3e:	d94d      	bls.n	8009bdc <_svfiprintf_r+0x17c>
 8009b40:	b1b0      	cbz	r0, 8009b70 <_svfiprintf_r+0x110>
 8009b42:	9207      	str	r2, [sp, #28]
 8009b44:	e014      	b.n	8009b70 <_svfiprintf_r+0x110>
 8009b46:	eba0 0308 	sub.w	r3, r0, r8
 8009b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	46a2      	mov	sl, r4
 8009b54:	e7d2      	b.n	8009afc <_svfiprintf_r+0x9c>
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	1d19      	adds	r1, r3, #4
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	9103      	str	r1, [sp, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	bfbb      	ittet	lt
 8009b62:	425b      	neglt	r3, r3
 8009b64:	f042 0202 	orrlt.w	r2, r2, #2
 8009b68:	9307      	strge	r3, [sp, #28]
 8009b6a:	9307      	strlt	r3, [sp, #28]
 8009b6c:	bfb8      	it	lt
 8009b6e:	9204      	strlt	r2, [sp, #16]
 8009b70:	7823      	ldrb	r3, [r4, #0]
 8009b72:	2b2e      	cmp	r3, #46	; 0x2e
 8009b74:	d10c      	bne.n	8009b90 <_svfiprintf_r+0x130>
 8009b76:	7863      	ldrb	r3, [r4, #1]
 8009b78:	2b2a      	cmp	r3, #42	; 0x2a
 8009b7a:	d134      	bne.n	8009be6 <_svfiprintf_r+0x186>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	1d1a      	adds	r2, r3, #4
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	9203      	str	r2, [sp, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	bfb8      	it	lt
 8009b88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b8c:	3402      	adds	r4, #2
 8009b8e:	9305      	str	r3, [sp, #20]
 8009b90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c58 <_svfiprintf_r+0x1f8>
 8009b94:	7821      	ldrb	r1, [r4, #0]
 8009b96:	2203      	movs	r2, #3
 8009b98:	4650      	mov	r0, sl
 8009b9a:	f7f6 fb39 	bl	8000210 <memchr>
 8009b9e:	b138      	cbz	r0, 8009bb0 <_svfiprintf_r+0x150>
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	eba0 000a 	sub.w	r0, r0, sl
 8009ba6:	2240      	movs	r2, #64	; 0x40
 8009ba8:	4082      	lsls	r2, r0
 8009baa:	4313      	orrs	r3, r2
 8009bac:	3401      	adds	r4, #1
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb4:	4825      	ldr	r0, [pc, #148]	; (8009c4c <_svfiprintf_r+0x1ec>)
 8009bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bba:	2206      	movs	r2, #6
 8009bbc:	f7f6 fb28 	bl	8000210 <memchr>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d038      	beq.n	8009c36 <_svfiprintf_r+0x1d6>
 8009bc4:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <_svfiprintf_r+0x1f0>)
 8009bc6:	bb1b      	cbnz	r3, 8009c10 <_svfiprintf_r+0x1b0>
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	3307      	adds	r3, #7
 8009bcc:	f023 0307 	bic.w	r3, r3, #7
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	9303      	str	r3, [sp, #12]
 8009bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd6:	4433      	add	r3, r6
 8009bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bda:	e768      	b.n	8009aae <_svfiprintf_r+0x4e>
 8009bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be0:	460c      	mov	r4, r1
 8009be2:	2001      	movs	r0, #1
 8009be4:	e7a6      	b.n	8009b34 <_svfiprintf_r+0xd4>
 8009be6:	2300      	movs	r3, #0
 8009be8:	3401      	adds	r4, #1
 8009bea:	9305      	str	r3, [sp, #20]
 8009bec:	4619      	mov	r1, r3
 8009bee:	f04f 0c0a 	mov.w	ip, #10
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf8:	3a30      	subs	r2, #48	; 0x30
 8009bfa:	2a09      	cmp	r2, #9
 8009bfc:	d903      	bls.n	8009c06 <_svfiprintf_r+0x1a6>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0c6      	beq.n	8009b90 <_svfiprintf_r+0x130>
 8009c02:	9105      	str	r1, [sp, #20]
 8009c04:	e7c4      	b.n	8009b90 <_svfiprintf_r+0x130>
 8009c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e7f0      	b.n	8009bf2 <_svfiprintf_r+0x192>
 8009c10:	ab03      	add	r3, sp, #12
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	462a      	mov	r2, r5
 8009c16:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <_svfiprintf_r+0x1f4>)
 8009c18:	a904      	add	r1, sp, #16
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f7fc fee0 	bl	80069e0 <_printf_float>
 8009c20:	1c42      	adds	r2, r0, #1
 8009c22:	4606      	mov	r6, r0
 8009c24:	d1d6      	bne.n	8009bd4 <_svfiprintf_r+0x174>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	065b      	lsls	r3, r3, #25
 8009c2a:	f53f af2d 	bmi.w	8009a88 <_svfiprintf_r+0x28>
 8009c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c30:	b01d      	add	sp, #116	; 0x74
 8009c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c36:	ab03      	add	r3, sp, #12
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	4b05      	ldr	r3, [pc, #20]	; (8009c54 <_svfiprintf_r+0x1f4>)
 8009c3e:	a904      	add	r1, sp, #16
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7fd f971 	bl	8006f28 <_printf_i>
 8009c46:	e7eb      	b.n	8009c20 <_svfiprintf_r+0x1c0>
 8009c48:	0800b856 	.word	0x0800b856
 8009c4c:	0800b860 	.word	0x0800b860
 8009c50:	080069e1 	.word	0x080069e1
 8009c54:	080099ab 	.word	0x080099ab
 8009c58:	0800b85c 	.word	0x0800b85c

08009c5c <__sfputc_r>:
 8009c5c:	6893      	ldr	r3, [r2, #8]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	b410      	push	{r4}
 8009c64:	6093      	str	r3, [r2, #8]
 8009c66:	da08      	bge.n	8009c7a <__sfputc_r+0x1e>
 8009c68:	6994      	ldr	r4, [r2, #24]
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	db01      	blt.n	8009c72 <__sfputc_r+0x16>
 8009c6e:	290a      	cmp	r1, #10
 8009c70:	d103      	bne.n	8009c7a <__sfputc_r+0x1e>
 8009c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c76:	f000 bfc8 	b.w	800ac0a <__swbuf_r>
 8009c7a:	6813      	ldr	r3, [r2, #0]
 8009c7c:	1c58      	adds	r0, r3, #1
 8009c7e:	6010      	str	r0, [r2, #0]
 8009c80:	7019      	strb	r1, [r3, #0]
 8009c82:	4608      	mov	r0, r1
 8009c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <__sfputs_r>:
 8009c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	18d5      	adds	r5, r2, r3
 8009c94:	42ac      	cmp	r4, r5
 8009c96:	d101      	bne.n	8009c9c <__sfputs_r+0x12>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e007      	b.n	8009cac <__sfputs_r+0x22>
 8009c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca0:	463a      	mov	r2, r7
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ffda 	bl	8009c5c <__sfputc_r>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d1f3      	bne.n	8009c94 <__sfputs_r+0xa>
 8009cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cb0 <_vfiprintf_r>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	b09d      	sub	sp, #116	; 0x74
 8009cb8:	4614      	mov	r4, r2
 8009cba:	4698      	mov	r8, r3
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	b118      	cbz	r0, 8009cc8 <_vfiprintf_r+0x18>
 8009cc0:	6a03      	ldr	r3, [r0, #32]
 8009cc2:	b90b      	cbnz	r3, 8009cc8 <_vfiprintf_r+0x18>
 8009cc4:	f7fd fcfc 	bl	80076c0 <__sinit>
 8009cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cca:	07d9      	lsls	r1, r3, #31
 8009ccc:	d405      	bmi.n	8009cda <_vfiprintf_r+0x2a>
 8009cce:	89ab      	ldrh	r3, [r5, #12]
 8009cd0:	059a      	lsls	r2, r3, #22
 8009cd2:	d402      	bmi.n	8009cda <_vfiprintf_r+0x2a>
 8009cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cd6:	f7fe fc75 	bl	80085c4 <__retarget_lock_acquire_recursive>
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	071b      	lsls	r3, r3, #28
 8009cde:	d501      	bpl.n	8009ce4 <_vfiprintf_r+0x34>
 8009ce0:	692b      	ldr	r3, [r5, #16]
 8009ce2:	b99b      	cbnz	r3, 8009d0c <_vfiprintf_r+0x5c>
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 ffcc 	bl	800ac84 <__swsetup_r>
 8009cec:	b170      	cbz	r0, 8009d0c <_vfiprintf_r+0x5c>
 8009cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cf0:	07dc      	lsls	r4, r3, #31
 8009cf2:	d504      	bpl.n	8009cfe <_vfiprintf_r+0x4e>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cf8:	b01d      	add	sp, #116	; 0x74
 8009cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	0598      	lsls	r0, r3, #22
 8009d02:	d4f7      	bmi.n	8009cf4 <_vfiprintf_r+0x44>
 8009d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d06:	f7fe fc5e 	bl	80085c6 <__retarget_lock_release_recursive>
 8009d0a:	e7f3      	b.n	8009cf4 <_vfiprintf_r+0x44>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d10:	2320      	movs	r3, #32
 8009d12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1a:	2330      	movs	r3, #48	; 0x30
 8009d1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ed0 <_vfiprintf_r+0x220>
 8009d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d24:	f04f 0901 	mov.w	r9, #1
 8009d28:	4623      	mov	r3, r4
 8009d2a:	469a      	mov	sl, r3
 8009d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d30:	b10a      	cbz	r2, 8009d36 <_vfiprintf_r+0x86>
 8009d32:	2a25      	cmp	r2, #37	; 0x25
 8009d34:	d1f9      	bne.n	8009d2a <_vfiprintf_r+0x7a>
 8009d36:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3a:	d00b      	beq.n	8009d54 <_vfiprintf_r+0xa4>
 8009d3c:	465b      	mov	r3, fp
 8009d3e:	4622      	mov	r2, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff ffa1 	bl	8009c8a <__sfputs_r>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	f000 80a9 	beq.w	8009ea0 <_vfiprintf_r+0x1f0>
 8009d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d50:	445a      	add	r2, fp
 8009d52:	9209      	str	r2, [sp, #36]	; 0x24
 8009d54:	f89a 3000 	ldrb.w	r3, [sl]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80a1 	beq.w	8009ea0 <_vfiprintf_r+0x1f0>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d68:	f10a 0a01 	add.w	sl, sl, #1
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	9307      	str	r3, [sp, #28]
 8009d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d74:	931a      	str	r3, [sp, #104]	; 0x68
 8009d76:	4654      	mov	r4, sl
 8009d78:	2205      	movs	r2, #5
 8009d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7e:	4854      	ldr	r0, [pc, #336]	; (8009ed0 <_vfiprintf_r+0x220>)
 8009d80:	f7f6 fa46 	bl	8000210 <memchr>
 8009d84:	9a04      	ldr	r2, [sp, #16]
 8009d86:	b9d8      	cbnz	r0, 8009dc0 <_vfiprintf_r+0x110>
 8009d88:	06d1      	lsls	r1, r2, #27
 8009d8a:	bf44      	itt	mi
 8009d8c:	2320      	movmi	r3, #32
 8009d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d92:	0713      	lsls	r3, r2, #28
 8009d94:	bf44      	itt	mi
 8009d96:	232b      	movmi	r3, #43	; 0x2b
 8009d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009da0:	2b2a      	cmp	r3, #42	; 0x2a
 8009da2:	d015      	beq.n	8009dd0 <_vfiprintf_r+0x120>
 8009da4:	9a07      	ldr	r2, [sp, #28]
 8009da6:	4654      	mov	r4, sl
 8009da8:	2000      	movs	r0, #0
 8009daa:	f04f 0c0a 	mov.w	ip, #10
 8009dae:	4621      	mov	r1, r4
 8009db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db4:	3b30      	subs	r3, #48	; 0x30
 8009db6:	2b09      	cmp	r3, #9
 8009db8:	d94d      	bls.n	8009e56 <_vfiprintf_r+0x1a6>
 8009dba:	b1b0      	cbz	r0, 8009dea <_vfiprintf_r+0x13a>
 8009dbc:	9207      	str	r2, [sp, #28]
 8009dbe:	e014      	b.n	8009dea <_vfiprintf_r+0x13a>
 8009dc0:	eba0 0308 	sub.w	r3, r0, r8
 8009dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	46a2      	mov	sl, r4
 8009dce:	e7d2      	b.n	8009d76 <_vfiprintf_r+0xc6>
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	1d19      	adds	r1, r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	9103      	str	r1, [sp, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfbb      	ittet	lt
 8009ddc:	425b      	neglt	r3, r3
 8009dde:	f042 0202 	orrlt.w	r2, r2, #2
 8009de2:	9307      	strge	r3, [sp, #28]
 8009de4:	9307      	strlt	r3, [sp, #28]
 8009de6:	bfb8      	it	lt
 8009de8:	9204      	strlt	r2, [sp, #16]
 8009dea:	7823      	ldrb	r3, [r4, #0]
 8009dec:	2b2e      	cmp	r3, #46	; 0x2e
 8009dee:	d10c      	bne.n	8009e0a <_vfiprintf_r+0x15a>
 8009df0:	7863      	ldrb	r3, [r4, #1]
 8009df2:	2b2a      	cmp	r3, #42	; 0x2a
 8009df4:	d134      	bne.n	8009e60 <_vfiprintf_r+0x1b0>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	1d1a      	adds	r2, r3, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	9203      	str	r2, [sp, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bfb8      	it	lt
 8009e02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e06:	3402      	adds	r4, #2
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ee0 <_vfiprintf_r+0x230>
 8009e0e:	7821      	ldrb	r1, [r4, #0]
 8009e10:	2203      	movs	r2, #3
 8009e12:	4650      	mov	r0, sl
 8009e14:	f7f6 f9fc 	bl	8000210 <memchr>
 8009e18:	b138      	cbz	r0, 8009e2a <_vfiprintf_r+0x17a>
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	eba0 000a 	sub.w	r0, r0, sl
 8009e20:	2240      	movs	r2, #64	; 0x40
 8009e22:	4082      	lsls	r2, r0
 8009e24:	4313      	orrs	r3, r2
 8009e26:	3401      	adds	r4, #1
 8009e28:	9304      	str	r3, [sp, #16]
 8009e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2e:	4829      	ldr	r0, [pc, #164]	; (8009ed4 <_vfiprintf_r+0x224>)
 8009e30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e34:	2206      	movs	r2, #6
 8009e36:	f7f6 f9eb 	bl	8000210 <memchr>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d03f      	beq.n	8009ebe <_vfiprintf_r+0x20e>
 8009e3e:	4b26      	ldr	r3, [pc, #152]	; (8009ed8 <_vfiprintf_r+0x228>)
 8009e40:	bb1b      	cbnz	r3, 8009e8a <_vfiprintf_r+0x1da>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	3307      	adds	r3, #7
 8009e46:	f023 0307 	bic.w	r3, r3, #7
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	9303      	str	r3, [sp, #12]
 8009e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e50:	443b      	add	r3, r7
 8009e52:	9309      	str	r3, [sp, #36]	; 0x24
 8009e54:	e768      	b.n	8009d28 <_vfiprintf_r+0x78>
 8009e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	e7a6      	b.n	8009dae <_vfiprintf_r+0xfe>
 8009e60:	2300      	movs	r3, #0
 8009e62:	3401      	adds	r4, #1
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	4619      	mov	r1, r3
 8009e68:	f04f 0c0a 	mov.w	ip, #10
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e72:	3a30      	subs	r2, #48	; 0x30
 8009e74:	2a09      	cmp	r2, #9
 8009e76:	d903      	bls.n	8009e80 <_vfiprintf_r+0x1d0>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0c6      	beq.n	8009e0a <_vfiprintf_r+0x15a>
 8009e7c:	9105      	str	r1, [sp, #20]
 8009e7e:	e7c4      	b.n	8009e0a <_vfiprintf_r+0x15a>
 8009e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e84:	4604      	mov	r4, r0
 8009e86:	2301      	movs	r3, #1
 8009e88:	e7f0      	b.n	8009e6c <_vfiprintf_r+0x1bc>
 8009e8a:	ab03      	add	r3, sp, #12
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	462a      	mov	r2, r5
 8009e90:	4b12      	ldr	r3, [pc, #72]	; (8009edc <_vfiprintf_r+0x22c>)
 8009e92:	a904      	add	r1, sp, #16
 8009e94:	4630      	mov	r0, r6
 8009e96:	f7fc fda3 	bl	80069e0 <_printf_float>
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	1c78      	adds	r0, r7, #1
 8009e9e:	d1d6      	bne.n	8009e4e <_vfiprintf_r+0x19e>
 8009ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ea2:	07d9      	lsls	r1, r3, #31
 8009ea4:	d405      	bmi.n	8009eb2 <_vfiprintf_r+0x202>
 8009ea6:	89ab      	ldrh	r3, [r5, #12]
 8009ea8:	059a      	lsls	r2, r3, #22
 8009eaa:	d402      	bmi.n	8009eb2 <_vfiprintf_r+0x202>
 8009eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eae:	f7fe fb8a 	bl	80085c6 <__retarget_lock_release_recursive>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	065b      	lsls	r3, r3, #25
 8009eb6:	f53f af1d 	bmi.w	8009cf4 <_vfiprintf_r+0x44>
 8009eba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ebc:	e71c      	b.n	8009cf8 <_vfiprintf_r+0x48>
 8009ebe:	ab03      	add	r3, sp, #12
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	462a      	mov	r2, r5
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <_vfiprintf_r+0x22c>)
 8009ec6:	a904      	add	r1, sp, #16
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f7fd f82d 	bl	8006f28 <_printf_i>
 8009ece:	e7e4      	b.n	8009e9a <_vfiprintf_r+0x1ea>
 8009ed0:	0800b856 	.word	0x0800b856
 8009ed4:	0800b860 	.word	0x0800b860
 8009ed8:	080069e1 	.word	0x080069e1
 8009edc:	08009c8b 	.word	0x08009c8b
 8009ee0:	0800b85c 	.word	0x0800b85c

08009ee4 <malloc>:
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <malloc+0xc>)
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	f000 b823 	b.w	8009f34 <_malloc_r>
 8009eee:	bf00      	nop
 8009ef0:	20002d78 	.word	0x20002d78

08009ef4 <sbrk_aligned>:
 8009ef4:	b570      	push	{r4, r5, r6, lr}
 8009ef6:	4e0e      	ldr	r6, [pc, #56]	; (8009f30 <sbrk_aligned+0x3c>)
 8009ef8:	460c      	mov	r4, r1
 8009efa:	6831      	ldr	r1, [r6, #0]
 8009efc:	4605      	mov	r5, r0
 8009efe:	b911      	cbnz	r1, 8009f06 <sbrk_aligned+0x12>
 8009f00:	f000 fff8 	bl	800aef4 <_sbrk_r>
 8009f04:	6030      	str	r0, [r6, #0]
 8009f06:	4621      	mov	r1, r4
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 fff3 	bl	800aef4 <_sbrk_r>
 8009f0e:	1c43      	adds	r3, r0, #1
 8009f10:	d00a      	beq.n	8009f28 <sbrk_aligned+0x34>
 8009f12:	1cc4      	adds	r4, r0, #3
 8009f14:	f024 0403 	bic.w	r4, r4, #3
 8009f18:	42a0      	cmp	r0, r4
 8009f1a:	d007      	beq.n	8009f2c <sbrk_aligned+0x38>
 8009f1c:	1a21      	subs	r1, r4, r0
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f000 ffe8 	bl	800aef4 <_sbrk_r>
 8009f24:	3001      	adds	r0, #1
 8009f26:	d101      	bne.n	8009f2c <sbrk_aligned+0x38>
 8009f28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}
 8009f30:	20010bc8 	.word	0x20010bc8

08009f34 <_malloc_r>:
 8009f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f38:	1ccd      	adds	r5, r1, #3
 8009f3a:	f025 0503 	bic.w	r5, r5, #3
 8009f3e:	3508      	adds	r5, #8
 8009f40:	2d0c      	cmp	r5, #12
 8009f42:	bf38      	it	cc
 8009f44:	250c      	movcc	r5, #12
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	4607      	mov	r7, r0
 8009f4a:	db01      	blt.n	8009f50 <_malloc_r+0x1c>
 8009f4c:	42a9      	cmp	r1, r5
 8009f4e:	d905      	bls.n	8009f5c <_malloc_r+0x28>
 8009f50:	230c      	movs	r3, #12
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	2600      	movs	r6, #0
 8009f56:	4630      	mov	r0, r6
 8009f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a030 <_malloc_r+0xfc>
 8009f60:	f000 f928 	bl	800a1b4 <__malloc_lock>
 8009f64:	f8d8 3000 	ldr.w	r3, [r8]
 8009f68:	461c      	mov	r4, r3
 8009f6a:	bb5c      	cbnz	r4, 8009fc4 <_malloc_r+0x90>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4638      	mov	r0, r7
 8009f70:	f7ff ffc0 	bl	8009ef4 <sbrk_aligned>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	4604      	mov	r4, r0
 8009f78:	d155      	bne.n	800a026 <_malloc_r+0xf2>
 8009f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8009f7e:	4626      	mov	r6, r4
 8009f80:	2e00      	cmp	r6, #0
 8009f82:	d145      	bne.n	800a010 <_malloc_r+0xdc>
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	d048      	beq.n	800a01a <_malloc_r+0xe6>
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	eb04 0903 	add.w	r9, r4, r3
 8009f92:	f000 ffaf 	bl	800aef4 <_sbrk_r>
 8009f96:	4581      	cmp	r9, r0
 8009f98:	d13f      	bne.n	800a01a <_malloc_r+0xe6>
 8009f9a:	6821      	ldr	r1, [r4, #0]
 8009f9c:	1a6d      	subs	r5, r5, r1
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ffa7 	bl	8009ef4 <sbrk_aligned>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d037      	beq.n	800a01a <_malloc_r+0xe6>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	442b      	add	r3, r5
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d038      	beq.n	800a02a <_malloc_r+0xf6>
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	42a2      	cmp	r2, r4
 8009fbc:	d12b      	bne.n	800a016 <_malloc_r+0xe2>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	605a      	str	r2, [r3, #4]
 8009fc2:	e00f      	b.n	8009fe4 <_malloc_r+0xb0>
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	1b52      	subs	r2, r2, r5
 8009fc8:	d41f      	bmi.n	800a00a <_malloc_r+0xd6>
 8009fca:	2a0b      	cmp	r2, #11
 8009fcc:	d917      	bls.n	8009ffe <_malloc_r+0xca>
 8009fce:	1961      	adds	r1, r4, r5
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	6025      	str	r5, [r4, #0]
 8009fd4:	bf18      	it	ne
 8009fd6:	6059      	strne	r1, [r3, #4]
 8009fd8:	6863      	ldr	r3, [r4, #4]
 8009fda:	bf08      	it	eq
 8009fdc:	f8c8 1000 	streq.w	r1, [r8]
 8009fe0:	5162      	str	r2, [r4, r5]
 8009fe2:	604b      	str	r3, [r1, #4]
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f104 060b 	add.w	r6, r4, #11
 8009fea:	f000 f8e9 	bl	800a1c0 <__malloc_unlock>
 8009fee:	f026 0607 	bic.w	r6, r6, #7
 8009ff2:	1d23      	adds	r3, r4, #4
 8009ff4:	1af2      	subs	r2, r6, r3
 8009ff6:	d0ae      	beq.n	8009f56 <_malloc_r+0x22>
 8009ff8:	1b9b      	subs	r3, r3, r6
 8009ffa:	50a3      	str	r3, [r4, r2]
 8009ffc:	e7ab      	b.n	8009f56 <_malloc_r+0x22>
 8009ffe:	42a3      	cmp	r3, r4
 800a000:	6862      	ldr	r2, [r4, #4]
 800a002:	d1dd      	bne.n	8009fc0 <_malloc_r+0x8c>
 800a004:	f8c8 2000 	str.w	r2, [r8]
 800a008:	e7ec      	b.n	8009fe4 <_malloc_r+0xb0>
 800a00a:	4623      	mov	r3, r4
 800a00c:	6864      	ldr	r4, [r4, #4]
 800a00e:	e7ac      	b.n	8009f6a <_malloc_r+0x36>
 800a010:	4634      	mov	r4, r6
 800a012:	6876      	ldr	r6, [r6, #4]
 800a014:	e7b4      	b.n	8009f80 <_malloc_r+0x4c>
 800a016:	4613      	mov	r3, r2
 800a018:	e7cc      	b.n	8009fb4 <_malloc_r+0x80>
 800a01a:	230c      	movs	r3, #12
 800a01c:	603b      	str	r3, [r7, #0]
 800a01e:	4638      	mov	r0, r7
 800a020:	f000 f8ce 	bl	800a1c0 <__malloc_unlock>
 800a024:	e797      	b.n	8009f56 <_malloc_r+0x22>
 800a026:	6025      	str	r5, [r4, #0]
 800a028:	e7dc      	b.n	8009fe4 <_malloc_r+0xb0>
 800a02a:	605b      	str	r3, [r3, #4]
 800a02c:	deff      	udf	#255	; 0xff
 800a02e:	bf00      	nop
 800a030:	20010bc4 	.word	0x20010bc4

0800a034 <__ascii_mbtowc>:
 800a034:	b082      	sub	sp, #8
 800a036:	b901      	cbnz	r1, 800a03a <__ascii_mbtowc+0x6>
 800a038:	a901      	add	r1, sp, #4
 800a03a:	b142      	cbz	r2, 800a04e <__ascii_mbtowc+0x1a>
 800a03c:	b14b      	cbz	r3, 800a052 <__ascii_mbtowc+0x1e>
 800a03e:	7813      	ldrb	r3, [r2, #0]
 800a040:	600b      	str	r3, [r1, #0]
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	1e10      	subs	r0, r2, #0
 800a046:	bf18      	it	ne
 800a048:	2001      	movne	r0, #1
 800a04a:	b002      	add	sp, #8
 800a04c:	4770      	bx	lr
 800a04e:	4610      	mov	r0, r2
 800a050:	e7fb      	b.n	800a04a <__ascii_mbtowc+0x16>
 800a052:	f06f 0001 	mvn.w	r0, #1
 800a056:	e7f8      	b.n	800a04a <__ascii_mbtowc+0x16>

0800a058 <__sflush_r>:
 800a058:	898a      	ldrh	r2, [r1, #12]
 800a05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05e:	4605      	mov	r5, r0
 800a060:	0710      	lsls	r0, r2, #28
 800a062:	460c      	mov	r4, r1
 800a064:	d458      	bmi.n	800a118 <__sflush_r+0xc0>
 800a066:	684b      	ldr	r3, [r1, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dc05      	bgt.n	800a078 <__sflush_r+0x20>
 800a06c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dc02      	bgt.n	800a078 <__sflush_r+0x20>
 800a072:	2000      	movs	r0, #0
 800a074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d0f9      	beq.n	800a072 <__sflush_r+0x1a>
 800a07e:	2300      	movs	r3, #0
 800a080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a084:	682f      	ldr	r7, [r5, #0]
 800a086:	6a21      	ldr	r1, [r4, #32]
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	d032      	beq.n	800a0f2 <__sflush_r+0x9a>
 800a08c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	075a      	lsls	r2, r3, #29
 800a092:	d505      	bpl.n	800a0a0 <__sflush_r+0x48>
 800a094:	6863      	ldr	r3, [r4, #4]
 800a096:	1ac0      	subs	r0, r0, r3
 800a098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a09a:	b10b      	cbz	r3, 800a0a0 <__sflush_r+0x48>
 800a09c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a09e:	1ac0      	subs	r0, r0, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0a6:	6a21      	ldr	r1, [r4, #32]
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b0      	blx	r6
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	d106      	bne.n	800a0c0 <__sflush_r+0x68>
 800a0b2:	6829      	ldr	r1, [r5, #0]
 800a0b4:	291d      	cmp	r1, #29
 800a0b6:	d82b      	bhi.n	800a110 <__sflush_r+0xb8>
 800a0b8:	4a29      	ldr	r2, [pc, #164]	; (800a160 <__sflush_r+0x108>)
 800a0ba:	410a      	asrs	r2, r1
 800a0bc:	07d6      	lsls	r6, r2, #31
 800a0be:	d427      	bmi.n	800a110 <__sflush_r+0xb8>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	6062      	str	r2, [r4, #4]
 800a0c4:	04d9      	lsls	r1, r3, #19
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	6022      	str	r2, [r4, #0]
 800a0ca:	d504      	bpl.n	800a0d6 <__sflush_r+0x7e>
 800a0cc:	1c42      	adds	r2, r0, #1
 800a0ce:	d101      	bne.n	800a0d4 <__sflush_r+0x7c>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b903      	cbnz	r3, 800a0d6 <__sflush_r+0x7e>
 800a0d4:	6560      	str	r0, [r4, #84]	; 0x54
 800a0d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d8:	602f      	str	r7, [r5, #0]
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	d0c9      	beq.n	800a072 <__sflush_r+0x1a>
 800a0de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	d002      	beq.n	800a0ec <__sflush_r+0x94>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f000 ff5a 	bl	800afa0 <_free_r>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a0f0:	e7c0      	b.n	800a074 <__sflush_r+0x1c>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b0      	blx	r6
 800a0f8:	1c41      	adds	r1, r0, #1
 800a0fa:	d1c8      	bne.n	800a08e <__sflush_r+0x36>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0c5      	beq.n	800a08e <__sflush_r+0x36>
 800a102:	2b1d      	cmp	r3, #29
 800a104:	d001      	beq.n	800a10a <__sflush_r+0xb2>
 800a106:	2b16      	cmp	r3, #22
 800a108:	d101      	bne.n	800a10e <__sflush_r+0xb6>
 800a10a:	602f      	str	r7, [r5, #0]
 800a10c:	e7b1      	b.n	800a072 <__sflush_r+0x1a>
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	e7ad      	b.n	800a074 <__sflush_r+0x1c>
 800a118:	690f      	ldr	r7, [r1, #16]
 800a11a:	2f00      	cmp	r7, #0
 800a11c:	d0a9      	beq.n	800a072 <__sflush_r+0x1a>
 800a11e:	0793      	lsls	r3, r2, #30
 800a120:	680e      	ldr	r6, [r1, #0]
 800a122:	bf08      	it	eq
 800a124:	694b      	ldreq	r3, [r1, #20]
 800a126:	600f      	str	r7, [r1, #0]
 800a128:	bf18      	it	ne
 800a12a:	2300      	movne	r3, #0
 800a12c:	eba6 0807 	sub.w	r8, r6, r7
 800a130:	608b      	str	r3, [r1, #8]
 800a132:	f1b8 0f00 	cmp.w	r8, #0
 800a136:	dd9c      	ble.n	800a072 <__sflush_r+0x1a>
 800a138:	6a21      	ldr	r1, [r4, #32]
 800a13a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a13c:	4643      	mov	r3, r8
 800a13e:	463a      	mov	r2, r7
 800a140:	4628      	mov	r0, r5
 800a142:	47b0      	blx	r6
 800a144:	2800      	cmp	r0, #0
 800a146:	dc06      	bgt.n	800a156 <__sflush_r+0xfe>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a154:	e78e      	b.n	800a074 <__sflush_r+0x1c>
 800a156:	4407      	add	r7, r0
 800a158:	eba8 0800 	sub.w	r8, r8, r0
 800a15c:	e7e9      	b.n	800a132 <__sflush_r+0xda>
 800a15e:	bf00      	nop
 800a160:	dfbffffe 	.word	0xdfbffffe

0800a164 <_fflush_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	4605      	mov	r5, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	b913      	cbnz	r3, 800a174 <_fflush_r+0x10>
 800a16e:	2500      	movs	r5, #0
 800a170:	4628      	mov	r0, r5
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	b118      	cbz	r0, 800a17e <_fflush_r+0x1a>
 800a176:	6a03      	ldr	r3, [r0, #32]
 800a178:	b90b      	cbnz	r3, 800a17e <_fflush_r+0x1a>
 800a17a:	f7fd faa1 	bl	80076c0 <__sinit>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f3      	beq.n	800a16e <_fflush_r+0xa>
 800a186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a188:	07d0      	lsls	r0, r2, #31
 800a18a:	d404      	bmi.n	800a196 <_fflush_r+0x32>
 800a18c:	0599      	lsls	r1, r3, #22
 800a18e:	d402      	bmi.n	800a196 <_fflush_r+0x32>
 800a190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a192:	f7fe fa17 	bl	80085c4 <__retarget_lock_acquire_recursive>
 800a196:	4628      	mov	r0, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	f7ff ff5d 	bl	800a058 <__sflush_r>
 800a19e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a0:	07da      	lsls	r2, r3, #31
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	d4e4      	bmi.n	800a170 <_fflush_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	059b      	lsls	r3, r3, #22
 800a1aa:	d4e1      	bmi.n	800a170 <_fflush_r+0xc>
 800a1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ae:	f7fe fa0a 	bl	80085c6 <__retarget_lock_release_recursive>
 800a1b2:	e7dd      	b.n	800a170 <_fflush_r+0xc>

0800a1b4 <__malloc_lock>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	; (800a1bc <__malloc_lock+0x8>)
 800a1b6:	f7fe ba05 	b.w	80085c4 <__retarget_lock_acquire_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	20010bc0 	.word	0x20010bc0

0800a1c0 <__malloc_unlock>:
 800a1c0:	4801      	ldr	r0, [pc, #4]	; (800a1c8 <__malloc_unlock+0x8>)
 800a1c2:	f7fe ba00 	b.w	80085c6 <__retarget_lock_release_recursive>
 800a1c6:	bf00      	nop
 800a1c8:	20010bc0 	.word	0x20010bc0

0800a1cc <_Balloc>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	69c6      	ldr	r6, [r0, #28]
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	b976      	cbnz	r6, 800a1f4 <_Balloc+0x28>
 800a1d6:	2010      	movs	r0, #16
 800a1d8:	f7ff fe84 	bl	8009ee4 <malloc>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	61e0      	str	r0, [r4, #28]
 800a1e0:	b920      	cbnz	r0, 800a1ec <_Balloc+0x20>
 800a1e2:	4b18      	ldr	r3, [pc, #96]	; (800a244 <_Balloc+0x78>)
 800a1e4:	4818      	ldr	r0, [pc, #96]	; (800a248 <_Balloc+0x7c>)
 800a1e6:	216b      	movs	r1, #107	; 0x6b
 800a1e8:	f000 fea6 	bl	800af38 <__assert_func>
 800a1ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1f0:	6006      	str	r6, [r0, #0]
 800a1f2:	60c6      	str	r6, [r0, #12]
 800a1f4:	69e6      	ldr	r6, [r4, #28]
 800a1f6:	68f3      	ldr	r3, [r6, #12]
 800a1f8:	b183      	cbz	r3, 800a21c <_Balloc+0x50>
 800a1fa:	69e3      	ldr	r3, [r4, #28]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a202:	b9b8      	cbnz	r0, 800a234 <_Balloc+0x68>
 800a204:	2101      	movs	r1, #1
 800a206:	fa01 f605 	lsl.w	r6, r1, r5
 800a20a:	1d72      	adds	r2, r6, #5
 800a20c:	0092      	lsls	r2, r2, #2
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 feb0 	bl	800af74 <_calloc_r>
 800a214:	b160      	cbz	r0, 800a230 <_Balloc+0x64>
 800a216:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a21a:	e00e      	b.n	800a23a <_Balloc+0x6e>
 800a21c:	2221      	movs	r2, #33	; 0x21
 800a21e:	2104      	movs	r1, #4
 800a220:	4620      	mov	r0, r4
 800a222:	f000 fea7 	bl	800af74 <_calloc_r>
 800a226:	69e3      	ldr	r3, [r4, #28]
 800a228:	60f0      	str	r0, [r6, #12]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e4      	bne.n	800a1fa <_Balloc+0x2e>
 800a230:	2000      	movs	r0, #0
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	6802      	ldr	r2, [r0, #0]
 800a236:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a23a:	2300      	movs	r3, #0
 800a23c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a240:	e7f7      	b.n	800a232 <_Balloc+0x66>
 800a242:	bf00      	nop
 800a244:	0800b776 	.word	0x0800b776
 800a248:	0800b867 	.word	0x0800b867

0800a24c <_Bfree>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	69c6      	ldr	r6, [r0, #28]
 800a250:	4605      	mov	r5, r0
 800a252:	460c      	mov	r4, r1
 800a254:	b976      	cbnz	r6, 800a274 <_Bfree+0x28>
 800a256:	2010      	movs	r0, #16
 800a258:	f7ff fe44 	bl	8009ee4 <malloc>
 800a25c:	4602      	mov	r2, r0
 800a25e:	61e8      	str	r0, [r5, #28]
 800a260:	b920      	cbnz	r0, 800a26c <_Bfree+0x20>
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <_Bfree+0x3c>)
 800a264:	4809      	ldr	r0, [pc, #36]	; (800a28c <_Bfree+0x40>)
 800a266:	218f      	movs	r1, #143	; 0x8f
 800a268:	f000 fe66 	bl	800af38 <__assert_func>
 800a26c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a270:	6006      	str	r6, [r0, #0]
 800a272:	60c6      	str	r6, [r0, #12]
 800a274:	b13c      	cbz	r4, 800a286 <_Bfree+0x3a>
 800a276:	69eb      	ldr	r3, [r5, #28]
 800a278:	6862      	ldr	r2, [r4, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a280:	6021      	str	r1, [r4, #0]
 800a282:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	0800b776 	.word	0x0800b776
 800a28c:	0800b867 	.word	0x0800b867

0800a290 <__multadd>:
 800a290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a294:	690d      	ldr	r5, [r1, #16]
 800a296:	4607      	mov	r7, r0
 800a298:	460c      	mov	r4, r1
 800a29a:	461e      	mov	r6, r3
 800a29c:	f101 0c14 	add.w	ip, r1, #20
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2a6:	b299      	uxth	r1, r3
 800a2a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a2ac:	0c1e      	lsrs	r6, r3, #16
 800a2ae:	0c0b      	lsrs	r3, r1, #16
 800a2b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a2b4:	b289      	uxth	r1, r1
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2bc:	4285      	cmp	r5, r0
 800a2be:	f84c 1b04 	str.w	r1, [ip], #4
 800a2c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2c6:	dcec      	bgt.n	800a2a2 <__multadd+0x12>
 800a2c8:	b30e      	cbz	r6, 800a30e <__multadd+0x7e>
 800a2ca:	68a3      	ldr	r3, [r4, #8]
 800a2cc:	42ab      	cmp	r3, r5
 800a2ce:	dc19      	bgt.n	800a304 <__multadd+0x74>
 800a2d0:	6861      	ldr	r1, [r4, #4]
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	3101      	adds	r1, #1
 800a2d6:	f7ff ff79 	bl	800a1cc <_Balloc>
 800a2da:	4680      	mov	r8, r0
 800a2dc:	b928      	cbnz	r0, 800a2ea <__multadd+0x5a>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4b0c      	ldr	r3, [pc, #48]	; (800a314 <__multadd+0x84>)
 800a2e2:	480d      	ldr	r0, [pc, #52]	; (800a318 <__multadd+0x88>)
 800a2e4:	21ba      	movs	r1, #186	; 0xba
 800a2e6:	f000 fe27 	bl	800af38 <__assert_func>
 800a2ea:	6922      	ldr	r2, [r4, #16]
 800a2ec:	3202      	adds	r2, #2
 800a2ee:	f104 010c 	add.w	r1, r4, #12
 800a2f2:	0092      	lsls	r2, r2, #2
 800a2f4:	300c      	adds	r0, #12
 800a2f6:	f7fe f967 	bl	80085c8 <memcpy>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f7ff ffa5 	bl	800a24c <_Bfree>
 800a302:	4644      	mov	r4, r8
 800a304:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a308:	3501      	adds	r5, #1
 800a30a:	615e      	str	r6, [r3, #20]
 800a30c:	6125      	str	r5, [r4, #16]
 800a30e:	4620      	mov	r0, r4
 800a310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a314:	0800b7e5 	.word	0x0800b7e5
 800a318:	0800b867 	.word	0x0800b867

0800a31c <__s2b>:
 800a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	4615      	mov	r5, r2
 800a324:	461f      	mov	r7, r3
 800a326:	2209      	movs	r2, #9
 800a328:	3308      	adds	r3, #8
 800a32a:	4606      	mov	r6, r0
 800a32c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a330:	2100      	movs	r1, #0
 800a332:	2201      	movs	r2, #1
 800a334:	429a      	cmp	r2, r3
 800a336:	db09      	blt.n	800a34c <__s2b+0x30>
 800a338:	4630      	mov	r0, r6
 800a33a:	f7ff ff47 	bl	800a1cc <_Balloc>
 800a33e:	b940      	cbnz	r0, 800a352 <__s2b+0x36>
 800a340:	4602      	mov	r2, r0
 800a342:	4b19      	ldr	r3, [pc, #100]	; (800a3a8 <__s2b+0x8c>)
 800a344:	4819      	ldr	r0, [pc, #100]	; (800a3ac <__s2b+0x90>)
 800a346:	21d3      	movs	r1, #211	; 0xd3
 800a348:	f000 fdf6 	bl	800af38 <__assert_func>
 800a34c:	0052      	lsls	r2, r2, #1
 800a34e:	3101      	adds	r1, #1
 800a350:	e7f0      	b.n	800a334 <__s2b+0x18>
 800a352:	9b08      	ldr	r3, [sp, #32]
 800a354:	6143      	str	r3, [r0, #20]
 800a356:	2d09      	cmp	r5, #9
 800a358:	f04f 0301 	mov.w	r3, #1
 800a35c:	6103      	str	r3, [r0, #16]
 800a35e:	dd16      	ble.n	800a38e <__s2b+0x72>
 800a360:	f104 0909 	add.w	r9, r4, #9
 800a364:	46c8      	mov	r8, r9
 800a366:	442c      	add	r4, r5
 800a368:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a36c:	4601      	mov	r1, r0
 800a36e:	3b30      	subs	r3, #48	; 0x30
 800a370:	220a      	movs	r2, #10
 800a372:	4630      	mov	r0, r6
 800a374:	f7ff ff8c 	bl	800a290 <__multadd>
 800a378:	45a0      	cmp	r8, r4
 800a37a:	d1f5      	bne.n	800a368 <__s2b+0x4c>
 800a37c:	f1a5 0408 	sub.w	r4, r5, #8
 800a380:	444c      	add	r4, r9
 800a382:	1b2d      	subs	r5, r5, r4
 800a384:	1963      	adds	r3, r4, r5
 800a386:	42bb      	cmp	r3, r7
 800a388:	db04      	blt.n	800a394 <__s2b+0x78>
 800a38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a38e:	340a      	adds	r4, #10
 800a390:	2509      	movs	r5, #9
 800a392:	e7f6      	b.n	800a382 <__s2b+0x66>
 800a394:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a398:	4601      	mov	r1, r0
 800a39a:	3b30      	subs	r3, #48	; 0x30
 800a39c:	220a      	movs	r2, #10
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f7ff ff76 	bl	800a290 <__multadd>
 800a3a4:	e7ee      	b.n	800a384 <__s2b+0x68>
 800a3a6:	bf00      	nop
 800a3a8:	0800b7e5 	.word	0x0800b7e5
 800a3ac:	0800b867 	.word	0x0800b867

0800a3b0 <__hi0bits>:
 800a3b0:	0c03      	lsrs	r3, r0, #16
 800a3b2:	041b      	lsls	r3, r3, #16
 800a3b4:	b9d3      	cbnz	r3, 800a3ec <__hi0bits+0x3c>
 800a3b6:	0400      	lsls	r0, r0, #16
 800a3b8:	2310      	movs	r3, #16
 800a3ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3be:	bf04      	itt	eq
 800a3c0:	0200      	lsleq	r0, r0, #8
 800a3c2:	3308      	addeq	r3, #8
 800a3c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3c8:	bf04      	itt	eq
 800a3ca:	0100      	lsleq	r0, r0, #4
 800a3cc:	3304      	addeq	r3, #4
 800a3ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3d2:	bf04      	itt	eq
 800a3d4:	0080      	lsleq	r0, r0, #2
 800a3d6:	3302      	addeq	r3, #2
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	db05      	blt.n	800a3e8 <__hi0bits+0x38>
 800a3dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3e0:	f103 0301 	add.w	r3, r3, #1
 800a3e4:	bf08      	it	eq
 800a3e6:	2320      	moveq	r3, #32
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	4770      	bx	lr
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e7e4      	b.n	800a3ba <__hi0bits+0xa>

0800a3f0 <__lo0bits>:
 800a3f0:	6803      	ldr	r3, [r0, #0]
 800a3f2:	f013 0207 	ands.w	r2, r3, #7
 800a3f6:	d00c      	beq.n	800a412 <__lo0bits+0x22>
 800a3f8:	07d9      	lsls	r1, r3, #31
 800a3fa:	d422      	bmi.n	800a442 <__lo0bits+0x52>
 800a3fc:	079a      	lsls	r2, r3, #30
 800a3fe:	bf49      	itett	mi
 800a400:	085b      	lsrmi	r3, r3, #1
 800a402:	089b      	lsrpl	r3, r3, #2
 800a404:	6003      	strmi	r3, [r0, #0]
 800a406:	2201      	movmi	r2, #1
 800a408:	bf5c      	itt	pl
 800a40a:	6003      	strpl	r3, [r0, #0]
 800a40c:	2202      	movpl	r2, #2
 800a40e:	4610      	mov	r0, r2
 800a410:	4770      	bx	lr
 800a412:	b299      	uxth	r1, r3
 800a414:	b909      	cbnz	r1, 800a41a <__lo0bits+0x2a>
 800a416:	0c1b      	lsrs	r3, r3, #16
 800a418:	2210      	movs	r2, #16
 800a41a:	b2d9      	uxtb	r1, r3
 800a41c:	b909      	cbnz	r1, 800a422 <__lo0bits+0x32>
 800a41e:	3208      	adds	r2, #8
 800a420:	0a1b      	lsrs	r3, r3, #8
 800a422:	0719      	lsls	r1, r3, #28
 800a424:	bf04      	itt	eq
 800a426:	091b      	lsreq	r3, r3, #4
 800a428:	3204      	addeq	r2, #4
 800a42a:	0799      	lsls	r1, r3, #30
 800a42c:	bf04      	itt	eq
 800a42e:	089b      	lsreq	r3, r3, #2
 800a430:	3202      	addeq	r2, #2
 800a432:	07d9      	lsls	r1, r3, #31
 800a434:	d403      	bmi.n	800a43e <__lo0bits+0x4e>
 800a436:	085b      	lsrs	r3, r3, #1
 800a438:	f102 0201 	add.w	r2, r2, #1
 800a43c:	d003      	beq.n	800a446 <__lo0bits+0x56>
 800a43e:	6003      	str	r3, [r0, #0]
 800a440:	e7e5      	b.n	800a40e <__lo0bits+0x1e>
 800a442:	2200      	movs	r2, #0
 800a444:	e7e3      	b.n	800a40e <__lo0bits+0x1e>
 800a446:	2220      	movs	r2, #32
 800a448:	e7e1      	b.n	800a40e <__lo0bits+0x1e>
	...

0800a44c <__i2b>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	460c      	mov	r4, r1
 800a450:	2101      	movs	r1, #1
 800a452:	f7ff febb 	bl	800a1cc <_Balloc>
 800a456:	4602      	mov	r2, r0
 800a458:	b928      	cbnz	r0, 800a466 <__i2b+0x1a>
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <__i2b+0x24>)
 800a45c:	4805      	ldr	r0, [pc, #20]	; (800a474 <__i2b+0x28>)
 800a45e:	f240 1145 	movw	r1, #325	; 0x145
 800a462:	f000 fd69 	bl	800af38 <__assert_func>
 800a466:	2301      	movs	r3, #1
 800a468:	6144      	str	r4, [r0, #20]
 800a46a:	6103      	str	r3, [r0, #16]
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	bf00      	nop
 800a470:	0800b7e5 	.word	0x0800b7e5
 800a474:	0800b867 	.word	0x0800b867

0800a478 <__multiply>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4691      	mov	r9, r2
 800a47e:	690a      	ldr	r2, [r1, #16]
 800a480:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a484:	429a      	cmp	r2, r3
 800a486:	bfb8      	it	lt
 800a488:	460b      	movlt	r3, r1
 800a48a:	460c      	mov	r4, r1
 800a48c:	bfbc      	itt	lt
 800a48e:	464c      	movlt	r4, r9
 800a490:	4699      	movlt	r9, r3
 800a492:	6927      	ldr	r7, [r4, #16]
 800a494:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a498:	68a3      	ldr	r3, [r4, #8]
 800a49a:	6861      	ldr	r1, [r4, #4]
 800a49c:	eb07 060a 	add.w	r6, r7, sl
 800a4a0:	42b3      	cmp	r3, r6
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	bfb8      	it	lt
 800a4a6:	3101      	addlt	r1, #1
 800a4a8:	f7ff fe90 	bl	800a1cc <_Balloc>
 800a4ac:	b930      	cbnz	r0, 800a4bc <__multiply+0x44>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b44      	ldr	r3, [pc, #272]	; (800a5c4 <__multiply+0x14c>)
 800a4b2:	4845      	ldr	r0, [pc, #276]	; (800a5c8 <__multiply+0x150>)
 800a4b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a4b8:	f000 fd3e 	bl	800af38 <__assert_func>
 800a4bc:	f100 0514 	add.w	r5, r0, #20
 800a4c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4c4:	462b      	mov	r3, r5
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4543      	cmp	r3, r8
 800a4ca:	d321      	bcc.n	800a510 <__multiply+0x98>
 800a4cc:	f104 0314 	add.w	r3, r4, #20
 800a4d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a4d4:	f109 0314 	add.w	r3, r9, #20
 800a4d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a4dc:	9202      	str	r2, [sp, #8]
 800a4de:	1b3a      	subs	r2, r7, r4
 800a4e0:	3a15      	subs	r2, #21
 800a4e2:	f022 0203 	bic.w	r2, r2, #3
 800a4e6:	3204      	adds	r2, #4
 800a4e8:	f104 0115 	add.w	r1, r4, #21
 800a4ec:	428f      	cmp	r7, r1
 800a4ee:	bf38      	it	cc
 800a4f0:	2204      	movcc	r2, #4
 800a4f2:	9201      	str	r2, [sp, #4]
 800a4f4:	9a02      	ldr	r2, [sp, #8]
 800a4f6:	9303      	str	r3, [sp, #12]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d80c      	bhi.n	800a516 <__multiply+0x9e>
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	dd03      	ble.n	800a508 <__multiply+0x90>
 800a500:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a504:	2b00      	cmp	r3, #0
 800a506:	d05b      	beq.n	800a5c0 <__multiply+0x148>
 800a508:	6106      	str	r6, [r0, #16]
 800a50a:	b005      	add	sp, #20
 800a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a510:	f843 2b04 	str.w	r2, [r3], #4
 800a514:	e7d8      	b.n	800a4c8 <__multiply+0x50>
 800a516:	f8b3 a000 	ldrh.w	sl, [r3]
 800a51a:	f1ba 0f00 	cmp.w	sl, #0
 800a51e:	d024      	beq.n	800a56a <__multiply+0xf2>
 800a520:	f104 0e14 	add.w	lr, r4, #20
 800a524:	46a9      	mov	r9, r5
 800a526:	f04f 0c00 	mov.w	ip, #0
 800a52a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a52e:	f8d9 1000 	ldr.w	r1, [r9]
 800a532:	fa1f fb82 	uxth.w	fp, r2
 800a536:	b289      	uxth	r1, r1
 800a538:	fb0a 110b 	mla	r1, sl, fp, r1
 800a53c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a540:	f8d9 2000 	ldr.w	r2, [r9]
 800a544:	4461      	add	r1, ip
 800a546:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a54a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a54e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a552:	b289      	uxth	r1, r1
 800a554:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a558:	4577      	cmp	r7, lr
 800a55a:	f849 1b04 	str.w	r1, [r9], #4
 800a55e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a562:	d8e2      	bhi.n	800a52a <__multiply+0xb2>
 800a564:	9a01      	ldr	r2, [sp, #4]
 800a566:	f845 c002 	str.w	ip, [r5, r2]
 800a56a:	9a03      	ldr	r2, [sp, #12]
 800a56c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a570:	3304      	adds	r3, #4
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	d021      	beq.n	800a5bc <__multiply+0x144>
 800a578:	6829      	ldr	r1, [r5, #0]
 800a57a:	f104 0c14 	add.w	ip, r4, #20
 800a57e:	46ae      	mov	lr, r5
 800a580:	f04f 0a00 	mov.w	sl, #0
 800a584:	f8bc b000 	ldrh.w	fp, [ip]
 800a588:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a58c:	fb09 220b 	mla	r2, r9, fp, r2
 800a590:	4452      	add	r2, sl
 800a592:	b289      	uxth	r1, r1
 800a594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a598:	f84e 1b04 	str.w	r1, [lr], #4
 800a59c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5a4:	f8be 1000 	ldrh.w	r1, [lr]
 800a5a8:	fb09 110a 	mla	r1, r9, sl, r1
 800a5ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a5b0:	4567      	cmp	r7, ip
 800a5b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5b6:	d8e5      	bhi.n	800a584 <__multiply+0x10c>
 800a5b8:	9a01      	ldr	r2, [sp, #4]
 800a5ba:	50a9      	str	r1, [r5, r2]
 800a5bc:	3504      	adds	r5, #4
 800a5be:	e799      	b.n	800a4f4 <__multiply+0x7c>
 800a5c0:	3e01      	subs	r6, #1
 800a5c2:	e79b      	b.n	800a4fc <__multiply+0x84>
 800a5c4:	0800b7e5 	.word	0x0800b7e5
 800a5c8:	0800b867 	.word	0x0800b867

0800a5cc <__pow5mult>:
 800a5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d0:	4615      	mov	r5, r2
 800a5d2:	f012 0203 	ands.w	r2, r2, #3
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	460f      	mov	r7, r1
 800a5da:	d007      	beq.n	800a5ec <__pow5mult+0x20>
 800a5dc:	4c25      	ldr	r4, [pc, #148]	; (800a674 <__pow5mult+0xa8>)
 800a5de:	3a01      	subs	r2, #1
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5e6:	f7ff fe53 	bl	800a290 <__multadd>
 800a5ea:	4607      	mov	r7, r0
 800a5ec:	10ad      	asrs	r5, r5, #2
 800a5ee:	d03d      	beq.n	800a66c <__pow5mult+0xa0>
 800a5f0:	69f4      	ldr	r4, [r6, #28]
 800a5f2:	b97c      	cbnz	r4, 800a614 <__pow5mult+0x48>
 800a5f4:	2010      	movs	r0, #16
 800a5f6:	f7ff fc75 	bl	8009ee4 <malloc>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	61f0      	str	r0, [r6, #28]
 800a5fe:	b928      	cbnz	r0, 800a60c <__pow5mult+0x40>
 800a600:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <__pow5mult+0xac>)
 800a602:	481e      	ldr	r0, [pc, #120]	; (800a67c <__pow5mult+0xb0>)
 800a604:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a608:	f000 fc96 	bl	800af38 <__assert_func>
 800a60c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a610:	6004      	str	r4, [r0, #0]
 800a612:	60c4      	str	r4, [r0, #12]
 800a614:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a61c:	b94c      	cbnz	r4, 800a632 <__pow5mult+0x66>
 800a61e:	f240 2171 	movw	r1, #625	; 0x271
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ff12 	bl	800a44c <__i2b>
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a62e:	4604      	mov	r4, r0
 800a630:	6003      	str	r3, [r0, #0]
 800a632:	f04f 0900 	mov.w	r9, #0
 800a636:	07eb      	lsls	r3, r5, #31
 800a638:	d50a      	bpl.n	800a650 <__pow5mult+0x84>
 800a63a:	4639      	mov	r1, r7
 800a63c:	4622      	mov	r2, r4
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff ff1a 	bl	800a478 <__multiply>
 800a644:	4639      	mov	r1, r7
 800a646:	4680      	mov	r8, r0
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff fdff 	bl	800a24c <_Bfree>
 800a64e:	4647      	mov	r7, r8
 800a650:	106d      	asrs	r5, r5, #1
 800a652:	d00b      	beq.n	800a66c <__pow5mult+0xa0>
 800a654:	6820      	ldr	r0, [r4, #0]
 800a656:	b938      	cbnz	r0, 800a668 <__pow5mult+0x9c>
 800a658:	4622      	mov	r2, r4
 800a65a:	4621      	mov	r1, r4
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff ff0b 	bl	800a478 <__multiply>
 800a662:	6020      	str	r0, [r4, #0]
 800a664:	f8c0 9000 	str.w	r9, [r0]
 800a668:	4604      	mov	r4, r0
 800a66a:	e7e4      	b.n	800a636 <__pow5mult+0x6a>
 800a66c:	4638      	mov	r0, r7
 800a66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a672:	bf00      	nop
 800a674:	0800b9b0 	.word	0x0800b9b0
 800a678:	0800b776 	.word	0x0800b776
 800a67c:	0800b867 	.word	0x0800b867

0800a680 <__lshift>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	6849      	ldr	r1, [r1, #4]
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a68e:	68a3      	ldr	r3, [r4, #8]
 800a690:	4607      	mov	r7, r0
 800a692:	4691      	mov	r9, r2
 800a694:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a698:	f108 0601 	add.w	r6, r8, #1
 800a69c:	42b3      	cmp	r3, r6
 800a69e:	db0b      	blt.n	800a6b8 <__lshift+0x38>
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff fd93 	bl	800a1cc <_Balloc>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	b948      	cbnz	r0, 800a6be <__lshift+0x3e>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	4b28      	ldr	r3, [pc, #160]	; (800a750 <__lshift+0xd0>)
 800a6ae:	4829      	ldr	r0, [pc, #164]	; (800a754 <__lshift+0xd4>)
 800a6b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a6b4:	f000 fc40 	bl	800af38 <__assert_func>
 800a6b8:	3101      	adds	r1, #1
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	e7ee      	b.n	800a69c <__lshift+0x1c>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f100 0114 	add.w	r1, r0, #20
 800a6c4:	f100 0210 	add.w	r2, r0, #16
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	4553      	cmp	r3, sl
 800a6cc:	db33      	blt.n	800a736 <__lshift+0xb6>
 800a6ce:	6920      	ldr	r0, [r4, #16]
 800a6d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6d4:	f104 0314 	add.w	r3, r4, #20
 800a6d8:	f019 091f 	ands.w	r9, r9, #31
 800a6dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6e4:	d02b      	beq.n	800a73e <__lshift+0xbe>
 800a6e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ea:	468a      	mov	sl, r1
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	fa00 f009 	lsl.w	r0, r0, r9
 800a6f4:	4310      	orrs	r0, r2
 800a6f6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fe:	459c      	cmp	ip, r3
 800a700:	fa22 f20e 	lsr.w	r2, r2, lr
 800a704:	d8f3      	bhi.n	800a6ee <__lshift+0x6e>
 800a706:	ebac 0304 	sub.w	r3, ip, r4
 800a70a:	3b15      	subs	r3, #21
 800a70c:	f023 0303 	bic.w	r3, r3, #3
 800a710:	3304      	adds	r3, #4
 800a712:	f104 0015 	add.w	r0, r4, #21
 800a716:	4584      	cmp	ip, r0
 800a718:	bf38      	it	cc
 800a71a:	2304      	movcc	r3, #4
 800a71c:	50ca      	str	r2, [r1, r3]
 800a71e:	b10a      	cbz	r2, 800a724 <__lshift+0xa4>
 800a720:	f108 0602 	add.w	r6, r8, #2
 800a724:	3e01      	subs	r6, #1
 800a726:	4638      	mov	r0, r7
 800a728:	612e      	str	r6, [r5, #16]
 800a72a:	4621      	mov	r1, r4
 800a72c:	f7ff fd8e 	bl	800a24c <_Bfree>
 800a730:	4628      	mov	r0, r5
 800a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a736:	f842 0f04 	str.w	r0, [r2, #4]!
 800a73a:	3301      	adds	r3, #1
 800a73c:	e7c5      	b.n	800a6ca <__lshift+0x4a>
 800a73e:	3904      	subs	r1, #4
 800a740:	f853 2b04 	ldr.w	r2, [r3], #4
 800a744:	f841 2f04 	str.w	r2, [r1, #4]!
 800a748:	459c      	cmp	ip, r3
 800a74a:	d8f9      	bhi.n	800a740 <__lshift+0xc0>
 800a74c:	e7ea      	b.n	800a724 <__lshift+0xa4>
 800a74e:	bf00      	nop
 800a750:	0800b7e5 	.word	0x0800b7e5
 800a754:	0800b867 	.word	0x0800b867

0800a758 <__mcmp>:
 800a758:	b530      	push	{r4, r5, lr}
 800a75a:	6902      	ldr	r2, [r0, #16]
 800a75c:	690c      	ldr	r4, [r1, #16]
 800a75e:	1b12      	subs	r2, r2, r4
 800a760:	d10e      	bne.n	800a780 <__mcmp+0x28>
 800a762:	f100 0314 	add.w	r3, r0, #20
 800a766:	3114      	adds	r1, #20
 800a768:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a76c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a770:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a774:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a778:	42a5      	cmp	r5, r4
 800a77a:	d003      	beq.n	800a784 <__mcmp+0x2c>
 800a77c:	d305      	bcc.n	800a78a <__mcmp+0x32>
 800a77e:	2201      	movs	r2, #1
 800a780:	4610      	mov	r0, r2
 800a782:	bd30      	pop	{r4, r5, pc}
 800a784:	4283      	cmp	r3, r0
 800a786:	d3f3      	bcc.n	800a770 <__mcmp+0x18>
 800a788:	e7fa      	b.n	800a780 <__mcmp+0x28>
 800a78a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a78e:	e7f7      	b.n	800a780 <__mcmp+0x28>

0800a790 <__mdiff>:
 800a790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	460c      	mov	r4, r1
 800a796:	4606      	mov	r6, r0
 800a798:	4611      	mov	r1, r2
 800a79a:	4620      	mov	r0, r4
 800a79c:	4690      	mov	r8, r2
 800a79e:	f7ff ffdb 	bl	800a758 <__mcmp>
 800a7a2:	1e05      	subs	r5, r0, #0
 800a7a4:	d110      	bne.n	800a7c8 <__mdiff+0x38>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7ff fd0f 	bl	800a1cc <_Balloc>
 800a7ae:	b930      	cbnz	r0, 800a7be <__mdiff+0x2e>
 800a7b0:	4b3a      	ldr	r3, [pc, #232]	; (800a89c <__mdiff+0x10c>)
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	f240 2137 	movw	r1, #567	; 0x237
 800a7b8:	4839      	ldr	r0, [pc, #228]	; (800a8a0 <__mdiff+0x110>)
 800a7ba:	f000 fbbd 	bl	800af38 <__assert_func>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	bfa4      	itt	ge
 800a7ca:	4643      	movge	r3, r8
 800a7cc:	46a0      	movge	r8, r4
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7d4:	bfa6      	itte	ge
 800a7d6:	461c      	movge	r4, r3
 800a7d8:	2500      	movge	r5, #0
 800a7da:	2501      	movlt	r5, #1
 800a7dc:	f7ff fcf6 	bl	800a1cc <_Balloc>
 800a7e0:	b920      	cbnz	r0, 800a7ec <__mdiff+0x5c>
 800a7e2:	4b2e      	ldr	r3, [pc, #184]	; (800a89c <__mdiff+0x10c>)
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	f240 2145 	movw	r1, #581	; 0x245
 800a7ea:	e7e5      	b.n	800a7b8 <__mdiff+0x28>
 800a7ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7f0:	6926      	ldr	r6, [r4, #16]
 800a7f2:	60c5      	str	r5, [r0, #12]
 800a7f4:	f104 0914 	add.w	r9, r4, #20
 800a7f8:	f108 0514 	add.w	r5, r8, #20
 800a7fc:	f100 0e14 	add.w	lr, r0, #20
 800a800:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a804:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a808:	f108 0210 	add.w	r2, r8, #16
 800a80c:	46f2      	mov	sl, lr
 800a80e:	2100      	movs	r1, #0
 800a810:	f859 3b04 	ldr.w	r3, [r9], #4
 800a814:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a818:	fa11 f88b 	uxtah	r8, r1, fp
 800a81c:	b299      	uxth	r1, r3
 800a81e:	0c1b      	lsrs	r3, r3, #16
 800a820:	eba8 0801 	sub.w	r8, r8, r1
 800a824:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a828:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a82c:	fa1f f888 	uxth.w	r8, r8
 800a830:	1419      	asrs	r1, r3, #16
 800a832:	454e      	cmp	r6, r9
 800a834:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a838:	f84a 3b04 	str.w	r3, [sl], #4
 800a83c:	d8e8      	bhi.n	800a810 <__mdiff+0x80>
 800a83e:	1b33      	subs	r3, r6, r4
 800a840:	3b15      	subs	r3, #21
 800a842:	f023 0303 	bic.w	r3, r3, #3
 800a846:	3304      	adds	r3, #4
 800a848:	3415      	adds	r4, #21
 800a84a:	42a6      	cmp	r6, r4
 800a84c:	bf38      	it	cc
 800a84e:	2304      	movcc	r3, #4
 800a850:	441d      	add	r5, r3
 800a852:	4473      	add	r3, lr
 800a854:	469e      	mov	lr, r3
 800a856:	462e      	mov	r6, r5
 800a858:	4566      	cmp	r6, ip
 800a85a:	d30e      	bcc.n	800a87a <__mdiff+0xea>
 800a85c:	f10c 0203 	add.w	r2, ip, #3
 800a860:	1b52      	subs	r2, r2, r5
 800a862:	f022 0203 	bic.w	r2, r2, #3
 800a866:	3d03      	subs	r5, #3
 800a868:	45ac      	cmp	ip, r5
 800a86a:	bf38      	it	cc
 800a86c:	2200      	movcc	r2, #0
 800a86e:	4413      	add	r3, r2
 800a870:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a874:	b17a      	cbz	r2, 800a896 <__mdiff+0x106>
 800a876:	6107      	str	r7, [r0, #16]
 800a878:	e7a4      	b.n	800a7c4 <__mdiff+0x34>
 800a87a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a87e:	fa11 f288 	uxtah	r2, r1, r8
 800a882:	1414      	asrs	r4, r2, #16
 800a884:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a888:	b292      	uxth	r2, r2
 800a88a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a88e:	f84e 2b04 	str.w	r2, [lr], #4
 800a892:	1421      	asrs	r1, r4, #16
 800a894:	e7e0      	b.n	800a858 <__mdiff+0xc8>
 800a896:	3f01      	subs	r7, #1
 800a898:	e7ea      	b.n	800a870 <__mdiff+0xe0>
 800a89a:	bf00      	nop
 800a89c:	0800b7e5 	.word	0x0800b7e5
 800a8a0:	0800b867 	.word	0x0800b867

0800a8a4 <__ulp>:
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	ed8d 0b00 	vstr	d0, [sp]
 800a8aa:	9a01      	ldr	r2, [sp, #4]
 800a8ac:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <__ulp+0x48>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dc08      	bgt.n	800a8ca <__ulp+0x26>
 800a8b8:	425b      	negs	r3, r3
 800a8ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a8be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8c2:	da04      	bge.n	800a8ce <__ulp+0x2a>
 800a8c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a8c8:	4113      	asrs	r3, r2
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	e008      	b.n	800a8e0 <__ulp+0x3c>
 800a8ce:	f1a2 0314 	sub.w	r3, r2, #20
 800a8d2:	2b1e      	cmp	r3, #30
 800a8d4:	bfda      	itte	le
 800a8d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a8da:	40da      	lsrle	r2, r3
 800a8dc:	2201      	movgt	r2, #1
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	ec41 0b10 	vmov	d0, r0, r1
 800a8e8:	b002      	add	sp, #8
 800a8ea:	4770      	bx	lr
 800a8ec:	7ff00000 	.word	0x7ff00000

0800a8f0 <__b2d>:
 800a8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f4:	6906      	ldr	r6, [r0, #16]
 800a8f6:	f100 0814 	add.w	r8, r0, #20
 800a8fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a8fe:	1f37      	subs	r7, r6, #4
 800a900:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a904:	4610      	mov	r0, r2
 800a906:	f7ff fd53 	bl	800a3b0 <__hi0bits>
 800a90a:	f1c0 0320 	rsb	r3, r0, #32
 800a90e:	280a      	cmp	r0, #10
 800a910:	600b      	str	r3, [r1, #0]
 800a912:	491b      	ldr	r1, [pc, #108]	; (800a980 <__b2d+0x90>)
 800a914:	dc15      	bgt.n	800a942 <__b2d+0x52>
 800a916:	f1c0 0c0b 	rsb	ip, r0, #11
 800a91a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a91e:	45b8      	cmp	r8, r7
 800a920:	ea43 0501 	orr.w	r5, r3, r1
 800a924:	bf34      	ite	cc
 800a926:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a92a:	2300      	movcs	r3, #0
 800a92c:	3015      	adds	r0, #21
 800a92e:	fa02 f000 	lsl.w	r0, r2, r0
 800a932:	fa23 f30c 	lsr.w	r3, r3, ip
 800a936:	4303      	orrs	r3, r0
 800a938:	461c      	mov	r4, r3
 800a93a:	ec45 4b10 	vmov	d0, r4, r5
 800a93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a942:	45b8      	cmp	r8, r7
 800a944:	bf3a      	itte	cc
 800a946:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a94a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a94e:	2300      	movcs	r3, #0
 800a950:	380b      	subs	r0, #11
 800a952:	d012      	beq.n	800a97a <__b2d+0x8a>
 800a954:	f1c0 0120 	rsb	r1, r0, #32
 800a958:	fa23 f401 	lsr.w	r4, r3, r1
 800a95c:	4082      	lsls	r2, r0
 800a95e:	4322      	orrs	r2, r4
 800a960:	4547      	cmp	r7, r8
 800a962:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a966:	bf8c      	ite	hi
 800a968:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a96c:	2200      	movls	r2, #0
 800a96e:	4083      	lsls	r3, r0
 800a970:	40ca      	lsrs	r2, r1
 800a972:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a976:	4313      	orrs	r3, r2
 800a978:	e7de      	b.n	800a938 <__b2d+0x48>
 800a97a:	ea42 0501 	orr.w	r5, r2, r1
 800a97e:	e7db      	b.n	800a938 <__b2d+0x48>
 800a980:	3ff00000 	.word	0x3ff00000

0800a984 <__d2b>:
 800a984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a988:	460f      	mov	r7, r1
 800a98a:	2101      	movs	r1, #1
 800a98c:	ec59 8b10 	vmov	r8, r9, d0
 800a990:	4616      	mov	r6, r2
 800a992:	f7ff fc1b 	bl	800a1cc <_Balloc>
 800a996:	4604      	mov	r4, r0
 800a998:	b930      	cbnz	r0, 800a9a8 <__d2b+0x24>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4b24      	ldr	r3, [pc, #144]	; (800aa30 <__d2b+0xac>)
 800a99e:	4825      	ldr	r0, [pc, #148]	; (800aa34 <__d2b+0xb0>)
 800a9a0:	f240 310f 	movw	r1, #783	; 0x30f
 800a9a4:	f000 fac8 	bl	800af38 <__assert_func>
 800a9a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9b0:	bb2d      	cbnz	r5, 800a9fe <__d2b+0x7a>
 800a9b2:	9301      	str	r3, [sp, #4]
 800a9b4:	f1b8 0300 	subs.w	r3, r8, #0
 800a9b8:	d026      	beq.n	800aa08 <__d2b+0x84>
 800a9ba:	4668      	mov	r0, sp
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	f7ff fd17 	bl	800a3f0 <__lo0bits>
 800a9c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9c6:	b1e8      	cbz	r0, 800aa04 <__d2b+0x80>
 800a9c8:	f1c0 0320 	rsb	r3, r0, #32
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	40c2      	lsrs	r2, r0
 800a9d4:	6163      	str	r3, [r4, #20]
 800a9d6:	9201      	str	r2, [sp, #4]
 800a9d8:	9b01      	ldr	r3, [sp, #4]
 800a9da:	61a3      	str	r3, [r4, #24]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bf14      	ite	ne
 800a9e0:	2202      	movne	r2, #2
 800a9e2:	2201      	moveq	r2, #1
 800a9e4:	6122      	str	r2, [r4, #16]
 800a9e6:	b1bd      	cbz	r5, 800aa18 <__d2b+0x94>
 800a9e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9ec:	4405      	add	r5, r0
 800a9ee:	603d      	str	r5, [r7, #0]
 800a9f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9f4:	6030      	str	r0, [r6, #0]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	b003      	add	sp, #12
 800a9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa02:	e7d6      	b.n	800a9b2 <__d2b+0x2e>
 800aa04:	6161      	str	r1, [r4, #20]
 800aa06:	e7e7      	b.n	800a9d8 <__d2b+0x54>
 800aa08:	a801      	add	r0, sp, #4
 800aa0a:	f7ff fcf1 	bl	800a3f0 <__lo0bits>
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	6163      	str	r3, [r4, #20]
 800aa12:	3020      	adds	r0, #32
 800aa14:	2201      	movs	r2, #1
 800aa16:	e7e5      	b.n	800a9e4 <__d2b+0x60>
 800aa18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa20:	6038      	str	r0, [r7, #0]
 800aa22:	6918      	ldr	r0, [r3, #16]
 800aa24:	f7ff fcc4 	bl	800a3b0 <__hi0bits>
 800aa28:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa2c:	e7e2      	b.n	800a9f4 <__d2b+0x70>
 800aa2e:	bf00      	nop
 800aa30:	0800b7e5 	.word	0x0800b7e5
 800aa34:	0800b867 	.word	0x0800b867

0800aa38 <__ratio>:
 800aa38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	4688      	mov	r8, r1
 800aa3e:	4669      	mov	r1, sp
 800aa40:	4681      	mov	r9, r0
 800aa42:	f7ff ff55 	bl	800a8f0 <__b2d>
 800aa46:	a901      	add	r1, sp, #4
 800aa48:	4640      	mov	r0, r8
 800aa4a:	ec55 4b10 	vmov	r4, r5, d0
 800aa4e:	f7ff ff4f 	bl	800a8f0 <__b2d>
 800aa52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa5a:	eba3 0c02 	sub.w	ip, r3, r2
 800aa5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa68:	ec51 0b10 	vmov	r0, r1, d0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bfd6      	itet	le
 800aa70:	460a      	movle	r2, r1
 800aa72:	462a      	movgt	r2, r5
 800aa74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa78:	468b      	mov	fp, r1
 800aa7a:	462f      	mov	r7, r5
 800aa7c:	bfd4      	ite	le
 800aa7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa86:	4620      	mov	r0, r4
 800aa88:	ee10 2a10 	vmov	r2, s0
 800aa8c:	465b      	mov	r3, fp
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f5 fefc 	bl	800088c <__aeabi_ddiv>
 800aa94:	ec41 0b10 	vmov	d0, r0, r1
 800aa98:	b003      	add	sp, #12
 800aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa9e <__copybits>:
 800aa9e:	3901      	subs	r1, #1
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	1149      	asrs	r1, r1, #5
 800aaa4:	6914      	ldr	r4, [r2, #16]
 800aaa6:	3101      	adds	r1, #1
 800aaa8:	f102 0314 	add.w	r3, r2, #20
 800aaac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aab0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aab4:	1f05      	subs	r5, r0, #4
 800aab6:	42a3      	cmp	r3, r4
 800aab8:	d30c      	bcc.n	800aad4 <__copybits+0x36>
 800aaba:	1aa3      	subs	r3, r4, r2
 800aabc:	3b11      	subs	r3, #17
 800aabe:	f023 0303 	bic.w	r3, r3, #3
 800aac2:	3211      	adds	r2, #17
 800aac4:	42a2      	cmp	r2, r4
 800aac6:	bf88      	it	hi
 800aac8:	2300      	movhi	r3, #0
 800aaca:	4418      	add	r0, r3
 800aacc:	2300      	movs	r3, #0
 800aace:	4288      	cmp	r0, r1
 800aad0:	d305      	bcc.n	800aade <__copybits+0x40>
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	f853 6b04 	ldr.w	r6, [r3], #4
 800aad8:	f845 6f04 	str.w	r6, [r5, #4]!
 800aadc:	e7eb      	b.n	800aab6 <__copybits+0x18>
 800aade:	f840 3b04 	str.w	r3, [r0], #4
 800aae2:	e7f4      	b.n	800aace <__copybits+0x30>

0800aae4 <__any_on>:
 800aae4:	f100 0214 	add.w	r2, r0, #20
 800aae8:	6900      	ldr	r0, [r0, #16]
 800aaea:	114b      	asrs	r3, r1, #5
 800aaec:	4298      	cmp	r0, r3
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	db11      	blt.n	800ab16 <__any_on+0x32>
 800aaf2:	dd0a      	ble.n	800ab0a <__any_on+0x26>
 800aaf4:	f011 011f 	ands.w	r1, r1, #31
 800aaf8:	d007      	beq.n	800ab0a <__any_on+0x26>
 800aafa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aafe:	fa24 f001 	lsr.w	r0, r4, r1
 800ab02:	fa00 f101 	lsl.w	r1, r0, r1
 800ab06:	428c      	cmp	r4, r1
 800ab08:	d10b      	bne.n	800ab22 <__any_on+0x3e>
 800ab0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d803      	bhi.n	800ab1a <__any_on+0x36>
 800ab12:	2000      	movs	r0, #0
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	4603      	mov	r3, r0
 800ab18:	e7f7      	b.n	800ab0a <__any_on+0x26>
 800ab1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab1e:	2900      	cmp	r1, #0
 800ab20:	d0f5      	beq.n	800ab0e <__any_on+0x2a>
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7f6      	b.n	800ab14 <__any_on+0x30>

0800ab26 <__sread>:
 800ab26:	b510      	push	{r4, lr}
 800ab28:	460c      	mov	r4, r1
 800ab2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2e:	f000 f9cf 	bl	800aed0 <_read_r>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	bfab      	itete	ge
 800ab36:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab38:	89a3      	ldrhlt	r3, [r4, #12]
 800ab3a:	181b      	addge	r3, r3, r0
 800ab3c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab40:	bfac      	ite	ge
 800ab42:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab44:	81a3      	strhlt	r3, [r4, #12]
 800ab46:	bd10      	pop	{r4, pc}

0800ab48 <__swrite>:
 800ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	461f      	mov	r7, r3
 800ab4e:	898b      	ldrh	r3, [r1, #12]
 800ab50:	05db      	lsls	r3, r3, #23
 800ab52:	4605      	mov	r5, r0
 800ab54:	460c      	mov	r4, r1
 800ab56:	4616      	mov	r6, r2
 800ab58:	d505      	bpl.n	800ab66 <__swrite+0x1e>
 800ab5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5e:	2302      	movs	r3, #2
 800ab60:	2200      	movs	r2, #0
 800ab62:	f000 f9a3 	bl	800aeac <_lseek_r>
 800ab66:	89a3      	ldrh	r3, [r4, #12]
 800ab68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	4632      	mov	r2, r6
 800ab74:	463b      	mov	r3, r7
 800ab76:	4628      	mov	r0, r5
 800ab78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7c:	f000 b9ca 	b.w	800af14 <_write_r>

0800ab80 <__sseek>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	460c      	mov	r4, r1
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	f000 f990 	bl	800aeac <_lseek_r>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	bf15      	itete	ne
 800ab92:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab94:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab98:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab9c:	81a3      	strheq	r3, [r4, #12]
 800ab9e:	bf18      	it	ne
 800aba0:	81a3      	strhne	r3, [r4, #12]
 800aba2:	bd10      	pop	{r4, pc}

0800aba4 <__sclose>:
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	f000 b94e 	b.w	800ae48 <_close_r>

0800abac <_realloc_r>:
 800abac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb0:	4680      	mov	r8, r0
 800abb2:	4614      	mov	r4, r2
 800abb4:	460e      	mov	r6, r1
 800abb6:	b921      	cbnz	r1, 800abc2 <_realloc_r+0x16>
 800abb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	4611      	mov	r1, r2
 800abbe:	f7ff b9b9 	b.w	8009f34 <_malloc_r>
 800abc2:	b92a      	cbnz	r2, 800abd0 <_realloc_r+0x24>
 800abc4:	f000 f9ec 	bl	800afa0 <_free_r>
 800abc8:	4625      	mov	r5, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd0:	f000 fa32 	bl	800b038 <_malloc_usable_size_r>
 800abd4:	4284      	cmp	r4, r0
 800abd6:	4607      	mov	r7, r0
 800abd8:	d802      	bhi.n	800abe0 <_realloc_r+0x34>
 800abda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abde:	d812      	bhi.n	800ac06 <_realloc_r+0x5a>
 800abe0:	4621      	mov	r1, r4
 800abe2:	4640      	mov	r0, r8
 800abe4:	f7ff f9a6 	bl	8009f34 <_malloc_r>
 800abe8:	4605      	mov	r5, r0
 800abea:	2800      	cmp	r0, #0
 800abec:	d0ed      	beq.n	800abca <_realloc_r+0x1e>
 800abee:	42bc      	cmp	r4, r7
 800abf0:	4622      	mov	r2, r4
 800abf2:	4631      	mov	r1, r6
 800abf4:	bf28      	it	cs
 800abf6:	463a      	movcs	r2, r7
 800abf8:	f7fd fce6 	bl	80085c8 <memcpy>
 800abfc:	4631      	mov	r1, r6
 800abfe:	4640      	mov	r0, r8
 800ac00:	f000 f9ce 	bl	800afa0 <_free_r>
 800ac04:	e7e1      	b.n	800abca <_realloc_r+0x1e>
 800ac06:	4635      	mov	r5, r6
 800ac08:	e7df      	b.n	800abca <_realloc_r+0x1e>

0800ac0a <__swbuf_r>:
 800ac0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0c:	460e      	mov	r6, r1
 800ac0e:	4614      	mov	r4, r2
 800ac10:	4605      	mov	r5, r0
 800ac12:	b118      	cbz	r0, 800ac1c <__swbuf_r+0x12>
 800ac14:	6a03      	ldr	r3, [r0, #32]
 800ac16:	b90b      	cbnz	r3, 800ac1c <__swbuf_r+0x12>
 800ac18:	f7fc fd52 	bl	80076c0 <__sinit>
 800ac1c:	69a3      	ldr	r3, [r4, #24]
 800ac1e:	60a3      	str	r3, [r4, #8]
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	071a      	lsls	r2, r3, #28
 800ac24:	d525      	bpl.n	800ac72 <__swbuf_r+0x68>
 800ac26:	6923      	ldr	r3, [r4, #16]
 800ac28:	b31b      	cbz	r3, 800ac72 <__swbuf_r+0x68>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	6922      	ldr	r2, [r4, #16]
 800ac2e:	1a98      	subs	r0, r3, r2
 800ac30:	6963      	ldr	r3, [r4, #20]
 800ac32:	b2f6      	uxtb	r6, r6
 800ac34:	4283      	cmp	r3, r0
 800ac36:	4637      	mov	r7, r6
 800ac38:	dc04      	bgt.n	800ac44 <__swbuf_r+0x3a>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	f7ff fa91 	bl	800a164 <_fflush_r>
 800ac42:	b9e0      	cbnz	r0, 800ac7e <__swbuf_r+0x74>
 800ac44:	68a3      	ldr	r3, [r4, #8]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	60a3      	str	r3, [r4, #8]
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	6022      	str	r2, [r4, #0]
 800ac50:	701e      	strb	r6, [r3, #0]
 800ac52:	6962      	ldr	r2, [r4, #20]
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d004      	beq.n	800ac64 <__swbuf_r+0x5a>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	07db      	lsls	r3, r3, #31
 800ac5e:	d506      	bpl.n	800ac6e <__swbuf_r+0x64>
 800ac60:	2e0a      	cmp	r6, #10
 800ac62:	d104      	bne.n	800ac6e <__swbuf_r+0x64>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4628      	mov	r0, r5
 800ac68:	f7ff fa7c 	bl	800a164 <_fflush_r>
 800ac6c:	b938      	cbnz	r0, 800ac7e <__swbuf_r+0x74>
 800ac6e:	4638      	mov	r0, r7
 800ac70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac72:	4621      	mov	r1, r4
 800ac74:	4628      	mov	r0, r5
 800ac76:	f000 f805 	bl	800ac84 <__swsetup_r>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d0d5      	beq.n	800ac2a <__swbuf_r+0x20>
 800ac7e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac82:	e7f4      	b.n	800ac6e <__swbuf_r+0x64>

0800ac84 <__swsetup_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4b2a      	ldr	r3, [pc, #168]	; (800ad30 <__swsetup_r+0xac>)
 800ac88:	4605      	mov	r5, r0
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	b118      	cbz	r0, 800ac98 <__swsetup_r+0x14>
 800ac90:	6a03      	ldr	r3, [r0, #32]
 800ac92:	b90b      	cbnz	r3, 800ac98 <__swsetup_r+0x14>
 800ac94:	f7fc fd14 	bl	80076c0 <__sinit>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac9e:	0718      	lsls	r0, r3, #28
 800aca0:	d422      	bmi.n	800ace8 <__swsetup_r+0x64>
 800aca2:	06d9      	lsls	r1, r3, #27
 800aca4:	d407      	bmi.n	800acb6 <__swsetup_r+0x32>
 800aca6:	2309      	movs	r3, #9
 800aca8:	602b      	str	r3, [r5, #0]
 800acaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acb4:	e034      	b.n	800ad20 <__swsetup_r+0x9c>
 800acb6:	0758      	lsls	r0, r3, #29
 800acb8:	d512      	bpl.n	800ace0 <__swsetup_r+0x5c>
 800acba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acbc:	b141      	cbz	r1, 800acd0 <__swsetup_r+0x4c>
 800acbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc2:	4299      	cmp	r1, r3
 800acc4:	d002      	beq.n	800accc <__swsetup_r+0x48>
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 f96a 	bl	800afa0 <_free_r>
 800accc:	2300      	movs	r3, #0
 800acce:	6363      	str	r3, [r4, #52]	; 0x34
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	2300      	movs	r3, #0
 800acda:	6063      	str	r3, [r4, #4]
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f043 0308 	orr.w	r3, r3, #8
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	b94b      	cbnz	r3, 800ad00 <__swsetup_r+0x7c>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acf6:	d003      	beq.n	800ad00 <__swsetup_r+0x7c>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 f84d 	bl	800ad9a <__smakebuf_r>
 800ad00:	89a0      	ldrh	r0, [r4, #12]
 800ad02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad06:	f010 0301 	ands.w	r3, r0, #1
 800ad0a:	d00a      	beq.n	800ad22 <__swsetup_r+0x9e>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60a3      	str	r3, [r4, #8]
 800ad10:	6963      	ldr	r3, [r4, #20]
 800ad12:	425b      	negs	r3, r3
 800ad14:	61a3      	str	r3, [r4, #24]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	b943      	cbnz	r3, 800ad2c <__swsetup_r+0xa8>
 800ad1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad1e:	d1c4      	bne.n	800acaa <__swsetup_r+0x26>
 800ad20:	bd38      	pop	{r3, r4, r5, pc}
 800ad22:	0781      	lsls	r1, r0, #30
 800ad24:	bf58      	it	pl
 800ad26:	6963      	ldrpl	r3, [r4, #20]
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	e7f4      	b.n	800ad16 <__swsetup_r+0x92>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e7f7      	b.n	800ad20 <__swsetup_r+0x9c>
 800ad30:	20002d78 	.word	0x20002d78

0800ad34 <__ascii_wctomb>:
 800ad34:	b149      	cbz	r1, 800ad4a <__ascii_wctomb+0x16>
 800ad36:	2aff      	cmp	r2, #255	; 0xff
 800ad38:	bf85      	ittet	hi
 800ad3a:	238a      	movhi	r3, #138	; 0x8a
 800ad3c:	6003      	strhi	r3, [r0, #0]
 800ad3e:	700a      	strbls	r2, [r1, #0]
 800ad40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad44:	bf98      	it	ls
 800ad46:	2001      	movls	r0, #1
 800ad48:	4770      	bx	lr
 800ad4a:	4608      	mov	r0, r1
 800ad4c:	4770      	bx	lr

0800ad4e <__swhatbuf_r>:
 800ad4e:	b570      	push	{r4, r5, r6, lr}
 800ad50:	460c      	mov	r4, r1
 800ad52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad56:	2900      	cmp	r1, #0
 800ad58:	b096      	sub	sp, #88	; 0x58
 800ad5a:	4615      	mov	r5, r2
 800ad5c:	461e      	mov	r6, r3
 800ad5e:	da0d      	bge.n	800ad7c <__swhatbuf_r+0x2e>
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad66:	f04f 0100 	mov.w	r1, #0
 800ad6a:	bf0c      	ite	eq
 800ad6c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad70:	2340      	movne	r3, #64	; 0x40
 800ad72:	2000      	movs	r0, #0
 800ad74:	6031      	str	r1, [r6, #0]
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	b016      	add	sp, #88	; 0x58
 800ad7a:	bd70      	pop	{r4, r5, r6, pc}
 800ad7c:	466a      	mov	r2, sp
 800ad7e:	f000 f873 	bl	800ae68 <_fstat_r>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	dbec      	blt.n	800ad60 <__swhatbuf_r+0x12>
 800ad86:	9901      	ldr	r1, [sp, #4]
 800ad88:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad8c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad90:	4259      	negs	r1, r3
 800ad92:	4159      	adcs	r1, r3
 800ad94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad98:	e7eb      	b.n	800ad72 <__swhatbuf_r+0x24>

0800ad9a <__smakebuf_r>:
 800ad9a:	898b      	ldrh	r3, [r1, #12]
 800ad9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad9e:	079d      	lsls	r5, r3, #30
 800ada0:	4606      	mov	r6, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	d507      	bpl.n	800adb6 <__smakebuf_r+0x1c>
 800ada6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adaa:	6023      	str	r3, [r4, #0]
 800adac:	6123      	str	r3, [r4, #16]
 800adae:	2301      	movs	r3, #1
 800adb0:	6163      	str	r3, [r4, #20]
 800adb2:	b002      	add	sp, #8
 800adb4:	bd70      	pop	{r4, r5, r6, pc}
 800adb6:	ab01      	add	r3, sp, #4
 800adb8:	466a      	mov	r2, sp
 800adba:	f7ff ffc8 	bl	800ad4e <__swhatbuf_r>
 800adbe:	9900      	ldr	r1, [sp, #0]
 800adc0:	4605      	mov	r5, r0
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff f8b6 	bl	8009f34 <_malloc_r>
 800adc8:	b948      	cbnz	r0, 800adde <__smakebuf_r+0x44>
 800adca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adce:	059a      	lsls	r2, r3, #22
 800add0:	d4ef      	bmi.n	800adb2 <__smakebuf_r+0x18>
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	f043 0302 	orr.w	r3, r3, #2
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	e7e3      	b.n	800ada6 <__smakebuf_r+0xc>
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	6020      	str	r0, [r4, #0]
 800ade2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	9b00      	ldr	r3, [sp, #0]
 800adea:	6163      	str	r3, [r4, #20]
 800adec:	9b01      	ldr	r3, [sp, #4]
 800adee:	6120      	str	r0, [r4, #16]
 800adf0:	b15b      	cbz	r3, 800ae0a <__smakebuf_r+0x70>
 800adf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adf6:	4630      	mov	r0, r6
 800adf8:	f000 f848 	bl	800ae8c <_isatty_r>
 800adfc:	b128      	cbz	r0, 800ae0a <__smakebuf_r+0x70>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	f023 0303 	bic.w	r3, r3, #3
 800ae04:	f043 0301 	orr.w	r3, r3, #1
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	431d      	orrs	r5, r3
 800ae0e:	81a5      	strh	r5, [r4, #12]
 800ae10:	e7cf      	b.n	800adb2 <__smakebuf_r+0x18>

0800ae12 <memmove>:
 800ae12:	4288      	cmp	r0, r1
 800ae14:	b510      	push	{r4, lr}
 800ae16:	eb01 0402 	add.w	r4, r1, r2
 800ae1a:	d902      	bls.n	800ae22 <memmove+0x10>
 800ae1c:	4284      	cmp	r4, r0
 800ae1e:	4623      	mov	r3, r4
 800ae20:	d807      	bhi.n	800ae32 <memmove+0x20>
 800ae22:	1e43      	subs	r3, r0, #1
 800ae24:	42a1      	cmp	r1, r4
 800ae26:	d008      	beq.n	800ae3a <memmove+0x28>
 800ae28:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae30:	e7f8      	b.n	800ae24 <memmove+0x12>
 800ae32:	4402      	add	r2, r0
 800ae34:	4601      	mov	r1, r0
 800ae36:	428a      	cmp	r2, r1
 800ae38:	d100      	bne.n	800ae3c <memmove+0x2a>
 800ae3a:	bd10      	pop	{r4, pc}
 800ae3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae44:	e7f7      	b.n	800ae36 <memmove+0x24>
	...

0800ae48 <_close_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d06      	ldr	r5, [pc, #24]	; (800ae64 <_close_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f7 fc85 	bl	8002762 <_close>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_close_r+0x1a>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_close_r+0x1a>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20010bcc 	.word	0x20010bcc

0800ae68 <_fstat_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d07      	ldr	r5, [pc, #28]	; (800ae88 <_fstat_r+0x20>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	4611      	mov	r1, r2
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	f7f7 fc80 	bl	800277a <_fstat>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d102      	bne.n	800ae84 <_fstat_r+0x1c>
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	b103      	cbz	r3, 800ae84 <_fstat_r+0x1c>
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	bd38      	pop	{r3, r4, r5, pc}
 800ae86:	bf00      	nop
 800ae88:	20010bcc 	.word	0x20010bcc

0800ae8c <_isatty_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4d06      	ldr	r5, [pc, #24]	; (800aea8 <_isatty_r+0x1c>)
 800ae90:	2300      	movs	r3, #0
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	602b      	str	r3, [r5, #0]
 800ae98:	f7f7 fc7f 	bl	800279a <_isatty>
 800ae9c:	1c43      	adds	r3, r0, #1
 800ae9e:	d102      	bne.n	800aea6 <_isatty_r+0x1a>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	b103      	cbz	r3, 800aea6 <_isatty_r+0x1a>
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	20010bcc 	.word	0x20010bcc

0800aeac <_lseek_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	; (800aecc <_lseek_r+0x20>)
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f7 fc78 	bl	80027b0 <_lseek>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_lseek_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_lseek_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	20010bcc 	.word	0x20010bcc

0800aed0 <_read_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d07      	ldr	r5, [pc, #28]	; (800aef0 <_read_r+0x20>)
 800aed4:	4604      	mov	r4, r0
 800aed6:	4608      	mov	r0, r1
 800aed8:	4611      	mov	r1, r2
 800aeda:	2200      	movs	r2, #0
 800aedc:	602a      	str	r2, [r5, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f7f7 fc22 	bl	8002728 <_read>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_read_r+0x1e>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_read_r+0x1e>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	20010bcc 	.word	0x20010bcc

0800aef4 <_sbrk_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d06      	ldr	r5, [pc, #24]	; (800af10 <_sbrk_r+0x1c>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	602b      	str	r3, [r5, #0]
 800af00:	f7f7 fc64 	bl	80027cc <_sbrk>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d102      	bne.n	800af0e <_sbrk_r+0x1a>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	b103      	cbz	r3, 800af0e <_sbrk_r+0x1a>
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	20010bcc 	.word	0x20010bcc

0800af14 <_write_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d07      	ldr	r5, [pc, #28]	; (800af34 <_write_r+0x20>)
 800af18:	4604      	mov	r4, r0
 800af1a:	4608      	mov	r0, r1
 800af1c:	4611      	mov	r1, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	602a      	str	r2, [r5, #0]
 800af22:	461a      	mov	r2, r3
 800af24:	f7f6 ff14 	bl	8001d50 <_write>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_write_r+0x1e>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_write_r+0x1e>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20010bcc 	.word	0x20010bcc

0800af38 <__assert_func>:
 800af38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af3a:	4614      	mov	r4, r2
 800af3c:	461a      	mov	r2, r3
 800af3e:	4b09      	ldr	r3, [pc, #36]	; (800af64 <__assert_func+0x2c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4605      	mov	r5, r0
 800af44:	68d8      	ldr	r0, [r3, #12]
 800af46:	b14c      	cbz	r4, 800af5c <__assert_func+0x24>
 800af48:	4b07      	ldr	r3, [pc, #28]	; (800af68 <__assert_func+0x30>)
 800af4a:	9100      	str	r1, [sp, #0]
 800af4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af50:	4906      	ldr	r1, [pc, #24]	; (800af6c <__assert_func+0x34>)
 800af52:	462b      	mov	r3, r5
 800af54:	f000 f878 	bl	800b048 <fiprintf>
 800af58:	f000 f888 	bl	800b06c <abort>
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <__assert_func+0x38>)
 800af5e:	461c      	mov	r4, r3
 800af60:	e7f3      	b.n	800af4a <__assert_func+0x12>
 800af62:	bf00      	nop
 800af64:	20002d78 	.word	0x20002d78
 800af68:	0800b9bc 	.word	0x0800b9bc
 800af6c:	0800b9c9 	.word	0x0800b9c9
 800af70:	0800b9f7 	.word	0x0800b9f7

0800af74 <_calloc_r>:
 800af74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af76:	fba1 2402 	umull	r2, r4, r1, r2
 800af7a:	b94c      	cbnz	r4, 800af90 <_calloc_r+0x1c>
 800af7c:	4611      	mov	r1, r2
 800af7e:	9201      	str	r2, [sp, #4]
 800af80:	f7fe ffd8 	bl	8009f34 <_malloc_r>
 800af84:	9a01      	ldr	r2, [sp, #4]
 800af86:	4605      	mov	r5, r0
 800af88:	b930      	cbnz	r0, 800af98 <_calloc_r+0x24>
 800af8a:	4628      	mov	r0, r5
 800af8c:	b003      	add	sp, #12
 800af8e:	bd30      	pop	{r4, r5, pc}
 800af90:	220c      	movs	r2, #12
 800af92:	6002      	str	r2, [r0, #0]
 800af94:	2500      	movs	r5, #0
 800af96:	e7f8      	b.n	800af8a <_calloc_r+0x16>
 800af98:	4621      	mov	r1, r4
 800af9a:	f7fd fadd 	bl	8008558 <memset>
 800af9e:	e7f4      	b.n	800af8a <_calloc_r+0x16>

0800afa0 <_free_r>:
 800afa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afa2:	2900      	cmp	r1, #0
 800afa4:	d044      	beq.n	800b030 <_free_r+0x90>
 800afa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afaa:	9001      	str	r0, [sp, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	f1a1 0404 	sub.w	r4, r1, #4
 800afb2:	bfb8      	it	lt
 800afb4:	18e4      	addlt	r4, r4, r3
 800afb6:	f7ff f8fd 	bl	800a1b4 <__malloc_lock>
 800afba:	4a1e      	ldr	r2, [pc, #120]	; (800b034 <_free_r+0x94>)
 800afbc:	9801      	ldr	r0, [sp, #4]
 800afbe:	6813      	ldr	r3, [r2, #0]
 800afc0:	b933      	cbnz	r3, 800afd0 <_free_r+0x30>
 800afc2:	6063      	str	r3, [r4, #4]
 800afc4:	6014      	str	r4, [r2, #0]
 800afc6:	b003      	add	sp, #12
 800afc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afcc:	f7ff b8f8 	b.w	800a1c0 <__malloc_unlock>
 800afd0:	42a3      	cmp	r3, r4
 800afd2:	d908      	bls.n	800afe6 <_free_r+0x46>
 800afd4:	6825      	ldr	r5, [r4, #0]
 800afd6:	1961      	adds	r1, r4, r5
 800afd8:	428b      	cmp	r3, r1
 800afda:	bf01      	itttt	eq
 800afdc:	6819      	ldreq	r1, [r3, #0]
 800afde:	685b      	ldreq	r3, [r3, #4]
 800afe0:	1949      	addeq	r1, r1, r5
 800afe2:	6021      	streq	r1, [r4, #0]
 800afe4:	e7ed      	b.n	800afc2 <_free_r+0x22>
 800afe6:	461a      	mov	r2, r3
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	b10b      	cbz	r3, 800aff0 <_free_r+0x50>
 800afec:	42a3      	cmp	r3, r4
 800afee:	d9fa      	bls.n	800afe6 <_free_r+0x46>
 800aff0:	6811      	ldr	r1, [r2, #0]
 800aff2:	1855      	adds	r5, r2, r1
 800aff4:	42a5      	cmp	r5, r4
 800aff6:	d10b      	bne.n	800b010 <_free_r+0x70>
 800aff8:	6824      	ldr	r4, [r4, #0]
 800affa:	4421      	add	r1, r4
 800affc:	1854      	adds	r4, r2, r1
 800affe:	42a3      	cmp	r3, r4
 800b000:	6011      	str	r1, [r2, #0]
 800b002:	d1e0      	bne.n	800afc6 <_free_r+0x26>
 800b004:	681c      	ldr	r4, [r3, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	6053      	str	r3, [r2, #4]
 800b00a:	440c      	add	r4, r1
 800b00c:	6014      	str	r4, [r2, #0]
 800b00e:	e7da      	b.n	800afc6 <_free_r+0x26>
 800b010:	d902      	bls.n	800b018 <_free_r+0x78>
 800b012:	230c      	movs	r3, #12
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	e7d6      	b.n	800afc6 <_free_r+0x26>
 800b018:	6825      	ldr	r5, [r4, #0]
 800b01a:	1961      	adds	r1, r4, r5
 800b01c:	428b      	cmp	r3, r1
 800b01e:	bf04      	itt	eq
 800b020:	6819      	ldreq	r1, [r3, #0]
 800b022:	685b      	ldreq	r3, [r3, #4]
 800b024:	6063      	str	r3, [r4, #4]
 800b026:	bf04      	itt	eq
 800b028:	1949      	addeq	r1, r1, r5
 800b02a:	6021      	streq	r1, [r4, #0]
 800b02c:	6054      	str	r4, [r2, #4]
 800b02e:	e7ca      	b.n	800afc6 <_free_r+0x26>
 800b030:	b003      	add	sp, #12
 800b032:	bd30      	pop	{r4, r5, pc}
 800b034:	20010bc4 	.word	0x20010bc4

0800b038 <_malloc_usable_size_r>:
 800b038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b03c:	1f18      	subs	r0, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bfbc      	itt	lt
 800b042:	580b      	ldrlt	r3, [r1, r0]
 800b044:	18c0      	addlt	r0, r0, r3
 800b046:	4770      	bx	lr

0800b048 <fiprintf>:
 800b048:	b40e      	push	{r1, r2, r3}
 800b04a:	b503      	push	{r0, r1, lr}
 800b04c:	4601      	mov	r1, r0
 800b04e:	ab03      	add	r3, sp, #12
 800b050:	4805      	ldr	r0, [pc, #20]	; (800b068 <fiprintf+0x20>)
 800b052:	f853 2b04 	ldr.w	r2, [r3], #4
 800b056:	6800      	ldr	r0, [r0, #0]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	f7fe fe29 	bl	8009cb0 <_vfiprintf_r>
 800b05e:	b002      	add	sp, #8
 800b060:	f85d eb04 	ldr.w	lr, [sp], #4
 800b064:	b003      	add	sp, #12
 800b066:	4770      	bx	lr
 800b068:	20002d78 	.word	0x20002d78

0800b06c <abort>:
 800b06c:	b508      	push	{r3, lr}
 800b06e:	2006      	movs	r0, #6
 800b070:	f000 f82c 	bl	800b0cc <raise>
 800b074:	2001      	movs	r0, #1
 800b076:	f7f7 fb4d 	bl	8002714 <_exit>

0800b07a <_raise_r>:
 800b07a:	291f      	cmp	r1, #31
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4604      	mov	r4, r0
 800b080:	460d      	mov	r5, r1
 800b082:	d904      	bls.n	800b08e <_raise_r+0x14>
 800b084:	2316      	movs	r3, #22
 800b086:	6003      	str	r3, [r0, #0]
 800b088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b090:	b112      	cbz	r2, 800b098 <_raise_r+0x1e>
 800b092:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b096:	b94b      	cbnz	r3, 800b0ac <_raise_r+0x32>
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 f831 	bl	800b100 <_getpid_r>
 800b09e:	462a      	mov	r2, r5
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0a8:	f000 b818 	b.w	800b0dc <_kill_r>
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d00a      	beq.n	800b0c6 <_raise_r+0x4c>
 800b0b0:	1c59      	adds	r1, r3, #1
 800b0b2:	d103      	bne.n	800b0bc <_raise_r+0x42>
 800b0b4:	2316      	movs	r3, #22
 800b0b6:	6003      	str	r3, [r0, #0]
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	e7e7      	b.n	800b08c <_raise_r+0x12>
 800b0bc:	2400      	movs	r4, #0
 800b0be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	4798      	blx	r3
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e7e0      	b.n	800b08c <_raise_r+0x12>
	...

0800b0cc <raise>:
 800b0cc:	4b02      	ldr	r3, [pc, #8]	; (800b0d8 <raise+0xc>)
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	6818      	ldr	r0, [r3, #0]
 800b0d2:	f7ff bfd2 	b.w	800b07a <_raise_r>
 800b0d6:	bf00      	nop
 800b0d8:	20002d78 	.word	0x20002d78

0800b0dc <_kill_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	; (800b0fc <_kill_r+0x20>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	f7f7 fb03 	bl	80026f4 <_kill>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d102      	bne.n	800b0f8 <_kill_r+0x1c>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b103      	cbz	r3, 800b0f8 <_kill_r+0x1c>
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20010bcc 	.word	0x20010bcc

0800b100 <_getpid_r>:
 800b100:	f7f7 baf0 	b.w	80026e4 <_getpid>
 800b104:	0000      	movs	r0, r0
	...

0800b108 <exp>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	ed2d 8b02 	vpush	{d8}
 800b10e:	ec55 4b10 	vmov	r4, r5, d0
 800b112:	f000 f84d 	bl	800b1b0 <__ieee754_exp>
 800b116:	eeb0 8a40 	vmov.f32	s16, s0
 800b11a:	eef0 8a60 	vmov.f32	s17, s1
 800b11e:	ec45 4b10 	vmov	d0, r4, r5
 800b122:	f000 f839 	bl	800b198 <finite>
 800b126:	b168      	cbz	r0, 800b144 <exp+0x3c>
 800b128:	a317      	add	r3, pc, #92	; (adr r3, 800b188 <exp+0x80>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 fd11 	bl	8000b58 <__aeabi_dcmpgt>
 800b136:	b160      	cbz	r0, 800b152 <exp+0x4a>
 800b138:	f7fd fa1a 	bl	8008570 <__errno>
 800b13c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800b178 <exp+0x70>
 800b140:	2322      	movs	r3, #34	; 0x22
 800b142:	6003      	str	r3, [r0, #0]
 800b144:	eeb0 0a48 	vmov.f32	s0, s16
 800b148:	eef0 0a68 	vmov.f32	s1, s17
 800b14c:	ecbd 8b02 	vpop	{d8}
 800b150:	bd38      	pop	{r3, r4, r5, pc}
 800b152:	a30f      	add	r3, pc, #60	; (adr r3, 800b190 <exp+0x88>)
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	4620      	mov	r0, r4
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7f5 fcde 	bl	8000b1c <__aeabi_dcmplt>
 800b160:	2800      	cmp	r0, #0
 800b162:	d0ef      	beq.n	800b144 <exp+0x3c>
 800b164:	f7fd fa04 	bl	8008570 <__errno>
 800b168:	2322      	movs	r3, #34	; 0x22
 800b16a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800b180 <exp+0x78>
 800b16e:	6003      	str	r3, [r0, #0]
 800b170:	e7e8      	b.n	800b144 <exp+0x3c>
 800b172:	bf00      	nop
 800b174:	f3af 8000 	nop.w
 800b178:	00000000 	.word	0x00000000
 800b17c:	7ff00000 	.word	0x7ff00000
	...
 800b188:	fefa39ef 	.word	0xfefa39ef
 800b18c:	40862e42 	.word	0x40862e42
 800b190:	d52d3051 	.word	0xd52d3051
 800b194:	c0874910 	.word	0xc0874910

0800b198 <finite>:
 800b198:	b082      	sub	sp, #8
 800b19a:	ed8d 0b00 	vstr	d0, [sp]
 800b19e:	9801      	ldr	r0, [sp, #4]
 800b1a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b1a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b1a8:	0fc0      	lsrs	r0, r0, #31
 800b1aa:	b002      	add	sp, #8
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <__ieee754_exp>:
 800b1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b4:	ec55 4b10 	vmov	r4, r5, d0
 800b1b8:	49b5      	ldr	r1, [pc, #724]	; (800b490 <__ieee754_exp+0x2e0>)
 800b1ba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b1be:	428a      	cmp	r2, r1
 800b1c0:	ed2d 8b04 	vpush	{d8-d9}
 800b1c4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b1c8:	d93b      	bls.n	800b242 <__ieee754_exp+0x92>
 800b1ca:	49b2      	ldr	r1, [pc, #712]	; (800b494 <__ieee754_exp+0x2e4>)
 800b1cc:	428a      	cmp	r2, r1
 800b1ce:	d916      	bls.n	800b1fe <__ieee754_exp+0x4e>
 800b1d0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b1d4:	4323      	orrs	r3, r4
 800b1d6:	ee10 2a10 	vmov	r2, s0
 800b1da:	d007      	beq.n	800b1ec <__ieee754_exp+0x3c>
 800b1dc:	462b      	mov	r3, r5
 800b1de:	4620      	mov	r0, r4
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	f7f5 f873 	bl	80002cc <__adddf3>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	e002      	b.n	800b1f2 <__ieee754_exp+0x42>
 800b1ec:	b10e      	cbz	r6, 800b1f2 <__ieee754_exp+0x42>
 800b1ee:	2400      	movs	r4, #0
 800b1f0:	2500      	movs	r5, #0
 800b1f2:	ecbd 8b04 	vpop	{d8-d9}
 800b1f6:	ec45 4b10 	vmov	d0, r4, r5
 800b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fe:	a38e      	add	r3, pc, #568	; (adr r3, 800b438 <__ieee754_exp+0x288>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	ee10 0a10 	vmov	r0, s0
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 fca5 	bl	8000b58 <__aeabi_dcmpgt>
 800b20e:	4607      	mov	r7, r0
 800b210:	b130      	cbz	r0, 800b220 <__ieee754_exp+0x70>
 800b212:	ecbd 8b04 	vpop	{d8-d9}
 800b216:	2000      	movs	r0, #0
 800b218:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	f000 b971 	b.w	800b502 <__math_oflow>
 800b220:	a387      	add	r3, pc, #540	; (adr r3, 800b440 <__ieee754_exp+0x290>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 fc77 	bl	8000b1c <__aeabi_dcmplt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f000 808b 	beq.w	800b34a <__ieee754_exp+0x19a>
 800b234:	ecbd 8b04 	vpop	{d8-d9}
 800b238:	4638      	mov	r0, r7
 800b23a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b23e:	f000 b957 	b.w	800b4f0 <__math_uflow>
 800b242:	4b95      	ldr	r3, [pc, #596]	; (800b498 <__ieee754_exp+0x2e8>)
 800b244:	429a      	cmp	r2, r3
 800b246:	f240 80ac 	bls.w	800b3a2 <__ieee754_exp+0x1f2>
 800b24a:	4b94      	ldr	r3, [pc, #592]	; (800b49c <__ieee754_exp+0x2ec>)
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d87c      	bhi.n	800b34a <__ieee754_exp+0x19a>
 800b250:	4b93      	ldr	r3, [pc, #588]	; (800b4a0 <__ieee754_exp+0x2f0>)
 800b252:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	ee10 0a10 	vmov	r0, s0
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 f832 	bl	80002c8 <__aeabi_dsub>
 800b264:	4b8f      	ldr	r3, [pc, #572]	; (800b4a4 <__ieee754_exp+0x2f4>)
 800b266:	00f7      	lsls	r7, r6, #3
 800b268:	443b      	add	r3, r7
 800b26a:	ed93 7b00 	vldr	d7, [r3]
 800b26e:	f1c6 0a01 	rsb	sl, r6, #1
 800b272:	4680      	mov	r8, r0
 800b274:	4689      	mov	r9, r1
 800b276:	ebaa 0a06 	sub.w	sl, sl, r6
 800b27a:	eeb0 8a47 	vmov.f32	s16, s14
 800b27e:	eef0 8a67 	vmov.f32	s17, s15
 800b282:	ec53 2b18 	vmov	r2, r3, d8
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 f81d 	bl	80002c8 <__aeabi_dsub>
 800b28e:	4604      	mov	r4, r0
 800b290:	460d      	mov	r5, r1
 800b292:	4622      	mov	r2, r4
 800b294:	462b      	mov	r3, r5
 800b296:	4620      	mov	r0, r4
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f5 f9cd 	bl	8000638 <__aeabi_dmul>
 800b29e:	a36a      	add	r3, pc, #424	; (adr r3, 800b448 <__ieee754_exp+0x298>)
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	460f      	mov	r7, r1
 800b2a8:	f7f5 f9c6 	bl	8000638 <__aeabi_dmul>
 800b2ac:	a368      	add	r3, pc, #416	; (adr r3, 800b450 <__ieee754_exp+0x2a0>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f5 f809 	bl	80002c8 <__aeabi_dsub>
 800b2b6:	4632      	mov	r2, r6
 800b2b8:	463b      	mov	r3, r7
 800b2ba:	f7f5 f9bd 	bl	8000638 <__aeabi_dmul>
 800b2be:	a366      	add	r3, pc, #408	; (adr r3, 800b458 <__ieee754_exp+0x2a8>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f5 f802 	bl	80002cc <__adddf3>
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	f7f5 f9b4 	bl	8000638 <__aeabi_dmul>
 800b2d0:	a363      	add	r3, pc, #396	; (adr r3, 800b460 <__ieee754_exp+0x2b0>)
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f7f4 fff7 	bl	80002c8 <__aeabi_dsub>
 800b2da:	4632      	mov	r2, r6
 800b2dc:	463b      	mov	r3, r7
 800b2de:	f7f5 f9ab 	bl	8000638 <__aeabi_dmul>
 800b2e2:	a361      	add	r3, pc, #388	; (adr r3, 800b468 <__ieee754_exp+0x2b8>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f7f4 fff0 	bl	80002cc <__adddf3>
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	463b      	mov	r3, r7
 800b2f0:	f7f5 f9a2 	bl	8000638 <__aeabi_dmul>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7f4 ffe4 	bl	80002c8 <__aeabi_dsub>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	4620      	mov	r0, r4
 800b30a:	4629      	mov	r1, r5
 800b30c:	f7f5 f994 	bl	8000638 <__aeabi_dmul>
 800b310:	ec41 0b19 	vmov	d9, r0, r1
 800b314:	f1ba 0f00 	cmp.w	sl, #0
 800b318:	d15d      	bne.n	800b3d6 <__ieee754_exp+0x226>
 800b31a:	2200      	movs	r2, #0
 800b31c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f4 ffd0 	bl	80002c8 <__aeabi_dsub>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	ec51 0b19 	vmov	r0, r1, d9
 800b330:	f7f5 faac 	bl	800088c <__aeabi_ddiv>
 800b334:	4622      	mov	r2, r4
 800b336:	462b      	mov	r3, r5
 800b338:	f7f4 ffc6 	bl	80002c8 <__aeabi_dsub>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	2000      	movs	r0, #0
 800b342:	4959      	ldr	r1, [pc, #356]	; (800b4a8 <__ieee754_exp+0x2f8>)
 800b344:	f7f4 ffc0 	bl	80002c8 <__aeabi_dsub>
 800b348:	e74d      	b.n	800b1e6 <__ieee754_exp+0x36>
 800b34a:	4b58      	ldr	r3, [pc, #352]	; (800b4ac <__ieee754_exp+0x2fc>)
 800b34c:	4620      	mov	r0, r4
 800b34e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b352:	4629      	mov	r1, r5
 800b354:	a346      	add	r3, pc, #280	; (adr r3, 800b470 <__ieee754_exp+0x2c0>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f5 f96d 	bl	8000638 <__aeabi_dmul>
 800b35e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b362:	f7f4 ffb3 	bl	80002cc <__adddf3>
 800b366:	f7f5 fc17 	bl	8000b98 <__aeabi_d2iz>
 800b36a:	4682      	mov	sl, r0
 800b36c:	f7f5 f8fa 	bl	8000564 <__aeabi_i2d>
 800b370:	a341      	add	r3, pc, #260	; (adr r3, 800b478 <__ieee754_exp+0x2c8>)
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	4606      	mov	r6, r0
 800b378:	460f      	mov	r7, r1
 800b37a:	f7f5 f95d 	bl	8000638 <__aeabi_dmul>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4620      	mov	r0, r4
 800b384:	4629      	mov	r1, r5
 800b386:	f7f4 ff9f 	bl	80002c8 <__aeabi_dsub>
 800b38a:	a33d      	add	r3, pc, #244	; (adr r3, 800b480 <__ieee754_exp+0x2d0>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	4680      	mov	r8, r0
 800b392:	4689      	mov	r9, r1
 800b394:	4630      	mov	r0, r6
 800b396:	4639      	mov	r1, r7
 800b398:	f7f5 f94e 	bl	8000638 <__aeabi_dmul>
 800b39c:	ec41 0b18 	vmov	d8, r0, r1
 800b3a0:	e76f      	b.n	800b282 <__ieee754_exp+0xd2>
 800b3a2:	4b43      	ldr	r3, [pc, #268]	; (800b4b0 <__ieee754_exp+0x300>)
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d811      	bhi.n	800b3cc <__ieee754_exp+0x21c>
 800b3a8:	a337      	add	r3, pc, #220	; (adr r3, 800b488 <__ieee754_exp+0x2d8>)
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	ee10 0a10 	vmov	r0, s0
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	f7f4 ff8a 	bl	80002cc <__adddf3>
 800b3b8:	4b3b      	ldr	r3, [pc, #236]	; (800b4a8 <__ieee754_exp+0x2f8>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f7f5 fbcc 	bl	8000b58 <__aeabi_dcmpgt>
 800b3c0:	b138      	cbz	r0, 800b3d2 <__ieee754_exp+0x222>
 800b3c2:	4b39      	ldr	r3, [pc, #228]	; (800b4a8 <__ieee754_exp+0x2f8>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	e70a      	b.n	800b1e2 <__ieee754_exp+0x32>
 800b3cc:	f04f 0a00 	mov.w	sl, #0
 800b3d0:	e75f      	b.n	800b292 <__ieee754_exp+0xe2>
 800b3d2:	4682      	mov	sl, r0
 800b3d4:	e75d      	b.n	800b292 <__ieee754_exp+0xe2>
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	463b      	mov	r3, r7
 800b3da:	2000      	movs	r0, #0
 800b3dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b3e0:	f7f4 ff72 	bl	80002c8 <__aeabi_dsub>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	ec51 0b19 	vmov	r0, r1, d9
 800b3ec:	f7f5 fa4e 	bl	800088c <__aeabi_ddiv>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	ec51 0b18 	vmov	r0, r1, d8
 800b3f8:	f7f4 ff66 	bl	80002c8 <__aeabi_dsub>
 800b3fc:	4642      	mov	r2, r8
 800b3fe:	464b      	mov	r3, r9
 800b400:	f7f4 ff62 	bl	80002c8 <__aeabi_dsub>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	2000      	movs	r0, #0
 800b40a:	4927      	ldr	r1, [pc, #156]	; (800b4a8 <__ieee754_exp+0x2f8>)
 800b40c:	f7f4 ff5c 	bl	80002c8 <__aeabi_dsub>
 800b410:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800b414:	4592      	cmp	sl, r2
 800b416:	db02      	blt.n	800b41e <__ieee754_exp+0x26e>
 800b418:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b41c:	e6e3      	b.n	800b1e6 <__ieee754_exp+0x36>
 800b41e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800b422:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b426:	2200      	movs	r2, #0
 800b428:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800b42c:	f7f5 f904 	bl	8000638 <__aeabi_dmul>
 800b430:	e6d9      	b.n	800b1e6 <__ieee754_exp+0x36>
 800b432:	bf00      	nop
 800b434:	f3af 8000 	nop.w
 800b438:	fefa39ef 	.word	0xfefa39ef
 800b43c:	40862e42 	.word	0x40862e42
 800b440:	d52d3051 	.word	0xd52d3051
 800b444:	c0874910 	.word	0xc0874910
 800b448:	72bea4d0 	.word	0x72bea4d0
 800b44c:	3e663769 	.word	0x3e663769
 800b450:	c5d26bf1 	.word	0xc5d26bf1
 800b454:	3ebbbd41 	.word	0x3ebbbd41
 800b458:	af25de2c 	.word	0xaf25de2c
 800b45c:	3f11566a 	.word	0x3f11566a
 800b460:	16bebd93 	.word	0x16bebd93
 800b464:	3f66c16c 	.word	0x3f66c16c
 800b468:	5555553e 	.word	0x5555553e
 800b46c:	3fc55555 	.word	0x3fc55555
 800b470:	652b82fe 	.word	0x652b82fe
 800b474:	3ff71547 	.word	0x3ff71547
 800b478:	fee00000 	.word	0xfee00000
 800b47c:	3fe62e42 	.word	0x3fe62e42
 800b480:	35793c76 	.word	0x35793c76
 800b484:	3dea39ef 	.word	0x3dea39ef
 800b488:	8800759c 	.word	0x8800759c
 800b48c:	7e37e43c 	.word	0x7e37e43c
 800b490:	40862e41 	.word	0x40862e41
 800b494:	7fefffff 	.word	0x7fefffff
 800b498:	3fd62e42 	.word	0x3fd62e42
 800b49c:	3ff0a2b1 	.word	0x3ff0a2b1
 800b4a0:	0800ba08 	.word	0x0800ba08
 800b4a4:	0800ba18 	.word	0x0800ba18
 800b4a8:	3ff00000 	.word	0x3ff00000
 800b4ac:	0800b9f8 	.word	0x0800b9f8
 800b4b0:	3defffff 	.word	0x3defffff

0800b4b4 <with_errno>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	4616      	mov	r6, r2
 800b4bc:	f7fd f858 	bl	8008570 <__errno>
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	6006      	str	r6, [r0, #0]
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}

0800b4c8 <xflow>:
 800b4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ca:	4614      	mov	r4, r2
 800b4cc:	461d      	mov	r5, r3
 800b4ce:	b108      	cbz	r0, 800b4d4 <xflow+0xc>
 800b4d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4d4:	e9cd 2300 	strd	r2, r3, [sp]
 800b4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4dc:	4620      	mov	r0, r4
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f7f5 f8aa 	bl	8000638 <__aeabi_dmul>
 800b4e4:	2222      	movs	r2, #34	; 0x22
 800b4e6:	b003      	add	sp, #12
 800b4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4ec:	f7ff bfe2 	b.w	800b4b4 <with_errno>

0800b4f0 <__math_uflow>:
 800b4f0:	b508      	push	{r3, lr}
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b4f8:	f7ff ffe6 	bl	800b4c8 <xflow>
 800b4fc:	ec41 0b10 	vmov	d0, r0, r1
 800b500:	bd08      	pop	{r3, pc}

0800b502 <__math_oflow>:
 800b502:	b508      	push	{r3, lr}
 800b504:	2200      	movs	r2, #0
 800b506:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b50a:	f7ff ffdd 	bl	800b4c8 <xflow>
 800b50e:	ec41 0b10 	vmov	d0, r0, r1
 800b512:	bd08      	pop	{r3, pc}

0800b514 <_init>:
 800b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b516:	bf00      	nop
 800b518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51a:	bc08      	pop	{r3}
 800b51c:	469e      	mov	lr, r3
 800b51e:	4770      	bx	lr

0800b520 <_fini>:
 800b520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b522:	bf00      	nop
 800b524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b526:	bc08      	pop	{r3}
 800b528:	469e      	mov	lr, r3
 800b52a:	4770      	bx	lr
