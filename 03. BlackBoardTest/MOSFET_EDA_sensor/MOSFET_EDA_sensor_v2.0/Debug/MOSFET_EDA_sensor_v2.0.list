
MOSFET_EDA_sensor_v2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009638  08009638  00019638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b10  08009b10  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b10  08009b10  00019b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b18  08009b18  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b1c  08009b1c  00019b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002d4  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a8  200004a8  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010cdd  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b95  00000000  00000000  00030f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f48  00000000  00000000  00033ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bca  00000000  00000000  00034a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024275  00000000  00000000  000355d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000137d6  00000000  00000000  00059847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000daf59  00000000  00000000  0006d01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005450  00000000  00000000  00147f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009b  00000000  00000000  0014d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800961c 	.word	0x0800961c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800961c 	.word	0x0800961c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <MX_ADC1_Init+0xb8>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001016:	2201      	movs	r2, #1
 8001018:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800101c:	2201      	movs	r2, #1
 800101e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <MX_ADC1_Init+0xbc>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800103c:	2202      	movs	r2, #2
 800103e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800104a:	2201      	movs	r2, #1
 800104c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104e:	4815      	ldr	r0, [pc, #84]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001050:	f000 ff76 	bl	8001f40 <HAL_ADC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 fca1 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001066:	2305      	movs	r3, #5
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001070:	f001 f8d8 	bl	8002224 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800107a:	f000 fc91 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800107e:	2301      	movs	r3, #1
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800108c:	f001 f8ca 	bl	8002224 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001096:	f000 fc83 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a2f      	ldr	r2, [pc, #188]	; (800118c <HAL_ADC_MspInit+0xdc>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d157      	bne.n	8001182 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <HAL_ADC_MspInit+0xe0>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <HAL_ADC_MspInit+0xe0>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_ADC_MspInit+0xe0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_ADC_MspInit+0xe0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_ADC_MspInit+0xe0>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_ADC_MspInit+0xe0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800110a:	2303      	movs	r3, #3
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <HAL_ADC_MspInit+0xe4>)
 800111e:	f002 f813 	bl	8003148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_ADC_MspInit+0xec>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 8001168:	f001 fc7e 	bl	8002a68 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001172:	f000 fc15 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_ADC_MspInit+0xe8>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40012000 	.word	0x40012000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	20000238 	.word	0x20000238
 800119c:	40026410 	.word	0x40026410

080011a0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_DAC_Init+0x4c>)
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <MX_DAC_Init+0x50>)
 80011b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_DAC_Init+0x4c>)
 80011b6:	f001 fbe6 	bl	8002986 <HAL_DAC_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011c0:	f000 fbee 	bl	80019a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_DAC_Init+0x4c>)
 80011d4:	f001 fbf9 	bl	80029ca <HAL_DAC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011de:	f000 fbdf 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000298 	.word	0x20000298
 80011f0:	40007400 	.word	0x40007400

080011f4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_DAC_MspInit+0x7c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d127      	bne.n	8001266 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_DAC_MspInit+0x80>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_DAC_MspInit+0x80>)
 8001220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_DAC_MspInit+0x80>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_DAC_MspInit+0x80>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_DAC_MspInit+0x80>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_DAC_MspInit+0x80>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800124e:	2310      	movs	r3, #16
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_DAC_MspInit+0x84>)
 8001262:	f001 ff71 	bl	8003148 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40007400 	.word	0x40007400
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_DMA_Init+0x3c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <MX_DMA_Init+0x3c>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_DMA_Init+0x3c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2038      	movs	r0, #56	; 0x38
 80012a4:	f001 fb39 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a8:	2038      	movs	r0, #56	; 0x38
 80012aa:	f001 fb52 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b85      	ldr	r3, [pc, #532]	; (80014ec <MX_GPIO_Init+0x230>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a84      	ldr	r2, [pc, #528]	; (80014ec <MX_GPIO_Init+0x230>)
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b82      	ldr	r3, [pc, #520]	; (80014ec <MX_GPIO_Init+0x230>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <MX_GPIO_Init+0x230>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a7d      	ldr	r2, [pc, #500]	; (80014ec <MX_GPIO_Init+0x230>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <MX_GPIO_Init+0x230>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b77      	ldr	r3, [pc, #476]	; (80014ec <MX_GPIO_Init+0x230>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a76      	ldr	r2, [pc, #472]	; (80014ec <MX_GPIO_Init+0x230>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b74      	ldr	r3, [pc, #464]	; (80014ec <MX_GPIO_Init+0x230>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b70      	ldr	r3, [pc, #448]	; (80014ec <MX_GPIO_Init+0x230>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a6f      	ldr	r2, [pc, #444]	; (80014ec <MX_GPIO_Init+0x230>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <MX_GPIO_Init+0x230>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b69      	ldr	r3, [pc, #420]	; (80014ec <MX_GPIO_Init+0x230>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a68      	ldr	r2, [pc, #416]	; (80014ec <MX_GPIO_Init+0x230>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b66      	ldr	r3, [pc, #408]	; (80014ec <MX_GPIO_Init+0x230>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2108      	movs	r1, #8
 8001362:	4863      	ldr	r0, [pc, #396]	; (80014f0 <MX_GPIO_Init+0x234>)
 8001364:	f002 f88c 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2101      	movs	r1, #1
 800136c:	4861      	ldr	r0, [pc, #388]	; (80014f4 <MX_GPIO_Init+0x238>)
 800136e:	f002 f887 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2103      	movs	r1, #3
 8001376:	4860      	ldr	r0, [pc, #384]	; (80014f8 <MX_GPIO_Init+0x23c>)
 8001378:	f002 f882 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800137c:	2308      	movs	r3, #8
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4857      	ldr	r0, [pc, #348]	; (80014f0 <MX_GPIO_Init+0x234>)
 8001394:	f001 fed8 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001398:	2301      	movs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4851      	ldr	r0, [pc, #324]	; (80014f4 <MX_GPIO_Init+0x238>)
 80013b0:	f001 feca 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013b4:	2308      	movs	r3, #8
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c4:	2305      	movs	r3, #5
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4849      	ldr	r0, [pc, #292]	; (80014f4 <MX_GPIO_Init+0x238>)
 80013d0:	f001 feba 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013d4:	23e0      	movs	r3, #224	; 0xe0
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e4:	2305      	movs	r3, #5
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4843      	ldr	r0, [pc, #268]	; (80014fc <MX_GPIO_Init+0x240>)
 80013f0:	f001 feaa 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013f4:	2303      	movs	r3, #3
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	483b      	ldr	r0, [pc, #236]	; (80014f8 <MX_GPIO_Init+0x23c>)
 800140c:	f001 fe9c 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001410:	2304      	movs	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4835      	ldr	r0, [pc, #212]	; (80014f8 <MX_GPIO_Init+0x23c>)
 8001424:	f001 fe90 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143a:	2305      	movs	r3, #5
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	482c      	ldr	r0, [pc, #176]	; (80014f8 <MX_GPIO_Init+0x23c>)
 8001446:	f001 fe7f 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800144a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800145c:	2306      	movs	r3, #6
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4823      	ldr	r0, [pc, #140]	; (80014f4 <MX_GPIO_Init+0x238>)
 8001468:	f001 fe6e 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800146c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	481e      	ldr	r0, [pc, #120]	; (80014fc <MX_GPIO_Init+0x240>)
 8001482:	f001 fe61 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001486:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001498:	230a      	movs	r3, #10
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4816      	ldr	r0, [pc, #88]	; (80014fc <MX_GPIO_Init+0x240>)
 80014a4:	f001 fe50 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014a8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ba:	2304      	movs	r3, #4
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_GPIO_Init+0x23c>)
 80014c6:	f001 fe3f 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014ca:	2302      	movs	r3, #2
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_GPIO_Init+0x234>)
 80014e0:	f001 fe32 	bl	8003148 <HAL_GPIO_Init>

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020000 	.word	0x40020000

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f000 fc86 	bl	8001e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f81e 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f7ff fed6 	bl	80012bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001510:	f7ff feb4 	bl	800127c <MX_DMA_Init>
  MX_ADC1_Init();
 8001514:	f7ff fd6c 	bl	8000ff0 <MX_ADC1_Init>
  MX_DAC_Init();
 8001518:	f7ff fe42 	bl	80011a0 <MX_DAC_Init>
  MX_TIM3_Init();
 800151c:	f000 fb68 	bl	8001bf0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001520:	f000 fbdc 	bl	8001cdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &ADC_value[0], 2);
 8001524:	2202      	movs	r2, #2
 8001526:	4905      	ldr	r1, [pc, #20]	; (800153c <main+0x3c>)
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <main+0x40>)
 800152a:	f000 fd4d 	bl	8001fc8 <HAL_ADC_Start_DMA>
  MOSFET_EDA_Measure_Ids();
 800152e:	f000 f91d 	bl	800176c <MOSFET_EDA_Measure_Ids>

  HAL_TIM_Base_Start_IT(&htim3);
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <main+0x44>)
 8001534:	f002 fca6 	bl	8003e84 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001538:	e7fe      	b.n	8001538 <main+0x38>
 800153a:	bf00      	nop
 800153c:	200002b8 	.word	0x200002b8
 8001540:	200001f0 	.word	0x200001f0
 8001544:	200002cc 	.word	0x200002cc

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	; 0x50
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2230      	movs	r2, #48	; 0x30
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fa8a 	bl	8006a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <SystemClock_Config+0xb4>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <SystemClock_Config+0xb4>)
 8001576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <SystemClock_Config+0xb4>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <SystemClock_Config+0xb8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <SystemClock_Config+0xb8>)
 8001592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <SystemClock_Config+0xb8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a4:	2302      	movs	r3, #2
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ac:	2310      	movs	r3, #16
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 ff7b 	bl	80034b4 <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015c4:	f000 f9ec 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 f9de 	bl	80039a4 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80015ee:	f000 f9d7 	bl	80019a0 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3750      	adds	r7, #80	; 0x50
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <_write>:

/* USER CODE BEGIN 4 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 20);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	b29a      	uxth	r2, r3
 8001614:	2314      	movs	r3, #20
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <_write+0x24>)
 800161a:	f003 f8b2 	bl	8004782 <HAL_UART_Transmit>

	return len;
 800161e:	687b      	ldr	r3, [r7, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000314 	.word	0x20000314

0800162c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800162c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001630:	b087      	sub	sp, #28
 8001632:	af04      	add	r7, sp, #16
 8001634:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a41      	ldr	r2, [pc, #260]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d17a      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x10a>
	{
		fetEDA_LPF = (float)ADC_value[0]/4096 * 3;
 8001640:	4b40      	ldr	r3, [pc, #256]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001748 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8001650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001654:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165c:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
		fetEDA_Vin = (float)ADC_value[1]/4096 * 3;
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001664:	885b      	ldrh	r3, [r3, #2]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800166e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001748 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8001672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001676:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800167a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001680:	edc3 7a00 	vstr	s15, [r3]
		printf("%dm %.2fs. fetEDA_LPF = %.4fv, fetEDA_Vin = %.4fv\r\n", min, sec+ms, fetEDA_LPF, fetEDA_Vin);
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	461e      	mov	r6, r3
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	ee17 0a90 	vmov	r0, s15
 80016a4:	f7fe ff50 	bl	8000548 <__aeabi_f2d>
 80016a8:	4680      	mov	r8, r0
 80016aa:	4689      	mov	r9, r1
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	4604      	mov	r4, r0
 80016b8:	460d      	mov	r5, r1
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff42 	bl	8000548 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016cc:	e9cd 4500 	strd	r4, r5, [sp]
 80016d0:	4642      	mov	r2, r8
 80016d2:	464b      	mov	r3, r9
 80016d4:	4631      	mov	r1, r6
 80016d6:	4822      	ldr	r0, [pc, #136]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016d8:	f005 f9a6 	bl	8006a28 <iprintf>

		ms = (float)ms_idx/fs;
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001768 <HAL_TIM_PeriodElapsedCallback+0x13c>
 80016ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]

		if(ms_idx >= fs)
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2b63      	cmp	r3, #99	; 0x63
 80016fc:	d915      	bls.n	800172a <HAL_TIM_PeriodElapsedCallback+0xfe>
		{
			ms_idx = 0;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001700:	2200      	movs	r2, #0
 8001702:	801a      	strh	r2, [r3, #0]
			sec++;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800170e:	701a      	strb	r2, [r3, #0]

			if(sec >= 60)
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b3b      	cmp	r3, #59	; 0x3b
 8001716:	d908      	bls.n	800172a <HAL_TIM_PeriodElapsedCallback+0xfe>
			{
				sec = 0;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
				min++;
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001728:	801a      	strh	r2, [r3, #0]
			}
		}
		ms_idx++;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001734:	801a      	strh	r2, [r3, #0]
	}
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001740:	40000400 	.word	0x40000400
 8001744:	200002b8 	.word	0x200002b8
 8001748:	45800000 	.word	0x45800000
 800174c:	200002bc 	.word	0x200002bc
 8001750:	200002c0 	.word	0x200002c0
 8001754:	200002b2 	.word	0x200002b2
 8001758:	200002b0 	.word	0x200002b0
 800175c:	200002ac 	.word	0x200002ac
 8001760:	08009638 	.word	0x08009638
 8001764:	200002b4 	.word	0x200002b4
 8001768:	42c80000 	.word	0x42c80000

0800176c <MOSFET_EDA_Measure_Ids>:

void MOSFET_EDA_Measure_Ids(void)
{
 800176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001770:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
 8001774:	b08b      	sub	sp, #44	; 0x2c
 8001776:	af06      	add	r7, sp, #24

	float fetEDA_Rfeed[2] = {1000000, 100000};
 8001778:	4a80      	ldr	r2, [pc, #512]	; (800197c <MOSFET_EDA_Measure_Ids+0x210>)
 800177a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800177e:	f103 0304 	add.w	r3, r3, #4
 8001782:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001786:	e883 0003 	stmia.w	r3, {r0, r1}
	float fetEDA_Ids[2][4096] = {0,};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	3b0c      	subs	r3, #12
 8001790:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f005 f96a 	bl	8006a70 <memset>
//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
//	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);

//	HAL_Delay(1000);

	for(int fetEDA_Rfeed_idx = 0; fetEDA_Rfeed_idx<2; fetEDA_Rfeed_idx++)
 800179c:	2300      	movs	r3, #0
 800179e:	f507 4200 	add.w	r2, r7, #32768	; 0x8000
 80017a2:	f102 020c 	add.w	r2, r2, #12
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e0d8      	b.n	800195c <MOSFET_EDA_Measure_Ids+0x1f0>
	{
		if(fetEDA_Rfeed_idx == 0)
 80017aa:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80017ae:	f103 030c 	add.w	r3, r3, #12
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10a      	bne.n	80017ce <MOSFET_EDA_Measure_Ids+0x62>
		{
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	4870      	ldr	r0, [pc, #448]	; (8001980 <MOSFET_EDA_Measure_Ids+0x214>)
 80017be:	f001 fe5f 	bl	8003480 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2102      	movs	r1, #2
 80017c6:	486e      	ldr	r0, [pc, #440]	; (8001980 <MOSFET_EDA_Measure_Ids+0x214>)
 80017c8:	f001 fe5a 	bl	8003480 <HAL_GPIO_WritePin>
 80017cc:	e010      	b.n	80017f0 <MOSFET_EDA_Measure_Ids+0x84>
		}
		else if(fetEDA_Rfeed_idx == 1)
 80017ce:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80017d2:	f103 030c 	add.w	r3, r3, #12
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d109      	bne.n	80017f0 <MOSFET_EDA_Measure_Ids+0x84>
		{
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2101      	movs	r1, #1
 80017e0:	4867      	ldr	r0, [pc, #412]	; (8001980 <MOSFET_EDA_Measure_Ids+0x214>)
 80017e2:	f001 fe4d 	bl	8003480 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	2102      	movs	r1, #2
 80017ea:	4865      	ldr	r0, [pc, #404]	; (8001980 <MOSFET_EDA_Measure_Ids+0x214>)
 80017ec:	f001 fe48 	bl	8003480 <HAL_GPIO_WritePin>
		}
		for(DAC_value = 0; DAC_value < 4096; DAC_value++)
 80017f0:	4b64      	ldr	r3, [pc, #400]	; (8001984 <MOSFET_EDA_Measure_Ids+0x218>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	e0a0      	b.n	800193a <MOSFET_EDA_Measure_Ids+0x1ce>
		{
//			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_value);
//			HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
			HAL_Delay(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f000 fb7d 	bl	8001ef8 <HAL_Delay>

			fetEDA_LPF = (float)ADC_value[0]/4096 * 3;
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <MOSFET_EDA_Measure_Ids+0x21c>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180a:	eddf 6a60 	vldr	s13, [pc, #384]	; 800198c <MOSFET_EDA_Measure_Ids+0x220>
 800180e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001812:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <MOSFET_EDA_Measure_Ids+0x224>)
 800181c:	edc3 7a00 	vstr	s15, [r3]
			fetEDA_Vin = (float)ADC_value[1]/4096 * 3;
 8001820:	4b59      	ldr	r3, [pc, #356]	; (8001988 <MOSFET_EDA_Measure_Ids+0x21c>)
 8001822:	885b      	ldrh	r3, [r3, #2]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800182c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800198c <MOSFET_EDA_Measure_Ids+0x220>
 8001830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001834:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183c:	4b55      	ldr	r3, [pc, #340]	; (8001994 <MOSFET_EDA_Measure_Ids+0x228>)
 800183e:	edc3 7a00 	vstr	s15, [r3]

			fetEDA_Ids[fetEDA_Rfeed_idx][DAC_value] = (fetEDA_LPF-fetEDA_Vin)*1000000 / fetEDA_Rfeed[fetEDA_Rfeed_idx];
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <MOSFET_EDA_Measure_Ids+0x224>)
 8001844:	ed93 7a00 	vldr	s14, [r3]
 8001848:	4b52      	ldr	r3, [pc, #328]	; (8001994 <MOSFET_EDA_Measure_Ids+0x228>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001852:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001998 <MOSFET_EDA_Measure_Ids+0x22c>
 8001856:	ee67 6a87 	vmul.f32	s13, s15, s14
 800185a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800185e:	f103 030c 	add.w	r3, r3, #12
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800186a:	f103 0310 	add.w	r3, r3, #16
 800186e:	443b      	add	r3, r7
 8001870:	3b0c      	subs	r3, #12
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	4b43      	ldr	r3, [pc, #268]	; (8001984 <MOSFET_EDA_Measure_Ids+0x218>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	461a      	mov	r2, r3
 8001886:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800188a:	f103 030c 	add.w	r3, r3, #12
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	031b      	lsls	r3, r3, #12
 8001892:	440b      	add	r3, r1
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b0c      	subs	r3, #12
 800189a:	edc3 7a00 	vstr	s15, [r3]
			printf("%d. fetEDA_Rfeed = %.0fohm, fetEDA_LPF = %.4v, fetEDA_Vin = %.4v, fetEDA_Ids = %.4uA\r\n", fetEDA_Rfeed_idx+1, fetEDA_Rfeed[fetEDA_Rfeed_idx], fetEDA_LPF, fetEDA_Vin, fetEDA_Ids[fetEDA_Rfeed_idx][DAC_value]);
 800189e:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80018a2:	f103 030c 	add.w	r3, r3, #12
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	1c5e      	adds	r6, r3, #1
 80018aa:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80018ae:	f103 030c 	add.w	r3, r3, #12
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018ba:	f103 0310 	add.w	r3, r3, #16
 80018be:	443b      	add	r3, r7
 80018c0:	3b0c      	subs	r3, #12
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe3f 	bl	8000548 <__aeabi_f2d>
 80018ca:	4682      	mov	sl, r0
 80018cc:	468b      	mov	fp, r1
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <MOSFET_EDA_Measure_Ids+0x224>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe38 	bl	8000548 <__aeabi_f2d>
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <MOSFET_EDA_Measure_Ids+0x228>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe31 	bl	8000548 <__aeabi_f2d>
 80018e6:	4680      	mov	r8, r0
 80018e8:	4689      	mov	r9, r1
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <MOSFET_EDA_Measure_Ids+0x218>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	461a      	mov	r2, r3
 80018f6:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80018fa:	f103 030c 	add.w	r3, r3, #12
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	031b      	lsls	r3, r3, #12
 8001902:	440b      	add	r3, r1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b0c      	subs	r3, #12
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe1b 	bl	8000548 <__aeabi_f2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800191a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800191e:	e9cd 4500 	strd	r4, r5, [sp]
 8001922:	4652      	mov	r2, sl
 8001924:	465b      	mov	r3, fp
 8001926:	4631      	mov	r1, r6
 8001928:	481c      	ldr	r0, [pc, #112]	; (800199c <MOSFET_EDA_Measure_Ids+0x230>)
 800192a:	f005 f87d 	bl	8006a28 <iprintf>
		for(DAC_value = 0; DAC_value < 4096; DAC_value++)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <MOSFET_EDA_Measure_Ids+0x218>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MOSFET_EDA_Measure_Ids+0x218>)
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MOSFET_EDA_Measure_Ids+0x218>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	f4ff af59 	bcc.w	80017f8 <MOSFET_EDA_Measure_Ids+0x8c>
	for(int fetEDA_Rfeed_idx = 0; fetEDA_Rfeed_idx<2; fetEDA_Rfeed_idx++)
 8001946:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800194a:	f103 030c 	add.w	r3, r3, #12
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	f507 4200 	add.w	r2, r7, #32768	; 0x8000
 8001956:	f102 020c 	add.w	r2, r2, #12
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8001960:	f103 030c 	add.w	r3, r3, #12
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	f77f af1f 	ble.w	80017aa <MOSFET_EDA_Measure_Ids+0x3e>
		}
	}
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197c:	080096c4 	.word	0x080096c4
 8001980:	40020400 	.word	0x40020400
 8001984:	200002c4 	.word	0x200002c4
 8001988:	200002b8 	.word	0x200002b8
 800198c:	45800000 	.word	0x45800000
 8001990:	200002bc 	.word	0x200002bc
 8001994:	200002c0 	.word	0x200002c0
 8001998:	49742400 	.word	0x49742400
 800199c:	0800966c 	.word	0x0800966c

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ea:	2007      	movs	r0, #7
 80019ec:	f000 ff8a 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 fa36 	bl	8001eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM3_IRQHandler+0x10>)
 8001a56:	f002 fa85 	bl	8003f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002cc 	.word	0x200002cc

08001a64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA2_Stream0_IRQHandler+0x10>)
 8001a6a:	f001 f903 	bl	8002c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000238 	.word	0x20000238

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_kill>:

int _kill(int pid, int sig)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a92:	f004 fff9 	bl	8006a88 <__errno>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2216      	movs	r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_exit>:

void _exit (int status)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffe7 	bl	8001a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aba:	e7fe      	b.n	8001aba <_exit+0x12>

08001abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ace:	f3af 8000 	nop.w
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf0      	blt.n	8001ace <_read+0x12>
  }

  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f004 ff7a 	bl	8006a88 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20020000 	.word	0x20020000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	200002c8 	.word	0x200002c8
 8001bc8:	200004a8 	.word	0x200004a8

08001bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	463b      	mov	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c0e:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <MX_TIM3_Init+0x98>)
 8001c10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3200;
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c14:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c22:	2231      	movs	r2, #49	; 0x31
 8001c24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c32:	4814      	ldr	r0, [pc, #80]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c34:	f002 f8d6 	bl	8003de4 <HAL_TIM_Base_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c3e:	f7ff feaf 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c50:	f002 fa90 	bl	8004174 <HAL_TIM_ConfigClockSource>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f7ff fea1 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c66:	463b      	mov	r3, r7
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <MX_TIM3_Init+0x94>)
 8001c6c:	f002 fcac 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c76:	f7ff fe93 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002cc 	.word	0x200002cc
 8001c88:	40000400 	.word	0x40000400

08001c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_TIM_Base_MspInit+0x48>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d115      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	201d      	movs	r0, #29
 8001cc0:	f000 fe2b 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc4:	201d      	movs	r0, #29
 8001cc6:	f000 fe44 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40023800 	.word	0x40023800

08001cdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <MX_USART2_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d14:	f002 fce8 	bl	80046e8 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f7ff fe3f 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000314 	.word	0x20000314
 8001d2c:	40004400 	.word	0x40004400

08001d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_UART_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12b      	bne.n	8001daa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_UART_MspInit+0x88>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_UART_MspInit+0x88>)
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_UART_MspInit+0x88>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_UART_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_UART_MspInit+0x88>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_UART_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d8a:	230c      	movs	r3, #12
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_UART_MspInit+0x8c>)
 8001da6:	f001 f9cf 	bl	8003148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40004400 	.word	0x40004400
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dc6:	490e      	ldr	r1, [pc, #56]	; (8001e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ddc:	4c0b      	ldr	r4, [pc, #44]	; (8001e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dea:	f7ff feef 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dee:	f004 fe51 	bl	8006a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df2:	f7ff fb85 	bl	8001500 <main>
  bx  lr    
 8001df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e00:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e04:	08009b20 	.word	0x08009b20
  ldr r2, =_sbss
 8001e08:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e0c:	200004a8 	.word	0x200004a8

08001e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC_IRQHandler>
	...

08001e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_Init+0x40>)
 8001e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <HAL_Init+0x40>)
 8001e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_Init+0x40>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_Init+0x40>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f000 fd61 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f808 	bl	8001e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e48:	f7ff fdb0 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023c00 	.word	0x40023c00

08001e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_InitTick+0x54>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x58>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fd79 	bl	800296e <HAL_SYSTICK_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00e      	b.n	8001ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d80a      	bhi.n	8001ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e94:	f000 fd41 	bl	800291a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <HAL_InitTick+0x5c>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_IncTick+0x24>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_IncTick+0x24>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000358 	.word	0x20000358

08001ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_GetTick+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000358 	.word	0x20000358

08001ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff ffee 	bl	8001ee0 <HAL_GetTick>
 8001f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f10:	d005      	beq.n	8001f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_Delay+0x44>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f1e:	bf00      	nop
 8001f20:	f7ff ffde 	bl	8001ee0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d8f7      	bhi.n	8001f20 <HAL_Delay+0x28>
  {
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008

08001f40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e033      	b.n	8001fbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff f8a6 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d118      	bne.n	8001fb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f86:	f023 0302 	bic.w	r3, r3, #2
 8001f8a:	f043 0202 	orr.w	r2, r3, #2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fa68 	bl	8002468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
 8001fae:	e001      	b.n	8001fb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Start_DMA+0x1e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e0e9      	b.n	80021ba <HAL_ADC_Start_DMA+0x1f2>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d018      	beq.n	800202e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800200c:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_ADC_Start_DMA+0x1fc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6d      	ldr	r2, [pc, #436]	; (80021c8 <HAL_ADC_Start_DMA+0x200>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0c9a      	lsrs	r2, r3, #18
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002020:	e002      	b.n	8002028 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	3b01      	subs	r3, #1
 8002026:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203c:	d107      	bne.n	800204e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 80a1 	bne.w	80021a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002088:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209c:	d106      	bne.n	80020ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f023 0206 	bic.w	r2, r3, #6
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
 80020aa:	e002      	b.n	80020b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HAL_ADC_Start_DMA+0x204>)
 80020bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	4a43      	ldr	r2, [pc, #268]	; (80021d0 <HAL_ADC_Start_DMA+0x208>)
 80020c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	4a42      	ldr	r2, [pc, #264]	; (80021d4 <HAL_ADC_Start_DMA+0x20c>)
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	4a41      	ldr	r2, [pc, #260]	; (80021d8 <HAL_ADC_Start_DMA+0x210>)
 80020d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	334c      	adds	r3, #76	; 0x4c
 800210a:	4619      	mov	r1, r3
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f000 fd58 	bl	8002bc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2b00      	cmp	r3, #0
 800211e:	d12a      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_ADC_Start_DMA+0x214>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d015      	beq.n	8002156 <HAL_ADC_Start_DMA+0x18e>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <HAL_ADC_Start_DMA+0x218>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d105      	bne.n	8002140 <HAL_ADC_Start_DMA+0x178>
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_ADC_Start_DMA+0x204>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <HAL_ADC_Start_DMA+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d136      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_ADC_Start_DMA+0x204>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d130      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d129      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e020      	b.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_ADC_Start_DMA+0x214>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d11b      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d114      	bne.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	e00b      	b.n	80021b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0210 	orr.w	r2, r3, #16
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000
 80021c8:	431bde83 	.word	0x431bde83
 80021cc:	40012300 	.word	0x40012300
 80021d0:	08002661 	.word	0x08002661
 80021d4:	0800271b 	.word	0x0800271b
 80021d8:	08002737 	.word	0x08002737
 80021dc:	40012000 	.word	0x40012000
 80021e0:	40012100 	.word	0x40012100
 80021e4:	40012200 	.word	0x40012200

080021e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x1c>
 800223c:	2302      	movs	r3, #2
 800223e:	e105      	b.n	800244c <HAL_ADC_ConfigChannel+0x228>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b09      	cmp	r3, #9
 800224e:	d925      	bls.n	800229c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68d9      	ldr	r1, [r3, #12]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	3b1e      	subs	r3, #30
 8002266:	2207      	movs	r2, #7
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43da      	mvns	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	400a      	ands	r2, r1
 8002274:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68d9      	ldr	r1, [r3, #12]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	4618      	mov	r0, r3
 8002288:	4603      	mov	r3, r0
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4403      	add	r3, r0
 800228e:	3b1e      	subs	r3, #30
 8002290:	409a      	lsls	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	e022      	b.n	80022e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6919      	ldr	r1, [r3, #16]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	2207      	movs	r2, #7
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	400a      	ands	r2, r1
 80022be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6919      	ldr	r1, [r3, #16]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	4603      	mov	r3, r0
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4403      	add	r3, r0
 80022d8:	409a      	lsls	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d824      	bhi.n	8002334 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	3b05      	subs	r3, #5
 80022fc:	221f      	movs	r2, #31
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b05      	subs	r3, #5
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	635a      	str	r2, [r3, #52]	; 0x34
 8002332:	e04c      	b.n	80023ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b0c      	cmp	r3, #12
 800233a:	d824      	bhi.n	8002386 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	3b23      	subs	r3, #35	; 0x23
 800234e:	221f      	movs	r2, #31
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43da      	mvns	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	400a      	ands	r2, r1
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	4618      	mov	r0, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	3b23      	subs	r3, #35	; 0x23
 8002378:	fa00 f203 	lsl.w	r2, r0, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
 8002384:	e023      	b.n	80023ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3b41      	subs	r3, #65	; 0x41
 8002398:	221f      	movs	r2, #31
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	400a      	ands	r2, r1
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4618      	mov	r0, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	3b41      	subs	r3, #65	; 0x41
 80023c2:	fa00 f203 	lsl.w	r2, r0, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <HAL_ADC_ConfigChannel+0x234>)
 80023d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a21      	ldr	r2, [pc, #132]	; (800245c <HAL_ADC_ConfigChannel+0x238>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d109      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1cc>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b12      	cmp	r3, #18
 80023e2:	d105      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_ADC_ConfigChannel+0x238>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d123      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x21e>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d003      	beq.n	800240a <HAL_ADC_ConfigChannel+0x1e6>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b11      	cmp	r3, #17
 8002408:	d11b      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d111      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_ADC_ConfigChannel+0x23c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_ADC_ConfigChannel+0x240>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	0c9a      	lsrs	r2, r3, #18
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002434:	e002      	b.n	800243c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3b01      	subs	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f9      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40012300 	.word	0x40012300
 800245c:	40012000 	.word	0x40012000
 8002460:	20000000 	.word	0x20000000
 8002464:	431bde83 	.word	0x431bde83

08002468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002470:	4b79      	ldr	r3, [pc, #484]	; (8002658 <ADC_Init+0x1f0>)
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	431a      	orrs	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800249c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	4a58      	ldr	r2, [pc, #352]	; (800265c <ADC_Init+0x1f4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800250e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6899      	ldr	r1, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	e00f      	b.n	8002566 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0202 	bic.w	r2, r2, #2
 8002574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e1b      	ldrb	r3, [r3, #24]
 8002580:	005a      	lsls	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01b      	beq.n	80025cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	3b01      	subs	r3, #1
 80025c0:	035a      	lsls	r2, r3, #13
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	e007      	b.n	80025dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	051a      	lsls	r2, r3, #20
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800261e:	025a      	lsls	r2, r3, #9
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6899      	ldr	r1, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	029a      	lsls	r2, r3, #10
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40012300 	.word	0x40012300
 800265c:	0f000001 	.word	0x0f000001

08002660 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002676:	2b00      	cmp	r3, #0
 8002678:	d13c      	bne.n	80026f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d12b      	bne.n	80026ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002698:	2b00      	cmp	r3, #0
 800269a:	d127      	bne.n	80026ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0220 	bic.w	r2, r2, #32
 80026c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fd7b 	bl	80021e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026f2:	e00e      	b.n	8002712 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fd85 	bl	8002210 <HAL_ADC_ErrorCallback>
}
 8002706:	e004      	b.n	8002712 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff fd67 	bl	80021fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2240      	movs	r2, #64	; 0x40
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fd5a 	bl	8002210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800275c:	bf00      	nop
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	; (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	; (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff3e 	bl	80027ac <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff8e 	bl	8002858 <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff31 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e014      	b.n	80029c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7fe fc23 	bl	80011f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	795b      	ldrb	r3, [r3, #5]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_DAC_ConfigChannel+0x18>
 80029de:	2302      	movs	r3, #2
 80029e0:	e03c      	b.n	8002a5c <HAL_DAC_ConfigChannel+0x92>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2202      	movs	r2, #2
 80029ec:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	22c0      	movs	r2, #192	; 0xc0
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43da      	mvns	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff fa34 	bl	8001ee0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e099      	b.n	8002bb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa4:	e00f      	b.n	8002ac6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa6:	f7ff fa1b 	bl	8001ee0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d908      	bls.n	8002ac6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e078      	b.n	8002bb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e8      	bne.n	8002aa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_DMA_Init+0x158>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d107      	bne.n	8002b30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0307 	bic.w	r3, r3, #7
 8002b46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d117      	bne.n	8002b8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00e      	beq.n	8002b8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fa6f 	bl	8003050 <DMA_CheckFifoParam>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2240      	movs	r2, #64	; 0x40
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b86:	2301      	movs	r3, #1
 8002b88:	e016      	b.n	8002bb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa26 	bl	8002fe4 <DMA_CalcBaseAndBitshift>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	f010803f 	.word	0xf010803f

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_DMA_Start_IT+0x26>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e040      	b.n	8002c6c <HAL_DMA_Start_IT+0xa8>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d12f      	bne.n	8002c5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f9b8 	bl	8002f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	223f      	movs	r2, #63	; 0x3f
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0216 	orr.w	r2, r2, #22
 8002c32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0208 	orr.w	r2, r2, #8
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e005      	b.n	8002c6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c80:	4b8e      	ldr	r3, [pc, #568]	; (8002ebc <HAL_DMA_IRQHandler+0x248>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a8e      	ldr	r2, [pc, #568]	; (8002ec0 <HAL_DMA_IRQHandler+0x24c>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01a      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0204 	bic.w	r2, r2, #4
 8002cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	2208      	movs	r2, #8
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d012      	beq.n	8002d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	2201      	movs	r2, #1
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0202 	orr.w	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00b      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2204      	movs	r2, #4
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	2210      	movs	r2, #16
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d043      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03c      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2210      	movs	r2, #16
 8002d70:	409a      	lsls	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d108      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d024      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
 8002da2:	e01f      	b.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
 8002db4:	e016      	b.n	8002de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0208 	bic.w	r2, r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2220      	movs	r2, #32
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 808f 	beq.w	8002f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8087 	beq.w	8002f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d136      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0216 	bic.w	r2, r2, #22
 8002e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x1da>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0208 	bic.w	r2, r2, #8
 8002e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	223f      	movs	r2, #63	; 0x3f
 8002e64:	409a      	lsls	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d07e      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
        }
        return;
 8002e8a:	e079      	b.n	8002f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d031      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
 8002eb8:	e02c      	b.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e01e      	b.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10f      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0210 	bic.w	r2, r2, #16
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d032      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2205      	movs	r2, #5
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d307      	bcc.n	8002f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f2      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x2cc>
 8002f5a:	e000      	b.n	8002f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f80:	bf00      	nop
    }
  }
}
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d108      	bne.n	8002fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fc6:	e007      	b.n	8002fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3b10      	subs	r3, #16
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <DMA_CalcBaseAndBitshift+0x64>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <DMA_CalcBaseAndBitshift+0x68>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d909      	bls.n	8003026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	; 0x58
 8003024:	e007      	b.n	8003036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	aaaaaaab 	.word	0xaaaaaaab
 800304c:	080096e4 	.word	0x080096e4

08003050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d856      	bhi.n	800311e <DMA_CheckFifoParam+0xce>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <DMA_CheckFifoParam+0x28>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003089 	.word	0x08003089
 800307c:	0800309b 	.word	0x0800309b
 8003080:	08003089 	.word	0x08003089
 8003084:	0800311f 	.word	0x0800311f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d046      	beq.n	8003122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e043      	b.n	8003122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030a2:	d140      	bne.n	8003126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e03d      	b.n	8003126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	d121      	bne.n	80030f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d837      	bhi.n	800312a <DMA_CheckFifoParam+0xda>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <DMA_CheckFifoParam+0x70>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030d7 	.word	0x080030d7
 80030c8:	080030d1 	.word	0x080030d1
 80030cc:	080030e9 	.word	0x080030e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e030      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d025      	beq.n	800312e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e6:	e022      	b.n	800312e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f0:	d11f      	bne.n	8003132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030f6:	e01c      	b.n	8003132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d903      	bls.n	8003106 <DMA_CheckFifoParam+0xb6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003104:	e018      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      break;
 800310a:	e015      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e00b      	b.n	8003136 <DMA_CheckFifoParam+0xe6>
      break;
 800311e:	bf00      	nop
 8003120:	e00a      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e008      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e006      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;   
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
    }
  } 
  
  return status; 
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e16b      	b.n	800343c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003164:	2201      	movs	r2, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	f040 815a 	bne.w	8003436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d005      	beq.n	800319a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003196:	2b02      	cmp	r3, #2
 8003198:	d130      	bne.n	80031fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	2203      	movs	r2, #3
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 0201 	and.w	r2, r3, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d017      	beq.n	8003238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d123      	bne.n	800328c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	08da      	lsrs	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3208      	adds	r2, #8
 8003286:	69b9      	ldr	r1, [r7, #24]
 8003288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80b4 	beq.w	8003436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b60      	ldr	r3, [pc, #384]	; (8003454 <HAL_GPIO_Init+0x30c>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	4a5f      	ldr	r2, [pc, #380]	; (8003454 <HAL_GPIO_Init+0x30c>)
 80032d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032dc:	6453      	str	r3, [r2, #68]	; 0x44
 80032de:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_GPIO_Init+0x30c>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ea:	4a5b      	ldr	r2, [pc, #364]	; (8003458 <HAL_GPIO_Init+0x310>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	3302      	adds	r3, #2
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_GPIO_Init+0x314>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02b      	beq.n	800336e <HAL_GPIO_Init+0x226>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a51      	ldr	r2, [pc, #324]	; (8003460 <HAL_GPIO_Init+0x318>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d025      	beq.n	800336a <HAL_GPIO_Init+0x222>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a50      	ldr	r2, [pc, #320]	; (8003464 <HAL_GPIO_Init+0x31c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <HAL_GPIO_Init+0x21e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4f      	ldr	r2, [pc, #316]	; (8003468 <HAL_GPIO_Init+0x320>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x21a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4e      	ldr	r2, [pc, #312]	; (800346c <HAL_GPIO_Init+0x324>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x216>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4d      	ldr	r2, [pc, #308]	; (8003470 <HAL_GPIO_Init+0x328>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x212>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4c      	ldr	r2, [pc, #304]	; (8003474 <HAL_GPIO_Init+0x32c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x20e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4b      	ldr	r2, [pc, #300]	; (8003478 <HAL_GPIO_Init+0x330>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x20a>
 800334e:	2307      	movs	r3, #7
 8003350:	e00e      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003352:	2308      	movs	r3, #8
 8003354:	e00c      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003356:	2306      	movs	r3, #6
 8003358:	e00a      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800335a:	2305      	movs	r3, #5
 800335c:	e008      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800335e:	2304      	movs	r3, #4
 8003360:	e006      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003362:	2303      	movs	r3, #3
 8003364:	e004      	b.n	8003370 <HAL_GPIO_Init+0x228>
 8003366:	2302      	movs	r3, #2
 8003368:	e002      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_GPIO_Init+0x228>
 800336e:	2300      	movs	r3, #0
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	f002 0203 	and.w	r2, r2, #3
 8003376:	0092      	lsls	r2, r2, #2
 8003378:	4093      	lsls	r3, r2
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003380:	4935      	ldr	r1, [pc, #212]	; (8003458 <HAL_GPIO_Init+0x310>)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <HAL_GPIO_Init+0x334>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b2:	4a32      	ldr	r2, [pc, #200]	; (800347c <HAL_GPIO_Init+0x334>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_GPIO_Init+0x334>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <HAL_GPIO_Init+0x334>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_GPIO_Init+0x334>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_GPIO_Init+0x334>)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_GPIO_Init+0x334>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003430:	4a12      	ldr	r2, [pc, #72]	; (800347c <HAL_GPIO_Init+0x334>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3301      	adds	r3, #1
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b0f      	cmp	r3, #15
 8003440:	f67f ae90 	bls.w	8003164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40013800 	.word	0x40013800
 800345c:	40020000 	.word	0x40020000
 8003460:	40020400 	.word	0x40020400
 8003464:	40020800 	.word	0x40020800
 8003468:	40020c00 	.word	0x40020c00
 800346c:	40021000 	.word	0x40021000
 8003470:	40021400 	.word	0x40021400
 8003474:	40021800 	.word	0x40021800
 8003478:	40021c00 	.word	0x40021c00
 800347c:	40013c00 	.word	0x40013c00

08003480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
 800348c:	4613      	mov	r3, r2
 800348e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003490:	787b      	ldrb	r3, [r7, #1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800349c:	e003      	b.n	80034a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	619a      	str	r2, [r3, #24]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e267      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d075      	beq.n	80035be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034d2:	4b88      	ldr	r3, [pc, #544]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d00c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034de:	4b85      	ldr	r3, [pc, #532]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d112      	bne.n	8003510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b82      	ldr	r3, [pc, #520]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f6:	d10b      	bne.n	8003510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	4b7e      	ldr	r3, [pc, #504]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d05b      	beq.n	80035bc <HAL_RCC_OscConfig+0x108>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d157      	bne.n	80035bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e242      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x74>
 800351a:	4b76      	ldr	r3, [pc, #472]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a75      	ldr	r2, [pc, #468]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e01d      	b.n	8003564 <HAL_RCC_OscConfig+0xb0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x98>
 8003532:	4b70      	ldr	r3, [pc, #448]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a6f      	ldr	r2, [pc, #444]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b6d      	ldr	r3, [pc, #436]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6c      	ldr	r2, [pc, #432]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0xb0>
 800354c:	4b69      	ldr	r3, [pc, #420]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a68      	ldr	r2, [pc, #416]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b66      	ldr	r3, [pc, #408]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a65      	ldr	r2, [pc, #404]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fcb8 	bl	8001ee0 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fcb4 	bl	8001ee0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e207      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b5b      	ldr	r3, [pc, #364]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0xc0>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fca4 	bl	8001ee0 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fca0 	bl	8001ee0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1f3      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	4b51      	ldr	r3, [pc, #324]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0xe8>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ca:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d6:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d11c      	bne.n	800361c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b44      	ldr	r3, [pc, #272]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d116      	bne.n	800361c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_RCC_OscConfig+0x152>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e1c7      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4937      	ldr	r1, [pc, #220]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	e03a      	b.n	8003692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003624:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_RCC_OscConfig+0x244>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe fc59 	bl	8001ee0 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003632:	f7fe fc55 	bl	8001ee0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1a8      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4925      	ldr	r1, [pc, #148]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_OscConfig+0x244>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fc38 	bl	8001ee0 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003674:	f7fe fc34 	bl	8001ee0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e187      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d036      	beq.n	800370c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <HAL_RCC_OscConfig+0x248>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe fc18 	bl	8001ee0 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fe fc14 	bl	8001ee0 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e167      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_OscConfig+0x240>)
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x200>
 80036d2:	e01b      	b.n	800370c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_OscConfig+0x248>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fe fc01 	bl	8001ee0 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	e00e      	b.n	8003700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e2:	f7fe fbfd 	bl	8001ee0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d907      	bls.n	8003700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e150      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
 80036f4:	40023800 	.word	0x40023800
 80036f8:	42470000 	.word	0x42470000
 80036fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	4b88      	ldr	r3, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ea      	bne.n	80036e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8097 	beq.w	8003848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371e:	4b81      	ldr	r3, [pc, #516]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	4b7d      	ldr	r3, [pc, #500]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b7a      	ldr	r3, [pc, #488]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b77      	ldr	r3, [pc, #476]	; (8003928 <HAL_RCC_OscConfig+0x474>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d118      	bne.n	8003788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003756:	4b74      	ldr	r3, [pc, #464]	; (8003928 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a73      	ldr	r2, [pc, #460]	; (8003928 <HAL_RCC_OscConfig+0x474>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003762:	f7fe fbbd 	bl	8001ee0 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe fbb9 	bl	8001ee0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e10c      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_OscConfig+0x474>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x2ea>
 8003790:	4b64      	ldr	r3, [pc, #400]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a63      	ldr	r2, [pc, #396]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
 800379c:	e01c      	b.n	80037d8 <HAL_RCC_OscConfig+0x324>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x30c>
 80037a6:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a5e      	ldr	r2, [pc, #376]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5b      	ldr	r2, [pc, #364]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0x324>
 80037c0:	4b58      	ldr	r3, [pc, #352]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a57      	ldr	r2, [pc, #348]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	4b55      	ldr	r3, [pc, #340]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a54      	ldr	r2, [pc, #336]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0304 	bic.w	r3, r3, #4
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fe fb7e 	bl	8001ee0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe fb7a 	bl	8001ee0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0cb      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	4b49      	ldr	r3, [pc, #292]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ee      	beq.n	80037e8 <HAL_RCC_OscConfig+0x334>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380c:	f7fe fb68 	bl	8001ee0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fe fb64 	bl	8001ee0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0b5      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382a:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1ee      	bne.n	8003814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383c:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4a38      	ldr	r2, [pc, #224]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a1 	beq.w	8003994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003852:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b08      	cmp	r3, #8
 800385c:	d05c      	beq.n	8003918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d141      	bne.n	80038ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b31      	ldr	r3, [pc, #196]	; (800392c <HAL_RCC_OscConfig+0x478>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fb38 	bl	8001ee0 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fb34 	bl	8001ee0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e087      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	491b      	ldr	r1, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCC_OscConfig+0x478>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fe fb0d 	bl	8001ee0 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fe fb09 	bl	8001ee0 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e05c      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x416>
 80038e8:	e054      	b.n	8003994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <HAL_RCC_OscConfig+0x478>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe faf6 	bl	8001ee0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe faf2 	bl	8001ee0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e045      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_RCC_OscConfig+0x470>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x444>
 8003916:	e03d      	b.n	8003994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e038      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000
 800392c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x4ec>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d028      	beq.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d121      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d11a      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003960:	4013      	ands	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003968:	4293      	cmp	r3, r2
 800396a:	d111      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	3b01      	subs	r3, #1
 800397a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d107      	bne.n	8003990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800

080039a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0cc      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b68      	ldr	r3, [pc, #416]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d90c      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b63      	ldr	r3, [pc, #396]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0b8      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f8:	4b59      	ldr	r3, [pc, #356]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a58      	ldr	r2, [pc, #352]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a10:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a52      	ldr	r2, [pc, #328]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	494d      	ldr	r1, [pc, #308]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d044      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d119      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e07f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a62:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e06f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e067      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a82:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4934      	ldr	r1, [pc, #208]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a94:	f7fe fa24 	bl	8001ee0 <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9c:	f7fe fa20 	bl	8001ee0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e04f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 020c 	and.w	r2, r3, #12
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d1eb      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d20c      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e032      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4916      	ldr	r1, [pc, #88]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	490e      	ldr	r1, [pc, #56]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b2a:	f000 f821 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	490a      	ldr	r1, [pc, #40]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3c:	5ccb      	ldrb	r3, [r1, r3]
 8003b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe f984 	bl	8001e58 <HAL_InitTick>

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023c00 	.word	0x40023c00
 8003b60:	40023800 	.word	0x40023800
 8003b64:	080096cc 	.word	0x080096cc
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	20000004 	.word	0x20000004

08003b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b74:	b094      	sub	sp, #80	; 0x50
 8003b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b80:	2300      	movs	r3, #0
 8003b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b88:	4b79      	ldr	r3, [pc, #484]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d00d      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	f200 80e1 	bhi.w	8003d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ba2:	e0db      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b73      	ldr	r3, [pc, #460]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ba8:	e0db      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003baa:	4b73      	ldr	r3, [pc, #460]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bae:	e0d8      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb0:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bba:	4b6d      	ldr	r3, [pc, #436]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d063      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc6:	4b6a      	ldr	r3, [pc, #424]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	099b      	lsrs	r3, r3, #6
 8003bcc:	2200      	movs	r2, #0
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bda:	2300      	movs	r3, #0
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003be2:	4622      	mov	r2, r4
 8003be4:	462b      	mov	r3, r5
 8003be6:	f04f 0000 	mov.w	r0, #0
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	0159      	lsls	r1, r3, #5
 8003bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf4:	0150      	lsls	r0, r2, #5
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	1a51      	subs	r1, r2, r1
 8003bfe:	6139      	str	r1, [r7, #16]
 8003c00:	4629      	mov	r1, r5
 8003c02:	eb63 0301 	sbc.w	r3, r3, r1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c14:	4659      	mov	r1, fp
 8003c16:	018b      	lsls	r3, r1, #6
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c1e:	4651      	mov	r1, sl
 8003c20:	018a      	lsls	r2, r1, #6
 8003c22:	4651      	mov	r1, sl
 8003c24:	ebb2 0801 	subs.w	r8, r2, r1
 8003c28:	4659      	mov	r1, fp
 8003c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c42:	4690      	mov	r8, r2
 8003c44:	4699      	mov	r9, r3
 8003c46:	4623      	mov	r3, r4
 8003c48:	eb18 0303 	adds.w	r3, r8, r3
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	462b      	mov	r3, r5
 8003c50:	eb49 0303 	adc.w	r3, r9, r3
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c62:	4629      	mov	r1, r5
 8003c64:	024b      	lsls	r3, r1, #9
 8003c66:	4621      	mov	r1, r4
 8003c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	024a      	lsls	r2, r1, #9
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c76:	2200      	movs	r2, #0
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c80:	f7fd f802 	bl	8000c88 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	e058      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	2200      	movs	r2, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	4611      	mov	r1, r2
 8003c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c9e:	623b      	str	r3, [r7, #32]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0159      	lsls	r1, r3, #5
 8003cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cba:	0150      	lsls	r0, r2, #5
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	00eb      	lsls	r3, r5, #3
 8003cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf6:	00e2      	lsls	r2, r4, #3
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	4643      	mov	r3, r8
 8003cfe:	18e3      	adds	r3, r4, r3
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	464b      	mov	r3, r9
 8003d04:	eb45 0303 	adc.w	r3, r5, r3
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d16:	4629      	mov	r1, r5
 8003d18:	028b      	lsls	r3, r1, #10
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d20:	4621      	mov	r1, r4
 8003d22:	028a      	lsls	r2, r1, #10
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	61fa      	str	r2, [r7, #28]
 8003d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d34:	f7fc ffa8 	bl	8000c88 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3750      	adds	r7, #80	; 0x50
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	007a1200 	.word	0x007a1200

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	080096dc 	.word	0x080096dc

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffdc 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0b5b      	lsrs	r3, r3, #13
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	080096dc 	.word	0x080096dc

08003de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e041      	b.n	8003e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd ff3e 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f000 fa96 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e04e      	b.n	8003f3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d01d      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <HAL_TIM_Base_Start_IT+0xc8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d010      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e007      	b.n	8003f38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40010400 	.word	0x40010400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40001800 	.word	0x40001800

08003f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0202 	mvn.w	r2, #2
 8003f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9b5 	bl	8004316 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f9a7 	bl	8004302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9b8 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0204 	mvn.w	r2, #4
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f98b 	bl	8004316 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f97d 	bl	8004302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f98e 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b08      	cmp	r3, #8
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b08      	cmp	r3, #8
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0208 	mvn.w	r2, #8
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f961 	bl	8004316 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f953 	bl	8004302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f964 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b10      	cmp	r3, #16
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0210 	mvn.w	r2, #16
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2208      	movs	r2, #8
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f937 	bl	8004316 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f929 	bl	8004302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f93a 	bl	800432a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0201 	mvn.w	r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd faa2 	bl	800162c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b80      	cmp	r3, #128	; 0x80
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fae0 	bl	80046d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8ff 	bl	800433e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b20      	cmp	r3, #32
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b20      	cmp	r3, #32
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0220 	mvn.w	r2, #32
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 faaa 	bl	80046c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIM_ConfigClockSource+0x1c>
 800418c:	2302      	movs	r3, #2
 800418e:	e0b4      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x186>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c8:	d03e      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0xd4>
 80041ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ce:	f200 8087 	bhi.w	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	f000 8086 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x172>
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041de:	d87f      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b70      	cmp	r3, #112	; 0x70
 80041e2:	d01a      	beq.n	800421a <HAL_TIM_ConfigClockSource+0xa6>
 80041e4:	2b70      	cmp	r3, #112	; 0x70
 80041e6:	d87b      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b60      	cmp	r3, #96	; 0x60
 80041ea:	d050      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x11a>
 80041ec:	2b60      	cmp	r3, #96	; 0x60
 80041ee:	d877      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b50      	cmp	r3, #80	; 0x50
 80041f2:	d03c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0xfa>
 80041f4:	2b50      	cmp	r3, #80	; 0x50
 80041f6:	d873      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f8:	2b40      	cmp	r3, #64	; 0x40
 80041fa:	d058      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x13a>
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d86f      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b30      	cmp	r3, #48	; 0x30
 8004202:	d064      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15a>
 8004204:	2b30      	cmp	r3, #48	; 0x30
 8004206:	d86b      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d060      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15a>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d867      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05c      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15a>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d05a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	e062      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6899      	ldr	r1, [r3, #8]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f000 f9ad 	bl	8004588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800423c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	609a      	str	r2, [r3, #8]
      break;
 8004246:	e04f      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6899      	ldr	r1, [r3, #8]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f000 f996 	bl	8004588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800426a:	609a      	str	r2, [r3, #8]
      break;
 800426c:	e03c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6859      	ldr	r1, [r3, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	461a      	mov	r2, r3
 800427c:	f000 f90a 	bl	8004494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2150      	movs	r1, #80	; 0x50
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f963 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 800428c:	e02c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	461a      	mov	r2, r3
 800429c:	f000 f929 	bl	80044f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2160      	movs	r1, #96	; 0x60
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 f953 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 80042ac:	e01c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 f8ea 	bl	8004494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2140      	movs	r1, #64	; 0x40
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f943 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 80042cc:	e00c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f000 f93a 	bl	8004552 <TIM_ITRx_SetConfig>
      break;
 80042de:	e003      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e000      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a40      	ldr	r2, [pc, #256]	; (8004468 <TIM_Base_SetConfig+0x114>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d00f      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3d      	ldr	r2, [pc, #244]	; (800446c <TIM_Base_SetConfig+0x118>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00b      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <TIM_Base_SetConfig+0x11c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <TIM_Base_SetConfig+0x120>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3a      	ldr	r2, [pc, #232]	; (8004478 <TIM_Base_SetConfig+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d108      	bne.n	80043a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <TIM_Base_SetConfig+0x114>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02b      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b4:	d027      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2c      	ldr	r2, [pc, #176]	; (800446c <TIM_Base_SetConfig+0x118>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d023      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <TIM_Base_SetConfig+0x11c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01f      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <TIM_Base_SetConfig+0x120>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01b      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a29      	ldr	r2, [pc, #164]	; (8004478 <TIM_Base_SetConfig+0x124>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d017      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a28      	ldr	r2, [pc, #160]	; (800447c <TIM_Base_SetConfig+0x128>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a27      	ldr	r2, [pc, #156]	; (8004480 <TIM_Base_SetConfig+0x12c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a26      	ldr	r2, [pc, #152]	; (8004484 <TIM_Base_SetConfig+0x130>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a25      	ldr	r2, [pc, #148]	; (8004488 <TIM_Base_SetConfig+0x134>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a24      	ldr	r2, [pc, #144]	; (800448c <TIM_Base_SetConfig+0x138>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a23      	ldr	r2, [pc, #140]	; (8004490 <TIM_Base_SetConfig+0x13c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d108      	bne.n	8004418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0a      	ldr	r2, [pc, #40]	; (8004468 <TIM_Base_SetConfig+0x114>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <TIM_Base_SetConfig+0xf8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <TIM_Base_SetConfig+0x124>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d103      	bne.n	8004454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	615a      	str	r2, [r3, #20]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40010400 	.word	0x40010400
 800447c:	40014000 	.word	0x40014000
 8004480:	40014400 	.word	0x40014400
 8004484:	40014800 	.word	0x40014800
 8004488:	40001800 	.word	0x40001800
 800448c:	40001c00 	.word	0x40001c00
 8004490:	40002000 	.word	0x40002000

08004494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f023 030a 	bic.w	r3, r3, #10
 80044d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0210 	bic.w	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800451c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	031b      	lsls	r3, r3, #12
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800452e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	f043 0307 	orr.w	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	021a      	lsls	r2, r3, #8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	371c      	adds	r7, #28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045dc:	2302      	movs	r3, #2
 80045de:	e05a      	b.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462c:	d01d      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a15      	ldr	r2, [pc, #84]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10c      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40010400 	.word	0x40010400
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40001800 	.word	0x40001800

080046c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e03f      	b.n	800477a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fd fb0e 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f929 	bl	8004984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b08a      	sub	sp, #40	; 0x28
 8004786:	af02      	add	r7, sp, #8
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d17c      	bne.n	800489c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_UART_Transmit+0x2c>
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e075      	b.n	800489e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit+0x3e>
 80047bc:	2302      	movs	r3, #2
 80047be:	e06e      	b.n	800489e <HAL_UART_Transmit+0x11c>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047d6:	f7fd fb83 	bl	8001ee0 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Transmit+0x82>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004814:	e02a      	b.n	800486c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f840 	bl	80048a6 <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e036      	b.n	800489e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e007      	b.n	800485e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1cf      	bne.n	8004816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f810 	bl	80048a6 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e006      	b.n	800489e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b090      	sub	sp, #64	; 0x40
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b6:	e050      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048be:	d04c      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80048c6:	f7fd fb0b 	bl	8001ee0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d241      	bcs.n	800495a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048f6:	637a      	str	r2, [r7, #52]	; 0x34
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e5      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3314      	adds	r3, #20
 8004910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	613b      	str	r3, [r7, #16]
   return(result);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492a:	623a      	str	r2, [r7, #32]
 800492c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	69f9      	ldr	r1, [r7, #28]
 8004930:	6a3a      	ldr	r2, [r7, #32]
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	61bb      	str	r3, [r7, #24]
   return(result);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e5      	bne.n	800490a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e00f      	b.n	800497a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	429a      	cmp	r2, r3
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	429a      	cmp	r2, r3
 8004976:	d09f      	beq.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3740      	adds	r7, #64	; 0x40
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004988:	b0c0      	sub	sp, #256	; 0x100
 800498a:	af00      	add	r7, sp, #0
 800498c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	68d9      	ldr	r1, [r3, #12]
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	ea40 0301 	orr.w	r3, r0, r1
 80049ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049dc:	f021 010c 	bic.w	r1, r1, #12
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ea:	430b      	orrs	r3, r1
 80049ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	6999      	ldr	r1, [r3, #24]
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	ea40 0301 	orr.w	r3, r0, r1
 8004a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b8f      	ldr	r3, [pc, #572]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d005      	beq.n	8004a24 <UART_SetConfig+0xa0>
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b8d      	ldr	r3, [pc, #564]	; (8004c54 <UART_SetConfig+0x2d0>)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d104      	bne.n	8004a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7ff f9ca 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 8004a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a2c:	e003      	b.n	8004a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2e:	f7ff f9b1 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8004a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a40:	f040 810c 	bne.w	8004c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a56:	4622      	mov	r2, r4
 8004a58:	462b      	mov	r3, r5
 8004a5a:	1891      	adds	r1, r2, r2
 8004a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a66:	4621      	mov	r1, r4
 8004a68:	eb12 0801 	adds.w	r8, r2, r1
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	eb43 0901 	adc.w	r9, r3, r1
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a86:	4690      	mov	r8, r2
 8004a88:	4699      	mov	r9, r3
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	eb18 0303 	adds.w	r3, r8, r3
 8004a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a94:	462b      	mov	r3, r5
 8004a96:	eb49 0303 	adc.w	r3, r9, r3
 8004a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	18db      	adds	r3, r3, r3
 8004ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab8:	4613      	mov	r3, r2
 8004aba:	eb42 0303 	adc.w	r3, r2, r3
 8004abe:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ac8:	f7fc f8de 	bl	8000c88 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	011c      	lsls	r4, r3, #4
 8004ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004af4:	415b      	adcs	r3, r3
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004afc:	4641      	mov	r1, r8
 8004afe:	eb12 0a01 	adds.w	sl, r2, r1
 8004b02:	4649      	mov	r1, r9
 8004b04:	eb43 0b01 	adc.w	fp, r3, r1
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b1c:	4692      	mov	sl, r2
 8004b1e:	469b      	mov	fp, r3
 8004b20:	4643      	mov	r3, r8
 8004b22:	eb1a 0303 	adds.w	r3, sl, r3
 8004b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	18db      	adds	r3, r3, r3
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b4e:	4613      	mov	r3, r2
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
 8004b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b5e:	f7fc f893 	bl	8000c88 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2264      	movs	r2, #100	; 0x64
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	1acb      	subs	r3, r1, r3
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b7e:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004b80:	fba3 2302 	umull	r2, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b8c:	441c      	add	r4, r3
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	1851      	adds	r1, r2, r1
 8004bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	414b      	adcs	r3, r1
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bc8:	4659      	mov	r1, fp
 8004bca:	00cb      	lsls	r3, r1, #3
 8004bcc:	4651      	mov	r1, sl
 8004bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	00ca      	lsls	r2, r1, #3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4642      	mov	r2, r8
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be4:	464b      	mov	r3, r9
 8004be6:	460a      	mov	r2, r1
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c04:	460b      	mov	r3, r1
 8004c06:	18db      	adds	r3, r3, r3
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c1a:	f7fc f835 	bl	8000c88 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004c24:	fba3 1302 	umull	r1, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2164      	movs	r1, #100	; 0x64
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	3332      	adds	r3, #50	; 0x32
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 0207 	and.w	r2, r3, #7
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4422      	add	r2, r4
 8004c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c4c:	e106      	b.n	8004e5c <UART_SetConfig+0x4d8>
 8004c4e:	bf00      	nop
 8004c50:	40011000 	.word	0x40011000
 8004c54:	40011400 	.word	0x40011400
 8004c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c6e:	4642      	mov	r2, r8
 8004c70:	464b      	mov	r3, r9
 8004c72:	1891      	adds	r1, r2, r2
 8004c74:	6239      	str	r1, [r7, #32]
 8004c76:	415b      	adcs	r3, r3
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c7e:	4641      	mov	r1, r8
 8004c80:	1854      	adds	r4, r2, r1
 8004c82:	4649      	mov	r1, r9
 8004c84:	eb43 0501 	adc.w	r5, r3, r1
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	00eb      	lsls	r3, r5, #3
 8004c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c96:	00e2      	lsls	r2, r4, #3
 8004c98:	4614      	mov	r4, r2
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	4643      	mov	r3, r8
 8004c9e:	18e3      	adds	r3, r4, r3
 8004ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	eb45 0303 	adc.w	r3, r5, r3
 8004caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cca:	4629      	mov	r1, r5
 8004ccc:	008b      	lsls	r3, r1, #2
 8004cce:	4621      	mov	r1, r4
 8004cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	008a      	lsls	r2, r1, #2
 8004cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cdc:	f7fb ffd4 	bl	8000c88 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	011c      	lsls	r4, r3, #4
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	1891      	adds	r1, r2, r2
 8004d06:	61b9      	str	r1, [r7, #24]
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d10:	4641      	mov	r1, r8
 8004d12:	1851      	adds	r1, r2, r1
 8004d14:	6139      	str	r1, [r7, #16]
 8004d16:	4649      	mov	r1, r9
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d28:	4659      	mov	r1, fp
 8004d2a:	00cb      	lsls	r3, r1, #3
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d32:	4651      	mov	r1, sl
 8004d34:	00ca      	lsls	r2, r1, #3
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d44:	464b      	mov	r3, r9
 8004d46:	460a      	mov	r2, r1
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d68:	4649      	mov	r1, r9
 8004d6a:	008b      	lsls	r3, r1, #2
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d72:	4641      	mov	r1, r8
 8004d74:	008a      	lsls	r2, r1, #2
 8004d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d7a:	f7fb ff85 	bl	8000c88 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004d86:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2264      	movs	r2, #100	; 0x64
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	1acb      	subs	r3, r1, r3
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	3332      	adds	r3, #50	; 0x32
 8004d98:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da4:	441c      	add	r4, r3
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	673b      	str	r3, [r7, #112]	; 0x70
 8004dae:	677a      	str	r2, [r7, #116]	; 0x74
 8004db0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	1891      	adds	r1, r2, r2
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	415b      	adcs	r3, r3
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	1851      	adds	r1, r2, r1
 8004dc8:	6039      	str	r1, [r7, #0]
 8004dca:	4649      	mov	r1, r9
 8004dcc:	414b      	adcs	r3, r1
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ddc:	4659      	mov	r1, fp
 8004dde:	00cb      	lsls	r3, r1, #3
 8004de0:	4651      	mov	r1, sl
 8004de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de6:	4651      	mov	r1, sl
 8004de8:	00ca      	lsls	r2, r1, #3
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	4642      	mov	r2, r8
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004df6:	464b      	mov	r3, r9
 8004df8:	460a      	mov	r2, r1
 8004dfa:	eb42 0303 	adc.w	r3, r2, r3
 8004dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e18:	4649      	mov	r1, r9
 8004e1a:	008b      	lsls	r3, r1, #2
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e22:	4641      	mov	r1, r8
 8004e24:	008a      	lsls	r2, r1, #2
 8004e26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e2a:	f7fb ff2d 	bl	8000c88 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	; 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	3332      	adds	r3, #50	; 0x32
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4422      	add	r2, r4
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e62:	46bd      	mov	sp, r7
 8004e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e68:	51eb851f 	.word	0x51eb851f

08004e6c <__cvt>:
 8004e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	ec55 4b10 	vmov	r4, r5, d0
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	460e      	mov	r6, r1
 8004e78:	4619      	mov	r1, r3
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	bfbb      	ittet	lt
 8004e7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e82:	461d      	movlt	r5, r3
 8004e84:	2300      	movge	r3, #0
 8004e86:	232d      	movlt	r3, #45	; 0x2d
 8004e88:	700b      	strb	r3, [r1, #0]
 8004e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e90:	4691      	mov	r9, r2
 8004e92:	f023 0820 	bic.w	r8, r3, #32
 8004e96:	bfbc      	itt	lt
 8004e98:	4622      	movlt	r2, r4
 8004e9a:	4614      	movlt	r4, r2
 8004e9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ea0:	d005      	beq.n	8004eae <__cvt+0x42>
 8004ea2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ea6:	d100      	bne.n	8004eaa <__cvt+0x3e>
 8004ea8:	3601      	adds	r6, #1
 8004eaa:	2102      	movs	r1, #2
 8004eac:	e000      	b.n	8004eb0 <__cvt+0x44>
 8004eae:	2103      	movs	r1, #3
 8004eb0:	ab03      	add	r3, sp, #12
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	ab02      	add	r3, sp, #8
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	ec45 4b10 	vmov	d0, r4, r5
 8004ebc:	4653      	mov	r3, sl
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	f001 feb6 	bl	8006c30 <_dtoa_r>
 8004ec4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ec8:	4607      	mov	r7, r0
 8004eca:	d102      	bne.n	8004ed2 <__cvt+0x66>
 8004ecc:	f019 0f01 	tst.w	r9, #1
 8004ed0:	d022      	beq.n	8004f18 <__cvt+0xac>
 8004ed2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ed6:	eb07 0906 	add.w	r9, r7, r6
 8004eda:	d110      	bne.n	8004efe <__cvt+0x92>
 8004edc:	783b      	ldrb	r3, [r7, #0]
 8004ede:	2b30      	cmp	r3, #48	; 0x30
 8004ee0:	d10a      	bne.n	8004ef8 <__cvt+0x8c>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb fded 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eee:	b918      	cbnz	r0, 8004ef8 <__cvt+0x8c>
 8004ef0:	f1c6 0601 	rsb	r6, r6, #1
 8004ef4:	f8ca 6000 	str.w	r6, [sl]
 8004ef8:	f8da 3000 	ldr.w	r3, [sl]
 8004efc:	4499      	add	r9, r3
 8004efe:	2200      	movs	r2, #0
 8004f00:	2300      	movs	r3, #0
 8004f02:	4620      	mov	r0, r4
 8004f04:	4629      	mov	r1, r5
 8004f06:	f7fb fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f0a:	b108      	cbz	r0, 8004f10 <__cvt+0xa4>
 8004f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f10:	2230      	movs	r2, #48	; 0x30
 8004f12:	9b03      	ldr	r3, [sp, #12]
 8004f14:	454b      	cmp	r3, r9
 8004f16:	d307      	bcc.n	8004f28 <__cvt+0xbc>
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f1c:	1bdb      	subs	r3, r3, r7
 8004f1e:	4638      	mov	r0, r7
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	b004      	add	sp, #16
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	1c59      	adds	r1, r3, #1
 8004f2a:	9103      	str	r1, [sp, #12]
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e7f0      	b.n	8004f12 <__cvt+0xa6>

08004f30 <__exponent>:
 8004f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f32:	4603      	mov	r3, r0
 8004f34:	2900      	cmp	r1, #0
 8004f36:	bfb8      	it	lt
 8004f38:	4249      	neglt	r1, r1
 8004f3a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f3e:	bfb4      	ite	lt
 8004f40:	222d      	movlt	r2, #45	; 0x2d
 8004f42:	222b      	movge	r2, #43	; 0x2b
 8004f44:	2909      	cmp	r1, #9
 8004f46:	7042      	strb	r2, [r0, #1]
 8004f48:	dd2a      	ble.n	8004fa0 <__exponent+0x70>
 8004f4a:	f10d 0207 	add.w	r2, sp, #7
 8004f4e:	4617      	mov	r7, r2
 8004f50:	260a      	movs	r6, #10
 8004f52:	4694      	mov	ip, r2
 8004f54:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f58:	fb06 1415 	mls	r4, r6, r5, r1
 8004f5c:	3430      	adds	r4, #48	; 0x30
 8004f5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f62:	460c      	mov	r4, r1
 8004f64:	2c63      	cmp	r4, #99	; 0x63
 8004f66:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	dcf1      	bgt.n	8004f52 <__exponent+0x22>
 8004f6e:	3130      	adds	r1, #48	; 0x30
 8004f70:	f1ac 0402 	sub.w	r4, ip, #2
 8004f74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f78:	1c41      	adds	r1, r0, #1
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	42ba      	cmp	r2, r7
 8004f7e:	d30a      	bcc.n	8004f96 <__exponent+0x66>
 8004f80:	f10d 0209 	add.w	r2, sp, #9
 8004f84:	eba2 020c 	sub.w	r2, r2, ip
 8004f88:	42bc      	cmp	r4, r7
 8004f8a:	bf88      	it	hi
 8004f8c:	2200      	movhi	r2, #0
 8004f8e:	4413      	add	r3, r2
 8004f90:	1a18      	subs	r0, r3, r0
 8004f92:	b003      	add	sp, #12
 8004f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f96:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f9e:	e7ed      	b.n	8004f7c <__exponent+0x4c>
 8004fa0:	2330      	movs	r3, #48	; 0x30
 8004fa2:	3130      	adds	r1, #48	; 0x30
 8004fa4:	7083      	strb	r3, [r0, #2]
 8004fa6:	70c1      	strb	r1, [r0, #3]
 8004fa8:	1d03      	adds	r3, r0, #4
 8004faa:	e7f1      	b.n	8004f90 <__exponent+0x60>

08004fac <_printf_float>:
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	ed2d 8b02 	vpush	{d8}
 8004fb4:	b08d      	sub	sp, #52	; 0x34
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fbc:	4616      	mov	r6, r2
 8004fbe:	461f      	mov	r7, r3
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	f001 fd5d 	bl	8006a80 <_localeconv_r>
 8004fc6:	f8d0 a000 	ldr.w	sl, [r0]
 8004fca:	4650      	mov	r0, sl
 8004fcc:	f7fb f950 	bl	8000270 <strlen>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	9305      	str	r3, [sp, #20]
 8004fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fe0:	3307      	adds	r3, #7
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	f103 0208 	add.w	r2, r3, #8
 8004fea:	f8c8 2000 	str.w	r2, [r8]
 8004fee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ff2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ff6:	9307      	str	r3, [sp, #28]
 8004ff8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ffc:	ee08 0a10 	vmov	s16, r0
 8005000:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005008:	4b9e      	ldr	r3, [pc, #632]	; (8005284 <_printf_float+0x2d8>)
 800500a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800500e:	f7fb fd8d 	bl	8000b2c <__aeabi_dcmpun>
 8005012:	bb88      	cbnz	r0, 8005078 <_printf_float+0xcc>
 8005014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005018:	4b9a      	ldr	r3, [pc, #616]	; (8005284 <_printf_float+0x2d8>)
 800501a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800501e:	f7fb fd67 	bl	8000af0 <__aeabi_dcmple>
 8005022:	bb48      	cbnz	r0, 8005078 <_printf_float+0xcc>
 8005024:	2200      	movs	r2, #0
 8005026:	2300      	movs	r3, #0
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb fd56 	bl	8000adc <__aeabi_dcmplt>
 8005030:	b110      	cbz	r0, 8005038 <_printf_float+0x8c>
 8005032:	232d      	movs	r3, #45	; 0x2d
 8005034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005038:	4a93      	ldr	r2, [pc, #588]	; (8005288 <_printf_float+0x2dc>)
 800503a:	4b94      	ldr	r3, [pc, #592]	; (800528c <_printf_float+0x2e0>)
 800503c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005040:	bf94      	ite	ls
 8005042:	4690      	movls	r8, r2
 8005044:	4698      	movhi	r8, r3
 8005046:	2303      	movs	r3, #3
 8005048:	6123      	str	r3, [r4, #16]
 800504a:	9b05      	ldr	r3, [sp, #20]
 800504c:	f023 0304 	bic.w	r3, r3, #4
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	f04f 0900 	mov.w	r9, #0
 8005056:	9700      	str	r7, [sp, #0]
 8005058:	4633      	mov	r3, r6
 800505a:	aa0b      	add	r2, sp, #44	; 0x2c
 800505c:	4621      	mov	r1, r4
 800505e:	4628      	mov	r0, r5
 8005060:	f000 f9da 	bl	8005418 <_printf_common>
 8005064:	3001      	adds	r0, #1
 8005066:	f040 8090 	bne.w	800518a <_printf_float+0x1de>
 800506a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800506e:	b00d      	add	sp, #52	; 0x34
 8005070:	ecbd 8b02 	vpop	{d8}
 8005074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	4640      	mov	r0, r8
 800507e:	4649      	mov	r1, r9
 8005080:	f7fb fd54 	bl	8000b2c <__aeabi_dcmpun>
 8005084:	b140      	cbz	r0, 8005098 <_printf_float+0xec>
 8005086:	464b      	mov	r3, r9
 8005088:	2b00      	cmp	r3, #0
 800508a:	bfbc      	itt	lt
 800508c:	232d      	movlt	r3, #45	; 0x2d
 800508e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005092:	4a7f      	ldr	r2, [pc, #508]	; (8005290 <_printf_float+0x2e4>)
 8005094:	4b7f      	ldr	r3, [pc, #508]	; (8005294 <_printf_float+0x2e8>)
 8005096:	e7d1      	b.n	800503c <_printf_float+0x90>
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800509e:	9206      	str	r2, [sp, #24]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	d13f      	bne.n	8005124 <_printf_float+0x178>
 80050a4:	2306      	movs	r3, #6
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	9b05      	ldr	r3, [sp, #20]
 80050aa:	6861      	ldr	r1, [r4, #4]
 80050ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050b0:	2300      	movs	r3, #0
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	ab0a      	add	r3, sp, #40	; 0x28
 80050b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050ba:	ab09      	add	r3, sp, #36	; 0x24
 80050bc:	ec49 8b10 	vmov	d0, r8, r9
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050c8:	4628      	mov	r0, r5
 80050ca:	f7ff fecf 	bl	8004e6c <__cvt>
 80050ce:	9b06      	ldr	r3, [sp, #24]
 80050d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050d2:	2b47      	cmp	r3, #71	; 0x47
 80050d4:	4680      	mov	r8, r0
 80050d6:	d108      	bne.n	80050ea <_printf_float+0x13e>
 80050d8:	1cc8      	adds	r0, r1, #3
 80050da:	db02      	blt.n	80050e2 <_printf_float+0x136>
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	4299      	cmp	r1, r3
 80050e0:	dd41      	ble.n	8005166 <_printf_float+0x1ba>
 80050e2:	f1ab 0302 	sub.w	r3, fp, #2
 80050e6:	fa5f fb83 	uxtb.w	fp, r3
 80050ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050ee:	d820      	bhi.n	8005132 <_printf_float+0x186>
 80050f0:	3901      	subs	r1, #1
 80050f2:	465a      	mov	r2, fp
 80050f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050f8:	9109      	str	r1, [sp, #36]	; 0x24
 80050fa:	f7ff ff19 	bl	8004f30 <__exponent>
 80050fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005100:	1813      	adds	r3, r2, r0
 8005102:	2a01      	cmp	r2, #1
 8005104:	4681      	mov	r9, r0
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	dc02      	bgt.n	8005110 <_printf_float+0x164>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	07d2      	lsls	r2, r2, #31
 800510e:	d501      	bpl.n	8005114 <_printf_float+0x168>
 8005110:	3301      	adds	r3, #1
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005118:	2b00      	cmp	r3, #0
 800511a:	d09c      	beq.n	8005056 <_printf_float+0xaa>
 800511c:	232d      	movs	r3, #45	; 0x2d
 800511e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005122:	e798      	b.n	8005056 <_printf_float+0xaa>
 8005124:	9a06      	ldr	r2, [sp, #24]
 8005126:	2a47      	cmp	r2, #71	; 0x47
 8005128:	d1be      	bne.n	80050a8 <_printf_float+0xfc>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1bc      	bne.n	80050a8 <_printf_float+0xfc>
 800512e:	2301      	movs	r3, #1
 8005130:	e7b9      	b.n	80050a6 <_printf_float+0xfa>
 8005132:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005136:	d118      	bne.n	800516a <_printf_float+0x1be>
 8005138:	2900      	cmp	r1, #0
 800513a:	6863      	ldr	r3, [r4, #4]
 800513c:	dd0b      	ble.n	8005156 <_printf_float+0x1aa>
 800513e:	6121      	str	r1, [r4, #16]
 8005140:	b913      	cbnz	r3, 8005148 <_printf_float+0x19c>
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	07d0      	lsls	r0, r2, #31
 8005146:	d502      	bpl.n	800514e <_printf_float+0x1a2>
 8005148:	3301      	adds	r3, #1
 800514a:	440b      	add	r3, r1
 800514c:	6123      	str	r3, [r4, #16]
 800514e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005150:	f04f 0900 	mov.w	r9, #0
 8005154:	e7de      	b.n	8005114 <_printf_float+0x168>
 8005156:	b913      	cbnz	r3, 800515e <_printf_float+0x1b2>
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	07d2      	lsls	r2, r2, #31
 800515c:	d501      	bpl.n	8005162 <_printf_float+0x1b6>
 800515e:	3302      	adds	r3, #2
 8005160:	e7f4      	b.n	800514c <_printf_float+0x1a0>
 8005162:	2301      	movs	r3, #1
 8005164:	e7f2      	b.n	800514c <_printf_float+0x1a0>
 8005166:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800516a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516c:	4299      	cmp	r1, r3
 800516e:	db05      	blt.n	800517c <_printf_float+0x1d0>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	6121      	str	r1, [r4, #16]
 8005174:	07d8      	lsls	r0, r3, #31
 8005176:	d5ea      	bpl.n	800514e <_printf_float+0x1a2>
 8005178:	1c4b      	adds	r3, r1, #1
 800517a:	e7e7      	b.n	800514c <_printf_float+0x1a0>
 800517c:	2900      	cmp	r1, #0
 800517e:	bfd4      	ite	le
 8005180:	f1c1 0202 	rsble	r2, r1, #2
 8005184:	2201      	movgt	r2, #1
 8005186:	4413      	add	r3, r2
 8005188:	e7e0      	b.n	800514c <_printf_float+0x1a0>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	055a      	lsls	r2, r3, #21
 800518e:	d407      	bmi.n	80051a0 <_printf_float+0x1f4>
 8005190:	6923      	ldr	r3, [r4, #16]
 8005192:	4642      	mov	r2, r8
 8005194:	4631      	mov	r1, r6
 8005196:	4628      	mov	r0, r5
 8005198:	47b8      	blx	r7
 800519a:	3001      	adds	r0, #1
 800519c:	d12c      	bne.n	80051f8 <_printf_float+0x24c>
 800519e:	e764      	b.n	800506a <_printf_float+0xbe>
 80051a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051a4:	f240 80e0 	bls.w	8005368 <_printf_float+0x3bc>
 80051a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051ac:	2200      	movs	r2, #0
 80051ae:	2300      	movs	r3, #0
 80051b0:	f7fb fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d034      	beq.n	8005222 <_printf_float+0x276>
 80051b8:	4a37      	ldr	r2, [pc, #220]	; (8005298 <_printf_float+0x2ec>)
 80051ba:	2301      	movs	r3, #1
 80051bc:	4631      	mov	r1, r6
 80051be:	4628      	mov	r0, r5
 80051c0:	47b8      	blx	r7
 80051c2:	3001      	adds	r0, #1
 80051c4:	f43f af51 	beq.w	800506a <_printf_float+0xbe>
 80051c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051cc:	429a      	cmp	r2, r3
 80051ce:	db02      	blt.n	80051d6 <_printf_float+0x22a>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	07d8      	lsls	r0, r3, #31
 80051d4:	d510      	bpl.n	80051f8 <_printf_float+0x24c>
 80051d6:	ee18 3a10 	vmov	r3, s16
 80051da:	4652      	mov	r2, sl
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	f43f af41 	beq.w	800506a <_printf_float+0xbe>
 80051e8:	f04f 0800 	mov.w	r8, #0
 80051ec:	f104 091a 	add.w	r9, r4, #26
 80051f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f2:	3b01      	subs	r3, #1
 80051f4:	4543      	cmp	r3, r8
 80051f6:	dc09      	bgt.n	800520c <_printf_float+0x260>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	079b      	lsls	r3, r3, #30
 80051fc:	f100 8107 	bmi.w	800540e <_printf_float+0x462>
 8005200:	68e0      	ldr	r0, [r4, #12]
 8005202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005204:	4298      	cmp	r0, r3
 8005206:	bfb8      	it	lt
 8005208:	4618      	movlt	r0, r3
 800520a:	e730      	b.n	800506e <_printf_float+0xc2>
 800520c:	2301      	movs	r3, #1
 800520e:	464a      	mov	r2, r9
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af27 	beq.w	800506a <_printf_float+0xbe>
 800521c:	f108 0801 	add.w	r8, r8, #1
 8005220:	e7e6      	b.n	80051f0 <_printf_float+0x244>
 8005222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	dc39      	bgt.n	800529c <_printf_float+0x2f0>
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <_printf_float+0x2ec>)
 800522a:	2301      	movs	r3, #1
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f43f af19 	beq.w	800506a <_printf_float+0xbe>
 8005238:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800523c:	4313      	orrs	r3, r2
 800523e:	d102      	bne.n	8005246 <_printf_float+0x29a>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	07d9      	lsls	r1, r3, #31
 8005244:	d5d8      	bpl.n	80051f8 <_printf_float+0x24c>
 8005246:	ee18 3a10 	vmov	r3, s16
 800524a:	4652      	mov	r2, sl
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f af09 	beq.w	800506a <_printf_float+0xbe>
 8005258:	f04f 0900 	mov.w	r9, #0
 800525c:	f104 0a1a 	add.w	sl, r4, #26
 8005260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005262:	425b      	negs	r3, r3
 8005264:	454b      	cmp	r3, r9
 8005266:	dc01      	bgt.n	800526c <_printf_float+0x2c0>
 8005268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526a:	e792      	b.n	8005192 <_printf_float+0x1e6>
 800526c:	2301      	movs	r3, #1
 800526e:	4652      	mov	r2, sl
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f aef7 	beq.w	800506a <_printf_float+0xbe>
 800527c:	f109 0901 	add.w	r9, r9, #1
 8005280:	e7ee      	b.n	8005260 <_printf_float+0x2b4>
 8005282:	bf00      	nop
 8005284:	7fefffff 	.word	0x7fefffff
 8005288:	080096ec 	.word	0x080096ec
 800528c:	080096f0 	.word	0x080096f0
 8005290:	080096f4 	.word	0x080096f4
 8005294:	080096f8 	.word	0x080096f8
 8005298:	080096fc 	.word	0x080096fc
 800529c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800529e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052a0:	429a      	cmp	r2, r3
 80052a2:	bfa8      	it	ge
 80052a4:	461a      	movge	r2, r3
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	4691      	mov	r9, r2
 80052aa:	dc37      	bgt.n	800531c <_printf_float+0x370>
 80052ac:	f04f 0b00 	mov.w	fp, #0
 80052b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052b4:	f104 021a 	add.w	r2, r4, #26
 80052b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	eba3 0309 	sub.w	r3, r3, r9
 80052c0:	455b      	cmp	r3, fp
 80052c2:	dc33      	bgt.n	800532c <_printf_float+0x380>
 80052c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052c8:	429a      	cmp	r2, r3
 80052ca:	db3b      	blt.n	8005344 <_printf_float+0x398>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	07da      	lsls	r2, r3, #31
 80052d0:	d438      	bmi.n	8005344 <_printf_float+0x398>
 80052d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80052d6:	eba2 0903 	sub.w	r9, r2, r3
 80052da:	9b05      	ldr	r3, [sp, #20]
 80052dc:	1ad2      	subs	r2, r2, r3
 80052de:	4591      	cmp	r9, r2
 80052e0:	bfa8      	it	ge
 80052e2:	4691      	movge	r9, r2
 80052e4:	f1b9 0f00 	cmp.w	r9, #0
 80052e8:	dc35      	bgt.n	8005356 <_printf_float+0x3aa>
 80052ea:	f04f 0800 	mov.w	r8, #0
 80052ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052f2:	f104 0a1a 	add.w	sl, r4, #26
 80052f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	eba3 0309 	sub.w	r3, r3, r9
 8005300:	4543      	cmp	r3, r8
 8005302:	f77f af79 	ble.w	80051f8 <_printf_float+0x24c>
 8005306:	2301      	movs	r3, #1
 8005308:	4652      	mov	r2, sl
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	f43f aeaa 	beq.w	800506a <_printf_float+0xbe>
 8005316:	f108 0801 	add.w	r8, r8, #1
 800531a:	e7ec      	b.n	80052f6 <_printf_float+0x34a>
 800531c:	4613      	mov	r3, r2
 800531e:	4631      	mov	r1, r6
 8005320:	4642      	mov	r2, r8
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	d1c0      	bne.n	80052ac <_printf_float+0x300>
 800532a:	e69e      	b.n	800506a <_printf_float+0xbe>
 800532c:	2301      	movs	r3, #1
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	9205      	str	r2, [sp, #20]
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	f43f ae97 	beq.w	800506a <_printf_float+0xbe>
 800533c:	9a05      	ldr	r2, [sp, #20]
 800533e:	f10b 0b01 	add.w	fp, fp, #1
 8005342:	e7b9      	b.n	80052b8 <_printf_float+0x30c>
 8005344:	ee18 3a10 	vmov	r3, s16
 8005348:	4652      	mov	r2, sl
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	d1be      	bne.n	80052d2 <_printf_float+0x326>
 8005354:	e689      	b.n	800506a <_printf_float+0xbe>
 8005356:	9a05      	ldr	r2, [sp, #20]
 8005358:	464b      	mov	r3, r9
 800535a:	4442      	add	r2, r8
 800535c:	4631      	mov	r1, r6
 800535e:	4628      	mov	r0, r5
 8005360:	47b8      	blx	r7
 8005362:	3001      	adds	r0, #1
 8005364:	d1c1      	bne.n	80052ea <_printf_float+0x33e>
 8005366:	e680      	b.n	800506a <_printf_float+0xbe>
 8005368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800536a:	2a01      	cmp	r2, #1
 800536c:	dc01      	bgt.n	8005372 <_printf_float+0x3c6>
 800536e:	07db      	lsls	r3, r3, #31
 8005370:	d53a      	bpl.n	80053e8 <_printf_float+0x43c>
 8005372:	2301      	movs	r3, #1
 8005374:	4642      	mov	r2, r8
 8005376:	4631      	mov	r1, r6
 8005378:	4628      	mov	r0, r5
 800537a:	47b8      	blx	r7
 800537c:	3001      	adds	r0, #1
 800537e:	f43f ae74 	beq.w	800506a <_printf_float+0xbe>
 8005382:	ee18 3a10 	vmov	r3, s16
 8005386:	4652      	mov	r2, sl
 8005388:	4631      	mov	r1, r6
 800538a:	4628      	mov	r0, r5
 800538c:	47b8      	blx	r7
 800538e:	3001      	adds	r0, #1
 8005390:	f43f ae6b 	beq.w	800506a <_printf_float+0xbe>
 8005394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005398:	2200      	movs	r2, #0
 800539a:	2300      	movs	r3, #0
 800539c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80053a0:	f7fb fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80053a4:	b9d8      	cbnz	r0, 80053de <_printf_float+0x432>
 80053a6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80053aa:	f108 0201 	add.w	r2, r8, #1
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	d10e      	bne.n	80053d6 <_printf_float+0x42a>
 80053b8:	e657      	b.n	800506a <_printf_float+0xbe>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4652      	mov	r2, sl
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f ae50 	beq.w	800506a <_printf_float+0xbe>
 80053ca:	f108 0801 	add.w	r8, r8, #1
 80053ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d0:	3b01      	subs	r3, #1
 80053d2:	4543      	cmp	r3, r8
 80053d4:	dcf1      	bgt.n	80053ba <_printf_float+0x40e>
 80053d6:	464b      	mov	r3, r9
 80053d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053dc:	e6da      	b.n	8005194 <_printf_float+0x1e8>
 80053de:	f04f 0800 	mov.w	r8, #0
 80053e2:	f104 0a1a 	add.w	sl, r4, #26
 80053e6:	e7f2      	b.n	80053ce <_printf_float+0x422>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4642      	mov	r2, r8
 80053ec:	e7df      	b.n	80053ae <_printf_float+0x402>
 80053ee:	2301      	movs	r3, #1
 80053f0:	464a      	mov	r2, r9
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	f43f ae36 	beq.w	800506a <_printf_float+0xbe>
 80053fe:	f108 0801 	add.w	r8, r8, #1
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005406:	1a5b      	subs	r3, r3, r1
 8005408:	4543      	cmp	r3, r8
 800540a:	dcf0      	bgt.n	80053ee <_printf_float+0x442>
 800540c:	e6f8      	b.n	8005200 <_printf_float+0x254>
 800540e:	f04f 0800 	mov.w	r8, #0
 8005412:	f104 0919 	add.w	r9, r4, #25
 8005416:	e7f4      	b.n	8005402 <_printf_float+0x456>

08005418 <_printf_common>:
 8005418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	4616      	mov	r6, r2
 800541e:	4699      	mov	r9, r3
 8005420:	688a      	ldr	r2, [r1, #8]
 8005422:	690b      	ldr	r3, [r1, #16]
 8005424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005428:	4293      	cmp	r3, r2
 800542a:	bfb8      	it	lt
 800542c:	4613      	movlt	r3, r2
 800542e:	6033      	str	r3, [r6, #0]
 8005430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005434:	4607      	mov	r7, r0
 8005436:	460c      	mov	r4, r1
 8005438:	b10a      	cbz	r2, 800543e <_printf_common+0x26>
 800543a:	3301      	adds	r3, #1
 800543c:	6033      	str	r3, [r6, #0]
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	0699      	lsls	r1, r3, #26
 8005442:	bf42      	ittt	mi
 8005444:	6833      	ldrmi	r3, [r6, #0]
 8005446:	3302      	addmi	r3, #2
 8005448:	6033      	strmi	r3, [r6, #0]
 800544a:	6825      	ldr	r5, [r4, #0]
 800544c:	f015 0506 	ands.w	r5, r5, #6
 8005450:	d106      	bne.n	8005460 <_printf_common+0x48>
 8005452:	f104 0a19 	add.w	sl, r4, #25
 8005456:	68e3      	ldr	r3, [r4, #12]
 8005458:	6832      	ldr	r2, [r6, #0]
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	42ab      	cmp	r3, r5
 800545e:	dc26      	bgt.n	80054ae <_printf_common+0x96>
 8005460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005464:	1e13      	subs	r3, r2, #0
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	bf18      	it	ne
 800546a:	2301      	movne	r3, #1
 800546c:	0692      	lsls	r2, r2, #26
 800546e:	d42b      	bmi.n	80054c8 <_printf_common+0xb0>
 8005470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005474:	4649      	mov	r1, r9
 8005476:	4638      	mov	r0, r7
 8005478:	47c0      	blx	r8
 800547a:	3001      	adds	r0, #1
 800547c:	d01e      	beq.n	80054bc <_printf_common+0xa4>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	6922      	ldr	r2, [r4, #16]
 8005482:	f003 0306 	and.w	r3, r3, #6
 8005486:	2b04      	cmp	r3, #4
 8005488:	bf02      	ittt	eq
 800548a:	68e5      	ldreq	r5, [r4, #12]
 800548c:	6833      	ldreq	r3, [r6, #0]
 800548e:	1aed      	subeq	r5, r5, r3
 8005490:	68a3      	ldr	r3, [r4, #8]
 8005492:	bf0c      	ite	eq
 8005494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005498:	2500      	movne	r5, #0
 800549a:	4293      	cmp	r3, r2
 800549c:	bfc4      	itt	gt
 800549e:	1a9b      	subgt	r3, r3, r2
 80054a0:	18ed      	addgt	r5, r5, r3
 80054a2:	2600      	movs	r6, #0
 80054a4:	341a      	adds	r4, #26
 80054a6:	42b5      	cmp	r5, r6
 80054a8:	d11a      	bne.n	80054e0 <_printf_common+0xc8>
 80054aa:	2000      	movs	r0, #0
 80054ac:	e008      	b.n	80054c0 <_printf_common+0xa8>
 80054ae:	2301      	movs	r3, #1
 80054b0:	4652      	mov	r2, sl
 80054b2:	4649      	mov	r1, r9
 80054b4:	4638      	mov	r0, r7
 80054b6:	47c0      	blx	r8
 80054b8:	3001      	adds	r0, #1
 80054ba:	d103      	bne.n	80054c4 <_printf_common+0xac>
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c4:	3501      	adds	r5, #1
 80054c6:	e7c6      	b.n	8005456 <_printf_common+0x3e>
 80054c8:	18e1      	adds	r1, r4, r3
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	2030      	movs	r0, #48	; 0x30
 80054ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054d2:	4422      	add	r2, r4
 80054d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054dc:	3302      	adds	r3, #2
 80054de:	e7c7      	b.n	8005470 <_printf_common+0x58>
 80054e0:	2301      	movs	r3, #1
 80054e2:	4622      	mov	r2, r4
 80054e4:	4649      	mov	r1, r9
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c0      	blx	r8
 80054ea:	3001      	adds	r0, #1
 80054ec:	d0e6      	beq.n	80054bc <_printf_common+0xa4>
 80054ee:	3601      	adds	r6, #1
 80054f0:	e7d9      	b.n	80054a6 <_printf_common+0x8e>
	...

080054f4 <_printf_i>:
 80054f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054f8:	7e0f      	ldrb	r7, [r1, #24]
 80054fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054fc:	2f78      	cmp	r7, #120	; 0x78
 80054fe:	4691      	mov	r9, r2
 8005500:	4680      	mov	r8, r0
 8005502:	460c      	mov	r4, r1
 8005504:	469a      	mov	sl, r3
 8005506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800550a:	d807      	bhi.n	800551c <_printf_i+0x28>
 800550c:	2f62      	cmp	r7, #98	; 0x62
 800550e:	d80a      	bhi.n	8005526 <_printf_i+0x32>
 8005510:	2f00      	cmp	r7, #0
 8005512:	f000 80d4 	beq.w	80056be <_printf_i+0x1ca>
 8005516:	2f58      	cmp	r7, #88	; 0x58
 8005518:	f000 80c0 	beq.w	800569c <_printf_i+0x1a8>
 800551c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005524:	e03a      	b.n	800559c <_printf_i+0xa8>
 8005526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800552a:	2b15      	cmp	r3, #21
 800552c:	d8f6      	bhi.n	800551c <_printf_i+0x28>
 800552e:	a101      	add	r1, pc, #4	; (adr r1, 8005534 <_printf_i+0x40>)
 8005530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005534:	0800558d 	.word	0x0800558d
 8005538:	080055a1 	.word	0x080055a1
 800553c:	0800551d 	.word	0x0800551d
 8005540:	0800551d 	.word	0x0800551d
 8005544:	0800551d 	.word	0x0800551d
 8005548:	0800551d 	.word	0x0800551d
 800554c:	080055a1 	.word	0x080055a1
 8005550:	0800551d 	.word	0x0800551d
 8005554:	0800551d 	.word	0x0800551d
 8005558:	0800551d 	.word	0x0800551d
 800555c:	0800551d 	.word	0x0800551d
 8005560:	080056a5 	.word	0x080056a5
 8005564:	080055cd 	.word	0x080055cd
 8005568:	0800565f 	.word	0x0800565f
 800556c:	0800551d 	.word	0x0800551d
 8005570:	0800551d 	.word	0x0800551d
 8005574:	080056c7 	.word	0x080056c7
 8005578:	0800551d 	.word	0x0800551d
 800557c:	080055cd 	.word	0x080055cd
 8005580:	0800551d 	.word	0x0800551d
 8005584:	0800551d 	.word	0x0800551d
 8005588:	08005667 	.word	0x08005667
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	1d1a      	adds	r2, r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	602a      	str	r2, [r5, #0]
 8005594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800559c:	2301      	movs	r3, #1
 800559e:	e09f      	b.n	80056e0 <_printf_i+0x1ec>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	682b      	ldr	r3, [r5, #0]
 80055a4:	0607      	lsls	r7, r0, #24
 80055a6:	f103 0104 	add.w	r1, r3, #4
 80055aa:	6029      	str	r1, [r5, #0]
 80055ac:	d501      	bpl.n	80055b2 <_printf_i+0xbe>
 80055ae:	681e      	ldr	r6, [r3, #0]
 80055b0:	e003      	b.n	80055ba <_printf_i+0xc6>
 80055b2:	0646      	lsls	r6, r0, #25
 80055b4:	d5fb      	bpl.n	80055ae <_printf_i+0xba>
 80055b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055ba:	2e00      	cmp	r6, #0
 80055bc:	da03      	bge.n	80055c6 <_printf_i+0xd2>
 80055be:	232d      	movs	r3, #45	; 0x2d
 80055c0:	4276      	negs	r6, r6
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c6:	485a      	ldr	r0, [pc, #360]	; (8005730 <_printf_i+0x23c>)
 80055c8:	230a      	movs	r3, #10
 80055ca:	e012      	b.n	80055f2 <_printf_i+0xfe>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	1d19      	adds	r1, r3, #4
 80055d2:	6029      	str	r1, [r5, #0]
 80055d4:	0605      	lsls	r5, r0, #24
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0xe8>
 80055d8:	681e      	ldr	r6, [r3, #0]
 80055da:	e002      	b.n	80055e2 <_printf_i+0xee>
 80055dc:	0641      	lsls	r1, r0, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0xe4>
 80055e0:	881e      	ldrh	r6, [r3, #0]
 80055e2:	4853      	ldr	r0, [pc, #332]	; (8005730 <_printf_i+0x23c>)
 80055e4:	2f6f      	cmp	r7, #111	; 0x6f
 80055e6:	bf0c      	ite	eq
 80055e8:	2308      	moveq	r3, #8
 80055ea:	230a      	movne	r3, #10
 80055ec:	2100      	movs	r1, #0
 80055ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055f2:	6865      	ldr	r5, [r4, #4]
 80055f4:	60a5      	str	r5, [r4, #8]
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	bfa2      	ittt	ge
 80055fa:	6821      	ldrge	r1, [r4, #0]
 80055fc:	f021 0104 	bicge.w	r1, r1, #4
 8005600:	6021      	strge	r1, [r4, #0]
 8005602:	b90e      	cbnz	r6, 8005608 <_printf_i+0x114>
 8005604:	2d00      	cmp	r5, #0
 8005606:	d04b      	beq.n	80056a0 <_printf_i+0x1ac>
 8005608:	4615      	mov	r5, r2
 800560a:	fbb6 f1f3 	udiv	r1, r6, r3
 800560e:	fb03 6711 	mls	r7, r3, r1, r6
 8005612:	5dc7      	ldrb	r7, [r0, r7]
 8005614:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005618:	4637      	mov	r7, r6
 800561a:	42bb      	cmp	r3, r7
 800561c:	460e      	mov	r6, r1
 800561e:	d9f4      	bls.n	800560a <_printf_i+0x116>
 8005620:	2b08      	cmp	r3, #8
 8005622:	d10b      	bne.n	800563c <_printf_i+0x148>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	07de      	lsls	r6, r3, #31
 8005628:	d508      	bpl.n	800563c <_printf_i+0x148>
 800562a:	6923      	ldr	r3, [r4, #16]
 800562c:	6861      	ldr	r1, [r4, #4]
 800562e:	4299      	cmp	r1, r3
 8005630:	bfde      	ittt	le
 8005632:	2330      	movle	r3, #48	; 0x30
 8005634:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005638:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800563c:	1b52      	subs	r2, r2, r5
 800563e:	6122      	str	r2, [r4, #16]
 8005640:	f8cd a000 	str.w	sl, [sp]
 8005644:	464b      	mov	r3, r9
 8005646:	aa03      	add	r2, sp, #12
 8005648:	4621      	mov	r1, r4
 800564a:	4640      	mov	r0, r8
 800564c:	f7ff fee4 	bl	8005418 <_printf_common>
 8005650:	3001      	adds	r0, #1
 8005652:	d14a      	bne.n	80056ea <_printf_i+0x1f6>
 8005654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005658:	b004      	add	sp, #16
 800565a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	f043 0320 	orr.w	r3, r3, #32
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	4833      	ldr	r0, [pc, #204]	; (8005734 <_printf_i+0x240>)
 8005668:	2778      	movs	r7, #120	; 0x78
 800566a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	6829      	ldr	r1, [r5, #0]
 8005672:	061f      	lsls	r7, r3, #24
 8005674:	f851 6b04 	ldr.w	r6, [r1], #4
 8005678:	d402      	bmi.n	8005680 <_printf_i+0x18c>
 800567a:	065f      	lsls	r7, r3, #25
 800567c:	bf48      	it	mi
 800567e:	b2b6      	uxthmi	r6, r6
 8005680:	07df      	lsls	r7, r3, #31
 8005682:	bf48      	it	mi
 8005684:	f043 0320 	orrmi.w	r3, r3, #32
 8005688:	6029      	str	r1, [r5, #0]
 800568a:	bf48      	it	mi
 800568c:	6023      	strmi	r3, [r4, #0]
 800568e:	b91e      	cbnz	r6, 8005698 <_printf_i+0x1a4>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	f023 0320 	bic.w	r3, r3, #32
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	2310      	movs	r3, #16
 800569a:	e7a7      	b.n	80055ec <_printf_i+0xf8>
 800569c:	4824      	ldr	r0, [pc, #144]	; (8005730 <_printf_i+0x23c>)
 800569e:	e7e4      	b.n	800566a <_printf_i+0x176>
 80056a0:	4615      	mov	r5, r2
 80056a2:	e7bd      	b.n	8005620 <_printf_i+0x12c>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	6826      	ldr	r6, [r4, #0]
 80056a8:	6961      	ldr	r1, [r4, #20]
 80056aa:	1d18      	adds	r0, r3, #4
 80056ac:	6028      	str	r0, [r5, #0]
 80056ae:	0635      	lsls	r5, r6, #24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	d501      	bpl.n	80056b8 <_printf_i+0x1c4>
 80056b4:	6019      	str	r1, [r3, #0]
 80056b6:	e002      	b.n	80056be <_printf_i+0x1ca>
 80056b8:	0670      	lsls	r0, r6, #25
 80056ba:	d5fb      	bpl.n	80056b4 <_printf_i+0x1c0>
 80056bc:	8019      	strh	r1, [r3, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	4615      	mov	r5, r2
 80056c4:	e7bc      	b.n	8005640 <_printf_i+0x14c>
 80056c6:	682b      	ldr	r3, [r5, #0]
 80056c8:	1d1a      	adds	r2, r3, #4
 80056ca:	602a      	str	r2, [r5, #0]
 80056cc:	681d      	ldr	r5, [r3, #0]
 80056ce:	6862      	ldr	r2, [r4, #4]
 80056d0:	2100      	movs	r1, #0
 80056d2:	4628      	mov	r0, r5
 80056d4:	f7fa fd7c 	bl	80001d0 <memchr>
 80056d8:	b108      	cbz	r0, 80056de <_printf_i+0x1ea>
 80056da:	1b40      	subs	r0, r0, r5
 80056dc:	6060      	str	r0, [r4, #4]
 80056de:	6863      	ldr	r3, [r4, #4]
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	2300      	movs	r3, #0
 80056e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e8:	e7aa      	b.n	8005640 <_printf_i+0x14c>
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	462a      	mov	r2, r5
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	47d0      	blx	sl
 80056f4:	3001      	adds	r0, #1
 80056f6:	d0ad      	beq.n	8005654 <_printf_i+0x160>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	079b      	lsls	r3, r3, #30
 80056fc:	d413      	bmi.n	8005726 <_printf_i+0x232>
 80056fe:	68e0      	ldr	r0, [r4, #12]
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	4298      	cmp	r0, r3
 8005704:	bfb8      	it	lt
 8005706:	4618      	movlt	r0, r3
 8005708:	e7a6      	b.n	8005658 <_printf_i+0x164>
 800570a:	2301      	movs	r3, #1
 800570c:	4632      	mov	r2, r6
 800570e:	4649      	mov	r1, r9
 8005710:	4640      	mov	r0, r8
 8005712:	47d0      	blx	sl
 8005714:	3001      	adds	r0, #1
 8005716:	d09d      	beq.n	8005654 <_printf_i+0x160>
 8005718:	3501      	adds	r5, #1
 800571a:	68e3      	ldr	r3, [r4, #12]
 800571c:	9903      	ldr	r1, [sp, #12]
 800571e:	1a5b      	subs	r3, r3, r1
 8005720:	42ab      	cmp	r3, r5
 8005722:	dcf2      	bgt.n	800570a <_printf_i+0x216>
 8005724:	e7eb      	b.n	80056fe <_printf_i+0x20a>
 8005726:	2500      	movs	r5, #0
 8005728:	f104 0619 	add.w	r6, r4, #25
 800572c:	e7f5      	b.n	800571a <_printf_i+0x226>
 800572e:	bf00      	nop
 8005730:	080096fe 	.word	0x080096fe
 8005734:	0800970f 	.word	0x0800970f

08005738 <_scanf_float>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	b087      	sub	sp, #28
 800573e:	4617      	mov	r7, r2
 8005740:	9303      	str	r3, [sp, #12]
 8005742:	688b      	ldr	r3, [r1, #8]
 8005744:	1e5a      	subs	r2, r3, #1
 8005746:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800574a:	bf83      	ittte	hi
 800574c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005750:	195b      	addhi	r3, r3, r5
 8005752:	9302      	strhi	r3, [sp, #8]
 8005754:	2300      	movls	r3, #0
 8005756:	bf86      	itte	hi
 8005758:	f240 135d 	movwhi	r3, #349	; 0x15d
 800575c:	608b      	strhi	r3, [r1, #8]
 800575e:	9302      	strls	r3, [sp, #8]
 8005760:	680b      	ldr	r3, [r1, #0]
 8005762:	468b      	mov	fp, r1
 8005764:	2500      	movs	r5, #0
 8005766:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800576a:	f84b 3b1c 	str.w	r3, [fp], #28
 800576e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005772:	4680      	mov	r8, r0
 8005774:	460c      	mov	r4, r1
 8005776:	465e      	mov	r6, fp
 8005778:	46aa      	mov	sl, r5
 800577a:	46a9      	mov	r9, r5
 800577c:	9501      	str	r5, [sp, #4]
 800577e:	68a2      	ldr	r2, [r4, #8]
 8005780:	b152      	cbz	r2, 8005798 <_scanf_float+0x60>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b4e      	cmp	r3, #78	; 0x4e
 8005788:	d864      	bhi.n	8005854 <_scanf_float+0x11c>
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d83c      	bhi.n	8005808 <_scanf_float+0xd0>
 800578e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005792:	b2c8      	uxtb	r0, r1
 8005794:	280e      	cmp	r0, #14
 8005796:	d93a      	bls.n	800580e <_scanf_float+0xd6>
 8005798:	f1b9 0f00 	cmp.w	r9, #0
 800579c:	d003      	beq.n	80057a6 <_scanf_float+0x6e>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80057aa:	f1ba 0f01 	cmp.w	sl, #1
 80057ae:	f200 8113 	bhi.w	80059d8 <_scanf_float+0x2a0>
 80057b2:	455e      	cmp	r6, fp
 80057b4:	f200 8105 	bhi.w	80059c2 <_scanf_float+0x28a>
 80057b8:	2501      	movs	r5, #1
 80057ba:	4628      	mov	r0, r5
 80057bc:	b007      	add	sp, #28
 80057be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80057c6:	2a0d      	cmp	r2, #13
 80057c8:	d8e6      	bhi.n	8005798 <_scanf_float+0x60>
 80057ca:	a101      	add	r1, pc, #4	; (adr r1, 80057d0 <_scanf_float+0x98>)
 80057cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057d0:	0800590f 	.word	0x0800590f
 80057d4:	08005799 	.word	0x08005799
 80057d8:	08005799 	.word	0x08005799
 80057dc:	08005799 	.word	0x08005799
 80057e0:	0800596f 	.word	0x0800596f
 80057e4:	08005947 	.word	0x08005947
 80057e8:	08005799 	.word	0x08005799
 80057ec:	08005799 	.word	0x08005799
 80057f0:	0800591d 	.word	0x0800591d
 80057f4:	08005799 	.word	0x08005799
 80057f8:	08005799 	.word	0x08005799
 80057fc:	08005799 	.word	0x08005799
 8005800:	08005799 	.word	0x08005799
 8005804:	080058d5 	.word	0x080058d5
 8005808:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800580c:	e7db      	b.n	80057c6 <_scanf_float+0x8e>
 800580e:	290e      	cmp	r1, #14
 8005810:	d8c2      	bhi.n	8005798 <_scanf_float+0x60>
 8005812:	a001      	add	r0, pc, #4	; (adr r0, 8005818 <_scanf_float+0xe0>)
 8005814:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005818:	080058c7 	.word	0x080058c7
 800581c:	08005799 	.word	0x08005799
 8005820:	080058c7 	.word	0x080058c7
 8005824:	0800595b 	.word	0x0800595b
 8005828:	08005799 	.word	0x08005799
 800582c:	08005875 	.word	0x08005875
 8005830:	080058b1 	.word	0x080058b1
 8005834:	080058b1 	.word	0x080058b1
 8005838:	080058b1 	.word	0x080058b1
 800583c:	080058b1 	.word	0x080058b1
 8005840:	080058b1 	.word	0x080058b1
 8005844:	080058b1 	.word	0x080058b1
 8005848:	080058b1 	.word	0x080058b1
 800584c:	080058b1 	.word	0x080058b1
 8005850:	080058b1 	.word	0x080058b1
 8005854:	2b6e      	cmp	r3, #110	; 0x6e
 8005856:	d809      	bhi.n	800586c <_scanf_float+0x134>
 8005858:	2b60      	cmp	r3, #96	; 0x60
 800585a:	d8b2      	bhi.n	80057c2 <_scanf_float+0x8a>
 800585c:	2b54      	cmp	r3, #84	; 0x54
 800585e:	d077      	beq.n	8005950 <_scanf_float+0x218>
 8005860:	2b59      	cmp	r3, #89	; 0x59
 8005862:	d199      	bne.n	8005798 <_scanf_float+0x60>
 8005864:	2d07      	cmp	r5, #7
 8005866:	d197      	bne.n	8005798 <_scanf_float+0x60>
 8005868:	2508      	movs	r5, #8
 800586a:	e029      	b.n	80058c0 <_scanf_float+0x188>
 800586c:	2b74      	cmp	r3, #116	; 0x74
 800586e:	d06f      	beq.n	8005950 <_scanf_float+0x218>
 8005870:	2b79      	cmp	r3, #121	; 0x79
 8005872:	e7f6      	b.n	8005862 <_scanf_float+0x12a>
 8005874:	6821      	ldr	r1, [r4, #0]
 8005876:	05c8      	lsls	r0, r1, #23
 8005878:	d51a      	bpl.n	80058b0 <_scanf_float+0x178>
 800587a:	9b02      	ldr	r3, [sp, #8]
 800587c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005880:	6021      	str	r1, [r4, #0]
 8005882:	f109 0901 	add.w	r9, r9, #1
 8005886:	b11b      	cbz	r3, 8005890 <_scanf_float+0x158>
 8005888:	3b01      	subs	r3, #1
 800588a:	3201      	adds	r2, #1
 800588c:	9302      	str	r3, [sp, #8]
 800588e:	60a2      	str	r2, [r4, #8]
 8005890:	68a3      	ldr	r3, [r4, #8]
 8005892:	3b01      	subs	r3, #1
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	3301      	adds	r3, #1
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3b01      	subs	r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	f340 8084 	ble.w	80059b0 <_scanf_float+0x278>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	e766      	b.n	800577e <_scanf_float+0x46>
 80058b0:	eb1a 0f05 	cmn.w	sl, r5
 80058b4:	f47f af70 	bne.w	8005798 <_scanf_float+0x60>
 80058b8:	6822      	ldr	r2, [r4, #0]
 80058ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80058be:	6022      	str	r2, [r4, #0]
 80058c0:	f806 3b01 	strb.w	r3, [r6], #1
 80058c4:	e7e4      	b.n	8005890 <_scanf_float+0x158>
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	0610      	lsls	r0, r2, #24
 80058ca:	f57f af65 	bpl.w	8005798 <_scanf_float+0x60>
 80058ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d2:	e7f4      	b.n	80058be <_scanf_float+0x186>
 80058d4:	f1ba 0f00 	cmp.w	sl, #0
 80058d8:	d10e      	bne.n	80058f8 <_scanf_float+0x1c0>
 80058da:	f1b9 0f00 	cmp.w	r9, #0
 80058de:	d10e      	bne.n	80058fe <_scanf_float+0x1c6>
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80058e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80058ea:	d108      	bne.n	80058fe <_scanf_float+0x1c6>
 80058ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058f0:	6022      	str	r2, [r4, #0]
 80058f2:	f04f 0a01 	mov.w	sl, #1
 80058f6:	e7e3      	b.n	80058c0 <_scanf_float+0x188>
 80058f8:	f1ba 0f02 	cmp.w	sl, #2
 80058fc:	d055      	beq.n	80059aa <_scanf_float+0x272>
 80058fe:	2d01      	cmp	r5, #1
 8005900:	d002      	beq.n	8005908 <_scanf_float+0x1d0>
 8005902:	2d04      	cmp	r5, #4
 8005904:	f47f af48 	bne.w	8005798 <_scanf_float+0x60>
 8005908:	3501      	adds	r5, #1
 800590a:	b2ed      	uxtb	r5, r5
 800590c:	e7d8      	b.n	80058c0 <_scanf_float+0x188>
 800590e:	f1ba 0f01 	cmp.w	sl, #1
 8005912:	f47f af41 	bne.w	8005798 <_scanf_float+0x60>
 8005916:	f04f 0a02 	mov.w	sl, #2
 800591a:	e7d1      	b.n	80058c0 <_scanf_float+0x188>
 800591c:	b97d      	cbnz	r5, 800593e <_scanf_float+0x206>
 800591e:	f1b9 0f00 	cmp.w	r9, #0
 8005922:	f47f af3c 	bne.w	800579e <_scanf_float+0x66>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800592c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005930:	f47f af39 	bne.w	80057a6 <_scanf_float+0x6e>
 8005934:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	2501      	movs	r5, #1
 800593c:	e7c0      	b.n	80058c0 <_scanf_float+0x188>
 800593e:	2d03      	cmp	r5, #3
 8005940:	d0e2      	beq.n	8005908 <_scanf_float+0x1d0>
 8005942:	2d05      	cmp	r5, #5
 8005944:	e7de      	b.n	8005904 <_scanf_float+0x1cc>
 8005946:	2d02      	cmp	r5, #2
 8005948:	f47f af26 	bne.w	8005798 <_scanf_float+0x60>
 800594c:	2503      	movs	r5, #3
 800594e:	e7b7      	b.n	80058c0 <_scanf_float+0x188>
 8005950:	2d06      	cmp	r5, #6
 8005952:	f47f af21 	bne.w	8005798 <_scanf_float+0x60>
 8005956:	2507      	movs	r5, #7
 8005958:	e7b2      	b.n	80058c0 <_scanf_float+0x188>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	0591      	lsls	r1, r2, #22
 800595e:	f57f af1b 	bpl.w	8005798 <_scanf_float+0x60>
 8005962:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005966:	6022      	str	r2, [r4, #0]
 8005968:	f8cd 9004 	str.w	r9, [sp, #4]
 800596c:	e7a8      	b.n	80058c0 <_scanf_float+0x188>
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005974:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005978:	d006      	beq.n	8005988 <_scanf_float+0x250>
 800597a:	0550      	lsls	r0, r2, #21
 800597c:	f57f af0c 	bpl.w	8005798 <_scanf_float+0x60>
 8005980:	f1b9 0f00 	cmp.w	r9, #0
 8005984:	f43f af0f 	beq.w	80057a6 <_scanf_float+0x6e>
 8005988:	0591      	lsls	r1, r2, #22
 800598a:	bf58      	it	pl
 800598c:	9901      	ldrpl	r1, [sp, #4]
 800598e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005992:	bf58      	it	pl
 8005994:	eba9 0101 	subpl.w	r1, r9, r1
 8005998:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800599c:	bf58      	it	pl
 800599e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80059a2:	6022      	str	r2, [r4, #0]
 80059a4:	f04f 0900 	mov.w	r9, #0
 80059a8:	e78a      	b.n	80058c0 <_scanf_float+0x188>
 80059aa:	f04f 0a03 	mov.w	sl, #3
 80059ae:	e787      	b.n	80058c0 <_scanf_float+0x188>
 80059b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80059b4:	4639      	mov	r1, r7
 80059b6:	4640      	mov	r0, r8
 80059b8:	4798      	blx	r3
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f43f aedf 	beq.w	800577e <_scanf_float+0x46>
 80059c0:	e6ea      	b.n	8005798 <_scanf_float+0x60>
 80059c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ca:	463a      	mov	r2, r7
 80059cc:	4640      	mov	r0, r8
 80059ce:	4798      	blx	r3
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	e6ec      	b.n	80057b2 <_scanf_float+0x7a>
 80059d8:	1e6b      	subs	r3, r5, #1
 80059da:	2b06      	cmp	r3, #6
 80059dc:	d825      	bhi.n	8005a2a <_scanf_float+0x2f2>
 80059de:	2d02      	cmp	r5, #2
 80059e0:	d836      	bhi.n	8005a50 <_scanf_float+0x318>
 80059e2:	455e      	cmp	r6, fp
 80059e4:	f67f aee8 	bls.w	80057b8 <_scanf_float+0x80>
 80059e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059f0:	463a      	mov	r2, r7
 80059f2:	4640      	mov	r0, r8
 80059f4:	4798      	blx	r3
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	e7f1      	b.n	80059e2 <_scanf_float+0x2aa>
 80059fe:	9802      	ldr	r0, [sp, #8]
 8005a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005a08:	9002      	str	r0, [sp, #8]
 8005a0a:	463a      	mov	r2, r7
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4798      	blx	r3
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a1a:	fa5f fa8a 	uxtb.w	sl, sl
 8005a1e:	f1ba 0f02 	cmp.w	sl, #2
 8005a22:	d1ec      	bne.n	80059fe <_scanf_float+0x2c6>
 8005a24:	3d03      	subs	r5, #3
 8005a26:	b2ed      	uxtb	r5, r5
 8005a28:	1b76      	subs	r6, r6, r5
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	05da      	lsls	r2, r3, #23
 8005a2e:	d52f      	bpl.n	8005a90 <_scanf_float+0x358>
 8005a30:	055b      	lsls	r3, r3, #21
 8005a32:	d510      	bpl.n	8005a56 <_scanf_float+0x31e>
 8005a34:	455e      	cmp	r6, fp
 8005a36:	f67f aebf 	bls.w	80057b8 <_scanf_float+0x80>
 8005a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a42:	463a      	mov	r2, r7
 8005a44:	4640      	mov	r0, r8
 8005a46:	4798      	blx	r3
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	e7f1      	b.n	8005a34 <_scanf_float+0x2fc>
 8005a50:	46aa      	mov	sl, r5
 8005a52:	9602      	str	r6, [sp, #8]
 8005a54:	e7df      	b.n	8005a16 <_scanf_float+0x2de>
 8005a56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	2965      	cmp	r1, #101	; 0x65
 8005a5e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005a62:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	d00c      	beq.n	8005a84 <_scanf_float+0x34c>
 8005a6a:	2945      	cmp	r1, #69	; 0x45
 8005a6c:	d00a      	beq.n	8005a84 <_scanf_float+0x34c>
 8005a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a72:	463a      	mov	r2, r7
 8005a74:	4640      	mov	r0, r8
 8005a76:	4798      	blx	r3
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	1eb5      	subs	r5, r6, #2
 8005a82:	6123      	str	r3, [r4, #16]
 8005a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a88:	463a      	mov	r2, r7
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	4798      	blx	r3
 8005a8e:	462e      	mov	r6, r5
 8005a90:	6825      	ldr	r5, [r4, #0]
 8005a92:	f015 0510 	ands.w	r5, r5, #16
 8005a96:	d158      	bne.n	8005b4a <_scanf_float+0x412>
 8005a98:	7035      	strb	r5, [r6, #0]
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa4:	d11c      	bne.n	8005ae0 <_scanf_float+0x3a8>
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	454b      	cmp	r3, r9
 8005aaa:	eba3 0209 	sub.w	r2, r3, r9
 8005aae:	d124      	bne.n	8005afa <_scanf_float+0x3c2>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	f000 ff0f 	bl	80068d8 <_strtod_r>
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	6821      	ldr	r1, [r4, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f011 0f02 	tst.w	r1, #2
 8005ac4:	ec57 6b10 	vmov	r6, r7, d0
 8005ac8:	f103 0204 	add.w	r2, r3, #4
 8005acc:	d020      	beq.n	8005b10 <_scanf_float+0x3d8>
 8005ace:	9903      	ldr	r1, [sp, #12]
 8005ad0:	600a      	str	r2, [r1, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	e9c3 6700 	strd	r6, r7, [r3]
 8005ad8:	68e3      	ldr	r3, [r4, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60e3      	str	r3, [r4, #12]
 8005ade:	e66c      	b.n	80057ba <_scanf_float+0x82>
 8005ae0:	9b04      	ldr	r3, [sp, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0e4      	beq.n	8005ab0 <_scanf_float+0x378>
 8005ae6:	9905      	ldr	r1, [sp, #20]
 8005ae8:	230a      	movs	r3, #10
 8005aea:	462a      	mov	r2, r5
 8005aec:	3101      	adds	r1, #1
 8005aee:	4640      	mov	r0, r8
 8005af0:	f000 ff7a 	bl	80069e8 <_strtol_r>
 8005af4:	9b04      	ldr	r3, [sp, #16]
 8005af6:	9e05      	ldr	r6, [sp, #20]
 8005af8:	1ac2      	subs	r2, r0, r3
 8005afa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005afe:	429e      	cmp	r6, r3
 8005b00:	bf28      	it	cs
 8005b02:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005b06:	4912      	ldr	r1, [pc, #72]	; (8005b50 <_scanf_float+0x418>)
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 f825 	bl	8005b58 <siprintf>
 8005b0e:	e7cf      	b.n	8005ab0 <_scanf_float+0x378>
 8005b10:	f011 0f04 	tst.w	r1, #4
 8005b14:	9903      	ldr	r1, [sp, #12]
 8005b16:	600a      	str	r2, [r1, #0]
 8005b18:	d1db      	bne.n	8005ad2 <_scanf_float+0x39a>
 8005b1a:	f8d3 8000 	ldr.w	r8, [r3]
 8005b1e:	ee10 2a10 	vmov	r2, s0
 8005b22:	ee10 0a10 	vmov	r0, s0
 8005b26:	463b      	mov	r3, r7
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa ffff 	bl	8000b2c <__aeabi_dcmpun>
 8005b2e:	b128      	cbz	r0, 8005b3c <_scanf_float+0x404>
 8005b30:	4808      	ldr	r0, [pc, #32]	; (8005b54 <_scanf_float+0x41c>)
 8005b32:	f000 ffed 	bl	8006b10 <nanf>
 8005b36:	ed88 0a00 	vstr	s0, [r8]
 8005b3a:	e7cd      	b.n	8005ad8 <_scanf_float+0x3a0>
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	4639      	mov	r1, r7
 8005b40:	f7fb f852 	bl	8000be8 <__aeabi_d2f>
 8005b44:	f8c8 0000 	str.w	r0, [r8]
 8005b48:	e7c6      	b.n	8005ad8 <_scanf_float+0x3a0>
 8005b4a:	2500      	movs	r5, #0
 8005b4c:	e635      	b.n	80057ba <_scanf_float+0x82>
 8005b4e:	bf00      	nop
 8005b50:	08009720 	.word	0x08009720
 8005b54:	08009b0f 	.word	0x08009b0f

08005b58 <siprintf>:
 8005b58:	b40e      	push	{r1, r2, r3}
 8005b5a:	b500      	push	{lr}
 8005b5c:	b09c      	sub	sp, #112	; 0x70
 8005b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b60:	9002      	str	r0, [sp, #8]
 8005b62:	9006      	str	r0, [sp, #24]
 8005b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b68:	4809      	ldr	r0, [pc, #36]	; (8005b90 <siprintf+0x38>)
 8005b6a:	9107      	str	r1, [sp, #28]
 8005b6c:	9104      	str	r1, [sp, #16]
 8005b6e:	4909      	ldr	r1, [pc, #36]	; (8005b94 <siprintf+0x3c>)
 8005b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b74:	9105      	str	r1, [sp, #20]
 8005b76:	6800      	ldr	r0, [r0, #0]
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	a902      	add	r1, sp, #8
 8005b7c:	f002 f9fc 	bl	8007f78 <_svfiprintf_r>
 8005b80:	9b02      	ldr	r3, [sp, #8]
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	b01c      	add	sp, #112	; 0x70
 8005b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b8c:	b003      	add	sp, #12
 8005b8e:	4770      	bx	lr
 8005b90:	200001d0 	.word	0x200001d0
 8005b94:	ffff0208 	.word	0xffff0208

08005b98 <std>:
 8005b98:	2300      	movs	r3, #0
 8005b9a:	b510      	push	{r4, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ba6:	6083      	str	r3, [r0, #8]
 8005ba8:	8181      	strh	r1, [r0, #12]
 8005baa:	6643      	str	r3, [r0, #100]	; 0x64
 8005bac:	81c2      	strh	r2, [r0, #14]
 8005bae:	6183      	str	r3, [r0, #24]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	305c      	adds	r0, #92	; 0x5c
 8005bb6:	f000 ff5b 	bl	8006a70 <memset>
 8005bba:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <std+0x38>)
 8005bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <std+0x3c>)
 8005bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <std+0x40>)
 8005bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <std+0x44>)
 8005bc8:	6224      	str	r4, [r4, #32]
 8005bca:	6323      	str	r3, [r4, #48]	; 0x30
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	bf00      	nop
 8005bd0:	0800903f 	.word	0x0800903f
 8005bd4:	08009061 	.word	0x08009061
 8005bd8:	08009099 	.word	0x08009099
 8005bdc:	080090bd 	.word	0x080090bd

08005be0 <stdio_exit_handler>:
 8005be0:	4a02      	ldr	r2, [pc, #8]	; (8005bec <stdio_exit_handler+0xc>)
 8005be2:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <stdio_exit_handler+0x10>)
 8005be4:	4803      	ldr	r0, [pc, #12]	; (8005bf4 <stdio_exit_handler+0x14>)
 8005be6:	f000 bf01 	b.w	80069ec <_fwalk_sglue>
 8005bea:	bf00      	nop
 8005bec:	2000000c 	.word	0x2000000c
 8005bf0:	0800867d 	.word	0x0800867d
 8005bf4:	20000184 	.word	0x20000184

08005bf8 <cleanup_stdio>:
 8005bf8:	6841      	ldr	r1, [r0, #4]
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <cleanup_stdio+0x34>)
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	4604      	mov	r4, r0
 8005c02:	d001      	beq.n	8005c08 <cleanup_stdio+0x10>
 8005c04:	f002 fd3a 	bl	800867c <_fflush_r>
 8005c08:	68a1      	ldr	r1, [r4, #8]
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <cleanup_stdio+0x38>)
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	d002      	beq.n	8005c16 <cleanup_stdio+0x1e>
 8005c10:	4620      	mov	r0, r4
 8005c12:	f002 fd33 	bl	800867c <_fflush_r>
 8005c16:	68e1      	ldr	r1, [r4, #12]
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <cleanup_stdio+0x3c>)
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	d004      	beq.n	8005c28 <cleanup_stdio+0x30>
 8005c1e:	4620      	mov	r0, r4
 8005c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c24:	f002 bd2a 	b.w	800867c <_fflush_r>
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	2000035c 	.word	0x2000035c
 8005c30:	200003c4 	.word	0x200003c4
 8005c34:	2000042c 	.word	0x2000042c

08005c38 <global_stdio_init.part.0>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <global_stdio_init.part.0+0x30>)
 8005c3c:	4c0b      	ldr	r4, [pc, #44]	; (8005c6c <global_stdio_init.part.0+0x34>)
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <global_stdio_init.part.0+0x38>)
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	4620      	mov	r0, r4
 8005c44:	2200      	movs	r2, #0
 8005c46:	2104      	movs	r1, #4
 8005c48:	f7ff ffa6 	bl	8005b98 <std>
 8005c4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c50:	2201      	movs	r2, #1
 8005c52:	2109      	movs	r1, #9
 8005c54:	f7ff ffa0 	bl	8005b98 <std>
 8005c58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c62:	2112      	movs	r1, #18
 8005c64:	f7ff bf98 	b.w	8005b98 <std>
 8005c68:	20000494 	.word	0x20000494
 8005c6c:	2000035c 	.word	0x2000035c
 8005c70:	08005be1 	.word	0x08005be1

08005c74 <__sfp_lock_acquire>:
 8005c74:	4801      	ldr	r0, [pc, #4]	; (8005c7c <__sfp_lock_acquire+0x8>)
 8005c76:	f000 bf31 	b.w	8006adc <__retarget_lock_acquire_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	20000499 	.word	0x20000499

08005c80 <__sfp_lock_release>:
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <__sfp_lock_release+0x8>)
 8005c82:	f000 bf2c 	b.w	8006ade <__retarget_lock_release_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000499 	.word	0x20000499

08005c8c <__sinit>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f7ff fff0 	bl	8005c74 <__sfp_lock_acquire>
 8005c94:	6a23      	ldr	r3, [r4, #32]
 8005c96:	b11b      	cbz	r3, 8005ca0 <__sinit+0x14>
 8005c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c9c:	f7ff bff0 	b.w	8005c80 <__sfp_lock_release>
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <__sinit+0x28>)
 8005ca2:	6223      	str	r3, [r4, #32]
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <__sinit+0x2c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f5      	bne.n	8005c98 <__sinit+0xc>
 8005cac:	f7ff ffc4 	bl	8005c38 <global_stdio_init.part.0>
 8005cb0:	e7f2      	b.n	8005c98 <__sinit+0xc>
 8005cb2:	bf00      	nop
 8005cb4:	08005bf9 	.word	0x08005bf9
 8005cb8:	20000494 	.word	0x20000494

08005cbc <sulp>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	ec45 4b10 	vmov	d0, r4, r5
 8005cc6:	4616      	mov	r6, r2
 8005cc8:	f003 f878 	bl	8008dbc <__ulp>
 8005ccc:	ec51 0b10 	vmov	r0, r1, d0
 8005cd0:	b17e      	cbz	r6, 8005cf2 <sulp+0x36>
 8005cd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005cd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	dd09      	ble.n	8005cf2 <sulp+0x36>
 8005cde:	051b      	lsls	r3, r3, #20
 8005ce0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ce4:	2400      	movs	r4, #0
 8005ce6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005cea:	4622      	mov	r2, r4
 8005cec:	462b      	mov	r3, r5
 8005cee:	f7fa fc83 	bl	80005f8 <__aeabi_dmul>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	0000      	movs	r0, r0
	...

08005cf8 <_strtod_l>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	ed2d 8b02 	vpush	{d8}
 8005d00:	b09b      	sub	sp, #108	; 0x6c
 8005d02:	4604      	mov	r4, r0
 8005d04:	9213      	str	r2, [sp, #76]	; 0x4c
 8005d06:	2200      	movs	r2, #0
 8005d08:	9216      	str	r2, [sp, #88]	; 0x58
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	f04f 0800 	mov.w	r8, #0
 8005d10:	f04f 0900 	mov.w	r9, #0
 8005d14:	460a      	mov	r2, r1
 8005d16:	9215      	str	r2, [sp, #84]	; 0x54
 8005d18:	7811      	ldrb	r1, [r2, #0]
 8005d1a:	292b      	cmp	r1, #43	; 0x2b
 8005d1c:	d04c      	beq.n	8005db8 <_strtod_l+0xc0>
 8005d1e:	d83a      	bhi.n	8005d96 <_strtod_l+0x9e>
 8005d20:	290d      	cmp	r1, #13
 8005d22:	d834      	bhi.n	8005d8e <_strtod_l+0x96>
 8005d24:	2908      	cmp	r1, #8
 8005d26:	d834      	bhi.n	8005d92 <_strtod_l+0x9a>
 8005d28:	2900      	cmp	r1, #0
 8005d2a:	d03d      	beq.n	8005da8 <_strtod_l+0xb0>
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	920a      	str	r2, [sp, #40]	; 0x28
 8005d30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005d32:	7832      	ldrb	r2, [r6, #0]
 8005d34:	2a30      	cmp	r2, #48	; 0x30
 8005d36:	f040 80b4 	bne.w	8005ea2 <_strtod_l+0x1aa>
 8005d3a:	7872      	ldrb	r2, [r6, #1]
 8005d3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005d40:	2a58      	cmp	r2, #88	; 0x58
 8005d42:	d170      	bne.n	8005e26 <_strtod_l+0x12e>
 8005d44:	9302      	str	r3, [sp, #8]
 8005d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	ab16      	add	r3, sp, #88	; 0x58
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	4a8e      	ldr	r2, [pc, #568]	; (8005f88 <_strtod_l+0x290>)
 8005d50:	ab17      	add	r3, sp, #92	; 0x5c
 8005d52:	a915      	add	r1, sp, #84	; 0x54
 8005d54:	4620      	mov	r0, r4
 8005d56:	f001 fdc5 	bl	80078e4 <__gethex>
 8005d5a:	f010 070f 	ands.w	r7, r0, #15
 8005d5e:	4605      	mov	r5, r0
 8005d60:	d005      	beq.n	8005d6e <_strtod_l+0x76>
 8005d62:	2f06      	cmp	r7, #6
 8005d64:	d12a      	bne.n	8005dbc <_strtod_l+0xc4>
 8005d66:	3601      	adds	r6, #1
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9615      	str	r6, [sp, #84]	; 0x54
 8005d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f040 857f 	bne.w	8006874 <_strtod_l+0xb7c>
 8005d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d78:	b1db      	cbz	r3, 8005db2 <_strtod_l+0xba>
 8005d7a:	4642      	mov	r2, r8
 8005d7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d80:	ec43 2b10 	vmov	d0, r2, r3
 8005d84:	b01b      	add	sp, #108	; 0x6c
 8005d86:	ecbd 8b02 	vpop	{d8}
 8005d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8e:	2920      	cmp	r1, #32
 8005d90:	d1cc      	bne.n	8005d2c <_strtod_l+0x34>
 8005d92:	3201      	adds	r2, #1
 8005d94:	e7bf      	b.n	8005d16 <_strtod_l+0x1e>
 8005d96:	292d      	cmp	r1, #45	; 0x2d
 8005d98:	d1c8      	bne.n	8005d2c <_strtod_l+0x34>
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	910a      	str	r1, [sp, #40]	; 0x28
 8005d9e:	1c51      	adds	r1, r2, #1
 8005da0:	9115      	str	r1, [sp, #84]	; 0x54
 8005da2:	7852      	ldrb	r2, [r2, #1]
 8005da4:	2a00      	cmp	r2, #0
 8005da6:	d1c3      	bne.n	8005d30 <_strtod_l+0x38>
 8005da8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005daa:	9515      	str	r5, [sp, #84]	; 0x54
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f040 855f 	bne.w	8006870 <_strtod_l+0xb78>
 8005db2:	4642      	mov	r2, r8
 8005db4:	464b      	mov	r3, r9
 8005db6:	e7e3      	b.n	8005d80 <_strtod_l+0x88>
 8005db8:	2100      	movs	r1, #0
 8005dba:	e7ef      	b.n	8005d9c <_strtod_l+0xa4>
 8005dbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005dbe:	b13a      	cbz	r2, 8005dd0 <_strtod_l+0xd8>
 8005dc0:	2135      	movs	r1, #53	; 0x35
 8005dc2:	a818      	add	r0, sp, #96	; 0x60
 8005dc4:	f003 f8f7 	bl	8008fb6 <__copybits>
 8005dc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f002 fcca 	bl	8008764 <_Bfree>
 8005dd0:	3f01      	subs	r7, #1
 8005dd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dd4:	2f04      	cmp	r7, #4
 8005dd6:	d806      	bhi.n	8005de6 <_strtod_l+0xee>
 8005dd8:	e8df f007 	tbb	[pc, r7]
 8005ddc:	201d0314 	.word	0x201d0314
 8005de0:	14          	.byte	0x14
 8005de1:	00          	.byte	0x00
 8005de2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8005de6:	05e9      	lsls	r1, r5, #23
 8005de8:	bf48      	it	mi
 8005dea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005dee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005df2:	0d1b      	lsrs	r3, r3, #20
 8005df4:	051b      	lsls	r3, r3, #20
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1b9      	bne.n	8005d6e <_strtod_l+0x76>
 8005dfa:	f000 fe45 	bl	8006a88 <__errno>
 8005dfe:	2322      	movs	r3, #34	; 0x22
 8005e00:	6003      	str	r3, [r0, #0]
 8005e02:	e7b4      	b.n	8005d6e <_strtod_l+0x76>
 8005e04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005e08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005e14:	e7e7      	b.n	8005de6 <_strtod_l+0xee>
 8005e16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005f90 <_strtod_l+0x298>
 8005e1a:	e7e4      	b.n	8005de6 <_strtod_l+0xee>
 8005e1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005e20:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005e24:	e7df      	b.n	8005de6 <_strtod_l+0xee>
 8005e26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	9215      	str	r2, [sp, #84]	; 0x54
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b30      	cmp	r3, #48	; 0x30
 8005e30:	d0f9      	beq.n	8005e26 <_strtod_l+0x12e>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d09b      	beq.n	8005d6e <_strtod_l+0x76>
 8005e36:	2301      	movs	r3, #1
 8005e38:	f04f 0a00 	mov.w	sl, #0
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005e46:	46d3      	mov	fp, sl
 8005e48:	220a      	movs	r2, #10
 8005e4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005e4c:	7806      	ldrb	r6, [r0, #0]
 8005e4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005e52:	b2d9      	uxtb	r1, r3
 8005e54:	2909      	cmp	r1, #9
 8005e56:	d926      	bls.n	8005ea6 <_strtod_l+0x1ae>
 8005e58:	494c      	ldr	r1, [pc, #304]	; (8005f8c <_strtod_l+0x294>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f000 fdf6 	bl	8006a4c <strncmp>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d030      	beq.n	8005ec6 <_strtod_l+0x1ce>
 8005e64:	2000      	movs	r0, #0
 8005e66:	4632      	mov	r2, r6
 8005e68:	9005      	str	r0, [sp, #20]
 8005e6a:	465e      	mov	r6, fp
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2a65      	cmp	r2, #101	; 0x65
 8005e70:	d001      	beq.n	8005e76 <_strtod_l+0x17e>
 8005e72:	2a45      	cmp	r2, #69	; 0x45
 8005e74:	d113      	bne.n	8005e9e <_strtod_l+0x1a6>
 8005e76:	b91e      	cbnz	r6, 8005e80 <_strtod_l+0x188>
 8005e78:	9a04      	ldr	r2, [sp, #16]
 8005e7a:	4302      	orrs	r2, r0
 8005e7c:	d094      	beq.n	8005da8 <_strtod_l+0xb0>
 8005e7e:	2600      	movs	r6, #0
 8005e80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005e82:	1c6a      	adds	r2, r5, #1
 8005e84:	9215      	str	r2, [sp, #84]	; 0x54
 8005e86:	786a      	ldrb	r2, [r5, #1]
 8005e88:	2a2b      	cmp	r2, #43	; 0x2b
 8005e8a:	d074      	beq.n	8005f76 <_strtod_l+0x27e>
 8005e8c:	2a2d      	cmp	r2, #45	; 0x2d
 8005e8e:	d078      	beq.n	8005f82 <_strtod_l+0x28a>
 8005e90:	f04f 0c00 	mov.w	ip, #0
 8005e94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e98:	2909      	cmp	r1, #9
 8005e9a:	d97f      	bls.n	8005f9c <_strtod_l+0x2a4>
 8005e9c:	9515      	str	r5, [sp, #84]	; 0x54
 8005e9e:	2700      	movs	r7, #0
 8005ea0:	e09e      	b.n	8005fe0 <_strtod_l+0x2e8>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e7c8      	b.n	8005e38 <_strtod_l+0x140>
 8005ea6:	f1bb 0f08 	cmp.w	fp, #8
 8005eaa:	bfd8      	it	le
 8005eac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005eae:	f100 0001 	add.w	r0, r0, #1
 8005eb2:	bfda      	itte	le
 8005eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005eb8:	9309      	strle	r3, [sp, #36]	; 0x24
 8005eba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005ebe:	f10b 0b01 	add.w	fp, fp, #1
 8005ec2:	9015      	str	r0, [sp, #84]	; 0x54
 8005ec4:	e7c1      	b.n	8005e4a <_strtod_l+0x152>
 8005ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	9215      	str	r2, [sp, #84]	; 0x54
 8005ecc:	785a      	ldrb	r2, [r3, #1]
 8005ece:	f1bb 0f00 	cmp.w	fp, #0
 8005ed2:	d037      	beq.n	8005f44 <_strtod_l+0x24c>
 8005ed4:	9005      	str	r0, [sp, #20]
 8005ed6:	465e      	mov	r6, fp
 8005ed8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005edc:	2b09      	cmp	r3, #9
 8005ede:	d912      	bls.n	8005f06 <_strtod_l+0x20e>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e7c4      	b.n	8005e6e <_strtod_l+0x176>
 8005ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	9215      	str	r2, [sp, #84]	; 0x54
 8005eea:	785a      	ldrb	r2, [r3, #1]
 8005eec:	3001      	adds	r0, #1
 8005eee:	2a30      	cmp	r2, #48	; 0x30
 8005ef0:	d0f8      	beq.n	8005ee4 <_strtod_l+0x1ec>
 8005ef2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	f200 84c1 	bhi.w	800687e <_strtod_l+0xb86>
 8005efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005efe:	9005      	str	r0, [sp, #20]
 8005f00:	2000      	movs	r0, #0
 8005f02:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f04:	4606      	mov	r6, r0
 8005f06:	3a30      	subs	r2, #48	; 0x30
 8005f08:	f100 0301 	add.w	r3, r0, #1
 8005f0c:	d014      	beq.n	8005f38 <_strtod_l+0x240>
 8005f0e:	9905      	ldr	r1, [sp, #20]
 8005f10:	4419      	add	r1, r3
 8005f12:	9105      	str	r1, [sp, #20]
 8005f14:	4633      	mov	r3, r6
 8005f16:	eb00 0c06 	add.w	ip, r0, r6
 8005f1a:	210a      	movs	r1, #10
 8005f1c:	4563      	cmp	r3, ip
 8005f1e:	d113      	bne.n	8005f48 <_strtod_l+0x250>
 8005f20:	1833      	adds	r3, r6, r0
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	f106 0601 	add.w	r6, r6, #1
 8005f28:	4406      	add	r6, r0
 8005f2a:	dc1a      	bgt.n	8005f62 <_strtod_l+0x26a>
 8005f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f2e:	230a      	movs	r3, #10
 8005f30:	fb03 2301 	mla	r3, r3, r1, r2
 8005f34:	9309      	str	r3, [sp, #36]	; 0x24
 8005f36:	2300      	movs	r3, #0
 8005f38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f3a:	1c51      	adds	r1, r2, #1
 8005f3c:	9115      	str	r1, [sp, #84]	; 0x54
 8005f3e:	7852      	ldrb	r2, [r2, #1]
 8005f40:	4618      	mov	r0, r3
 8005f42:	e7c9      	b.n	8005ed8 <_strtod_l+0x1e0>
 8005f44:	4658      	mov	r0, fp
 8005f46:	e7d2      	b.n	8005eee <_strtod_l+0x1f6>
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	f103 0301 	add.w	r3, r3, #1
 8005f4e:	dc03      	bgt.n	8005f58 <_strtod_l+0x260>
 8005f50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f52:	434f      	muls	r7, r1
 8005f54:	9709      	str	r7, [sp, #36]	; 0x24
 8005f56:	e7e1      	b.n	8005f1c <_strtod_l+0x224>
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	bfd8      	it	le
 8005f5c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005f60:	e7dc      	b.n	8005f1c <_strtod_l+0x224>
 8005f62:	2e10      	cmp	r6, #16
 8005f64:	bfdc      	itt	le
 8005f66:	230a      	movle	r3, #10
 8005f68:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005f6c:	e7e3      	b.n	8005f36 <_strtod_l+0x23e>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9305      	str	r3, [sp, #20]
 8005f72:	2301      	movs	r3, #1
 8005f74:	e780      	b.n	8005e78 <_strtod_l+0x180>
 8005f76:	f04f 0c00 	mov.w	ip, #0
 8005f7a:	1caa      	adds	r2, r5, #2
 8005f7c:	9215      	str	r2, [sp, #84]	; 0x54
 8005f7e:	78aa      	ldrb	r2, [r5, #2]
 8005f80:	e788      	b.n	8005e94 <_strtod_l+0x19c>
 8005f82:	f04f 0c01 	mov.w	ip, #1
 8005f86:	e7f8      	b.n	8005f7a <_strtod_l+0x282>
 8005f88:	08009728 	.word	0x08009728
 8005f8c:	08009725 	.word	0x08009725
 8005f90:	7ff00000 	.word	0x7ff00000
 8005f94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f96:	1c51      	adds	r1, r2, #1
 8005f98:	9115      	str	r1, [sp, #84]	; 0x54
 8005f9a:	7852      	ldrb	r2, [r2, #1]
 8005f9c:	2a30      	cmp	r2, #48	; 0x30
 8005f9e:	d0f9      	beq.n	8005f94 <_strtod_l+0x29c>
 8005fa0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005fa4:	2908      	cmp	r1, #8
 8005fa6:	f63f af7a 	bhi.w	8005e9e <_strtod_l+0x1a6>
 8005faa:	3a30      	subs	r2, #48	; 0x30
 8005fac:	9208      	str	r2, [sp, #32]
 8005fae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fb0:	920c      	str	r2, [sp, #48]	; 0x30
 8005fb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fb4:	1c57      	adds	r7, r2, #1
 8005fb6:	9715      	str	r7, [sp, #84]	; 0x54
 8005fb8:	7852      	ldrb	r2, [r2, #1]
 8005fba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005fbe:	f1be 0f09 	cmp.w	lr, #9
 8005fc2:	d938      	bls.n	8006036 <_strtod_l+0x33e>
 8005fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fc6:	1a7f      	subs	r7, r7, r1
 8005fc8:	2f08      	cmp	r7, #8
 8005fca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005fce:	dc03      	bgt.n	8005fd8 <_strtod_l+0x2e0>
 8005fd0:	9908      	ldr	r1, [sp, #32]
 8005fd2:	428f      	cmp	r7, r1
 8005fd4:	bfa8      	it	ge
 8005fd6:	460f      	movge	r7, r1
 8005fd8:	f1bc 0f00 	cmp.w	ip, #0
 8005fdc:	d000      	beq.n	8005fe0 <_strtod_l+0x2e8>
 8005fde:	427f      	negs	r7, r7
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	d14f      	bne.n	8006084 <_strtod_l+0x38c>
 8005fe4:	9904      	ldr	r1, [sp, #16]
 8005fe6:	4301      	orrs	r1, r0
 8005fe8:	f47f aec1 	bne.w	8005d6e <_strtod_l+0x76>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f47f aedb 	bne.w	8005da8 <_strtod_l+0xb0>
 8005ff2:	2a69      	cmp	r2, #105	; 0x69
 8005ff4:	d029      	beq.n	800604a <_strtod_l+0x352>
 8005ff6:	dc26      	bgt.n	8006046 <_strtod_l+0x34e>
 8005ff8:	2a49      	cmp	r2, #73	; 0x49
 8005ffa:	d026      	beq.n	800604a <_strtod_l+0x352>
 8005ffc:	2a4e      	cmp	r2, #78	; 0x4e
 8005ffe:	f47f aed3 	bne.w	8005da8 <_strtod_l+0xb0>
 8006002:	499b      	ldr	r1, [pc, #620]	; (8006270 <_strtod_l+0x578>)
 8006004:	a815      	add	r0, sp, #84	; 0x54
 8006006:	f001 fead 	bl	8007d64 <__match>
 800600a:	2800      	cmp	r0, #0
 800600c:	f43f aecc 	beq.w	8005da8 <_strtod_l+0xb0>
 8006010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b28      	cmp	r3, #40	; 0x28
 8006016:	d12f      	bne.n	8006078 <_strtod_l+0x380>
 8006018:	4996      	ldr	r1, [pc, #600]	; (8006274 <_strtod_l+0x57c>)
 800601a:	aa18      	add	r2, sp, #96	; 0x60
 800601c:	a815      	add	r0, sp, #84	; 0x54
 800601e:	f001 feb5 	bl	8007d8c <__hexnan>
 8006022:	2805      	cmp	r0, #5
 8006024:	d128      	bne.n	8006078 <_strtod_l+0x380>
 8006026:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006028:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800602c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006030:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006034:	e69b      	b.n	8005d6e <_strtod_l+0x76>
 8006036:	9f08      	ldr	r7, [sp, #32]
 8006038:	210a      	movs	r1, #10
 800603a:	fb01 2107 	mla	r1, r1, r7, r2
 800603e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006042:	9208      	str	r2, [sp, #32]
 8006044:	e7b5      	b.n	8005fb2 <_strtod_l+0x2ba>
 8006046:	2a6e      	cmp	r2, #110	; 0x6e
 8006048:	e7d9      	b.n	8005ffe <_strtod_l+0x306>
 800604a:	498b      	ldr	r1, [pc, #556]	; (8006278 <_strtod_l+0x580>)
 800604c:	a815      	add	r0, sp, #84	; 0x54
 800604e:	f001 fe89 	bl	8007d64 <__match>
 8006052:	2800      	cmp	r0, #0
 8006054:	f43f aea8 	beq.w	8005da8 <_strtod_l+0xb0>
 8006058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800605a:	4988      	ldr	r1, [pc, #544]	; (800627c <_strtod_l+0x584>)
 800605c:	3b01      	subs	r3, #1
 800605e:	a815      	add	r0, sp, #84	; 0x54
 8006060:	9315      	str	r3, [sp, #84]	; 0x54
 8006062:	f001 fe7f 	bl	8007d64 <__match>
 8006066:	b910      	cbnz	r0, 800606e <_strtod_l+0x376>
 8006068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800606a:	3301      	adds	r3, #1
 800606c:	9315      	str	r3, [sp, #84]	; 0x54
 800606e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800628c <_strtod_l+0x594>
 8006072:	f04f 0800 	mov.w	r8, #0
 8006076:	e67a      	b.n	8005d6e <_strtod_l+0x76>
 8006078:	4881      	ldr	r0, [pc, #516]	; (8006280 <_strtod_l+0x588>)
 800607a:	f000 fd41 	bl	8006b00 <nan>
 800607e:	ec59 8b10 	vmov	r8, r9, d0
 8006082:	e674      	b.n	8005d6e <_strtod_l+0x76>
 8006084:	9b05      	ldr	r3, [sp, #20]
 8006086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006088:	1afb      	subs	r3, r7, r3
 800608a:	f1bb 0f00 	cmp.w	fp, #0
 800608e:	bf08      	it	eq
 8006090:	46b3      	moveq	fp, r6
 8006092:	2e10      	cmp	r6, #16
 8006094:	9308      	str	r3, [sp, #32]
 8006096:	4635      	mov	r5, r6
 8006098:	bfa8      	it	ge
 800609a:	2510      	movge	r5, #16
 800609c:	f7fa fa32 	bl	8000504 <__aeabi_ui2d>
 80060a0:	2e09      	cmp	r6, #9
 80060a2:	4680      	mov	r8, r0
 80060a4:	4689      	mov	r9, r1
 80060a6:	dd13      	ble.n	80060d0 <_strtod_l+0x3d8>
 80060a8:	4b76      	ldr	r3, [pc, #472]	; (8006284 <_strtod_l+0x58c>)
 80060aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80060ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	4680      	mov	r8, r0
 80060b8:	4650      	mov	r0, sl
 80060ba:	4689      	mov	r9, r1
 80060bc:	f7fa fa22 	bl	8000504 <__aeabi_ui2d>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4640      	mov	r0, r8
 80060c6:	4649      	mov	r1, r9
 80060c8:	f7fa f8e0 	bl	800028c <__adddf3>
 80060cc:	4680      	mov	r8, r0
 80060ce:	4689      	mov	r9, r1
 80060d0:	2e0f      	cmp	r6, #15
 80060d2:	dc38      	bgt.n	8006146 <_strtod_l+0x44e>
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f43f ae49 	beq.w	8005d6e <_strtod_l+0x76>
 80060dc:	dd24      	ble.n	8006128 <_strtod_l+0x430>
 80060de:	2b16      	cmp	r3, #22
 80060e0:	dc0b      	bgt.n	80060fa <_strtod_l+0x402>
 80060e2:	4968      	ldr	r1, [pc, #416]	; (8006284 <_strtod_l+0x58c>)
 80060e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	f7fa fa82 	bl	80005f8 <__aeabi_dmul>
 80060f4:	4680      	mov	r8, r0
 80060f6:	4689      	mov	r9, r1
 80060f8:	e639      	b.n	8005d6e <_strtod_l+0x76>
 80060fa:	9a08      	ldr	r2, [sp, #32]
 80060fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006100:	4293      	cmp	r3, r2
 8006102:	db20      	blt.n	8006146 <_strtod_l+0x44e>
 8006104:	4c5f      	ldr	r4, [pc, #380]	; (8006284 <_strtod_l+0x58c>)
 8006106:	f1c6 060f 	rsb	r6, r6, #15
 800610a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800610e:	4642      	mov	r2, r8
 8006110:	464b      	mov	r3, r9
 8006112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006116:	f7fa fa6f 	bl	80005f8 <__aeabi_dmul>
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	1b9e      	subs	r6, r3, r6
 800611e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006122:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006126:	e7e3      	b.n	80060f0 <_strtod_l+0x3f8>
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	3316      	adds	r3, #22
 800612c:	db0b      	blt.n	8006146 <_strtod_l+0x44e>
 800612e:	9b05      	ldr	r3, [sp, #20]
 8006130:	1bdf      	subs	r7, r3, r7
 8006132:	4b54      	ldr	r3, [pc, #336]	; (8006284 <_strtod_l+0x58c>)
 8006134:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613c:	4640      	mov	r0, r8
 800613e:	4649      	mov	r1, r9
 8006140:	f7fa fb84 	bl	800084c <__aeabi_ddiv>
 8006144:	e7d6      	b.n	80060f4 <_strtod_l+0x3fc>
 8006146:	9b08      	ldr	r3, [sp, #32]
 8006148:	1b75      	subs	r5, r6, r5
 800614a:	441d      	add	r5, r3
 800614c:	2d00      	cmp	r5, #0
 800614e:	dd70      	ble.n	8006232 <_strtod_l+0x53a>
 8006150:	f015 030f 	ands.w	r3, r5, #15
 8006154:	d00a      	beq.n	800616c <_strtod_l+0x474>
 8006156:	494b      	ldr	r1, [pc, #300]	; (8006284 <_strtod_l+0x58c>)
 8006158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006164:	f7fa fa48 	bl	80005f8 <__aeabi_dmul>
 8006168:	4680      	mov	r8, r0
 800616a:	4689      	mov	r9, r1
 800616c:	f035 050f 	bics.w	r5, r5, #15
 8006170:	d04d      	beq.n	800620e <_strtod_l+0x516>
 8006172:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006176:	dd22      	ble.n	80061be <_strtod_l+0x4c6>
 8006178:	2500      	movs	r5, #0
 800617a:	46ab      	mov	fp, r5
 800617c:	9509      	str	r5, [sp, #36]	; 0x24
 800617e:	9505      	str	r5, [sp, #20]
 8006180:	2322      	movs	r3, #34	; 0x22
 8006182:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800628c <_strtod_l+0x594>
 8006186:	6023      	str	r3, [r4, #0]
 8006188:	f04f 0800 	mov.w	r8, #0
 800618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618e:	2b00      	cmp	r3, #0
 8006190:	f43f aded 	beq.w	8005d6e <_strtod_l+0x76>
 8006194:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006196:	4620      	mov	r0, r4
 8006198:	f002 fae4 	bl	8008764 <_Bfree>
 800619c:	9905      	ldr	r1, [sp, #20]
 800619e:	4620      	mov	r0, r4
 80061a0:	f002 fae0 	bl	8008764 <_Bfree>
 80061a4:	4659      	mov	r1, fp
 80061a6:	4620      	mov	r0, r4
 80061a8:	f002 fadc 	bl	8008764 <_Bfree>
 80061ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ae:	4620      	mov	r0, r4
 80061b0:	f002 fad8 	bl	8008764 <_Bfree>
 80061b4:	4629      	mov	r1, r5
 80061b6:	4620      	mov	r0, r4
 80061b8:	f002 fad4 	bl	8008764 <_Bfree>
 80061bc:	e5d7      	b.n	8005d6e <_strtod_l+0x76>
 80061be:	4b32      	ldr	r3, [pc, #200]	; (8006288 <_strtod_l+0x590>)
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	2300      	movs	r3, #0
 80061c4:	112d      	asrs	r5, r5, #4
 80061c6:	4640      	mov	r0, r8
 80061c8:	4649      	mov	r1, r9
 80061ca:	469a      	mov	sl, r3
 80061cc:	2d01      	cmp	r5, #1
 80061ce:	dc21      	bgt.n	8006214 <_strtod_l+0x51c>
 80061d0:	b10b      	cbz	r3, 80061d6 <_strtod_l+0x4de>
 80061d2:	4680      	mov	r8, r0
 80061d4:	4689      	mov	r9, r1
 80061d6:	492c      	ldr	r1, [pc, #176]	; (8006288 <_strtod_l+0x590>)
 80061d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80061dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e8:	f7fa fa06 	bl	80005f8 <__aeabi_dmul>
 80061ec:	4b27      	ldr	r3, [pc, #156]	; (800628c <_strtod_l+0x594>)
 80061ee:	460a      	mov	r2, r1
 80061f0:	400b      	ands	r3, r1
 80061f2:	4927      	ldr	r1, [pc, #156]	; (8006290 <_strtod_l+0x598>)
 80061f4:	428b      	cmp	r3, r1
 80061f6:	4680      	mov	r8, r0
 80061f8:	d8be      	bhi.n	8006178 <_strtod_l+0x480>
 80061fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061fe:	428b      	cmp	r3, r1
 8006200:	bf86      	itte	hi
 8006202:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006294 <_strtod_l+0x59c>
 8006206:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800620a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800620e:	2300      	movs	r3, #0
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	e07b      	b.n	800630c <_strtod_l+0x614>
 8006214:	07ea      	lsls	r2, r5, #31
 8006216:	d505      	bpl.n	8006224 <_strtod_l+0x52c>
 8006218:	9b04      	ldr	r3, [sp, #16]
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f7fa f9eb 	bl	80005f8 <__aeabi_dmul>
 8006222:	2301      	movs	r3, #1
 8006224:	9a04      	ldr	r2, [sp, #16]
 8006226:	3208      	adds	r2, #8
 8006228:	f10a 0a01 	add.w	sl, sl, #1
 800622c:	106d      	asrs	r5, r5, #1
 800622e:	9204      	str	r2, [sp, #16]
 8006230:	e7cc      	b.n	80061cc <_strtod_l+0x4d4>
 8006232:	d0ec      	beq.n	800620e <_strtod_l+0x516>
 8006234:	426d      	negs	r5, r5
 8006236:	f015 020f 	ands.w	r2, r5, #15
 800623a:	d00a      	beq.n	8006252 <_strtod_l+0x55a>
 800623c:	4b11      	ldr	r3, [pc, #68]	; (8006284 <_strtod_l+0x58c>)
 800623e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa faff 	bl	800084c <__aeabi_ddiv>
 800624e:	4680      	mov	r8, r0
 8006250:	4689      	mov	r9, r1
 8006252:	112d      	asrs	r5, r5, #4
 8006254:	d0db      	beq.n	800620e <_strtod_l+0x516>
 8006256:	2d1f      	cmp	r5, #31
 8006258:	dd1e      	ble.n	8006298 <_strtod_l+0x5a0>
 800625a:	2500      	movs	r5, #0
 800625c:	46ab      	mov	fp, r5
 800625e:	9509      	str	r5, [sp, #36]	; 0x24
 8006260:	9505      	str	r5, [sp, #20]
 8006262:	2322      	movs	r3, #34	; 0x22
 8006264:	f04f 0800 	mov.w	r8, #0
 8006268:	f04f 0900 	mov.w	r9, #0
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	e78d      	b.n	800618c <_strtod_l+0x494>
 8006270:	080096f9 	.word	0x080096f9
 8006274:	0800973c 	.word	0x0800973c
 8006278:	080096f1 	.word	0x080096f1
 800627c:	08009884 	.word	0x08009884
 8006280:	08009b0f 	.word	0x08009b0f
 8006284:	08009a00 	.word	0x08009a00
 8006288:	080099d8 	.word	0x080099d8
 800628c:	7ff00000 	.word	0x7ff00000
 8006290:	7ca00000 	.word	0x7ca00000
 8006294:	7fefffff 	.word	0x7fefffff
 8006298:	f015 0310 	ands.w	r3, r5, #16
 800629c:	bf18      	it	ne
 800629e:	236a      	movne	r3, #106	; 0x6a
 80062a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006644 <_strtod_l+0x94c>
 80062a4:	9304      	str	r3, [sp, #16]
 80062a6:	4640      	mov	r0, r8
 80062a8:	4649      	mov	r1, r9
 80062aa:	2300      	movs	r3, #0
 80062ac:	07ea      	lsls	r2, r5, #31
 80062ae:	d504      	bpl.n	80062ba <_strtod_l+0x5c2>
 80062b0:	e9da 2300 	ldrd	r2, r3, [sl]
 80062b4:	f7fa f9a0 	bl	80005f8 <__aeabi_dmul>
 80062b8:	2301      	movs	r3, #1
 80062ba:	106d      	asrs	r5, r5, #1
 80062bc:	f10a 0a08 	add.w	sl, sl, #8
 80062c0:	d1f4      	bne.n	80062ac <_strtod_l+0x5b4>
 80062c2:	b10b      	cbz	r3, 80062c8 <_strtod_l+0x5d0>
 80062c4:	4680      	mov	r8, r0
 80062c6:	4689      	mov	r9, r1
 80062c8:	9b04      	ldr	r3, [sp, #16]
 80062ca:	b1bb      	cbz	r3, 80062fc <_strtod_l+0x604>
 80062cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80062d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	4649      	mov	r1, r9
 80062d8:	dd10      	ble.n	80062fc <_strtod_l+0x604>
 80062da:	2b1f      	cmp	r3, #31
 80062dc:	f340 811e 	ble.w	800651c <_strtod_l+0x824>
 80062e0:	2b34      	cmp	r3, #52	; 0x34
 80062e2:	bfde      	ittt	le
 80062e4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80062e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80062ec:	4093      	lslle	r3, r2
 80062ee:	f04f 0800 	mov.w	r8, #0
 80062f2:	bfcc      	ite	gt
 80062f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80062f8:	ea03 0901 	andle.w	r9, r3, r1
 80062fc:	2200      	movs	r2, #0
 80062fe:	2300      	movs	r3, #0
 8006300:	4640      	mov	r0, r8
 8006302:	4649      	mov	r1, r9
 8006304:	f7fa fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006308:	2800      	cmp	r0, #0
 800630a:	d1a6      	bne.n	800625a <_strtod_l+0x562>
 800630c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006312:	4633      	mov	r3, r6
 8006314:	465a      	mov	r2, fp
 8006316:	4620      	mov	r0, r4
 8006318:	f002 fa8c 	bl	8008834 <__s2b>
 800631c:	9009      	str	r0, [sp, #36]	; 0x24
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f af2a 	beq.w	8006178 <_strtod_l+0x480>
 8006324:	9a08      	ldr	r2, [sp, #32]
 8006326:	9b05      	ldr	r3, [sp, #20]
 8006328:	2a00      	cmp	r2, #0
 800632a:	eba3 0307 	sub.w	r3, r3, r7
 800632e:	bfa8      	it	ge
 8006330:	2300      	movge	r3, #0
 8006332:	930c      	str	r3, [sp, #48]	; 0x30
 8006334:	2500      	movs	r5, #0
 8006336:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800633a:	9312      	str	r3, [sp, #72]	; 0x48
 800633c:	46ab      	mov	fp, r5
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	4620      	mov	r0, r4
 8006342:	6859      	ldr	r1, [r3, #4]
 8006344:	f002 f9ce 	bl	80086e4 <_Balloc>
 8006348:	9005      	str	r0, [sp, #20]
 800634a:	2800      	cmp	r0, #0
 800634c:	f43f af18 	beq.w	8006180 <_strtod_l+0x488>
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	3202      	adds	r2, #2
 8006356:	f103 010c 	add.w	r1, r3, #12
 800635a:	0092      	lsls	r2, r2, #2
 800635c:	300c      	adds	r0, #12
 800635e:	f000 fbbf 	bl	8006ae0 <memcpy>
 8006362:	ec49 8b10 	vmov	d0, r8, r9
 8006366:	aa18      	add	r2, sp, #96	; 0x60
 8006368:	a917      	add	r1, sp, #92	; 0x5c
 800636a:	4620      	mov	r0, r4
 800636c:	f002 fd96 	bl	8008e9c <__d2b>
 8006370:	ec49 8b18 	vmov	d8, r8, r9
 8006374:	9016      	str	r0, [sp, #88]	; 0x58
 8006376:	2800      	cmp	r0, #0
 8006378:	f43f af02 	beq.w	8006180 <_strtod_l+0x488>
 800637c:	2101      	movs	r1, #1
 800637e:	4620      	mov	r0, r4
 8006380:	f002 faf0 	bl	8008964 <__i2b>
 8006384:	4683      	mov	fp, r0
 8006386:	2800      	cmp	r0, #0
 8006388:	f43f aefa 	beq.w	8006180 <_strtod_l+0x488>
 800638c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800638e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006390:	2e00      	cmp	r6, #0
 8006392:	bfab      	itete	ge
 8006394:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006396:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006398:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800639a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800639e:	bfac      	ite	ge
 80063a0:	eb06 0a03 	addge.w	sl, r6, r3
 80063a4:	1b9f      	sublt	r7, r3, r6
 80063a6:	9b04      	ldr	r3, [sp, #16]
 80063a8:	1af6      	subs	r6, r6, r3
 80063aa:	4416      	add	r6, r2
 80063ac:	4ba0      	ldr	r3, [pc, #640]	; (8006630 <_strtod_l+0x938>)
 80063ae:	3e01      	subs	r6, #1
 80063b0:	429e      	cmp	r6, r3
 80063b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80063b6:	f280 80c4 	bge.w	8006542 <_strtod_l+0x84a>
 80063ba:	1b9b      	subs	r3, r3, r6
 80063bc:	2b1f      	cmp	r3, #31
 80063be:	eba2 0203 	sub.w	r2, r2, r3
 80063c2:	f04f 0101 	mov.w	r1, #1
 80063c6:	f300 80b0 	bgt.w	800652a <_strtod_l+0x832>
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	930e      	str	r3, [sp, #56]	; 0x38
 80063d0:	2300      	movs	r3, #0
 80063d2:	930d      	str	r3, [sp, #52]	; 0x34
 80063d4:	eb0a 0602 	add.w	r6, sl, r2
 80063d8:	9b04      	ldr	r3, [sp, #16]
 80063da:	45b2      	cmp	sl, r6
 80063dc:	4417      	add	r7, r2
 80063de:	441f      	add	r7, r3
 80063e0:	4653      	mov	r3, sl
 80063e2:	bfa8      	it	ge
 80063e4:	4633      	movge	r3, r6
 80063e6:	42bb      	cmp	r3, r7
 80063e8:	bfa8      	it	ge
 80063ea:	463b      	movge	r3, r7
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfc2      	ittt	gt
 80063f0:	1af6      	subgt	r6, r6, r3
 80063f2:	1aff      	subgt	r7, r7, r3
 80063f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80063f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dd17      	ble.n	800642e <_strtod_l+0x736>
 80063fe:	4659      	mov	r1, fp
 8006400:	461a      	mov	r2, r3
 8006402:	4620      	mov	r0, r4
 8006404:	f002 fb6e 	bl	8008ae4 <__pow5mult>
 8006408:	4683      	mov	fp, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	f43f aeb8 	beq.w	8006180 <_strtod_l+0x488>
 8006410:	4601      	mov	r1, r0
 8006412:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006414:	4620      	mov	r0, r4
 8006416:	f002 fabb 	bl	8008990 <__multiply>
 800641a:	900b      	str	r0, [sp, #44]	; 0x2c
 800641c:	2800      	cmp	r0, #0
 800641e:	f43f aeaf 	beq.w	8006180 <_strtod_l+0x488>
 8006422:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006424:	4620      	mov	r0, r4
 8006426:	f002 f99d 	bl	8008764 <_Bfree>
 800642a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800642c:	9316      	str	r3, [sp, #88]	; 0x58
 800642e:	2e00      	cmp	r6, #0
 8006430:	f300 808c 	bgt.w	800654c <_strtod_l+0x854>
 8006434:	9b08      	ldr	r3, [sp, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd08      	ble.n	800644c <_strtod_l+0x754>
 800643a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800643c:	9905      	ldr	r1, [sp, #20]
 800643e:	4620      	mov	r0, r4
 8006440:	f002 fb50 	bl	8008ae4 <__pow5mult>
 8006444:	9005      	str	r0, [sp, #20]
 8006446:	2800      	cmp	r0, #0
 8006448:	f43f ae9a 	beq.w	8006180 <_strtod_l+0x488>
 800644c:	2f00      	cmp	r7, #0
 800644e:	dd08      	ble.n	8006462 <_strtod_l+0x76a>
 8006450:	9905      	ldr	r1, [sp, #20]
 8006452:	463a      	mov	r2, r7
 8006454:	4620      	mov	r0, r4
 8006456:	f002 fb9f 	bl	8008b98 <__lshift>
 800645a:	9005      	str	r0, [sp, #20]
 800645c:	2800      	cmp	r0, #0
 800645e:	f43f ae8f 	beq.w	8006180 <_strtod_l+0x488>
 8006462:	f1ba 0f00 	cmp.w	sl, #0
 8006466:	dd08      	ble.n	800647a <_strtod_l+0x782>
 8006468:	4659      	mov	r1, fp
 800646a:	4652      	mov	r2, sl
 800646c:	4620      	mov	r0, r4
 800646e:	f002 fb93 	bl	8008b98 <__lshift>
 8006472:	4683      	mov	fp, r0
 8006474:	2800      	cmp	r0, #0
 8006476:	f43f ae83 	beq.w	8006180 <_strtod_l+0x488>
 800647a:	9a05      	ldr	r2, [sp, #20]
 800647c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800647e:	4620      	mov	r0, r4
 8006480:	f002 fc12 	bl	8008ca8 <__mdiff>
 8006484:	4605      	mov	r5, r0
 8006486:	2800      	cmp	r0, #0
 8006488:	f43f ae7a 	beq.w	8006180 <_strtod_l+0x488>
 800648c:	68c3      	ldr	r3, [r0, #12]
 800648e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006490:	2300      	movs	r3, #0
 8006492:	60c3      	str	r3, [r0, #12]
 8006494:	4659      	mov	r1, fp
 8006496:	f002 fbeb 	bl	8008c70 <__mcmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	da60      	bge.n	8006560 <_strtod_l+0x868>
 800649e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a0:	ea53 0308 	orrs.w	r3, r3, r8
 80064a4:	f040 8084 	bne.w	80065b0 <_strtod_l+0x8b8>
 80064a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d17f      	bne.n	80065b0 <_strtod_l+0x8b8>
 80064b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064b4:	0d1b      	lsrs	r3, r3, #20
 80064b6:	051b      	lsls	r3, r3, #20
 80064b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80064bc:	d978      	bls.n	80065b0 <_strtod_l+0x8b8>
 80064be:	696b      	ldr	r3, [r5, #20]
 80064c0:	b913      	cbnz	r3, 80064c8 <_strtod_l+0x7d0>
 80064c2:	692b      	ldr	r3, [r5, #16]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	dd73      	ble.n	80065b0 <_strtod_l+0x8b8>
 80064c8:	4629      	mov	r1, r5
 80064ca:	2201      	movs	r2, #1
 80064cc:	4620      	mov	r0, r4
 80064ce:	f002 fb63 	bl	8008b98 <__lshift>
 80064d2:	4659      	mov	r1, fp
 80064d4:	4605      	mov	r5, r0
 80064d6:	f002 fbcb 	bl	8008c70 <__mcmp>
 80064da:	2800      	cmp	r0, #0
 80064dc:	dd68      	ble.n	80065b0 <_strtod_l+0x8b8>
 80064de:	9904      	ldr	r1, [sp, #16]
 80064e0:	4a54      	ldr	r2, [pc, #336]	; (8006634 <_strtod_l+0x93c>)
 80064e2:	464b      	mov	r3, r9
 80064e4:	2900      	cmp	r1, #0
 80064e6:	f000 8084 	beq.w	80065f2 <_strtod_l+0x8fa>
 80064ea:	ea02 0109 	and.w	r1, r2, r9
 80064ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064f2:	dc7e      	bgt.n	80065f2 <_strtod_l+0x8fa>
 80064f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064f8:	f77f aeb3 	ble.w	8006262 <_strtod_l+0x56a>
 80064fc:	4b4e      	ldr	r3, [pc, #312]	; (8006638 <_strtod_l+0x940>)
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	2200      	movs	r2, #0
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	4b4a      	ldr	r3, [pc, #296]	; (8006634 <_strtod_l+0x93c>)
 800650a:	400b      	ands	r3, r1
 800650c:	4680      	mov	r8, r0
 800650e:	4689      	mov	r9, r1
 8006510:	2b00      	cmp	r3, #0
 8006512:	f47f ae3f 	bne.w	8006194 <_strtod_l+0x49c>
 8006516:	2322      	movs	r3, #34	; 0x22
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	e63b      	b.n	8006194 <_strtod_l+0x49c>
 800651c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	ea03 0808 	and.w	r8, r3, r8
 8006528:	e6e8      	b.n	80062fc <_strtod_l+0x604>
 800652a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800652e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006532:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006536:	36e2      	adds	r6, #226	; 0xe2
 8006538:	fa01 f306 	lsl.w	r3, r1, r6
 800653c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006540:	e748      	b.n	80063d4 <_strtod_l+0x6dc>
 8006542:	2100      	movs	r1, #0
 8006544:	2301      	movs	r3, #1
 8006546:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800654a:	e743      	b.n	80063d4 <_strtod_l+0x6dc>
 800654c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800654e:	4632      	mov	r2, r6
 8006550:	4620      	mov	r0, r4
 8006552:	f002 fb21 	bl	8008b98 <__lshift>
 8006556:	9016      	str	r0, [sp, #88]	; 0x58
 8006558:	2800      	cmp	r0, #0
 800655a:	f47f af6b 	bne.w	8006434 <_strtod_l+0x73c>
 800655e:	e60f      	b.n	8006180 <_strtod_l+0x488>
 8006560:	46ca      	mov	sl, r9
 8006562:	d171      	bne.n	8006648 <_strtod_l+0x950>
 8006564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800656a:	b352      	cbz	r2, 80065c2 <_strtod_l+0x8ca>
 800656c:	4a33      	ldr	r2, [pc, #204]	; (800663c <_strtod_l+0x944>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d12a      	bne.n	80065c8 <_strtod_l+0x8d0>
 8006572:	9b04      	ldr	r3, [sp, #16]
 8006574:	4641      	mov	r1, r8
 8006576:	b1fb      	cbz	r3, 80065b8 <_strtod_l+0x8c0>
 8006578:	4b2e      	ldr	r3, [pc, #184]	; (8006634 <_strtod_l+0x93c>)
 800657a:	ea09 0303 	and.w	r3, r9, r3
 800657e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006586:	d81a      	bhi.n	80065be <_strtod_l+0x8c6>
 8006588:	0d1b      	lsrs	r3, r3, #20
 800658a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	4299      	cmp	r1, r3
 8006594:	d118      	bne.n	80065c8 <_strtod_l+0x8d0>
 8006596:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <_strtod_l+0x948>)
 8006598:	459a      	cmp	sl, r3
 800659a:	d102      	bne.n	80065a2 <_strtod_l+0x8aa>
 800659c:	3101      	adds	r1, #1
 800659e:	f43f adef 	beq.w	8006180 <_strtod_l+0x488>
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <_strtod_l+0x93c>)
 80065a4:	ea0a 0303 	and.w	r3, sl, r3
 80065a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80065ac:	f04f 0800 	mov.w	r8, #0
 80065b0:	9b04      	ldr	r3, [sp, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1a2      	bne.n	80064fc <_strtod_l+0x804>
 80065b6:	e5ed      	b.n	8006194 <_strtod_l+0x49c>
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065bc:	e7e9      	b.n	8006592 <_strtod_l+0x89a>
 80065be:	4613      	mov	r3, r2
 80065c0:	e7e7      	b.n	8006592 <_strtod_l+0x89a>
 80065c2:	ea53 0308 	orrs.w	r3, r3, r8
 80065c6:	d08a      	beq.n	80064de <_strtod_l+0x7e6>
 80065c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ca:	b1e3      	cbz	r3, 8006606 <_strtod_l+0x90e>
 80065cc:	ea13 0f0a 	tst.w	r3, sl
 80065d0:	d0ee      	beq.n	80065b0 <_strtod_l+0x8b8>
 80065d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d4:	9a04      	ldr	r2, [sp, #16]
 80065d6:	4640      	mov	r0, r8
 80065d8:	4649      	mov	r1, r9
 80065da:	b1c3      	cbz	r3, 800660e <_strtod_l+0x916>
 80065dc:	f7ff fb6e 	bl	8005cbc <sulp>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	ec51 0b18 	vmov	r0, r1, d8
 80065e8:	f7f9 fe50 	bl	800028c <__adddf3>
 80065ec:	4680      	mov	r8, r0
 80065ee:	4689      	mov	r9, r1
 80065f0:	e7de      	b.n	80065b0 <_strtod_l+0x8b8>
 80065f2:	4013      	ands	r3, r2
 80065f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80065f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80065fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006600:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006604:	e7d4      	b.n	80065b0 <_strtod_l+0x8b8>
 8006606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006608:	ea13 0f08 	tst.w	r3, r8
 800660c:	e7e0      	b.n	80065d0 <_strtod_l+0x8d8>
 800660e:	f7ff fb55 	bl	8005cbc <sulp>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	ec51 0b18 	vmov	r0, r1, d8
 800661a:	f7f9 fe35 	bl	8000288 <__aeabi_dsub>
 800661e:	2200      	movs	r2, #0
 8006620:	2300      	movs	r3, #0
 8006622:	4680      	mov	r8, r0
 8006624:	4689      	mov	r9, r1
 8006626:	f7fa fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800662a:	2800      	cmp	r0, #0
 800662c:	d0c0      	beq.n	80065b0 <_strtod_l+0x8b8>
 800662e:	e618      	b.n	8006262 <_strtod_l+0x56a>
 8006630:	fffffc02 	.word	0xfffffc02
 8006634:	7ff00000 	.word	0x7ff00000
 8006638:	39500000 	.word	0x39500000
 800663c:	000fffff 	.word	0x000fffff
 8006640:	7fefffff 	.word	0x7fefffff
 8006644:	08009750 	.word	0x08009750
 8006648:	4659      	mov	r1, fp
 800664a:	4628      	mov	r0, r5
 800664c:	f002 fc80 	bl	8008f50 <__ratio>
 8006650:	ec57 6b10 	vmov	r6, r7, d0
 8006654:	ee10 0a10 	vmov	r0, s0
 8006658:	2200      	movs	r2, #0
 800665a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800665e:	4639      	mov	r1, r7
 8006660:	f7fa fa46 	bl	8000af0 <__aeabi_dcmple>
 8006664:	2800      	cmp	r0, #0
 8006666:	d071      	beq.n	800674c <_strtod_l+0xa54>
 8006668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d17c      	bne.n	8006768 <_strtod_l+0xa70>
 800666e:	f1b8 0f00 	cmp.w	r8, #0
 8006672:	d15a      	bne.n	800672a <_strtod_l+0xa32>
 8006674:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006678:	2b00      	cmp	r3, #0
 800667a:	d15d      	bne.n	8006738 <_strtod_l+0xa40>
 800667c:	4b90      	ldr	r3, [pc, #576]	; (80068c0 <_strtod_l+0xbc8>)
 800667e:	2200      	movs	r2, #0
 8006680:	4630      	mov	r0, r6
 8006682:	4639      	mov	r1, r7
 8006684:	f7fa fa2a 	bl	8000adc <__aeabi_dcmplt>
 8006688:	2800      	cmp	r0, #0
 800668a:	d15c      	bne.n	8006746 <_strtod_l+0xa4e>
 800668c:	4630      	mov	r0, r6
 800668e:	4639      	mov	r1, r7
 8006690:	4b8c      	ldr	r3, [pc, #560]	; (80068c4 <_strtod_l+0xbcc>)
 8006692:	2200      	movs	r2, #0
 8006694:	f7f9 ffb0 	bl	80005f8 <__aeabi_dmul>
 8006698:	4606      	mov	r6, r0
 800669a:	460f      	mov	r7, r1
 800669c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80066a0:	9606      	str	r6, [sp, #24]
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80066ac:	4b86      	ldr	r3, [pc, #536]	; (80068c8 <_strtod_l+0xbd0>)
 80066ae:	ea0a 0303 	and.w	r3, sl, r3
 80066b2:	930d      	str	r3, [sp, #52]	; 0x34
 80066b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066b6:	4b85      	ldr	r3, [pc, #532]	; (80068cc <_strtod_l+0xbd4>)
 80066b8:	429a      	cmp	r2, r3
 80066ba:	f040 8090 	bne.w	80067de <_strtod_l+0xae6>
 80066be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80066c2:	ec49 8b10 	vmov	d0, r8, r9
 80066c6:	f002 fb79 	bl	8008dbc <__ulp>
 80066ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066ce:	ec51 0b10 	vmov	r0, r1, d0
 80066d2:	f7f9 ff91 	bl	80005f8 <__aeabi_dmul>
 80066d6:	4642      	mov	r2, r8
 80066d8:	464b      	mov	r3, r9
 80066da:	f7f9 fdd7 	bl	800028c <__adddf3>
 80066de:	460b      	mov	r3, r1
 80066e0:	4979      	ldr	r1, [pc, #484]	; (80068c8 <_strtod_l+0xbd0>)
 80066e2:	4a7b      	ldr	r2, [pc, #492]	; (80068d0 <_strtod_l+0xbd8>)
 80066e4:	4019      	ands	r1, r3
 80066e6:	4291      	cmp	r1, r2
 80066e8:	4680      	mov	r8, r0
 80066ea:	d944      	bls.n	8006776 <_strtod_l+0xa7e>
 80066ec:	ee18 2a90 	vmov	r2, s17
 80066f0:	4b78      	ldr	r3, [pc, #480]	; (80068d4 <_strtod_l+0xbdc>)
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d104      	bne.n	8006700 <_strtod_l+0xa08>
 80066f6:	ee18 3a10 	vmov	r3, s16
 80066fa:	3301      	adds	r3, #1
 80066fc:	f43f ad40 	beq.w	8006180 <_strtod_l+0x488>
 8006700:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80068d4 <_strtod_l+0xbdc>
 8006704:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006708:	9916      	ldr	r1, [sp, #88]	; 0x58
 800670a:	4620      	mov	r0, r4
 800670c:	f002 f82a 	bl	8008764 <_Bfree>
 8006710:	9905      	ldr	r1, [sp, #20]
 8006712:	4620      	mov	r0, r4
 8006714:	f002 f826 	bl	8008764 <_Bfree>
 8006718:	4659      	mov	r1, fp
 800671a:	4620      	mov	r0, r4
 800671c:	f002 f822 	bl	8008764 <_Bfree>
 8006720:	4629      	mov	r1, r5
 8006722:	4620      	mov	r0, r4
 8006724:	f002 f81e 	bl	8008764 <_Bfree>
 8006728:	e609      	b.n	800633e <_strtod_l+0x646>
 800672a:	f1b8 0f01 	cmp.w	r8, #1
 800672e:	d103      	bne.n	8006738 <_strtod_l+0xa40>
 8006730:	f1b9 0f00 	cmp.w	r9, #0
 8006734:	f43f ad95 	beq.w	8006262 <_strtod_l+0x56a>
 8006738:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006890 <_strtod_l+0xb98>
 800673c:	4f60      	ldr	r7, [pc, #384]	; (80068c0 <_strtod_l+0xbc8>)
 800673e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006742:	2600      	movs	r6, #0
 8006744:	e7ae      	b.n	80066a4 <_strtod_l+0x9ac>
 8006746:	4f5f      	ldr	r7, [pc, #380]	; (80068c4 <_strtod_l+0xbcc>)
 8006748:	2600      	movs	r6, #0
 800674a:	e7a7      	b.n	800669c <_strtod_l+0x9a4>
 800674c:	4b5d      	ldr	r3, [pc, #372]	; (80068c4 <_strtod_l+0xbcc>)
 800674e:	4630      	mov	r0, r6
 8006750:	4639      	mov	r1, r7
 8006752:	2200      	movs	r2, #0
 8006754:	f7f9 ff50 	bl	80005f8 <__aeabi_dmul>
 8006758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675a:	4606      	mov	r6, r0
 800675c:	460f      	mov	r7, r1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d09c      	beq.n	800669c <_strtod_l+0x9a4>
 8006762:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006766:	e79d      	b.n	80066a4 <_strtod_l+0x9ac>
 8006768:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006898 <_strtod_l+0xba0>
 800676c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006770:	ec57 6b17 	vmov	r6, r7, d7
 8006774:	e796      	b.n	80066a4 <_strtod_l+0x9ac>
 8006776:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	46ca      	mov	sl, r9
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1c2      	bne.n	8006708 <_strtod_l+0xa10>
 8006782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006788:	0d1b      	lsrs	r3, r3, #20
 800678a:	051b      	lsls	r3, r3, #20
 800678c:	429a      	cmp	r2, r3
 800678e:	d1bb      	bne.n	8006708 <_strtod_l+0xa10>
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7fa fa90 	bl	8000cb8 <__aeabi_d2lz>
 8006798:	f7f9 ff00 	bl	800059c <__aeabi_l2d>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7f9 fd70 	bl	8000288 <__aeabi_dsub>
 80067a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067ae:	ea43 0308 	orr.w	r3, r3, r8
 80067b2:	4313      	orrs	r3, r2
 80067b4:	4606      	mov	r6, r0
 80067b6:	460f      	mov	r7, r1
 80067b8:	d054      	beq.n	8006864 <_strtod_l+0xb6c>
 80067ba:	a339      	add	r3, pc, #228	; (adr r3, 80068a0 <_strtod_l+0xba8>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7fa f98c 	bl	8000adc <__aeabi_dcmplt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f47f ace5 	bne.w	8006194 <_strtod_l+0x49c>
 80067ca:	a337      	add	r3, pc, #220	; (adr r3, 80068a8 <_strtod_l+0xbb0>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	f7fa f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d095      	beq.n	8006708 <_strtod_l+0xa10>
 80067dc:	e4da      	b.n	8006194 <_strtod_l+0x49c>
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	b333      	cbz	r3, 8006830 <_strtod_l+0xb38>
 80067e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067e8:	d822      	bhi.n	8006830 <_strtod_l+0xb38>
 80067ea:	a331      	add	r3, pc, #196	; (adr r3, 80068b0 <_strtod_l+0xbb8>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7fa f97c 	bl	8000af0 <__aeabi_dcmple>
 80067f8:	b1a0      	cbz	r0, 8006824 <_strtod_l+0xb2c>
 80067fa:	4639      	mov	r1, r7
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7fa f9d3 	bl	8000ba8 <__aeabi_d2uiz>
 8006802:	2801      	cmp	r0, #1
 8006804:	bf38      	it	cc
 8006806:	2001      	movcc	r0, #1
 8006808:	f7f9 fe7c 	bl	8000504 <__aeabi_ui2d>
 800680c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800680e:	4606      	mov	r6, r0
 8006810:	460f      	mov	r7, r1
 8006812:	bb23      	cbnz	r3, 800685e <_strtod_l+0xb66>
 8006814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006818:	9010      	str	r0, [sp, #64]	; 0x40
 800681a:	9311      	str	r3, [sp, #68]	; 0x44
 800681c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006820:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006828:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006830:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006834:	eeb0 0a48 	vmov.f32	s0, s16
 8006838:	eef0 0a68 	vmov.f32	s1, s17
 800683c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006840:	f002 fabc 	bl	8008dbc <__ulp>
 8006844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006848:	ec53 2b10 	vmov	r2, r3, d0
 800684c:	f7f9 fed4 	bl	80005f8 <__aeabi_dmul>
 8006850:	ec53 2b18 	vmov	r2, r3, d8
 8006854:	f7f9 fd1a 	bl	800028c <__adddf3>
 8006858:	4680      	mov	r8, r0
 800685a:	4689      	mov	r9, r1
 800685c:	e78d      	b.n	800677a <_strtod_l+0xa82>
 800685e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006862:	e7db      	b.n	800681c <_strtod_l+0xb24>
 8006864:	a314      	add	r3, pc, #80	; (adr r3, 80068b8 <_strtod_l+0xbc0>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f7fa f937 	bl	8000adc <__aeabi_dcmplt>
 800686e:	e7b3      	b.n	80067d8 <_strtod_l+0xae0>
 8006870:	2300      	movs	r3, #0
 8006872:	930a      	str	r3, [sp, #40]	; 0x28
 8006874:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	f7ff ba7c 	b.w	8005d76 <_strtod_l+0x7e>
 800687e:	2a65      	cmp	r2, #101	; 0x65
 8006880:	f43f ab75 	beq.w	8005f6e <_strtod_l+0x276>
 8006884:	2a45      	cmp	r2, #69	; 0x45
 8006886:	f43f ab72 	beq.w	8005f6e <_strtod_l+0x276>
 800688a:	2301      	movs	r3, #1
 800688c:	f7ff bbaa 	b.w	8005fe4 <_strtod_l+0x2ec>
 8006890:	00000000 	.word	0x00000000
 8006894:	bff00000 	.word	0xbff00000
 8006898:	00000000 	.word	0x00000000
 800689c:	3ff00000 	.word	0x3ff00000
 80068a0:	94a03595 	.word	0x94a03595
 80068a4:	3fdfffff 	.word	0x3fdfffff
 80068a8:	35afe535 	.word	0x35afe535
 80068ac:	3fe00000 	.word	0x3fe00000
 80068b0:	ffc00000 	.word	0xffc00000
 80068b4:	41dfffff 	.word	0x41dfffff
 80068b8:	94a03595 	.word	0x94a03595
 80068bc:	3fcfffff 	.word	0x3fcfffff
 80068c0:	3ff00000 	.word	0x3ff00000
 80068c4:	3fe00000 	.word	0x3fe00000
 80068c8:	7ff00000 	.word	0x7ff00000
 80068cc:	7fe00000 	.word	0x7fe00000
 80068d0:	7c9fffff 	.word	0x7c9fffff
 80068d4:	7fefffff 	.word	0x7fefffff

080068d8 <_strtod_r>:
 80068d8:	4b01      	ldr	r3, [pc, #4]	; (80068e0 <_strtod_r+0x8>)
 80068da:	f7ff ba0d 	b.w	8005cf8 <_strtod_l>
 80068de:	bf00      	nop
 80068e0:	20000018 	.word	0x20000018

080068e4 <_strtol_l.constprop.0>:
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ea:	d001      	beq.n	80068f0 <_strtol_l.constprop.0+0xc>
 80068ec:	2b24      	cmp	r3, #36	; 0x24
 80068ee:	d906      	bls.n	80068fe <_strtol_l.constprop.0+0x1a>
 80068f0:	f000 f8ca 	bl	8006a88 <__errno>
 80068f4:	2316      	movs	r3, #22
 80068f6:	6003      	str	r3, [r0, #0]
 80068f8:	2000      	movs	r0, #0
 80068fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80069e4 <_strtol_l.constprop.0+0x100>
 8006902:	460d      	mov	r5, r1
 8006904:	462e      	mov	r6, r5
 8006906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800690a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800690e:	f017 0708 	ands.w	r7, r7, #8
 8006912:	d1f7      	bne.n	8006904 <_strtol_l.constprop.0+0x20>
 8006914:	2c2d      	cmp	r4, #45	; 0x2d
 8006916:	d132      	bne.n	800697e <_strtol_l.constprop.0+0x9a>
 8006918:	782c      	ldrb	r4, [r5, #0]
 800691a:	2701      	movs	r7, #1
 800691c:	1cb5      	adds	r5, r6, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d05b      	beq.n	80069da <_strtol_l.constprop.0+0xf6>
 8006922:	2b10      	cmp	r3, #16
 8006924:	d109      	bne.n	800693a <_strtol_l.constprop.0+0x56>
 8006926:	2c30      	cmp	r4, #48	; 0x30
 8006928:	d107      	bne.n	800693a <_strtol_l.constprop.0+0x56>
 800692a:	782c      	ldrb	r4, [r5, #0]
 800692c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006930:	2c58      	cmp	r4, #88	; 0x58
 8006932:	d14d      	bne.n	80069d0 <_strtol_l.constprop.0+0xec>
 8006934:	786c      	ldrb	r4, [r5, #1]
 8006936:	2310      	movs	r3, #16
 8006938:	3502      	adds	r5, #2
 800693a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800693e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006942:	f04f 0e00 	mov.w	lr, #0
 8006946:	fbb8 f9f3 	udiv	r9, r8, r3
 800694a:	4676      	mov	r6, lr
 800694c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006950:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006954:	f1bc 0f09 	cmp.w	ip, #9
 8006958:	d816      	bhi.n	8006988 <_strtol_l.constprop.0+0xa4>
 800695a:	4664      	mov	r4, ip
 800695c:	42a3      	cmp	r3, r4
 800695e:	dd24      	ble.n	80069aa <_strtol_l.constprop.0+0xc6>
 8006960:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006964:	d008      	beq.n	8006978 <_strtol_l.constprop.0+0x94>
 8006966:	45b1      	cmp	r9, r6
 8006968:	d31c      	bcc.n	80069a4 <_strtol_l.constprop.0+0xc0>
 800696a:	d101      	bne.n	8006970 <_strtol_l.constprop.0+0x8c>
 800696c:	45a2      	cmp	sl, r4
 800696e:	db19      	blt.n	80069a4 <_strtol_l.constprop.0+0xc0>
 8006970:	fb06 4603 	mla	r6, r6, r3, r4
 8006974:	f04f 0e01 	mov.w	lr, #1
 8006978:	f815 4b01 	ldrb.w	r4, [r5], #1
 800697c:	e7e8      	b.n	8006950 <_strtol_l.constprop.0+0x6c>
 800697e:	2c2b      	cmp	r4, #43	; 0x2b
 8006980:	bf04      	itt	eq
 8006982:	782c      	ldrbeq	r4, [r5, #0]
 8006984:	1cb5      	addeq	r5, r6, #2
 8006986:	e7ca      	b.n	800691e <_strtol_l.constprop.0+0x3a>
 8006988:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800698c:	f1bc 0f19 	cmp.w	ip, #25
 8006990:	d801      	bhi.n	8006996 <_strtol_l.constprop.0+0xb2>
 8006992:	3c37      	subs	r4, #55	; 0x37
 8006994:	e7e2      	b.n	800695c <_strtol_l.constprop.0+0x78>
 8006996:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800699a:	f1bc 0f19 	cmp.w	ip, #25
 800699e:	d804      	bhi.n	80069aa <_strtol_l.constprop.0+0xc6>
 80069a0:	3c57      	subs	r4, #87	; 0x57
 80069a2:	e7db      	b.n	800695c <_strtol_l.constprop.0+0x78>
 80069a4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80069a8:	e7e6      	b.n	8006978 <_strtol_l.constprop.0+0x94>
 80069aa:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80069ae:	d105      	bne.n	80069bc <_strtol_l.constprop.0+0xd8>
 80069b0:	2322      	movs	r3, #34	; 0x22
 80069b2:	6003      	str	r3, [r0, #0]
 80069b4:	4646      	mov	r6, r8
 80069b6:	b942      	cbnz	r2, 80069ca <_strtol_l.constprop.0+0xe6>
 80069b8:	4630      	mov	r0, r6
 80069ba:	e79e      	b.n	80068fa <_strtol_l.constprop.0+0x16>
 80069bc:	b107      	cbz	r7, 80069c0 <_strtol_l.constprop.0+0xdc>
 80069be:	4276      	negs	r6, r6
 80069c0:	2a00      	cmp	r2, #0
 80069c2:	d0f9      	beq.n	80069b8 <_strtol_l.constprop.0+0xd4>
 80069c4:	f1be 0f00 	cmp.w	lr, #0
 80069c8:	d000      	beq.n	80069cc <_strtol_l.constprop.0+0xe8>
 80069ca:	1e69      	subs	r1, r5, #1
 80069cc:	6011      	str	r1, [r2, #0]
 80069ce:	e7f3      	b.n	80069b8 <_strtol_l.constprop.0+0xd4>
 80069d0:	2430      	movs	r4, #48	; 0x30
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1b1      	bne.n	800693a <_strtol_l.constprop.0+0x56>
 80069d6:	2308      	movs	r3, #8
 80069d8:	e7af      	b.n	800693a <_strtol_l.constprop.0+0x56>
 80069da:	2c30      	cmp	r4, #48	; 0x30
 80069dc:	d0a5      	beq.n	800692a <_strtol_l.constprop.0+0x46>
 80069de:	230a      	movs	r3, #10
 80069e0:	e7ab      	b.n	800693a <_strtol_l.constprop.0+0x56>
 80069e2:	bf00      	nop
 80069e4:	08009781 	.word	0x08009781

080069e8 <_strtol_r>:
 80069e8:	f7ff bf7c 	b.w	80068e4 <_strtol_l.constprop.0>

080069ec <_fwalk_sglue>:
 80069ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f0:	4607      	mov	r7, r0
 80069f2:	4688      	mov	r8, r1
 80069f4:	4614      	mov	r4, r2
 80069f6:	2600      	movs	r6, #0
 80069f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006a00:	d505      	bpl.n	8006a0e <_fwalk_sglue+0x22>
 8006a02:	6824      	ldr	r4, [r4, #0]
 8006a04:	2c00      	cmp	r4, #0
 8006a06:	d1f7      	bne.n	80069f8 <_fwalk_sglue+0xc>
 8006a08:	4630      	mov	r0, r6
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d907      	bls.n	8006a24 <_fwalk_sglue+0x38>
 8006a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	d003      	beq.n	8006a24 <_fwalk_sglue+0x38>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4638      	mov	r0, r7
 8006a20:	47c0      	blx	r8
 8006a22:	4306      	orrs	r6, r0
 8006a24:	3568      	adds	r5, #104	; 0x68
 8006a26:	e7e9      	b.n	80069fc <_fwalk_sglue+0x10>

08006a28 <iprintf>:
 8006a28:	b40f      	push	{r0, r1, r2, r3}
 8006a2a:	b507      	push	{r0, r1, r2, lr}
 8006a2c:	4906      	ldr	r1, [pc, #24]	; (8006a48 <iprintf+0x20>)
 8006a2e:	ab04      	add	r3, sp, #16
 8006a30:	6808      	ldr	r0, [r1, #0]
 8006a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a36:	6881      	ldr	r1, [r0, #8]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	f001 fbc5 	bl	80081c8 <_vfiprintf_r>
 8006a3e:	b003      	add	sp, #12
 8006a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a44:	b004      	add	sp, #16
 8006a46:	4770      	bx	lr
 8006a48:	200001d0 	.word	0x200001d0

08006a4c <strncmp>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	b16a      	cbz	r2, 8006a6c <strncmp+0x20>
 8006a50:	3901      	subs	r1, #1
 8006a52:	1884      	adds	r4, r0, r2
 8006a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d103      	bne.n	8006a68 <strncmp+0x1c>
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d001      	beq.n	8006a68 <strncmp+0x1c>
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	d1f5      	bne.n	8006a54 <strncmp+0x8>
 8006a68:	1ad0      	subs	r0, r2, r3
 8006a6a:	bd10      	pop	{r4, pc}
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	e7fc      	b.n	8006a6a <strncmp+0x1e>

08006a70 <memset>:
 8006a70:	4402      	add	r2, r0
 8006a72:	4603      	mov	r3, r0
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d100      	bne.n	8006a7a <memset+0xa>
 8006a78:	4770      	bx	lr
 8006a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7e:	e7f9      	b.n	8006a74 <memset+0x4>

08006a80 <_localeconv_r>:
 8006a80:	4800      	ldr	r0, [pc, #0]	; (8006a84 <_localeconv_r+0x4>)
 8006a82:	4770      	bx	lr
 8006a84:	20000108 	.word	0x20000108

08006a88 <__errno>:
 8006a88:	4b01      	ldr	r3, [pc, #4]	; (8006a90 <__errno+0x8>)
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	200001d0 	.word	0x200001d0

08006a94 <__libc_init_array>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4d0d      	ldr	r5, [pc, #52]	; (8006acc <__libc_init_array+0x38>)
 8006a98:	4c0d      	ldr	r4, [pc, #52]	; (8006ad0 <__libc_init_array+0x3c>)
 8006a9a:	1b64      	subs	r4, r4, r5
 8006a9c:	10a4      	asrs	r4, r4, #2
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	d109      	bne.n	8006ab8 <__libc_init_array+0x24>
 8006aa4:	4d0b      	ldr	r5, [pc, #44]	; (8006ad4 <__libc_init_array+0x40>)
 8006aa6:	4c0c      	ldr	r4, [pc, #48]	; (8006ad8 <__libc_init_array+0x44>)
 8006aa8:	f002 fdb8 	bl	800961c <_init>
 8006aac:	1b64      	subs	r4, r4, r5
 8006aae:	10a4      	asrs	r4, r4, #2
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	d105      	bne.n	8006ac2 <__libc_init_array+0x2e>
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abc:	4798      	blx	r3
 8006abe:	3601      	adds	r6, #1
 8006ac0:	e7ee      	b.n	8006aa0 <__libc_init_array+0xc>
 8006ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac6:	4798      	blx	r3
 8006ac8:	3601      	adds	r6, #1
 8006aca:	e7f2      	b.n	8006ab2 <__libc_init_array+0x1e>
 8006acc:	08009b18 	.word	0x08009b18
 8006ad0:	08009b18 	.word	0x08009b18
 8006ad4:	08009b18 	.word	0x08009b18
 8006ad8:	08009b1c 	.word	0x08009b1c

08006adc <__retarget_lock_acquire_recursive>:
 8006adc:	4770      	bx	lr

08006ade <__retarget_lock_release_recursive>:
 8006ade:	4770      	bx	lr

08006ae0 <memcpy>:
 8006ae0:	440a      	add	r2, r1
 8006ae2:	4291      	cmp	r1, r2
 8006ae4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ae8:	d100      	bne.n	8006aec <memcpy+0xc>
 8006aea:	4770      	bx	lr
 8006aec:	b510      	push	{r4, lr}
 8006aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af6:	4291      	cmp	r1, r2
 8006af8:	d1f9      	bne.n	8006aee <memcpy+0xe>
 8006afa:	bd10      	pop	{r4, pc}
 8006afc:	0000      	movs	r0, r0
	...

08006b00 <nan>:
 8006b00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006b08 <nan+0x8>
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	7ff80000 	.word	0x7ff80000

08006b10 <nanf>:
 8006b10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b18 <nanf+0x8>
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	7fc00000 	.word	0x7fc00000

08006b1c <quorem>:
 8006b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	6903      	ldr	r3, [r0, #16]
 8006b22:	690c      	ldr	r4, [r1, #16]
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	4607      	mov	r7, r0
 8006b28:	db7e      	blt.n	8006c28 <quorem+0x10c>
 8006b2a:	3c01      	subs	r4, #1
 8006b2c:	f101 0814 	add.w	r8, r1, #20
 8006b30:	f100 0514 	add.w	r5, r0, #20
 8006b34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b42:	3301      	adds	r3, #1
 8006b44:	429a      	cmp	r2, r3
 8006b46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b52:	d331      	bcc.n	8006bb8 <quorem+0x9c>
 8006b54:	f04f 0e00 	mov.w	lr, #0
 8006b58:	4640      	mov	r0, r8
 8006b5a:	46ac      	mov	ip, r5
 8006b5c:	46f2      	mov	sl, lr
 8006b5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b62:	b293      	uxth	r3, r2
 8006b64:	fb06 e303 	mla	r3, r6, r3, lr
 8006b68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b6c:	0c1a      	lsrs	r2, r3, #16
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ebaa 0303 	sub.w	r3, sl, r3
 8006b74:	f8dc a000 	ldr.w	sl, [ip]
 8006b78:	fa13 f38a 	uxtah	r3, r3, sl
 8006b7c:	fb06 220e 	mla	r2, r6, lr, r2
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	9b00      	ldr	r3, [sp, #0]
 8006b84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b88:	b292      	uxth	r2, r2
 8006b8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b92:	f8bd 3000 	ldrh.w	r3, [sp]
 8006b96:	4581      	cmp	r9, r0
 8006b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b9c:	f84c 3b04 	str.w	r3, [ip], #4
 8006ba0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ba4:	d2db      	bcs.n	8006b5e <quorem+0x42>
 8006ba6:	f855 300b 	ldr.w	r3, [r5, fp]
 8006baa:	b92b      	cbnz	r3, 8006bb8 <quorem+0x9c>
 8006bac:	9b01      	ldr	r3, [sp, #4]
 8006bae:	3b04      	subs	r3, #4
 8006bb0:	429d      	cmp	r5, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	d32c      	bcc.n	8006c10 <quorem+0xf4>
 8006bb6:	613c      	str	r4, [r7, #16]
 8006bb8:	4638      	mov	r0, r7
 8006bba:	f002 f859 	bl	8008c70 <__mcmp>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	db22      	blt.n	8006c08 <quorem+0xec>
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bcc:	f8d1 c000 	ldr.w	ip, [r1]
 8006bd0:	b293      	uxth	r3, r2
 8006bd2:	1ac3      	subs	r3, r0, r3
 8006bd4:	0c12      	lsrs	r2, r2, #16
 8006bd6:	fa13 f38c 	uxtah	r3, r3, ip
 8006bda:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006bde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006be8:	45c1      	cmp	r9, r8
 8006bea:	f841 3b04 	str.w	r3, [r1], #4
 8006bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bf2:	d2e9      	bcs.n	8006bc8 <quorem+0xac>
 8006bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bfc:	b922      	cbnz	r2, 8006c08 <quorem+0xec>
 8006bfe:	3b04      	subs	r3, #4
 8006c00:	429d      	cmp	r5, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	d30a      	bcc.n	8006c1c <quorem+0x100>
 8006c06:	613c      	str	r4, [r7, #16]
 8006c08:	4630      	mov	r0, r6
 8006c0a:	b003      	add	sp, #12
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	3b04      	subs	r3, #4
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	d1ce      	bne.n	8006bb6 <quorem+0x9a>
 8006c18:	3c01      	subs	r4, #1
 8006c1a:	e7c9      	b.n	8006bb0 <quorem+0x94>
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	3b04      	subs	r3, #4
 8006c20:	2a00      	cmp	r2, #0
 8006c22:	d1f0      	bne.n	8006c06 <quorem+0xea>
 8006c24:	3c01      	subs	r4, #1
 8006c26:	e7eb      	b.n	8006c00 <quorem+0xe4>
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e7ee      	b.n	8006c0a <quorem+0xee>
 8006c2c:	0000      	movs	r0, r0
	...

08006c30 <_dtoa_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	ed2d 8b04 	vpush	{d8-d9}
 8006c38:	69c5      	ldr	r5, [r0, #28]
 8006c3a:	b093      	sub	sp, #76	; 0x4c
 8006c3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c40:	ec57 6b10 	vmov	r6, r7, d0
 8006c44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c48:	9107      	str	r1, [sp, #28]
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006c50:	b975      	cbnz	r5, 8006c70 <_dtoa_r+0x40>
 8006c52:	2010      	movs	r0, #16
 8006c54:	f001 fbd2 	bl	80083fc <malloc>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	61e0      	str	r0, [r4, #28]
 8006c5c:	b920      	cbnz	r0, 8006c68 <_dtoa_r+0x38>
 8006c5e:	4bae      	ldr	r3, [pc, #696]	; (8006f18 <_dtoa_r+0x2e8>)
 8006c60:	21ef      	movs	r1, #239	; 0xef
 8006c62:	48ae      	ldr	r0, [pc, #696]	; (8006f1c <_dtoa_r+0x2ec>)
 8006c64:	f002 fbf4 	bl	8009450 <__assert_func>
 8006c68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c6c:	6005      	str	r5, [r0, #0]
 8006c6e:	60c5      	str	r5, [r0, #12]
 8006c70:	69e3      	ldr	r3, [r4, #28]
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	b151      	cbz	r1, 8006c8c <_dtoa_r+0x5c>
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	604a      	str	r2, [r1, #4]
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4093      	lsls	r3, r2
 8006c7e:	608b      	str	r3, [r1, #8]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f001 fd6f 	bl	8008764 <_Bfree>
 8006c86:	69e3      	ldr	r3, [r4, #28]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	1e3b      	subs	r3, r7, #0
 8006c8e:	bfbb      	ittet	lt
 8006c90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c94:	9303      	strlt	r3, [sp, #12]
 8006c96:	2300      	movge	r3, #0
 8006c98:	2201      	movlt	r2, #1
 8006c9a:	bfac      	ite	ge
 8006c9c:	f8c8 3000 	strge.w	r3, [r8]
 8006ca0:	f8c8 2000 	strlt.w	r2, [r8]
 8006ca4:	4b9e      	ldr	r3, [pc, #632]	; (8006f20 <_dtoa_r+0x2f0>)
 8006ca6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006caa:	ea33 0308 	bics.w	r3, r3, r8
 8006cae:	d11b      	bne.n	8006ce8 <_dtoa_r+0xb8>
 8006cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006cbc:	4333      	orrs	r3, r6
 8006cbe:	f000 8593 	beq.w	80077e8 <_dtoa_r+0xbb8>
 8006cc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc4:	b963      	cbnz	r3, 8006ce0 <_dtoa_r+0xb0>
 8006cc6:	4b97      	ldr	r3, [pc, #604]	; (8006f24 <_dtoa_r+0x2f4>)
 8006cc8:	e027      	b.n	8006d1a <_dtoa_r+0xea>
 8006cca:	4b97      	ldr	r3, [pc, #604]	; (8006f28 <_dtoa_r+0x2f8>)
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	9800      	ldr	r0, [sp, #0]
 8006cd6:	b013      	add	sp, #76	; 0x4c
 8006cd8:	ecbd 8b04 	vpop	{d8-d9}
 8006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce0:	4b90      	ldr	r3, [pc, #576]	; (8006f24 <_dtoa_r+0x2f4>)
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	e7f3      	b.n	8006cd0 <_dtoa_r+0xa0>
 8006ce8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	ec51 0b17 	vmov	r0, r1, d7
 8006cf2:	eeb0 8a47 	vmov.f32	s16, s14
 8006cf6:	eef0 8a67 	vmov.f32	s17, s15
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f7f9 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d00:	4681      	mov	r9, r0
 8006d02:	b160      	cbz	r0, 8006d1e <_dtoa_r+0xee>
 8006d04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d06:	2301      	movs	r3, #1
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8568 	beq.w	80077e2 <_dtoa_r+0xbb2>
 8006d12:	4b86      	ldr	r3, [pc, #536]	; (8006f2c <_dtoa_r+0x2fc>)
 8006d14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	e7da      	b.n	8006cd4 <_dtoa_r+0xa4>
 8006d1e:	aa10      	add	r2, sp, #64	; 0x40
 8006d20:	a911      	add	r1, sp, #68	; 0x44
 8006d22:	4620      	mov	r0, r4
 8006d24:	eeb0 0a48 	vmov.f32	s0, s16
 8006d28:	eef0 0a68 	vmov.f32	s1, s17
 8006d2c:	f002 f8b6 	bl	8008e9c <__d2b>
 8006d30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d34:	4682      	mov	sl, r0
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	d07f      	beq.n	8006e3a <_dtoa_r+0x20a>
 8006d3a:	ee18 3a90 	vmov	r3, s17
 8006d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d46:	ec51 0b18 	vmov	r0, r1, d8
 8006d4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d56:	4619      	mov	r1, r3
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4b75      	ldr	r3, [pc, #468]	; (8006f30 <_dtoa_r+0x300>)
 8006d5c:	f7f9 fa94 	bl	8000288 <__aeabi_dsub>
 8006d60:	a367      	add	r3, pc, #412	; (adr r3, 8006f00 <_dtoa_r+0x2d0>)
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f7f9 fc47 	bl	80005f8 <__aeabi_dmul>
 8006d6a:	a367      	add	r3, pc, #412	; (adr r3, 8006f08 <_dtoa_r+0x2d8>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fa8c 	bl	800028c <__adddf3>
 8006d74:	4606      	mov	r6, r0
 8006d76:	4628      	mov	r0, r5
 8006d78:	460f      	mov	r7, r1
 8006d7a:	f7f9 fbd3 	bl	8000524 <__aeabi_i2d>
 8006d7e:	a364      	add	r3, pc, #400	; (adr r3, 8006f10 <_dtoa_r+0x2e0>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fc38 	bl	80005f8 <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	4639      	mov	r1, r7
 8006d90:	f7f9 fa7c 	bl	800028c <__adddf3>
 8006d94:	4606      	mov	r6, r0
 8006d96:	460f      	mov	r7, r1
 8006d98:	f7f9 fede 	bl	8000b58 <__aeabi_d2iz>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4683      	mov	fp, r0
 8006da0:	2300      	movs	r3, #0
 8006da2:	4630      	mov	r0, r6
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7f9 fe99 	bl	8000adc <__aeabi_dcmplt>
 8006daa:	b148      	cbz	r0, 8006dc0 <_dtoa_r+0x190>
 8006dac:	4658      	mov	r0, fp
 8006dae:	f7f9 fbb9 	bl	8000524 <__aeabi_i2d>
 8006db2:	4632      	mov	r2, r6
 8006db4:	463b      	mov	r3, r7
 8006db6:	f7f9 fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dba:	b908      	cbnz	r0, 8006dc0 <_dtoa_r+0x190>
 8006dbc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006dc0:	f1bb 0f16 	cmp.w	fp, #22
 8006dc4:	d857      	bhi.n	8006e76 <_dtoa_r+0x246>
 8006dc6:	4b5b      	ldr	r3, [pc, #364]	; (8006f34 <_dtoa_r+0x304>)
 8006dc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	ec51 0b18 	vmov	r0, r1, d8
 8006dd4:	f7f9 fe82 	bl	8000adc <__aeabi_dcmplt>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d04e      	beq.n	8006e7a <_dtoa_r+0x24a>
 8006ddc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006de0:	2300      	movs	r3, #0
 8006de2:	930c      	str	r3, [sp, #48]	; 0x30
 8006de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006de6:	1b5b      	subs	r3, r3, r5
 8006de8:	1e5a      	subs	r2, r3, #1
 8006dea:	bf45      	ittet	mi
 8006dec:	f1c3 0301 	rsbmi	r3, r3, #1
 8006df0:	9305      	strmi	r3, [sp, #20]
 8006df2:	2300      	movpl	r3, #0
 8006df4:	2300      	movmi	r3, #0
 8006df6:	9206      	str	r2, [sp, #24]
 8006df8:	bf54      	ite	pl
 8006dfa:	9305      	strpl	r3, [sp, #20]
 8006dfc:	9306      	strmi	r3, [sp, #24]
 8006dfe:	f1bb 0f00 	cmp.w	fp, #0
 8006e02:	db3c      	blt.n	8006e7e <_dtoa_r+0x24e>
 8006e04:	9b06      	ldr	r3, [sp, #24]
 8006e06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006e0a:	445b      	add	r3, fp
 8006e0c:	9306      	str	r3, [sp, #24]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9308      	str	r3, [sp, #32]
 8006e12:	9b07      	ldr	r3, [sp, #28]
 8006e14:	2b09      	cmp	r3, #9
 8006e16:	d868      	bhi.n	8006eea <_dtoa_r+0x2ba>
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	bfc4      	itt	gt
 8006e1c:	3b04      	subgt	r3, #4
 8006e1e:	9307      	strgt	r3, [sp, #28]
 8006e20:	9b07      	ldr	r3, [sp, #28]
 8006e22:	f1a3 0302 	sub.w	r3, r3, #2
 8006e26:	bfcc      	ite	gt
 8006e28:	2500      	movgt	r5, #0
 8006e2a:	2501      	movle	r5, #1
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	f200 8085 	bhi.w	8006f3c <_dtoa_r+0x30c>
 8006e32:	e8df f003 	tbb	[pc, r3]
 8006e36:	3b2e      	.short	0x3b2e
 8006e38:	5839      	.short	0x5839
 8006e3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006e3e:	441d      	add	r5, r3
 8006e40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	bfc1      	itttt	gt
 8006e48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006e54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006e58:	bfd6      	itet	le
 8006e5a:	f1c3 0320 	rsble	r3, r3, #32
 8006e5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e62:	fa06 f003 	lslle.w	r0, r6, r3
 8006e66:	f7f9 fb4d 	bl	8000504 <__aeabi_ui2d>
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e70:	3d01      	subs	r5, #1
 8006e72:	920e      	str	r2, [sp, #56]	; 0x38
 8006e74:	e76f      	b.n	8006d56 <_dtoa_r+0x126>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e7b3      	b.n	8006de2 <_dtoa_r+0x1b2>
 8006e7a:	900c      	str	r0, [sp, #48]	; 0x30
 8006e7c:	e7b2      	b.n	8006de4 <_dtoa_r+0x1b4>
 8006e7e:	9b05      	ldr	r3, [sp, #20]
 8006e80:	eba3 030b 	sub.w	r3, r3, fp
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	f1cb 0300 	rsb	r3, fp, #0
 8006e8a:	9308      	str	r3, [sp, #32]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e90:	e7bf      	b.n	8006e12 <_dtoa_r+0x1e2>
 8006e92:	2300      	movs	r3, #0
 8006e94:	9309      	str	r3, [sp, #36]	; 0x24
 8006e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc52      	bgt.n	8006f42 <_dtoa_r+0x312>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	920a      	str	r2, [sp, #40]	; 0x28
 8006ea6:	e00b      	b.n	8006ec0 <_dtoa_r+0x290>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e7f3      	b.n	8006e94 <_dtoa_r+0x264>
 8006eac:	2300      	movs	r3, #0
 8006eae:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb2:	445b      	add	r3, fp
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	9304      	str	r3, [sp, #16]
 8006ebc:	bfb8      	it	lt
 8006ebe:	2301      	movlt	r3, #1
 8006ec0:	69e0      	ldr	r0, [r4, #28]
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	f102 0614 	add.w	r6, r2, #20
 8006eca:	429e      	cmp	r6, r3
 8006ecc:	d93d      	bls.n	8006f4a <_dtoa_r+0x31a>
 8006ece:	6041      	str	r1, [r0, #4]
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f001 fc07 	bl	80086e4 <_Balloc>
 8006ed6:	9000      	str	r0, [sp, #0]
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d139      	bne.n	8006f50 <_dtoa_r+0x320>
 8006edc:	4b16      	ldr	r3, [pc, #88]	; (8006f38 <_dtoa_r+0x308>)
 8006ede:	4602      	mov	r2, r0
 8006ee0:	f240 11af 	movw	r1, #431	; 0x1af
 8006ee4:	e6bd      	b.n	8006c62 <_dtoa_r+0x32>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e7e1      	b.n	8006eae <_dtoa_r+0x27e>
 8006eea:	2501      	movs	r5, #1
 8006eec:	2300      	movs	r3, #0
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	9304      	str	r3, [sp, #16]
 8006efa:	2200      	movs	r2, #0
 8006efc:	2312      	movs	r3, #18
 8006efe:	e7d1      	b.n	8006ea4 <_dtoa_r+0x274>
 8006f00:	636f4361 	.word	0x636f4361
 8006f04:	3fd287a7 	.word	0x3fd287a7
 8006f08:	8b60c8b3 	.word	0x8b60c8b3
 8006f0c:	3fc68a28 	.word	0x3fc68a28
 8006f10:	509f79fb 	.word	0x509f79fb
 8006f14:	3fd34413 	.word	0x3fd34413
 8006f18:	0800988e 	.word	0x0800988e
 8006f1c:	080098a5 	.word	0x080098a5
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	0800988a 	.word	0x0800988a
 8006f28:	08009881 	.word	0x08009881
 8006f2c:	080096fd 	.word	0x080096fd
 8006f30:	3ff80000 	.word	0x3ff80000
 8006f34:	08009a00 	.word	0x08009a00
 8006f38:	080098fd 	.word	0x080098fd
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f40:	e7d7      	b.n	8006ef2 <_dtoa_r+0x2c2>
 8006f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	9304      	str	r3, [sp, #16]
 8006f48:	e7ba      	b.n	8006ec0 <_dtoa_r+0x290>
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	0052      	lsls	r2, r2, #1
 8006f4e:	e7ba      	b.n	8006ec6 <_dtoa_r+0x296>
 8006f50:	69e3      	ldr	r3, [r4, #28]
 8006f52:	9a00      	ldr	r2, [sp, #0]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	2b0e      	cmp	r3, #14
 8006f5a:	f200 80a8 	bhi.w	80070ae <_dtoa_r+0x47e>
 8006f5e:	2d00      	cmp	r5, #0
 8006f60:	f000 80a5 	beq.w	80070ae <_dtoa_r+0x47e>
 8006f64:	f1bb 0f00 	cmp.w	fp, #0
 8006f68:	dd38      	ble.n	8006fdc <_dtoa_r+0x3ac>
 8006f6a:	4bc0      	ldr	r3, [pc, #768]	; (800726c <_dtoa_r+0x63c>)
 8006f6c:	f00b 020f 	and.w	r2, fp, #15
 8006f70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f78:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006f7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006f80:	d019      	beq.n	8006fb6 <_dtoa_r+0x386>
 8006f82:	4bbb      	ldr	r3, [pc, #748]	; (8007270 <_dtoa_r+0x640>)
 8006f84:	ec51 0b18 	vmov	r0, r1, d8
 8006f88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f8c:	f7f9 fc5e 	bl	800084c <__aeabi_ddiv>
 8006f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f94:	f008 080f 	and.w	r8, r8, #15
 8006f98:	2503      	movs	r5, #3
 8006f9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007270 <_dtoa_r+0x640>
 8006f9e:	f1b8 0f00 	cmp.w	r8, #0
 8006fa2:	d10a      	bne.n	8006fba <_dtoa_r+0x38a>
 8006fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	f7f9 fc4e 	bl	800084c <__aeabi_ddiv>
 8006fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb4:	e02b      	b.n	800700e <_dtoa_r+0x3de>
 8006fb6:	2502      	movs	r5, #2
 8006fb8:	e7ef      	b.n	8006f9a <_dtoa_r+0x36a>
 8006fba:	f018 0f01 	tst.w	r8, #1
 8006fbe:	d008      	beq.n	8006fd2 <_dtoa_r+0x3a2>
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006fc8:	f7f9 fb16 	bl	80005f8 <__aeabi_dmul>
 8006fcc:	3501      	adds	r5, #1
 8006fce:	4606      	mov	r6, r0
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fd6:	f109 0908 	add.w	r9, r9, #8
 8006fda:	e7e0      	b.n	8006f9e <_dtoa_r+0x36e>
 8006fdc:	f000 809f 	beq.w	800711e <_dtoa_r+0x4ee>
 8006fe0:	f1cb 0600 	rsb	r6, fp, #0
 8006fe4:	4ba1      	ldr	r3, [pc, #644]	; (800726c <_dtoa_r+0x63c>)
 8006fe6:	4fa2      	ldr	r7, [pc, #648]	; (8007270 <_dtoa_r+0x640>)
 8006fe8:	f006 020f 	and.w	r2, r6, #15
 8006fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	ec51 0b18 	vmov	r0, r1, d8
 8006ff8:	f7f9 fafe 	bl	80005f8 <__aeabi_dmul>
 8006ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007000:	1136      	asrs	r6, r6, #4
 8007002:	2300      	movs	r3, #0
 8007004:	2502      	movs	r5, #2
 8007006:	2e00      	cmp	r6, #0
 8007008:	d17e      	bne.n	8007108 <_dtoa_r+0x4d8>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1d0      	bne.n	8006fb0 <_dtoa_r+0x380>
 800700e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007010:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8084 	beq.w	8007122 <_dtoa_r+0x4f2>
 800701a:	4b96      	ldr	r3, [pc, #600]	; (8007274 <_dtoa_r+0x644>)
 800701c:	2200      	movs	r2, #0
 800701e:	4640      	mov	r0, r8
 8007020:	4649      	mov	r1, r9
 8007022:	f7f9 fd5b 	bl	8000adc <__aeabi_dcmplt>
 8007026:	2800      	cmp	r0, #0
 8007028:	d07b      	beq.n	8007122 <_dtoa_r+0x4f2>
 800702a:	9b04      	ldr	r3, [sp, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d078      	beq.n	8007122 <_dtoa_r+0x4f2>
 8007030:	9b01      	ldr	r3, [sp, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	dd39      	ble.n	80070aa <_dtoa_r+0x47a>
 8007036:	4b90      	ldr	r3, [pc, #576]	; (8007278 <_dtoa_r+0x648>)
 8007038:	2200      	movs	r2, #0
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 fadb 	bl	80005f8 <__aeabi_dmul>
 8007042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007046:	9e01      	ldr	r6, [sp, #4]
 8007048:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800704c:	3501      	adds	r5, #1
 800704e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007052:	4628      	mov	r0, r5
 8007054:	f7f9 fa66 	bl	8000524 <__aeabi_i2d>
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	f7f9 facc 	bl	80005f8 <__aeabi_dmul>
 8007060:	4b86      	ldr	r3, [pc, #536]	; (800727c <_dtoa_r+0x64c>)
 8007062:	2200      	movs	r2, #0
 8007064:	f7f9 f912 	bl	800028c <__adddf3>
 8007068:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800706c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007070:	9303      	str	r3, [sp, #12]
 8007072:	2e00      	cmp	r6, #0
 8007074:	d158      	bne.n	8007128 <_dtoa_r+0x4f8>
 8007076:	4b82      	ldr	r3, [pc, #520]	; (8007280 <_dtoa_r+0x650>)
 8007078:	2200      	movs	r2, #0
 800707a:	4640      	mov	r0, r8
 800707c:	4649      	mov	r1, r9
 800707e:	f7f9 f903 	bl	8000288 <__aeabi_dsub>
 8007082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007086:	4680      	mov	r8, r0
 8007088:	4689      	mov	r9, r1
 800708a:	f7f9 fd45 	bl	8000b18 <__aeabi_dcmpgt>
 800708e:	2800      	cmp	r0, #0
 8007090:	f040 8296 	bne.w	80075c0 <_dtoa_r+0x990>
 8007094:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007098:	4640      	mov	r0, r8
 800709a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800709e:	4649      	mov	r1, r9
 80070a0:	f7f9 fd1c 	bl	8000adc <__aeabi_dcmplt>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	f040 8289 	bne.w	80075bc <_dtoa_r+0x98c>
 80070aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80070ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f2c0 814e 	blt.w	8007352 <_dtoa_r+0x722>
 80070b6:	f1bb 0f0e 	cmp.w	fp, #14
 80070ba:	f300 814a 	bgt.w	8007352 <_dtoa_r+0x722>
 80070be:	4b6b      	ldr	r3, [pc, #428]	; (800726c <_dtoa_r+0x63c>)
 80070c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80070c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f280 80dc 	bge.w	8007288 <_dtoa_r+0x658>
 80070d0:	9b04      	ldr	r3, [sp, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f300 80d8 	bgt.w	8007288 <_dtoa_r+0x658>
 80070d8:	f040 826f 	bne.w	80075ba <_dtoa_r+0x98a>
 80070dc:	4b68      	ldr	r3, [pc, #416]	; (8007280 <_dtoa_r+0x650>)
 80070de:	2200      	movs	r2, #0
 80070e0:	4640      	mov	r0, r8
 80070e2:	4649      	mov	r1, r9
 80070e4:	f7f9 fa88 	bl	80005f8 <__aeabi_dmul>
 80070e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070ec:	f7f9 fd0a 	bl	8000b04 <__aeabi_dcmpge>
 80070f0:	9e04      	ldr	r6, [sp, #16]
 80070f2:	4637      	mov	r7, r6
 80070f4:	2800      	cmp	r0, #0
 80070f6:	f040 8245 	bne.w	8007584 <_dtoa_r+0x954>
 80070fa:	9d00      	ldr	r5, [sp, #0]
 80070fc:	2331      	movs	r3, #49	; 0x31
 80070fe:	f805 3b01 	strb.w	r3, [r5], #1
 8007102:	f10b 0b01 	add.w	fp, fp, #1
 8007106:	e241      	b.n	800758c <_dtoa_r+0x95c>
 8007108:	07f2      	lsls	r2, r6, #31
 800710a:	d505      	bpl.n	8007118 <_dtoa_r+0x4e8>
 800710c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	3501      	adds	r5, #1
 8007116:	2301      	movs	r3, #1
 8007118:	1076      	asrs	r6, r6, #1
 800711a:	3708      	adds	r7, #8
 800711c:	e773      	b.n	8007006 <_dtoa_r+0x3d6>
 800711e:	2502      	movs	r5, #2
 8007120:	e775      	b.n	800700e <_dtoa_r+0x3de>
 8007122:	9e04      	ldr	r6, [sp, #16]
 8007124:	465f      	mov	r7, fp
 8007126:	e792      	b.n	800704e <_dtoa_r+0x41e>
 8007128:	9900      	ldr	r1, [sp, #0]
 800712a:	4b50      	ldr	r3, [pc, #320]	; (800726c <_dtoa_r+0x63c>)
 800712c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007130:	4431      	add	r1, r6
 8007132:	9102      	str	r1, [sp, #8]
 8007134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007136:	eeb0 9a47 	vmov.f32	s18, s14
 800713a:	eef0 9a67 	vmov.f32	s19, s15
 800713e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007142:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007146:	2900      	cmp	r1, #0
 8007148:	d044      	beq.n	80071d4 <_dtoa_r+0x5a4>
 800714a:	494e      	ldr	r1, [pc, #312]	; (8007284 <_dtoa_r+0x654>)
 800714c:	2000      	movs	r0, #0
 800714e:	f7f9 fb7d 	bl	800084c <__aeabi_ddiv>
 8007152:	ec53 2b19 	vmov	r2, r3, d9
 8007156:	f7f9 f897 	bl	8000288 <__aeabi_dsub>
 800715a:	9d00      	ldr	r5, [sp, #0]
 800715c:	ec41 0b19 	vmov	d9, r0, r1
 8007160:	4649      	mov	r1, r9
 8007162:	4640      	mov	r0, r8
 8007164:	f7f9 fcf8 	bl	8000b58 <__aeabi_d2iz>
 8007168:	4606      	mov	r6, r0
 800716a:	f7f9 f9db 	bl	8000524 <__aeabi_i2d>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4640      	mov	r0, r8
 8007174:	4649      	mov	r1, r9
 8007176:	f7f9 f887 	bl	8000288 <__aeabi_dsub>
 800717a:	3630      	adds	r6, #48	; 0x30
 800717c:	f805 6b01 	strb.w	r6, [r5], #1
 8007180:	ec53 2b19 	vmov	r2, r3, d9
 8007184:	4680      	mov	r8, r0
 8007186:	4689      	mov	r9, r1
 8007188:	f7f9 fca8 	bl	8000adc <__aeabi_dcmplt>
 800718c:	2800      	cmp	r0, #0
 800718e:	d164      	bne.n	800725a <_dtoa_r+0x62a>
 8007190:	4642      	mov	r2, r8
 8007192:	464b      	mov	r3, r9
 8007194:	4937      	ldr	r1, [pc, #220]	; (8007274 <_dtoa_r+0x644>)
 8007196:	2000      	movs	r0, #0
 8007198:	f7f9 f876 	bl	8000288 <__aeabi_dsub>
 800719c:	ec53 2b19 	vmov	r2, r3, d9
 80071a0:	f7f9 fc9c 	bl	8000adc <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 80b6 	bne.w	8007316 <_dtoa_r+0x6e6>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	429d      	cmp	r5, r3
 80071ae:	f43f af7c 	beq.w	80070aa <_dtoa_r+0x47a>
 80071b2:	4b31      	ldr	r3, [pc, #196]	; (8007278 <_dtoa_r+0x648>)
 80071b4:	ec51 0b19 	vmov	r0, r1, d9
 80071b8:	2200      	movs	r2, #0
 80071ba:	f7f9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80071be:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <_dtoa_r+0x648>)
 80071c0:	ec41 0b19 	vmov	d9, r0, r1
 80071c4:	2200      	movs	r2, #0
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 fa15 	bl	80005f8 <__aeabi_dmul>
 80071ce:	4680      	mov	r8, r0
 80071d0:	4689      	mov	r9, r1
 80071d2:	e7c5      	b.n	8007160 <_dtoa_r+0x530>
 80071d4:	ec51 0b17 	vmov	r0, r1, d7
 80071d8:	f7f9 fa0e 	bl	80005f8 <__aeabi_dmul>
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	9d00      	ldr	r5, [sp, #0]
 80071e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80071e2:	ec41 0b19 	vmov	d9, r0, r1
 80071e6:	4649      	mov	r1, r9
 80071e8:	4640      	mov	r0, r8
 80071ea:	f7f9 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80071ee:	4606      	mov	r6, r0
 80071f0:	f7f9 f998 	bl	8000524 <__aeabi_i2d>
 80071f4:	3630      	adds	r6, #48	; 0x30
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 f843 	bl	8000288 <__aeabi_dsub>
 8007202:	f805 6b01 	strb.w	r6, [r5], #1
 8007206:	9b02      	ldr	r3, [sp, #8]
 8007208:	429d      	cmp	r5, r3
 800720a:	4680      	mov	r8, r0
 800720c:	4689      	mov	r9, r1
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	d124      	bne.n	800725e <_dtoa_r+0x62e>
 8007214:	4b1b      	ldr	r3, [pc, #108]	; (8007284 <_dtoa_r+0x654>)
 8007216:	ec51 0b19 	vmov	r0, r1, d9
 800721a:	f7f9 f837 	bl	800028c <__adddf3>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f9 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800722a:	2800      	cmp	r0, #0
 800722c:	d173      	bne.n	8007316 <_dtoa_r+0x6e6>
 800722e:	ec53 2b19 	vmov	r2, r3, d9
 8007232:	4914      	ldr	r1, [pc, #80]	; (8007284 <_dtoa_r+0x654>)
 8007234:	2000      	movs	r0, #0
 8007236:	f7f9 f827 	bl	8000288 <__aeabi_dsub>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4640      	mov	r0, r8
 8007240:	4649      	mov	r1, r9
 8007242:	f7f9 fc4b 	bl	8000adc <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	f43f af2f 	beq.w	80070aa <_dtoa_r+0x47a>
 800724c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800724e:	1e6b      	subs	r3, r5, #1
 8007250:	930f      	str	r3, [sp, #60]	; 0x3c
 8007252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007256:	2b30      	cmp	r3, #48	; 0x30
 8007258:	d0f8      	beq.n	800724c <_dtoa_r+0x61c>
 800725a:	46bb      	mov	fp, r7
 800725c:	e04a      	b.n	80072f4 <_dtoa_r+0x6c4>
 800725e:	4b06      	ldr	r3, [pc, #24]	; (8007278 <_dtoa_r+0x648>)
 8007260:	f7f9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8007264:	4680      	mov	r8, r0
 8007266:	4689      	mov	r9, r1
 8007268:	e7bd      	b.n	80071e6 <_dtoa_r+0x5b6>
 800726a:	bf00      	nop
 800726c:	08009a00 	.word	0x08009a00
 8007270:	080099d8 	.word	0x080099d8
 8007274:	3ff00000 	.word	0x3ff00000
 8007278:	40240000 	.word	0x40240000
 800727c:	401c0000 	.word	0x401c0000
 8007280:	40140000 	.word	0x40140000
 8007284:	3fe00000 	.word	0x3fe00000
 8007288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800728c:	9d00      	ldr	r5, [sp, #0]
 800728e:	4642      	mov	r2, r8
 8007290:	464b      	mov	r3, r9
 8007292:	4630      	mov	r0, r6
 8007294:	4639      	mov	r1, r7
 8007296:	f7f9 fad9 	bl	800084c <__aeabi_ddiv>
 800729a:	f7f9 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800729e:	9001      	str	r0, [sp, #4]
 80072a0:	f7f9 f940 	bl	8000524 <__aeabi_i2d>
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	f7f9 f9a6 	bl	80005f8 <__aeabi_dmul>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4630      	mov	r0, r6
 80072b2:	4639      	mov	r1, r7
 80072b4:	f7f8 ffe8 	bl	8000288 <__aeabi_dsub>
 80072b8:	9e01      	ldr	r6, [sp, #4]
 80072ba:	9f04      	ldr	r7, [sp, #16]
 80072bc:	3630      	adds	r6, #48	; 0x30
 80072be:	f805 6b01 	strb.w	r6, [r5], #1
 80072c2:	9e00      	ldr	r6, [sp, #0]
 80072c4:	1bae      	subs	r6, r5, r6
 80072c6:	42b7      	cmp	r7, r6
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	d134      	bne.n	8007338 <_dtoa_r+0x708>
 80072ce:	f7f8 ffdd 	bl	800028c <__adddf3>
 80072d2:	4642      	mov	r2, r8
 80072d4:	464b      	mov	r3, r9
 80072d6:	4606      	mov	r6, r0
 80072d8:	460f      	mov	r7, r1
 80072da:	f7f9 fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 80072de:	b9c8      	cbnz	r0, 8007314 <_dtoa_r+0x6e4>
 80072e0:	4642      	mov	r2, r8
 80072e2:	464b      	mov	r3, r9
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ec:	b110      	cbz	r0, 80072f4 <_dtoa_r+0x6c4>
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	07db      	lsls	r3, r3, #31
 80072f2:	d40f      	bmi.n	8007314 <_dtoa_r+0x6e4>
 80072f4:	4651      	mov	r1, sl
 80072f6:	4620      	mov	r0, r4
 80072f8:	f001 fa34 	bl	8008764 <_Bfree>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007300:	702b      	strb	r3, [r5, #0]
 8007302:	f10b 0301 	add.w	r3, fp, #1
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800730a:	2b00      	cmp	r3, #0
 800730c:	f43f ace2 	beq.w	8006cd4 <_dtoa_r+0xa4>
 8007310:	601d      	str	r5, [r3, #0]
 8007312:	e4df      	b.n	8006cd4 <_dtoa_r+0xa4>
 8007314:	465f      	mov	r7, fp
 8007316:	462b      	mov	r3, r5
 8007318:	461d      	mov	r5, r3
 800731a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800731e:	2a39      	cmp	r2, #57	; 0x39
 8007320:	d106      	bne.n	8007330 <_dtoa_r+0x700>
 8007322:	9a00      	ldr	r2, [sp, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d1f7      	bne.n	8007318 <_dtoa_r+0x6e8>
 8007328:	9900      	ldr	r1, [sp, #0]
 800732a:	2230      	movs	r2, #48	; 0x30
 800732c:	3701      	adds	r7, #1
 800732e:	700a      	strb	r2, [r1, #0]
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	3201      	adds	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e790      	b.n	800725a <_dtoa_r+0x62a>
 8007338:	4ba3      	ldr	r3, [pc, #652]	; (80075c8 <_dtoa_r+0x998>)
 800733a:	2200      	movs	r2, #0
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	2200      	movs	r2, #0
 8007342:	2300      	movs	r3, #0
 8007344:	4606      	mov	r6, r0
 8007346:	460f      	mov	r7, r1
 8007348:	f7f9 fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800734c:	2800      	cmp	r0, #0
 800734e:	d09e      	beq.n	800728e <_dtoa_r+0x65e>
 8007350:	e7d0      	b.n	80072f4 <_dtoa_r+0x6c4>
 8007352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007354:	2a00      	cmp	r2, #0
 8007356:	f000 80ca 	beq.w	80074ee <_dtoa_r+0x8be>
 800735a:	9a07      	ldr	r2, [sp, #28]
 800735c:	2a01      	cmp	r2, #1
 800735e:	f300 80ad 	bgt.w	80074bc <_dtoa_r+0x88c>
 8007362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007364:	2a00      	cmp	r2, #0
 8007366:	f000 80a5 	beq.w	80074b4 <_dtoa_r+0x884>
 800736a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800736e:	9e08      	ldr	r6, [sp, #32]
 8007370:	9d05      	ldr	r5, [sp, #20]
 8007372:	9a05      	ldr	r2, [sp, #20]
 8007374:	441a      	add	r2, r3
 8007376:	9205      	str	r2, [sp, #20]
 8007378:	9a06      	ldr	r2, [sp, #24]
 800737a:	2101      	movs	r1, #1
 800737c:	441a      	add	r2, r3
 800737e:	4620      	mov	r0, r4
 8007380:	9206      	str	r2, [sp, #24]
 8007382:	f001 faef 	bl	8008964 <__i2b>
 8007386:	4607      	mov	r7, r0
 8007388:	b165      	cbz	r5, 80073a4 <_dtoa_r+0x774>
 800738a:	9b06      	ldr	r3, [sp, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	dd09      	ble.n	80073a4 <_dtoa_r+0x774>
 8007390:	42ab      	cmp	r3, r5
 8007392:	9a05      	ldr	r2, [sp, #20]
 8007394:	bfa8      	it	ge
 8007396:	462b      	movge	r3, r5
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	9205      	str	r2, [sp, #20]
 800739c:	9a06      	ldr	r2, [sp, #24]
 800739e:	1aed      	subs	r5, r5, r3
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	9306      	str	r3, [sp, #24]
 80073a4:	9b08      	ldr	r3, [sp, #32]
 80073a6:	b1f3      	cbz	r3, 80073e6 <_dtoa_r+0x7b6>
 80073a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 80a3 	beq.w	80074f6 <_dtoa_r+0x8c6>
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	dd10      	ble.n	80073d6 <_dtoa_r+0x7a6>
 80073b4:	4639      	mov	r1, r7
 80073b6:	4632      	mov	r2, r6
 80073b8:	4620      	mov	r0, r4
 80073ba:	f001 fb93 	bl	8008ae4 <__pow5mult>
 80073be:	4652      	mov	r2, sl
 80073c0:	4601      	mov	r1, r0
 80073c2:	4607      	mov	r7, r0
 80073c4:	4620      	mov	r0, r4
 80073c6:	f001 fae3 	bl	8008990 <__multiply>
 80073ca:	4651      	mov	r1, sl
 80073cc:	4680      	mov	r8, r0
 80073ce:	4620      	mov	r0, r4
 80073d0:	f001 f9c8 	bl	8008764 <_Bfree>
 80073d4:	46c2      	mov	sl, r8
 80073d6:	9b08      	ldr	r3, [sp, #32]
 80073d8:	1b9a      	subs	r2, r3, r6
 80073da:	d004      	beq.n	80073e6 <_dtoa_r+0x7b6>
 80073dc:	4651      	mov	r1, sl
 80073de:	4620      	mov	r0, r4
 80073e0:	f001 fb80 	bl	8008ae4 <__pow5mult>
 80073e4:	4682      	mov	sl, r0
 80073e6:	2101      	movs	r1, #1
 80073e8:	4620      	mov	r0, r4
 80073ea:	f001 fabb 	bl	8008964 <__i2b>
 80073ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	4606      	mov	r6, r0
 80073f4:	f340 8081 	ble.w	80074fa <_dtoa_r+0x8ca>
 80073f8:	461a      	mov	r2, r3
 80073fa:	4601      	mov	r1, r0
 80073fc:	4620      	mov	r0, r4
 80073fe:	f001 fb71 	bl	8008ae4 <__pow5mult>
 8007402:	9b07      	ldr	r3, [sp, #28]
 8007404:	2b01      	cmp	r3, #1
 8007406:	4606      	mov	r6, r0
 8007408:	dd7a      	ble.n	8007500 <_dtoa_r+0x8d0>
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	6933      	ldr	r3, [r6, #16]
 8007410:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007414:	6918      	ldr	r0, [r3, #16]
 8007416:	f001 fa57 	bl	80088c8 <__hi0bits>
 800741a:	f1c0 0020 	rsb	r0, r0, #32
 800741e:	9b06      	ldr	r3, [sp, #24]
 8007420:	4418      	add	r0, r3
 8007422:	f010 001f 	ands.w	r0, r0, #31
 8007426:	f000 8094 	beq.w	8007552 <_dtoa_r+0x922>
 800742a:	f1c0 0320 	rsb	r3, r0, #32
 800742e:	2b04      	cmp	r3, #4
 8007430:	f340 8085 	ble.w	800753e <_dtoa_r+0x90e>
 8007434:	9b05      	ldr	r3, [sp, #20]
 8007436:	f1c0 001c 	rsb	r0, r0, #28
 800743a:	4403      	add	r3, r0
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	9b06      	ldr	r3, [sp, #24]
 8007440:	4403      	add	r3, r0
 8007442:	4405      	add	r5, r0
 8007444:	9306      	str	r3, [sp, #24]
 8007446:	9b05      	ldr	r3, [sp, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dd05      	ble.n	8007458 <_dtoa_r+0x828>
 800744c:	4651      	mov	r1, sl
 800744e:	461a      	mov	r2, r3
 8007450:	4620      	mov	r0, r4
 8007452:	f001 fba1 	bl	8008b98 <__lshift>
 8007456:	4682      	mov	sl, r0
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dd05      	ble.n	800746a <_dtoa_r+0x83a>
 800745e:	4631      	mov	r1, r6
 8007460:	461a      	mov	r2, r3
 8007462:	4620      	mov	r0, r4
 8007464:	f001 fb98 	bl	8008b98 <__lshift>
 8007468:	4606      	mov	r6, r0
 800746a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800746c:	2b00      	cmp	r3, #0
 800746e:	d072      	beq.n	8007556 <_dtoa_r+0x926>
 8007470:	4631      	mov	r1, r6
 8007472:	4650      	mov	r0, sl
 8007474:	f001 fbfc 	bl	8008c70 <__mcmp>
 8007478:	2800      	cmp	r0, #0
 800747a:	da6c      	bge.n	8007556 <_dtoa_r+0x926>
 800747c:	2300      	movs	r3, #0
 800747e:	4651      	mov	r1, sl
 8007480:	220a      	movs	r2, #10
 8007482:	4620      	mov	r0, r4
 8007484:	f001 f990 	bl	80087a8 <__multadd>
 8007488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800748e:	4682      	mov	sl, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 81b0 	beq.w	80077f6 <_dtoa_r+0xbc6>
 8007496:	2300      	movs	r3, #0
 8007498:	4639      	mov	r1, r7
 800749a:	220a      	movs	r2, #10
 800749c:	4620      	mov	r0, r4
 800749e:	f001 f983 	bl	80087a8 <__multadd>
 80074a2:	9b01      	ldr	r3, [sp, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	4607      	mov	r7, r0
 80074a8:	f300 8096 	bgt.w	80075d8 <_dtoa_r+0x9a8>
 80074ac:	9b07      	ldr	r3, [sp, #28]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	dc59      	bgt.n	8007566 <_dtoa_r+0x936>
 80074b2:	e091      	b.n	80075d8 <_dtoa_r+0x9a8>
 80074b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074ba:	e758      	b.n	800736e <_dtoa_r+0x73e>
 80074bc:	9b04      	ldr	r3, [sp, #16]
 80074be:	1e5e      	subs	r6, r3, #1
 80074c0:	9b08      	ldr	r3, [sp, #32]
 80074c2:	42b3      	cmp	r3, r6
 80074c4:	bfbf      	itttt	lt
 80074c6:	9b08      	ldrlt	r3, [sp, #32]
 80074c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80074ca:	9608      	strlt	r6, [sp, #32]
 80074cc:	1af3      	sublt	r3, r6, r3
 80074ce:	bfb4      	ite	lt
 80074d0:	18d2      	addlt	r2, r2, r3
 80074d2:	1b9e      	subge	r6, r3, r6
 80074d4:	9b04      	ldr	r3, [sp, #16]
 80074d6:	bfbc      	itt	lt
 80074d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80074da:	2600      	movlt	r6, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bfb7      	itett	lt
 80074e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80074e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80074e8:	1a9d      	sublt	r5, r3, r2
 80074ea:	2300      	movlt	r3, #0
 80074ec:	e741      	b.n	8007372 <_dtoa_r+0x742>
 80074ee:	9e08      	ldr	r6, [sp, #32]
 80074f0:	9d05      	ldr	r5, [sp, #20]
 80074f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074f4:	e748      	b.n	8007388 <_dtoa_r+0x758>
 80074f6:	9a08      	ldr	r2, [sp, #32]
 80074f8:	e770      	b.n	80073dc <_dtoa_r+0x7ac>
 80074fa:	9b07      	ldr	r3, [sp, #28]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	dc19      	bgt.n	8007534 <_dtoa_r+0x904>
 8007500:	9b02      	ldr	r3, [sp, #8]
 8007502:	b9bb      	cbnz	r3, 8007534 <_dtoa_r+0x904>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800750a:	b99b      	cbnz	r3, 8007534 <_dtoa_r+0x904>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007512:	0d1b      	lsrs	r3, r3, #20
 8007514:	051b      	lsls	r3, r3, #20
 8007516:	b183      	cbz	r3, 800753a <_dtoa_r+0x90a>
 8007518:	9b05      	ldr	r3, [sp, #20]
 800751a:	3301      	adds	r3, #1
 800751c:	9305      	str	r3, [sp, #20]
 800751e:	9b06      	ldr	r3, [sp, #24]
 8007520:	3301      	adds	r3, #1
 8007522:	9306      	str	r3, [sp, #24]
 8007524:	f04f 0801 	mov.w	r8, #1
 8007528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800752a:	2b00      	cmp	r3, #0
 800752c:	f47f af6f 	bne.w	800740e <_dtoa_r+0x7de>
 8007530:	2001      	movs	r0, #1
 8007532:	e774      	b.n	800741e <_dtoa_r+0x7ee>
 8007534:	f04f 0800 	mov.w	r8, #0
 8007538:	e7f6      	b.n	8007528 <_dtoa_r+0x8f8>
 800753a:	4698      	mov	r8, r3
 800753c:	e7f4      	b.n	8007528 <_dtoa_r+0x8f8>
 800753e:	d082      	beq.n	8007446 <_dtoa_r+0x816>
 8007540:	9a05      	ldr	r2, [sp, #20]
 8007542:	331c      	adds	r3, #28
 8007544:	441a      	add	r2, r3
 8007546:	9205      	str	r2, [sp, #20]
 8007548:	9a06      	ldr	r2, [sp, #24]
 800754a:	441a      	add	r2, r3
 800754c:	441d      	add	r5, r3
 800754e:	9206      	str	r2, [sp, #24]
 8007550:	e779      	b.n	8007446 <_dtoa_r+0x816>
 8007552:	4603      	mov	r3, r0
 8007554:	e7f4      	b.n	8007540 <_dtoa_r+0x910>
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	dc37      	bgt.n	80075cc <_dtoa_r+0x99c>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	2b02      	cmp	r3, #2
 8007560:	dd34      	ble.n	80075cc <_dtoa_r+0x99c>
 8007562:	9b04      	ldr	r3, [sp, #16]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	b963      	cbnz	r3, 8007584 <_dtoa_r+0x954>
 800756a:	4631      	mov	r1, r6
 800756c:	2205      	movs	r2, #5
 800756e:	4620      	mov	r0, r4
 8007570:	f001 f91a 	bl	80087a8 <__multadd>
 8007574:	4601      	mov	r1, r0
 8007576:	4606      	mov	r6, r0
 8007578:	4650      	mov	r0, sl
 800757a:	f001 fb79 	bl	8008c70 <__mcmp>
 800757e:	2800      	cmp	r0, #0
 8007580:	f73f adbb 	bgt.w	80070fa <_dtoa_r+0x4ca>
 8007584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007586:	9d00      	ldr	r5, [sp, #0]
 8007588:	ea6f 0b03 	mvn.w	fp, r3
 800758c:	f04f 0800 	mov.w	r8, #0
 8007590:	4631      	mov	r1, r6
 8007592:	4620      	mov	r0, r4
 8007594:	f001 f8e6 	bl	8008764 <_Bfree>
 8007598:	2f00      	cmp	r7, #0
 800759a:	f43f aeab 	beq.w	80072f4 <_dtoa_r+0x6c4>
 800759e:	f1b8 0f00 	cmp.w	r8, #0
 80075a2:	d005      	beq.n	80075b0 <_dtoa_r+0x980>
 80075a4:	45b8      	cmp	r8, r7
 80075a6:	d003      	beq.n	80075b0 <_dtoa_r+0x980>
 80075a8:	4641      	mov	r1, r8
 80075aa:	4620      	mov	r0, r4
 80075ac:	f001 f8da 	bl	8008764 <_Bfree>
 80075b0:	4639      	mov	r1, r7
 80075b2:	4620      	mov	r0, r4
 80075b4:	f001 f8d6 	bl	8008764 <_Bfree>
 80075b8:	e69c      	b.n	80072f4 <_dtoa_r+0x6c4>
 80075ba:	2600      	movs	r6, #0
 80075bc:	4637      	mov	r7, r6
 80075be:	e7e1      	b.n	8007584 <_dtoa_r+0x954>
 80075c0:	46bb      	mov	fp, r7
 80075c2:	4637      	mov	r7, r6
 80075c4:	e599      	b.n	80070fa <_dtoa_r+0x4ca>
 80075c6:	bf00      	nop
 80075c8:	40240000 	.word	0x40240000
 80075cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 80c8 	beq.w	8007764 <_dtoa_r+0xb34>
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	2d00      	cmp	r5, #0
 80075da:	dd05      	ble.n	80075e8 <_dtoa_r+0x9b8>
 80075dc:	4639      	mov	r1, r7
 80075de:	462a      	mov	r2, r5
 80075e0:	4620      	mov	r0, r4
 80075e2:	f001 fad9 	bl	8008b98 <__lshift>
 80075e6:	4607      	mov	r7, r0
 80075e8:	f1b8 0f00 	cmp.w	r8, #0
 80075ec:	d05b      	beq.n	80076a6 <_dtoa_r+0xa76>
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4620      	mov	r0, r4
 80075f2:	f001 f877 	bl	80086e4 <_Balloc>
 80075f6:	4605      	mov	r5, r0
 80075f8:	b928      	cbnz	r0, 8007606 <_dtoa_r+0x9d6>
 80075fa:	4b83      	ldr	r3, [pc, #524]	; (8007808 <_dtoa_r+0xbd8>)
 80075fc:	4602      	mov	r2, r0
 80075fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007602:	f7ff bb2e 	b.w	8006c62 <_dtoa_r+0x32>
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	3202      	adds	r2, #2
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	f107 010c 	add.w	r1, r7, #12
 8007610:	300c      	adds	r0, #12
 8007612:	f7ff fa65 	bl	8006ae0 <memcpy>
 8007616:	2201      	movs	r2, #1
 8007618:	4629      	mov	r1, r5
 800761a:	4620      	mov	r0, r4
 800761c:	f001 fabc 	bl	8008b98 <__lshift>
 8007620:	9b00      	ldr	r3, [sp, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800762a:	4413      	add	r3, r2
 800762c:	9308      	str	r3, [sp, #32]
 800762e:	9b02      	ldr	r3, [sp, #8]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	46b8      	mov	r8, r7
 8007636:	9306      	str	r3, [sp, #24]
 8007638:	4607      	mov	r7, r0
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	4631      	mov	r1, r6
 800763e:	3b01      	subs	r3, #1
 8007640:	4650      	mov	r0, sl
 8007642:	9301      	str	r3, [sp, #4]
 8007644:	f7ff fa6a 	bl	8006b1c <quorem>
 8007648:	4641      	mov	r1, r8
 800764a:	9002      	str	r0, [sp, #8]
 800764c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007650:	4650      	mov	r0, sl
 8007652:	f001 fb0d 	bl	8008c70 <__mcmp>
 8007656:	463a      	mov	r2, r7
 8007658:	9005      	str	r0, [sp, #20]
 800765a:	4631      	mov	r1, r6
 800765c:	4620      	mov	r0, r4
 800765e:	f001 fb23 	bl	8008ca8 <__mdiff>
 8007662:	68c2      	ldr	r2, [r0, #12]
 8007664:	4605      	mov	r5, r0
 8007666:	bb02      	cbnz	r2, 80076aa <_dtoa_r+0xa7a>
 8007668:	4601      	mov	r1, r0
 800766a:	4650      	mov	r0, sl
 800766c:	f001 fb00 	bl	8008c70 <__mcmp>
 8007670:	4602      	mov	r2, r0
 8007672:	4629      	mov	r1, r5
 8007674:	4620      	mov	r0, r4
 8007676:	9209      	str	r2, [sp, #36]	; 0x24
 8007678:	f001 f874 	bl	8008764 <_Bfree>
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007680:	9d04      	ldr	r5, [sp, #16]
 8007682:	ea43 0102 	orr.w	r1, r3, r2
 8007686:	9b06      	ldr	r3, [sp, #24]
 8007688:	4319      	orrs	r1, r3
 800768a:	d110      	bne.n	80076ae <_dtoa_r+0xa7e>
 800768c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007690:	d029      	beq.n	80076e6 <_dtoa_r+0xab6>
 8007692:	9b05      	ldr	r3, [sp, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	dd02      	ble.n	800769e <_dtoa_r+0xa6e>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800769e:	9b01      	ldr	r3, [sp, #4]
 80076a0:	f883 9000 	strb.w	r9, [r3]
 80076a4:	e774      	b.n	8007590 <_dtoa_r+0x960>
 80076a6:	4638      	mov	r0, r7
 80076a8:	e7ba      	b.n	8007620 <_dtoa_r+0x9f0>
 80076aa:	2201      	movs	r2, #1
 80076ac:	e7e1      	b.n	8007672 <_dtoa_r+0xa42>
 80076ae:	9b05      	ldr	r3, [sp, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	db04      	blt.n	80076be <_dtoa_r+0xa8e>
 80076b4:	9907      	ldr	r1, [sp, #28]
 80076b6:	430b      	orrs	r3, r1
 80076b8:	9906      	ldr	r1, [sp, #24]
 80076ba:	430b      	orrs	r3, r1
 80076bc:	d120      	bne.n	8007700 <_dtoa_r+0xad0>
 80076be:	2a00      	cmp	r2, #0
 80076c0:	dded      	ble.n	800769e <_dtoa_r+0xa6e>
 80076c2:	4651      	mov	r1, sl
 80076c4:	2201      	movs	r2, #1
 80076c6:	4620      	mov	r0, r4
 80076c8:	f001 fa66 	bl	8008b98 <__lshift>
 80076cc:	4631      	mov	r1, r6
 80076ce:	4682      	mov	sl, r0
 80076d0:	f001 face 	bl	8008c70 <__mcmp>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	dc03      	bgt.n	80076e0 <_dtoa_r+0xab0>
 80076d8:	d1e1      	bne.n	800769e <_dtoa_r+0xa6e>
 80076da:	f019 0f01 	tst.w	r9, #1
 80076de:	d0de      	beq.n	800769e <_dtoa_r+0xa6e>
 80076e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076e4:	d1d8      	bne.n	8007698 <_dtoa_r+0xa68>
 80076e6:	9a01      	ldr	r2, [sp, #4]
 80076e8:	2339      	movs	r3, #57	; 0x39
 80076ea:	7013      	strb	r3, [r2, #0]
 80076ec:	462b      	mov	r3, r5
 80076ee:	461d      	mov	r5, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076f6:	2a39      	cmp	r2, #57	; 0x39
 80076f8:	d06c      	beq.n	80077d4 <_dtoa_r+0xba4>
 80076fa:	3201      	adds	r2, #1
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	e747      	b.n	8007590 <_dtoa_r+0x960>
 8007700:	2a00      	cmp	r2, #0
 8007702:	dd07      	ble.n	8007714 <_dtoa_r+0xae4>
 8007704:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007708:	d0ed      	beq.n	80076e6 <_dtoa_r+0xab6>
 800770a:	9a01      	ldr	r2, [sp, #4]
 800770c:	f109 0301 	add.w	r3, r9, #1
 8007710:	7013      	strb	r3, [r2, #0]
 8007712:	e73d      	b.n	8007590 <_dtoa_r+0x960>
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	9a08      	ldr	r2, [sp, #32]
 8007718:	f803 9c01 	strb.w	r9, [r3, #-1]
 800771c:	4293      	cmp	r3, r2
 800771e:	d043      	beq.n	80077a8 <_dtoa_r+0xb78>
 8007720:	4651      	mov	r1, sl
 8007722:	2300      	movs	r3, #0
 8007724:	220a      	movs	r2, #10
 8007726:	4620      	mov	r0, r4
 8007728:	f001 f83e 	bl	80087a8 <__multadd>
 800772c:	45b8      	cmp	r8, r7
 800772e:	4682      	mov	sl, r0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	f04f 020a 	mov.w	r2, #10
 8007738:	4641      	mov	r1, r8
 800773a:	4620      	mov	r0, r4
 800773c:	d107      	bne.n	800774e <_dtoa_r+0xb1e>
 800773e:	f001 f833 	bl	80087a8 <__multadd>
 8007742:	4680      	mov	r8, r0
 8007744:	4607      	mov	r7, r0
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	3301      	adds	r3, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	e775      	b.n	800763a <_dtoa_r+0xa0a>
 800774e:	f001 f82b 	bl	80087a8 <__multadd>
 8007752:	4639      	mov	r1, r7
 8007754:	4680      	mov	r8, r0
 8007756:	2300      	movs	r3, #0
 8007758:	220a      	movs	r2, #10
 800775a:	4620      	mov	r0, r4
 800775c:	f001 f824 	bl	80087a8 <__multadd>
 8007760:	4607      	mov	r7, r0
 8007762:	e7f0      	b.n	8007746 <_dtoa_r+0xb16>
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	9d00      	ldr	r5, [sp, #0]
 800776a:	4631      	mov	r1, r6
 800776c:	4650      	mov	r0, sl
 800776e:	f7ff f9d5 	bl	8006b1c <quorem>
 8007772:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	f805 9b01 	strb.w	r9, [r5], #1
 800777c:	1aea      	subs	r2, r5, r3
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	4293      	cmp	r3, r2
 8007782:	dd07      	ble.n	8007794 <_dtoa_r+0xb64>
 8007784:	4651      	mov	r1, sl
 8007786:	2300      	movs	r3, #0
 8007788:	220a      	movs	r2, #10
 800778a:	4620      	mov	r0, r4
 800778c:	f001 f80c 	bl	80087a8 <__multadd>
 8007790:	4682      	mov	sl, r0
 8007792:	e7ea      	b.n	800776a <_dtoa_r+0xb3a>
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	bfc8      	it	gt
 800779a:	461d      	movgt	r5, r3
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	bfd8      	it	le
 80077a0:	2501      	movle	r5, #1
 80077a2:	441d      	add	r5, r3
 80077a4:	f04f 0800 	mov.w	r8, #0
 80077a8:	4651      	mov	r1, sl
 80077aa:	2201      	movs	r2, #1
 80077ac:	4620      	mov	r0, r4
 80077ae:	f001 f9f3 	bl	8008b98 <__lshift>
 80077b2:	4631      	mov	r1, r6
 80077b4:	4682      	mov	sl, r0
 80077b6:	f001 fa5b 	bl	8008c70 <__mcmp>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	dc96      	bgt.n	80076ec <_dtoa_r+0xabc>
 80077be:	d102      	bne.n	80077c6 <_dtoa_r+0xb96>
 80077c0:	f019 0f01 	tst.w	r9, #1
 80077c4:	d192      	bne.n	80076ec <_dtoa_r+0xabc>
 80077c6:	462b      	mov	r3, r5
 80077c8:	461d      	mov	r5, r3
 80077ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077ce:	2a30      	cmp	r2, #48	; 0x30
 80077d0:	d0fa      	beq.n	80077c8 <_dtoa_r+0xb98>
 80077d2:	e6dd      	b.n	8007590 <_dtoa_r+0x960>
 80077d4:	9a00      	ldr	r2, [sp, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d189      	bne.n	80076ee <_dtoa_r+0xabe>
 80077da:	f10b 0b01 	add.w	fp, fp, #1
 80077de:	2331      	movs	r3, #49	; 0x31
 80077e0:	e796      	b.n	8007710 <_dtoa_r+0xae0>
 80077e2:	4b0a      	ldr	r3, [pc, #40]	; (800780c <_dtoa_r+0xbdc>)
 80077e4:	f7ff ba99 	b.w	8006d1a <_dtoa_r+0xea>
 80077e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f47f aa6d 	bne.w	8006cca <_dtoa_r+0x9a>
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <_dtoa_r+0xbe0>)
 80077f2:	f7ff ba92 	b.w	8006d1a <_dtoa_r+0xea>
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dcb5      	bgt.n	8007768 <_dtoa_r+0xb38>
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	f73f aeb1 	bgt.w	8007566 <_dtoa_r+0x936>
 8007804:	e7b0      	b.n	8007768 <_dtoa_r+0xb38>
 8007806:	bf00      	nop
 8007808:	080098fd 	.word	0x080098fd
 800780c:	080096fc 	.word	0x080096fc
 8007810:	08009881 	.word	0x08009881

08007814 <rshift>:
 8007814:	6903      	ldr	r3, [r0, #16]
 8007816:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800781a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800781e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007822:	f100 0414 	add.w	r4, r0, #20
 8007826:	dd45      	ble.n	80078b4 <rshift+0xa0>
 8007828:	f011 011f 	ands.w	r1, r1, #31
 800782c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007830:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007834:	d10c      	bne.n	8007850 <rshift+0x3c>
 8007836:	f100 0710 	add.w	r7, r0, #16
 800783a:	4629      	mov	r1, r5
 800783c:	42b1      	cmp	r1, r6
 800783e:	d334      	bcc.n	80078aa <rshift+0x96>
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	1eea      	subs	r2, r5, #3
 8007846:	4296      	cmp	r6, r2
 8007848:	bf38      	it	cc
 800784a:	2300      	movcc	r3, #0
 800784c:	4423      	add	r3, r4
 800784e:	e015      	b.n	800787c <rshift+0x68>
 8007850:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007854:	f1c1 0820 	rsb	r8, r1, #32
 8007858:	40cf      	lsrs	r7, r1
 800785a:	f105 0e04 	add.w	lr, r5, #4
 800785e:	46a1      	mov	r9, r4
 8007860:	4576      	cmp	r6, lr
 8007862:	46f4      	mov	ip, lr
 8007864:	d815      	bhi.n	8007892 <rshift+0x7e>
 8007866:	1a9a      	subs	r2, r3, r2
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	3a04      	subs	r2, #4
 800786c:	3501      	adds	r5, #1
 800786e:	42ae      	cmp	r6, r5
 8007870:	bf38      	it	cc
 8007872:	2200      	movcc	r2, #0
 8007874:	18a3      	adds	r3, r4, r2
 8007876:	50a7      	str	r7, [r4, r2]
 8007878:	b107      	cbz	r7, 800787c <rshift+0x68>
 800787a:	3304      	adds	r3, #4
 800787c:	1b1a      	subs	r2, r3, r4
 800787e:	42a3      	cmp	r3, r4
 8007880:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007884:	bf08      	it	eq
 8007886:	2300      	moveq	r3, #0
 8007888:	6102      	str	r2, [r0, #16]
 800788a:	bf08      	it	eq
 800788c:	6143      	streq	r3, [r0, #20]
 800788e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007892:	f8dc c000 	ldr.w	ip, [ip]
 8007896:	fa0c fc08 	lsl.w	ip, ip, r8
 800789a:	ea4c 0707 	orr.w	r7, ip, r7
 800789e:	f849 7b04 	str.w	r7, [r9], #4
 80078a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078a6:	40cf      	lsrs	r7, r1
 80078a8:	e7da      	b.n	8007860 <rshift+0x4c>
 80078aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80078ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80078b2:	e7c3      	b.n	800783c <rshift+0x28>
 80078b4:	4623      	mov	r3, r4
 80078b6:	e7e1      	b.n	800787c <rshift+0x68>

080078b8 <__hexdig_fun>:
 80078b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80078bc:	2b09      	cmp	r3, #9
 80078be:	d802      	bhi.n	80078c6 <__hexdig_fun+0xe>
 80078c0:	3820      	subs	r0, #32
 80078c2:	b2c0      	uxtb	r0, r0
 80078c4:	4770      	bx	lr
 80078c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80078ca:	2b05      	cmp	r3, #5
 80078cc:	d801      	bhi.n	80078d2 <__hexdig_fun+0x1a>
 80078ce:	3847      	subs	r0, #71	; 0x47
 80078d0:	e7f7      	b.n	80078c2 <__hexdig_fun+0xa>
 80078d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80078d6:	2b05      	cmp	r3, #5
 80078d8:	d801      	bhi.n	80078de <__hexdig_fun+0x26>
 80078da:	3827      	subs	r0, #39	; 0x27
 80078dc:	e7f1      	b.n	80078c2 <__hexdig_fun+0xa>
 80078de:	2000      	movs	r0, #0
 80078e0:	4770      	bx	lr
	...

080078e4 <__gethex>:
 80078e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e8:	4617      	mov	r7, r2
 80078ea:	680a      	ldr	r2, [r1, #0]
 80078ec:	b085      	sub	sp, #20
 80078ee:	f102 0b02 	add.w	fp, r2, #2
 80078f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80078f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80078fa:	4681      	mov	r9, r0
 80078fc:	468a      	mov	sl, r1
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	32fe      	adds	r2, #254	; 0xfe
 8007902:	eb02 030b 	add.w	r3, r2, fp
 8007906:	46d8      	mov	r8, fp
 8007908:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	2830      	cmp	r0, #48	; 0x30
 8007910:	d0f7      	beq.n	8007902 <__gethex+0x1e>
 8007912:	f7ff ffd1 	bl	80078b8 <__hexdig_fun>
 8007916:	4604      	mov	r4, r0
 8007918:	2800      	cmp	r0, #0
 800791a:	d138      	bne.n	800798e <__gethex+0xaa>
 800791c:	49a7      	ldr	r1, [pc, #668]	; (8007bbc <__gethex+0x2d8>)
 800791e:	2201      	movs	r2, #1
 8007920:	4640      	mov	r0, r8
 8007922:	f7ff f893 	bl	8006a4c <strncmp>
 8007926:	4606      	mov	r6, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	d169      	bne.n	8007a00 <__gethex+0x11c>
 800792c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007930:	465d      	mov	r5, fp
 8007932:	f7ff ffc1 	bl	80078b8 <__hexdig_fun>
 8007936:	2800      	cmp	r0, #0
 8007938:	d064      	beq.n	8007a04 <__gethex+0x120>
 800793a:	465a      	mov	r2, fp
 800793c:	7810      	ldrb	r0, [r2, #0]
 800793e:	2830      	cmp	r0, #48	; 0x30
 8007940:	4690      	mov	r8, r2
 8007942:	f102 0201 	add.w	r2, r2, #1
 8007946:	d0f9      	beq.n	800793c <__gethex+0x58>
 8007948:	f7ff ffb6 	bl	80078b8 <__hexdig_fun>
 800794c:	2301      	movs	r3, #1
 800794e:	fab0 f480 	clz	r4, r0
 8007952:	0964      	lsrs	r4, r4, #5
 8007954:	465e      	mov	r6, fp
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	4642      	mov	r2, r8
 800795a:	4615      	mov	r5, r2
 800795c:	3201      	adds	r2, #1
 800795e:	7828      	ldrb	r0, [r5, #0]
 8007960:	f7ff ffaa 	bl	80078b8 <__hexdig_fun>
 8007964:	2800      	cmp	r0, #0
 8007966:	d1f8      	bne.n	800795a <__gethex+0x76>
 8007968:	4994      	ldr	r1, [pc, #592]	; (8007bbc <__gethex+0x2d8>)
 800796a:	2201      	movs	r2, #1
 800796c:	4628      	mov	r0, r5
 800796e:	f7ff f86d 	bl	8006a4c <strncmp>
 8007972:	b978      	cbnz	r0, 8007994 <__gethex+0xb0>
 8007974:	b946      	cbnz	r6, 8007988 <__gethex+0xa4>
 8007976:	1c6e      	adds	r6, r5, #1
 8007978:	4632      	mov	r2, r6
 800797a:	4615      	mov	r5, r2
 800797c:	3201      	adds	r2, #1
 800797e:	7828      	ldrb	r0, [r5, #0]
 8007980:	f7ff ff9a 	bl	80078b8 <__hexdig_fun>
 8007984:	2800      	cmp	r0, #0
 8007986:	d1f8      	bne.n	800797a <__gethex+0x96>
 8007988:	1b73      	subs	r3, r6, r5
 800798a:	009e      	lsls	r6, r3, #2
 800798c:	e004      	b.n	8007998 <__gethex+0xb4>
 800798e:	2400      	movs	r4, #0
 8007990:	4626      	mov	r6, r4
 8007992:	e7e1      	b.n	8007958 <__gethex+0x74>
 8007994:	2e00      	cmp	r6, #0
 8007996:	d1f7      	bne.n	8007988 <__gethex+0xa4>
 8007998:	782b      	ldrb	r3, [r5, #0]
 800799a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800799e:	2b50      	cmp	r3, #80	; 0x50
 80079a0:	d13d      	bne.n	8007a1e <__gethex+0x13a>
 80079a2:	786b      	ldrb	r3, [r5, #1]
 80079a4:	2b2b      	cmp	r3, #43	; 0x2b
 80079a6:	d02f      	beq.n	8007a08 <__gethex+0x124>
 80079a8:	2b2d      	cmp	r3, #45	; 0x2d
 80079aa:	d031      	beq.n	8007a10 <__gethex+0x12c>
 80079ac:	1c69      	adds	r1, r5, #1
 80079ae:	f04f 0b00 	mov.w	fp, #0
 80079b2:	7808      	ldrb	r0, [r1, #0]
 80079b4:	f7ff ff80 	bl	80078b8 <__hexdig_fun>
 80079b8:	1e42      	subs	r2, r0, #1
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	2a18      	cmp	r2, #24
 80079be:	d82e      	bhi.n	8007a1e <__gethex+0x13a>
 80079c0:	f1a0 0210 	sub.w	r2, r0, #16
 80079c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80079c8:	f7ff ff76 	bl	80078b8 <__hexdig_fun>
 80079cc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80079d0:	fa5f fc8c 	uxtb.w	ip, ip
 80079d4:	f1bc 0f18 	cmp.w	ip, #24
 80079d8:	d91d      	bls.n	8007a16 <__gethex+0x132>
 80079da:	f1bb 0f00 	cmp.w	fp, #0
 80079de:	d000      	beq.n	80079e2 <__gethex+0xfe>
 80079e0:	4252      	negs	r2, r2
 80079e2:	4416      	add	r6, r2
 80079e4:	f8ca 1000 	str.w	r1, [sl]
 80079e8:	b1dc      	cbz	r4, 8007a22 <__gethex+0x13e>
 80079ea:	9b01      	ldr	r3, [sp, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bf14      	ite	ne
 80079f0:	f04f 0800 	movne.w	r8, #0
 80079f4:	f04f 0806 	moveq.w	r8, #6
 80079f8:	4640      	mov	r0, r8
 80079fa:	b005      	add	sp, #20
 80079fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	4645      	mov	r5, r8
 8007a02:	4626      	mov	r6, r4
 8007a04:	2401      	movs	r4, #1
 8007a06:	e7c7      	b.n	8007998 <__gethex+0xb4>
 8007a08:	f04f 0b00 	mov.w	fp, #0
 8007a0c:	1ca9      	adds	r1, r5, #2
 8007a0e:	e7d0      	b.n	80079b2 <__gethex+0xce>
 8007a10:	f04f 0b01 	mov.w	fp, #1
 8007a14:	e7fa      	b.n	8007a0c <__gethex+0x128>
 8007a16:	230a      	movs	r3, #10
 8007a18:	fb03 0002 	mla	r0, r3, r2, r0
 8007a1c:	e7d0      	b.n	80079c0 <__gethex+0xdc>
 8007a1e:	4629      	mov	r1, r5
 8007a20:	e7e0      	b.n	80079e4 <__gethex+0x100>
 8007a22:	eba5 0308 	sub.w	r3, r5, r8
 8007a26:	3b01      	subs	r3, #1
 8007a28:	4621      	mov	r1, r4
 8007a2a:	2b07      	cmp	r3, #7
 8007a2c:	dc0a      	bgt.n	8007a44 <__gethex+0x160>
 8007a2e:	4648      	mov	r0, r9
 8007a30:	f000 fe58 	bl	80086e4 <_Balloc>
 8007a34:	4604      	mov	r4, r0
 8007a36:	b940      	cbnz	r0, 8007a4a <__gethex+0x166>
 8007a38:	4b61      	ldr	r3, [pc, #388]	; (8007bc0 <__gethex+0x2dc>)
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	21e4      	movs	r1, #228	; 0xe4
 8007a3e:	4861      	ldr	r0, [pc, #388]	; (8007bc4 <__gethex+0x2e0>)
 8007a40:	f001 fd06 	bl	8009450 <__assert_func>
 8007a44:	3101      	adds	r1, #1
 8007a46:	105b      	asrs	r3, r3, #1
 8007a48:	e7ef      	b.n	8007a2a <__gethex+0x146>
 8007a4a:	f100 0a14 	add.w	sl, r0, #20
 8007a4e:	2300      	movs	r3, #0
 8007a50:	495a      	ldr	r1, [pc, #360]	; (8007bbc <__gethex+0x2d8>)
 8007a52:	f8cd a004 	str.w	sl, [sp, #4]
 8007a56:	469b      	mov	fp, r3
 8007a58:	45a8      	cmp	r8, r5
 8007a5a:	d342      	bcc.n	8007ae2 <__gethex+0x1fe>
 8007a5c:	9801      	ldr	r0, [sp, #4]
 8007a5e:	f840 bb04 	str.w	fp, [r0], #4
 8007a62:	eba0 000a 	sub.w	r0, r0, sl
 8007a66:	1080      	asrs	r0, r0, #2
 8007a68:	6120      	str	r0, [r4, #16]
 8007a6a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007a6e:	4658      	mov	r0, fp
 8007a70:	f000 ff2a 	bl	80088c8 <__hi0bits>
 8007a74:	683d      	ldr	r5, [r7, #0]
 8007a76:	eba8 0000 	sub.w	r0, r8, r0
 8007a7a:	42a8      	cmp	r0, r5
 8007a7c:	dd59      	ble.n	8007b32 <__gethex+0x24e>
 8007a7e:	eba0 0805 	sub.w	r8, r0, r5
 8007a82:	4641      	mov	r1, r8
 8007a84:	4620      	mov	r0, r4
 8007a86:	f001 fab9 	bl	8008ffc <__any_on>
 8007a8a:	4683      	mov	fp, r0
 8007a8c:	b1b8      	cbz	r0, 8007abe <__gethex+0x1da>
 8007a8e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8007a92:	1159      	asrs	r1, r3, #5
 8007a94:	f003 021f 	and.w	r2, r3, #31
 8007a98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007a9c:	f04f 0b01 	mov.w	fp, #1
 8007aa0:	fa0b f202 	lsl.w	r2, fp, r2
 8007aa4:	420a      	tst	r2, r1
 8007aa6:	d00a      	beq.n	8007abe <__gethex+0x1da>
 8007aa8:	455b      	cmp	r3, fp
 8007aaa:	dd06      	ble.n	8007aba <__gethex+0x1d6>
 8007aac:	f1a8 0102 	sub.w	r1, r8, #2
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f001 faa3 	bl	8008ffc <__any_on>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d138      	bne.n	8007b2c <__gethex+0x248>
 8007aba:	f04f 0b02 	mov.w	fp, #2
 8007abe:	4641      	mov	r1, r8
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f7ff fea7 	bl	8007814 <rshift>
 8007ac6:	4446      	add	r6, r8
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	42b3      	cmp	r3, r6
 8007acc:	da41      	bge.n	8007b52 <__gethex+0x26e>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f000 fe47 	bl	8008764 <_Bfree>
 8007ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007ae0:	e78a      	b.n	80079f8 <__gethex+0x114>
 8007ae2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007ae6:	2a2e      	cmp	r2, #46	; 0x2e
 8007ae8:	d014      	beq.n	8007b14 <__gethex+0x230>
 8007aea:	2b20      	cmp	r3, #32
 8007aec:	d106      	bne.n	8007afc <__gethex+0x218>
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	f843 bb04 	str.w	fp, [r3], #4
 8007af4:	f04f 0b00 	mov.w	fp, #0
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	465b      	mov	r3, fp
 8007afc:	7828      	ldrb	r0, [r5, #0]
 8007afe:	9303      	str	r3, [sp, #12]
 8007b00:	f7ff feda 	bl	80078b8 <__hexdig_fun>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	f000 000f 	and.w	r0, r0, #15
 8007b0a:	4098      	lsls	r0, r3
 8007b0c:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b10:	3304      	adds	r3, #4
 8007b12:	e7a1      	b.n	8007a58 <__gethex+0x174>
 8007b14:	45a8      	cmp	r8, r5
 8007b16:	d8e8      	bhi.n	8007aea <__gethex+0x206>
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	9303      	str	r3, [sp, #12]
 8007b1e:	f7fe ff95 	bl	8006a4c <strncmp>
 8007b22:	4926      	ldr	r1, [pc, #152]	; (8007bbc <__gethex+0x2d8>)
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d1df      	bne.n	8007aea <__gethex+0x206>
 8007b2a:	e795      	b.n	8007a58 <__gethex+0x174>
 8007b2c:	f04f 0b03 	mov.w	fp, #3
 8007b30:	e7c5      	b.n	8007abe <__gethex+0x1da>
 8007b32:	da0b      	bge.n	8007b4c <__gethex+0x268>
 8007b34:	eba5 0800 	sub.w	r8, r5, r0
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4642      	mov	r2, r8
 8007b3c:	4648      	mov	r0, r9
 8007b3e:	f001 f82b 	bl	8008b98 <__lshift>
 8007b42:	eba6 0608 	sub.w	r6, r6, r8
 8007b46:	4604      	mov	r4, r0
 8007b48:	f100 0a14 	add.w	sl, r0, #20
 8007b4c:	f04f 0b00 	mov.w	fp, #0
 8007b50:	e7ba      	b.n	8007ac8 <__gethex+0x1e4>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	42b3      	cmp	r3, r6
 8007b56:	dd73      	ble.n	8007c40 <__gethex+0x35c>
 8007b58:	1b9e      	subs	r6, r3, r6
 8007b5a:	42b5      	cmp	r5, r6
 8007b5c:	dc34      	bgt.n	8007bc8 <__gethex+0x2e4>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d023      	beq.n	8007bac <__gethex+0x2c8>
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d025      	beq.n	8007bb4 <__gethex+0x2d0>
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d115      	bne.n	8007b98 <__gethex+0x2b4>
 8007b6c:	42b5      	cmp	r5, r6
 8007b6e:	d113      	bne.n	8007b98 <__gethex+0x2b4>
 8007b70:	2d01      	cmp	r5, #1
 8007b72:	d10b      	bne.n	8007b8c <__gethex+0x2a8>
 8007b74:	9a02      	ldr	r2, [sp, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	6123      	str	r3, [r4, #16]
 8007b7e:	f8ca 3000 	str.w	r3, [sl]
 8007b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b84:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007b88:	601c      	str	r4, [r3, #0]
 8007b8a:	e735      	b.n	80079f8 <__gethex+0x114>
 8007b8c:	1e69      	subs	r1, r5, #1
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f001 fa34 	bl	8008ffc <__any_on>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d1ed      	bne.n	8007b74 <__gethex+0x290>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	f000 fde2 	bl	8008764 <_Bfree>
 8007ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007baa:	e725      	b.n	80079f8 <__gethex+0x114>
 8007bac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f2      	bne.n	8007b98 <__gethex+0x2b4>
 8007bb2:	e7df      	b.n	8007b74 <__gethex+0x290>
 8007bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1dc      	bne.n	8007b74 <__gethex+0x290>
 8007bba:	e7ed      	b.n	8007b98 <__gethex+0x2b4>
 8007bbc:	08009725 	.word	0x08009725
 8007bc0:	080098fd 	.word	0x080098fd
 8007bc4:	0800990e 	.word	0x0800990e
 8007bc8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007bcc:	f1bb 0f00 	cmp.w	fp, #0
 8007bd0:	d133      	bne.n	8007c3a <__gethex+0x356>
 8007bd2:	f1b8 0f00 	cmp.w	r8, #0
 8007bd6:	d004      	beq.n	8007be2 <__gethex+0x2fe>
 8007bd8:	4641      	mov	r1, r8
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f001 fa0e 	bl	8008ffc <__any_on>
 8007be0:	4683      	mov	fp, r0
 8007be2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007be6:	2301      	movs	r3, #1
 8007be8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007bec:	f008 081f 	and.w	r8, r8, #31
 8007bf0:	fa03 f308 	lsl.w	r3, r3, r8
 8007bf4:	4213      	tst	r3, r2
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	bf18      	it	ne
 8007bfc:	f04b 0b02 	orrne.w	fp, fp, #2
 8007c00:	1bad      	subs	r5, r5, r6
 8007c02:	f7ff fe07 	bl	8007814 <rshift>
 8007c06:	687e      	ldr	r6, [r7, #4]
 8007c08:	f04f 0802 	mov.w	r8, #2
 8007c0c:	f1bb 0f00 	cmp.w	fp, #0
 8007c10:	d04a      	beq.n	8007ca8 <__gethex+0x3c4>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d016      	beq.n	8007c46 <__gethex+0x362>
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d018      	beq.n	8007c4e <__gethex+0x36a>
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d109      	bne.n	8007c34 <__gethex+0x350>
 8007c20:	f01b 0f02 	tst.w	fp, #2
 8007c24:	d006      	beq.n	8007c34 <__gethex+0x350>
 8007c26:	f8da 3000 	ldr.w	r3, [sl]
 8007c2a:	ea4b 0b03 	orr.w	fp, fp, r3
 8007c2e:	f01b 0f01 	tst.w	fp, #1
 8007c32:	d10f      	bne.n	8007c54 <__gethex+0x370>
 8007c34:	f048 0810 	orr.w	r8, r8, #16
 8007c38:	e036      	b.n	8007ca8 <__gethex+0x3c4>
 8007c3a:	f04f 0b01 	mov.w	fp, #1
 8007c3e:	e7d0      	b.n	8007be2 <__gethex+0x2fe>
 8007c40:	f04f 0801 	mov.w	r8, #1
 8007c44:	e7e2      	b.n	8007c0c <__gethex+0x328>
 8007c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c48:	f1c3 0301 	rsb	r3, r3, #1
 8007c4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0ef      	beq.n	8007c34 <__gethex+0x350>
 8007c54:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c58:	f104 0214 	add.w	r2, r4, #20
 8007c5c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007c66:	2300      	movs	r3, #0
 8007c68:	4694      	mov	ip, r2
 8007c6a:	f852 1b04 	ldr.w	r1, [r2], #4
 8007c6e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007c72:	d01e      	beq.n	8007cb2 <__gethex+0x3ce>
 8007c74:	3101      	adds	r1, #1
 8007c76:	f8cc 1000 	str.w	r1, [ip]
 8007c7a:	f1b8 0f02 	cmp.w	r8, #2
 8007c7e:	f104 0214 	add.w	r2, r4, #20
 8007c82:	d13d      	bne.n	8007d00 <__gethex+0x41c>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	42ab      	cmp	r3, r5
 8007c8a:	d10b      	bne.n	8007ca4 <__gethex+0x3c0>
 8007c8c:	1169      	asrs	r1, r5, #5
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f005 051f 	and.w	r5, r5, #31
 8007c94:	fa03 f505 	lsl.w	r5, r3, r5
 8007c98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c9c:	421d      	tst	r5, r3
 8007c9e:	bf18      	it	ne
 8007ca0:	f04f 0801 	movne.w	r8, #1
 8007ca4:	f048 0820 	orr.w	r8, r8, #32
 8007ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007caa:	601c      	str	r4, [r3, #0]
 8007cac:	9b02      	ldr	r3, [sp, #8]
 8007cae:	601e      	str	r6, [r3, #0]
 8007cb0:	e6a2      	b.n	80079f8 <__gethex+0x114>
 8007cb2:	4290      	cmp	r0, r2
 8007cb4:	f842 3c04 	str.w	r3, [r2, #-4]
 8007cb8:	d8d6      	bhi.n	8007c68 <__gethex+0x384>
 8007cba:	68a2      	ldr	r2, [r4, #8]
 8007cbc:	4593      	cmp	fp, r2
 8007cbe:	db17      	blt.n	8007cf0 <__gethex+0x40c>
 8007cc0:	6861      	ldr	r1, [r4, #4]
 8007cc2:	4648      	mov	r0, r9
 8007cc4:	3101      	adds	r1, #1
 8007cc6:	f000 fd0d 	bl	80086e4 <_Balloc>
 8007cca:	4682      	mov	sl, r0
 8007ccc:	b918      	cbnz	r0, 8007cd6 <__gethex+0x3f2>
 8007cce:	4b1b      	ldr	r3, [pc, #108]	; (8007d3c <__gethex+0x458>)
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	2184      	movs	r1, #132	; 0x84
 8007cd4:	e6b3      	b.n	8007a3e <__gethex+0x15a>
 8007cd6:	6922      	ldr	r2, [r4, #16]
 8007cd8:	3202      	adds	r2, #2
 8007cda:	f104 010c 	add.w	r1, r4, #12
 8007cde:	0092      	lsls	r2, r2, #2
 8007ce0:	300c      	adds	r0, #12
 8007ce2:	f7fe fefd 	bl	8006ae0 <memcpy>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4648      	mov	r0, r9
 8007cea:	f000 fd3b 	bl	8008764 <_Bfree>
 8007cee:	4654      	mov	r4, sl
 8007cf0:	6922      	ldr	r2, [r4, #16]
 8007cf2:	1c51      	adds	r1, r2, #1
 8007cf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007cf8:	6121      	str	r1, [r4, #16]
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	6151      	str	r1, [r2, #20]
 8007cfe:	e7bc      	b.n	8007c7a <__gethex+0x396>
 8007d00:	6921      	ldr	r1, [r4, #16]
 8007d02:	4559      	cmp	r1, fp
 8007d04:	dd0b      	ble.n	8007d1e <__gethex+0x43a>
 8007d06:	2101      	movs	r1, #1
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f7ff fd83 	bl	8007814 <rshift>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	3601      	adds	r6, #1
 8007d12:	42b3      	cmp	r3, r6
 8007d14:	f6ff aedb 	blt.w	8007ace <__gethex+0x1ea>
 8007d18:	f04f 0801 	mov.w	r8, #1
 8007d1c:	e7c2      	b.n	8007ca4 <__gethex+0x3c0>
 8007d1e:	f015 051f 	ands.w	r5, r5, #31
 8007d22:	d0f9      	beq.n	8007d18 <__gethex+0x434>
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	441a      	add	r2, r3
 8007d28:	f1c5 0520 	rsb	r5, r5, #32
 8007d2c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007d30:	f000 fdca 	bl	80088c8 <__hi0bits>
 8007d34:	42a8      	cmp	r0, r5
 8007d36:	dbe6      	blt.n	8007d06 <__gethex+0x422>
 8007d38:	e7ee      	b.n	8007d18 <__gethex+0x434>
 8007d3a:	bf00      	nop
 8007d3c:	080098fd 	.word	0x080098fd

08007d40 <L_shift>:
 8007d40:	f1c2 0208 	rsb	r2, r2, #8
 8007d44:	0092      	lsls	r2, r2, #2
 8007d46:	b570      	push	{r4, r5, r6, lr}
 8007d48:	f1c2 0620 	rsb	r6, r2, #32
 8007d4c:	6843      	ldr	r3, [r0, #4]
 8007d4e:	6804      	ldr	r4, [r0, #0]
 8007d50:	fa03 f506 	lsl.w	r5, r3, r6
 8007d54:	432c      	orrs	r4, r5
 8007d56:	40d3      	lsrs	r3, r2
 8007d58:	6004      	str	r4, [r0, #0]
 8007d5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d5e:	4288      	cmp	r0, r1
 8007d60:	d3f4      	bcc.n	8007d4c <L_shift+0xc>
 8007d62:	bd70      	pop	{r4, r5, r6, pc}

08007d64 <__match>:
 8007d64:	b530      	push	{r4, r5, lr}
 8007d66:	6803      	ldr	r3, [r0, #0]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d6e:	b914      	cbnz	r4, 8007d76 <__match+0x12>
 8007d70:	6003      	str	r3, [r0, #0]
 8007d72:	2001      	movs	r0, #1
 8007d74:	bd30      	pop	{r4, r5, pc}
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d7e:	2d19      	cmp	r5, #25
 8007d80:	bf98      	it	ls
 8007d82:	3220      	addls	r2, #32
 8007d84:	42a2      	cmp	r2, r4
 8007d86:	d0f0      	beq.n	8007d6a <__match+0x6>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e7f3      	b.n	8007d74 <__match+0x10>

08007d8c <__hexnan>:
 8007d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	680b      	ldr	r3, [r1, #0]
 8007d92:	6801      	ldr	r1, [r0, #0]
 8007d94:	115e      	asrs	r6, r3, #5
 8007d96:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d9a:	f013 031f 	ands.w	r3, r3, #31
 8007d9e:	b087      	sub	sp, #28
 8007da0:	bf18      	it	ne
 8007da2:	3604      	addne	r6, #4
 8007da4:	2500      	movs	r5, #0
 8007da6:	1f37      	subs	r7, r6, #4
 8007da8:	4682      	mov	sl, r0
 8007daa:	4690      	mov	r8, r2
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	f846 5c04 	str.w	r5, [r6, #-4]
 8007db2:	46b9      	mov	r9, r7
 8007db4:	463c      	mov	r4, r7
 8007db6:	9502      	str	r5, [sp, #8]
 8007db8:	46ab      	mov	fp, r5
 8007dba:	784a      	ldrb	r2, [r1, #1]
 8007dbc:	1c4b      	adds	r3, r1, #1
 8007dbe:	9303      	str	r3, [sp, #12]
 8007dc0:	b342      	cbz	r2, 8007e14 <__hexnan+0x88>
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	9105      	str	r1, [sp, #20]
 8007dc6:	9204      	str	r2, [sp, #16]
 8007dc8:	f7ff fd76 	bl	80078b8 <__hexdig_fun>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d14f      	bne.n	8007e70 <__hexnan+0xe4>
 8007dd0:	9a04      	ldr	r2, [sp, #16]
 8007dd2:	9905      	ldr	r1, [sp, #20]
 8007dd4:	2a20      	cmp	r2, #32
 8007dd6:	d818      	bhi.n	8007e0a <__hexnan+0x7e>
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	459b      	cmp	fp, r3
 8007ddc:	dd13      	ble.n	8007e06 <__hexnan+0x7a>
 8007dde:	454c      	cmp	r4, r9
 8007de0:	d206      	bcs.n	8007df0 <__hexnan+0x64>
 8007de2:	2d07      	cmp	r5, #7
 8007de4:	dc04      	bgt.n	8007df0 <__hexnan+0x64>
 8007de6:	462a      	mov	r2, r5
 8007de8:	4649      	mov	r1, r9
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7ff ffa8 	bl	8007d40 <L_shift>
 8007df0:	4544      	cmp	r4, r8
 8007df2:	d950      	bls.n	8007e96 <__hexnan+0x10a>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f1a4 0904 	sub.w	r9, r4, #4
 8007dfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dfe:	f8cd b008 	str.w	fp, [sp, #8]
 8007e02:	464c      	mov	r4, r9
 8007e04:	461d      	mov	r5, r3
 8007e06:	9903      	ldr	r1, [sp, #12]
 8007e08:	e7d7      	b.n	8007dba <__hexnan+0x2e>
 8007e0a:	2a29      	cmp	r2, #41	; 0x29
 8007e0c:	d155      	bne.n	8007eba <__hexnan+0x12e>
 8007e0e:	3102      	adds	r1, #2
 8007e10:	f8ca 1000 	str.w	r1, [sl]
 8007e14:	f1bb 0f00 	cmp.w	fp, #0
 8007e18:	d04f      	beq.n	8007eba <__hexnan+0x12e>
 8007e1a:	454c      	cmp	r4, r9
 8007e1c:	d206      	bcs.n	8007e2c <__hexnan+0xa0>
 8007e1e:	2d07      	cmp	r5, #7
 8007e20:	dc04      	bgt.n	8007e2c <__hexnan+0xa0>
 8007e22:	462a      	mov	r2, r5
 8007e24:	4649      	mov	r1, r9
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7ff ff8a 	bl	8007d40 <L_shift>
 8007e2c:	4544      	cmp	r4, r8
 8007e2e:	d934      	bls.n	8007e9a <__hexnan+0x10e>
 8007e30:	f1a8 0204 	sub.w	r2, r8, #4
 8007e34:	4623      	mov	r3, r4
 8007e36:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e3e:	429f      	cmp	r7, r3
 8007e40:	d2f9      	bcs.n	8007e36 <__hexnan+0xaa>
 8007e42:	1b3b      	subs	r3, r7, r4
 8007e44:	f023 0303 	bic.w	r3, r3, #3
 8007e48:	3304      	adds	r3, #4
 8007e4a:	3e03      	subs	r6, #3
 8007e4c:	3401      	adds	r4, #1
 8007e4e:	42a6      	cmp	r6, r4
 8007e50:	bf38      	it	cc
 8007e52:	2304      	movcc	r3, #4
 8007e54:	4443      	add	r3, r8
 8007e56:	2200      	movs	r2, #0
 8007e58:	f843 2b04 	str.w	r2, [r3], #4
 8007e5c:	429f      	cmp	r7, r3
 8007e5e:	d2fb      	bcs.n	8007e58 <__hexnan+0xcc>
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	b91b      	cbnz	r3, 8007e6c <__hexnan+0xe0>
 8007e64:	4547      	cmp	r7, r8
 8007e66:	d126      	bne.n	8007eb6 <__hexnan+0x12a>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	2005      	movs	r0, #5
 8007e6e:	e025      	b.n	8007ebc <__hexnan+0x130>
 8007e70:	3501      	adds	r5, #1
 8007e72:	2d08      	cmp	r5, #8
 8007e74:	f10b 0b01 	add.w	fp, fp, #1
 8007e78:	dd06      	ble.n	8007e88 <__hexnan+0xfc>
 8007e7a:	4544      	cmp	r4, r8
 8007e7c:	d9c3      	bls.n	8007e06 <__hexnan+0x7a>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e84:	2501      	movs	r5, #1
 8007e86:	3c04      	subs	r4, #4
 8007e88:	6822      	ldr	r2, [r4, #0]
 8007e8a:	f000 000f 	and.w	r0, r0, #15
 8007e8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007e92:	6020      	str	r0, [r4, #0]
 8007e94:	e7b7      	b.n	8007e06 <__hexnan+0x7a>
 8007e96:	2508      	movs	r5, #8
 8007e98:	e7b5      	b.n	8007e06 <__hexnan+0x7a>
 8007e9a:	9b01      	ldr	r3, [sp, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0df      	beq.n	8007e60 <__hexnan+0xd4>
 8007ea0:	f1c3 0320 	rsb	r3, r3, #32
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ea8:	40da      	lsrs	r2, r3
 8007eaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	f846 3c04 	str.w	r3, [r6, #-4]
 8007eb4:	e7d4      	b.n	8007e60 <__hexnan+0xd4>
 8007eb6:	3f04      	subs	r7, #4
 8007eb8:	e7d2      	b.n	8007e60 <__hexnan+0xd4>
 8007eba:	2004      	movs	r0, #4
 8007ebc:	b007      	add	sp, #28
 8007ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ec2 <__ssputs_r>:
 8007ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec6:	688e      	ldr	r6, [r1, #8]
 8007ec8:	461f      	mov	r7, r3
 8007eca:	42be      	cmp	r6, r7
 8007ecc:	680b      	ldr	r3, [r1, #0]
 8007ece:	4682      	mov	sl, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	4690      	mov	r8, r2
 8007ed4:	d82c      	bhi.n	8007f30 <__ssputs_r+0x6e>
 8007ed6:	898a      	ldrh	r2, [r1, #12]
 8007ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007edc:	d026      	beq.n	8007f2c <__ssputs_r+0x6a>
 8007ede:	6965      	ldr	r5, [r4, #20]
 8007ee0:	6909      	ldr	r1, [r1, #16]
 8007ee2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ee6:	eba3 0901 	sub.w	r9, r3, r1
 8007eea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007eee:	1c7b      	adds	r3, r7, #1
 8007ef0:	444b      	add	r3, r9
 8007ef2:	106d      	asrs	r5, r5, #1
 8007ef4:	429d      	cmp	r5, r3
 8007ef6:	bf38      	it	cc
 8007ef8:	461d      	movcc	r5, r3
 8007efa:	0553      	lsls	r3, r2, #21
 8007efc:	d527      	bpl.n	8007f4e <__ssputs_r+0x8c>
 8007efe:	4629      	mov	r1, r5
 8007f00:	f000 faa4 	bl	800844c <_malloc_r>
 8007f04:	4606      	mov	r6, r0
 8007f06:	b360      	cbz	r0, 8007f62 <__ssputs_r+0xa0>
 8007f08:	6921      	ldr	r1, [r4, #16]
 8007f0a:	464a      	mov	r2, r9
 8007f0c:	f7fe fde8 	bl	8006ae0 <memcpy>
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1a:	81a3      	strh	r3, [r4, #12]
 8007f1c:	6126      	str	r6, [r4, #16]
 8007f1e:	6165      	str	r5, [r4, #20]
 8007f20:	444e      	add	r6, r9
 8007f22:	eba5 0509 	sub.w	r5, r5, r9
 8007f26:	6026      	str	r6, [r4, #0]
 8007f28:	60a5      	str	r5, [r4, #8]
 8007f2a:	463e      	mov	r6, r7
 8007f2c:	42be      	cmp	r6, r7
 8007f2e:	d900      	bls.n	8007f32 <__ssputs_r+0x70>
 8007f30:	463e      	mov	r6, r7
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	4632      	mov	r2, r6
 8007f36:	4641      	mov	r1, r8
 8007f38:	f001 f9f7 	bl	800932a <memmove>
 8007f3c:	68a3      	ldr	r3, [r4, #8]
 8007f3e:	1b9b      	subs	r3, r3, r6
 8007f40:	60a3      	str	r3, [r4, #8]
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	4433      	add	r3, r6
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	2000      	movs	r0, #0
 8007f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4e:	462a      	mov	r2, r5
 8007f50:	f001 f8b8 	bl	80090c4 <_realloc_r>
 8007f54:	4606      	mov	r6, r0
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d1e0      	bne.n	8007f1c <__ssputs_r+0x5a>
 8007f5a:	6921      	ldr	r1, [r4, #16]
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	f001 faab 	bl	80094b8 <_free_r>
 8007f62:	230c      	movs	r3, #12
 8007f64:	f8ca 3000 	str.w	r3, [sl]
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f74:	e7e9      	b.n	8007f4a <__ssputs_r+0x88>
	...

08007f78 <_svfiprintf_r>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	4698      	mov	r8, r3
 8007f7e:	898b      	ldrh	r3, [r1, #12]
 8007f80:	061b      	lsls	r3, r3, #24
 8007f82:	b09d      	sub	sp, #116	; 0x74
 8007f84:	4607      	mov	r7, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	4614      	mov	r4, r2
 8007f8a:	d50e      	bpl.n	8007faa <_svfiprintf_r+0x32>
 8007f8c:	690b      	ldr	r3, [r1, #16]
 8007f8e:	b963      	cbnz	r3, 8007faa <_svfiprintf_r+0x32>
 8007f90:	2140      	movs	r1, #64	; 0x40
 8007f92:	f000 fa5b 	bl	800844c <_malloc_r>
 8007f96:	6028      	str	r0, [r5, #0]
 8007f98:	6128      	str	r0, [r5, #16]
 8007f9a:	b920      	cbnz	r0, 8007fa6 <_svfiprintf_r+0x2e>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa4:	e0d0      	b.n	8008148 <_svfiprintf_r+0x1d0>
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	616b      	str	r3, [r5, #20]
 8007faa:	2300      	movs	r3, #0
 8007fac:	9309      	str	r3, [sp, #36]	; 0x24
 8007fae:	2320      	movs	r3, #32
 8007fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb8:	2330      	movs	r3, #48	; 0x30
 8007fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008160 <_svfiprintf_r+0x1e8>
 8007fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fc2:	f04f 0901 	mov.w	r9, #1
 8007fc6:	4623      	mov	r3, r4
 8007fc8:	469a      	mov	sl, r3
 8007fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fce:	b10a      	cbz	r2, 8007fd4 <_svfiprintf_r+0x5c>
 8007fd0:	2a25      	cmp	r2, #37	; 0x25
 8007fd2:	d1f9      	bne.n	8007fc8 <_svfiprintf_r+0x50>
 8007fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd8:	d00b      	beq.n	8007ff2 <_svfiprintf_r+0x7a>
 8007fda:	465b      	mov	r3, fp
 8007fdc:	4622      	mov	r2, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff ff6e 	bl	8007ec2 <__ssputs_r>
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f000 80a9 	beq.w	800813e <_svfiprintf_r+0x1c6>
 8007fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fee:	445a      	add	r2, fp
 8007ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80a1 	beq.w	800813e <_svfiprintf_r+0x1c6>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008006:	f10a 0a01 	add.w	sl, sl, #1
 800800a:	9304      	str	r3, [sp, #16]
 800800c:	9307      	str	r3, [sp, #28]
 800800e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008012:	931a      	str	r3, [sp, #104]	; 0x68
 8008014:	4654      	mov	r4, sl
 8008016:	2205      	movs	r2, #5
 8008018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801c:	4850      	ldr	r0, [pc, #320]	; (8008160 <_svfiprintf_r+0x1e8>)
 800801e:	f7f8 f8d7 	bl	80001d0 <memchr>
 8008022:	9a04      	ldr	r2, [sp, #16]
 8008024:	b9d8      	cbnz	r0, 800805e <_svfiprintf_r+0xe6>
 8008026:	06d0      	lsls	r0, r2, #27
 8008028:	bf44      	itt	mi
 800802a:	2320      	movmi	r3, #32
 800802c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008030:	0711      	lsls	r1, r2, #28
 8008032:	bf44      	itt	mi
 8008034:	232b      	movmi	r3, #43	; 0x2b
 8008036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800803a:	f89a 3000 	ldrb.w	r3, [sl]
 800803e:	2b2a      	cmp	r3, #42	; 0x2a
 8008040:	d015      	beq.n	800806e <_svfiprintf_r+0xf6>
 8008042:	9a07      	ldr	r2, [sp, #28]
 8008044:	4654      	mov	r4, sl
 8008046:	2000      	movs	r0, #0
 8008048:	f04f 0c0a 	mov.w	ip, #10
 800804c:	4621      	mov	r1, r4
 800804e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008052:	3b30      	subs	r3, #48	; 0x30
 8008054:	2b09      	cmp	r3, #9
 8008056:	d94d      	bls.n	80080f4 <_svfiprintf_r+0x17c>
 8008058:	b1b0      	cbz	r0, 8008088 <_svfiprintf_r+0x110>
 800805a:	9207      	str	r2, [sp, #28]
 800805c:	e014      	b.n	8008088 <_svfiprintf_r+0x110>
 800805e:	eba0 0308 	sub.w	r3, r0, r8
 8008062:	fa09 f303 	lsl.w	r3, r9, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	9304      	str	r3, [sp, #16]
 800806a:	46a2      	mov	sl, r4
 800806c:	e7d2      	b.n	8008014 <_svfiprintf_r+0x9c>
 800806e:	9b03      	ldr	r3, [sp, #12]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	9103      	str	r1, [sp, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfbb      	ittet	lt
 800807a:	425b      	neglt	r3, r3
 800807c:	f042 0202 	orrlt.w	r2, r2, #2
 8008080:	9307      	strge	r3, [sp, #28]
 8008082:	9307      	strlt	r3, [sp, #28]
 8008084:	bfb8      	it	lt
 8008086:	9204      	strlt	r2, [sp, #16]
 8008088:	7823      	ldrb	r3, [r4, #0]
 800808a:	2b2e      	cmp	r3, #46	; 0x2e
 800808c:	d10c      	bne.n	80080a8 <_svfiprintf_r+0x130>
 800808e:	7863      	ldrb	r3, [r4, #1]
 8008090:	2b2a      	cmp	r3, #42	; 0x2a
 8008092:	d134      	bne.n	80080fe <_svfiprintf_r+0x186>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	1d1a      	adds	r2, r3, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	9203      	str	r2, [sp, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	bfb8      	it	lt
 80080a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080a4:	3402      	adds	r4, #2
 80080a6:	9305      	str	r3, [sp, #20]
 80080a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008170 <_svfiprintf_r+0x1f8>
 80080ac:	7821      	ldrb	r1, [r4, #0]
 80080ae:	2203      	movs	r2, #3
 80080b0:	4650      	mov	r0, sl
 80080b2:	f7f8 f88d 	bl	80001d0 <memchr>
 80080b6:	b138      	cbz	r0, 80080c8 <_svfiprintf_r+0x150>
 80080b8:	9b04      	ldr	r3, [sp, #16]
 80080ba:	eba0 000a 	sub.w	r0, r0, sl
 80080be:	2240      	movs	r2, #64	; 0x40
 80080c0:	4082      	lsls	r2, r0
 80080c2:	4313      	orrs	r3, r2
 80080c4:	3401      	adds	r4, #1
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080cc:	4825      	ldr	r0, [pc, #148]	; (8008164 <_svfiprintf_r+0x1ec>)
 80080ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080d2:	2206      	movs	r2, #6
 80080d4:	f7f8 f87c 	bl	80001d0 <memchr>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d038      	beq.n	800814e <_svfiprintf_r+0x1d6>
 80080dc:	4b22      	ldr	r3, [pc, #136]	; (8008168 <_svfiprintf_r+0x1f0>)
 80080de:	bb1b      	cbnz	r3, 8008128 <_svfiprintf_r+0x1b0>
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	3307      	adds	r3, #7
 80080e4:	f023 0307 	bic.w	r3, r3, #7
 80080e8:	3308      	adds	r3, #8
 80080ea:	9303      	str	r3, [sp, #12]
 80080ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ee:	4433      	add	r3, r6
 80080f0:	9309      	str	r3, [sp, #36]	; 0x24
 80080f2:	e768      	b.n	8007fc6 <_svfiprintf_r+0x4e>
 80080f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080f8:	460c      	mov	r4, r1
 80080fa:	2001      	movs	r0, #1
 80080fc:	e7a6      	b.n	800804c <_svfiprintf_r+0xd4>
 80080fe:	2300      	movs	r3, #0
 8008100:	3401      	adds	r4, #1
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	4619      	mov	r1, r3
 8008106:	f04f 0c0a 	mov.w	ip, #10
 800810a:	4620      	mov	r0, r4
 800810c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008110:	3a30      	subs	r2, #48	; 0x30
 8008112:	2a09      	cmp	r2, #9
 8008114:	d903      	bls.n	800811e <_svfiprintf_r+0x1a6>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0c6      	beq.n	80080a8 <_svfiprintf_r+0x130>
 800811a:	9105      	str	r1, [sp, #20]
 800811c:	e7c4      	b.n	80080a8 <_svfiprintf_r+0x130>
 800811e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008122:	4604      	mov	r4, r0
 8008124:	2301      	movs	r3, #1
 8008126:	e7f0      	b.n	800810a <_svfiprintf_r+0x192>
 8008128:	ab03      	add	r3, sp, #12
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	462a      	mov	r2, r5
 800812e:	4b0f      	ldr	r3, [pc, #60]	; (800816c <_svfiprintf_r+0x1f4>)
 8008130:	a904      	add	r1, sp, #16
 8008132:	4638      	mov	r0, r7
 8008134:	f7fc ff3a 	bl	8004fac <_printf_float>
 8008138:	1c42      	adds	r2, r0, #1
 800813a:	4606      	mov	r6, r0
 800813c:	d1d6      	bne.n	80080ec <_svfiprintf_r+0x174>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	065b      	lsls	r3, r3, #25
 8008142:	f53f af2d 	bmi.w	8007fa0 <_svfiprintf_r+0x28>
 8008146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008148:	b01d      	add	sp, #116	; 0x74
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	ab03      	add	r3, sp, #12
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	462a      	mov	r2, r5
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <_svfiprintf_r+0x1f4>)
 8008156:	a904      	add	r1, sp, #16
 8008158:	4638      	mov	r0, r7
 800815a:	f7fd f9cb 	bl	80054f4 <_printf_i>
 800815e:	e7eb      	b.n	8008138 <_svfiprintf_r+0x1c0>
 8008160:	0800996e 	.word	0x0800996e
 8008164:	08009978 	.word	0x08009978
 8008168:	08004fad 	.word	0x08004fad
 800816c:	08007ec3 	.word	0x08007ec3
 8008170:	08009974 	.word	0x08009974

08008174 <__sfputc_r>:
 8008174:	6893      	ldr	r3, [r2, #8]
 8008176:	3b01      	subs	r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	b410      	push	{r4}
 800817c:	6093      	str	r3, [r2, #8]
 800817e:	da08      	bge.n	8008192 <__sfputc_r+0x1e>
 8008180:	6994      	ldr	r4, [r2, #24]
 8008182:	42a3      	cmp	r3, r4
 8008184:	db01      	blt.n	800818a <__sfputc_r+0x16>
 8008186:	290a      	cmp	r1, #10
 8008188:	d103      	bne.n	8008192 <__sfputc_r+0x1e>
 800818a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800818e:	f000 bfc8 	b.w	8009122 <__swbuf_r>
 8008192:	6813      	ldr	r3, [r2, #0]
 8008194:	1c58      	adds	r0, r3, #1
 8008196:	6010      	str	r0, [r2, #0]
 8008198:	7019      	strb	r1, [r3, #0]
 800819a:	4608      	mov	r0, r1
 800819c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <__sfputs_r>:
 80081a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a4:	4606      	mov	r6, r0
 80081a6:	460f      	mov	r7, r1
 80081a8:	4614      	mov	r4, r2
 80081aa:	18d5      	adds	r5, r2, r3
 80081ac:	42ac      	cmp	r4, r5
 80081ae:	d101      	bne.n	80081b4 <__sfputs_r+0x12>
 80081b0:	2000      	movs	r0, #0
 80081b2:	e007      	b.n	80081c4 <__sfputs_r+0x22>
 80081b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b8:	463a      	mov	r2, r7
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ffda 	bl	8008174 <__sfputc_r>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d1f3      	bne.n	80081ac <__sfputs_r+0xa>
 80081c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081c8 <_vfiprintf_r>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	460d      	mov	r5, r1
 80081ce:	b09d      	sub	sp, #116	; 0x74
 80081d0:	4614      	mov	r4, r2
 80081d2:	4698      	mov	r8, r3
 80081d4:	4606      	mov	r6, r0
 80081d6:	b118      	cbz	r0, 80081e0 <_vfiprintf_r+0x18>
 80081d8:	6a03      	ldr	r3, [r0, #32]
 80081da:	b90b      	cbnz	r3, 80081e0 <_vfiprintf_r+0x18>
 80081dc:	f7fd fd56 	bl	8005c8c <__sinit>
 80081e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081e2:	07d9      	lsls	r1, r3, #31
 80081e4:	d405      	bmi.n	80081f2 <_vfiprintf_r+0x2a>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	059a      	lsls	r2, r3, #22
 80081ea:	d402      	bmi.n	80081f2 <_vfiprintf_r+0x2a>
 80081ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ee:	f7fe fc75 	bl	8006adc <__retarget_lock_acquire_recursive>
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	071b      	lsls	r3, r3, #28
 80081f6:	d501      	bpl.n	80081fc <_vfiprintf_r+0x34>
 80081f8:	692b      	ldr	r3, [r5, #16]
 80081fa:	b99b      	cbnz	r3, 8008224 <_vfiprintf_r+0x5c>
 80081fc:	4629      	mov	r1, r5
 80081fe:	4630      	mov	r0, r6
 8008200:	f000 ffcc 	bl	800919c <__swsetup_r>
 8008204:	b170      	cbz	r0, 8008224 <_vfiprintf_r+0x5c>
 8008206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008208:	07dc      	lsls	r4, r3, #31
 800820a:	d504      	bpl.n	8008216 <_vfiprintf_r+0x4e>
 800820c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008210:	b01d      	add	sp, #116	; 0x74
 8008212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	0598      	lsls	r0, r3, #22
 800821a:	d4f7      	bmi.n	800820c <_vfiprintf_r+0x44>
 800821c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800821e:	f7fe fc5e 	bl	8006ade <__retarget_lock_release_recursive>
 8008222:	e7f3      	b.n	800820c <_vfiprintf_r+0x44>
 8008224:	2300      	movs	r3, #0
 8008226:	9309      	str	r3, [sp, #36]	; 0x24
 8008228:	2320      	movs	r3, #32
 800822a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800822e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008232:	2330      	movs	r3, #48	; 0x30
 8008234:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80083e8 <_vfiprintf_r+0x220>
 8008238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800823c:	f04f 0901 	mov.w	r9, #1
 8008240:	4623      	mov	r3, r4
 8008242:	469a      	mov	sl, r3
 8008244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008248:	b10a      	cbz	r2, 800824e <_vfiprintf_r+0x86>
 800824a:	2a25      	cmp	r2, #37	; 0x25
 800824c:	d1f9      	bne.n	8008242 <_vfiprintf_r+0x7a>
 800824e:	ebba 0b04 	subs.w	fp, sl, r4
 8008252:	d00b      	beq.n	800826c <_vfiprintf_r+0xa4>
 8008254:	465b      	mov	r3, fp
 8008256:	4622      	mov	r2, r4
 8008258:	4629      	mov	r1, r5
 800825a:	4630      	mov	r0, r6
 800825c:	f7ff ffa1 	bl	80081a2 <__sfputs_r>
 8008260:	3001      	adds	r0, #1
 8008262:	f000 80a9 	beq.w	80083b8 <_vfiprintf_r+0x1f0>
 8008266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008268:	445a      	add	r2, fp
 800826a:	9209      	str	r2, [sp, #36]	; 0x24
 800826c:	f89a 3000 	ldrb.w	r3, [sl]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80a1 	beq.w	80083b8 <_vfiprintf_r+0x1f0>
 8008276:	2300      	movs	r3, #0
 8008278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800827c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008280:	f10a 0a01 	add.w	sl, sl, #1
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	9307      	str	r3, [sp, #28]
 8008288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800828c:	931a      	str	r3, [sp, #104]	; 0x68
 800828e:	4654      	mov	r4, sl
 8008290:	2205      	movs	r2, #5
 8008292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008296:	4854      	ldr	r0, [pc, #336]	; (80083e8 <_vfiprintf_r+0x220>)
 8008298:	f7f7 ff9a 	bl	80001d0 <memchr>
 800829c:	9a04      	ldr	r2, [sp, #16]
 800829e:	b9d8      	cbnz	r0, 80082d8 <_vfiprintf_r+0x110>
 80082a0:	06d1      	lsls	r1, r2, #27
 80082a2:	bf44      	itt	mi
 80082a4:	2320      	movmi	r3, #32
 80082a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082aa:	0713      	lsls	r3, r2, #28
 80082ac:	bf44      	itt	mi
 80082ae:	232b      	movmi	r3, #43	; 0x2b
 80082b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b4:	f89a 3000 	ldrb.w	r3, [sl]
 80082b8:	2b2a      	cmp	r3, #42	; 0x2a
 80082ba:	d015      	beq.n	80082e8 <_vfiprintf_r+0x120>
 80082bc:	9a07      	ldr	r2, [sp, #28]
 80082be:	4654      	mov	r4, sl
 80082c0:	2000      	movs	r0, #0
 80082c2:	f04f 0c0a 	mov.w	ip, #10
 80082c6:	4621      	mov	r1, r4
 80082c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082cc:	3b30      	subs	r3, #48	; 0x30
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	d94d      	bls.n	800836e <_vfiprintf_r+0x1a6>
 80082d2:	b1b0      	cbz	r0, 8008302 <_vfiprintf_r+0x13a>
 80082d4:	9207      	str	r2, [sp, #28]
 80082d6:	e014      	b.n	8008302 <_vfiprintf_r+0x13a>
 80082d8:	eba0 0308 	sub.w	r3, r0, r8
 80082dc:	fa09 f303 	lsl.w	r3, r9, r3
 80082e0:	4313      	orrs	r3, r2
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	46a2      	mov	sl, r4
 80082e6:	e7d2      	b.n	800828e <_vfiprintf_r+0xc6>
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	1d19      	adds	r1, r3, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	9103      	str	r1, [sp, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfbb      	ittet	lt
 80082f4:	425b      	neglt	r3, r3
 80082f6:	f042 0202 	orrlt.w	r2, r2, #2
 80082fa:	9307      	strge	r3, [sp, #28]
 80082fc:	9307      	strlt	r3, [sp, #28]
 80082fe:	bfb8      	it	lt
 8008300:	9204      	strlt	r2, [sp, #16]
 8008302:	7823      	ldrb	r3, [r4, #0]
 8008304:	2b2e      	cmp	r3, #46	; 0x2e
 8008306:	d10c      	bne.n	8008322 <_vfiprintf_r+0x15a>
 8008308:	7863      	ldrb	r3, [r4, #1]
 800830a:	2b2a      	cmp	r3, #42	; 0x2a
 800830c:	d134      	bne.n	8008378 <_vfiprintf_r+0x1b0>
 800830e:	9b03      	ldr	r3, [sp, #12]
 8008310:	1d1a      	adds	r2, r3, #4
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	9203      	str	r2, [sp, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfb8      	it	lt
 800831a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800831e:	3402      	adds	r4, #2
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80083f8 <_vfiprintf_r+0x230>
 8008326:	7821      	ldrb	r1, [r4, #0]
 8008328:	2203      	movs	r2, #3
 800832a:	4650      	mov	r0, sl
 800832c:	f7f7 ff50 	bl	80001d0 <memchr>
 8008330:	b138      	cbz	r0, 8008342 <_vfiprintf_r+0x17a>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	eba0 000a 	sub.w	r0, r0, sl
 8008338:	2240      	movs	r2, #64	; 0x40
 800833a:	4082      	lsls	r2, r0
 800833c:	4313      	orrs	r3, r2
 800833e:	3401      	adds	r4, #1
 8008340:	9304      	str	r3, [sp, #16]
 8008342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008346:	4829      	ldr	r0, [pc, #164]	; (80083ec <_vfiprintf_r+0x224>)
 8008348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800834c:	2206      	movs	r2, #6
 800834e:	f7f7 ff3f 	bl	80001d0 <memchr>
 8008352:	2800      	cmp	r0, #0
 8008354:	d03f      	beq.n	80083d6 <_vfiprintf_r+0x20e>
 8008356:	4b26      	ldr	r3, [pc, #152]	; (80083f0 <_vfiprintf_r+0x228>)
 8008358:	bb1b      	cbnz	r3, 80083a2 <_vfiprintf_r+0x1da>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	3307      	adds	r3, #7
 800835e:	f023 0307 	bic.w	r3, r3, #7
 8008362:	3308      	adds	r3, #8
 8008364:	9303      	str	r3, [sp, #12]
 8008366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008368:	443b      	add	r3, r7
 800836a:	9309      	str	r3, [sp, #36]	; 0x24
 800836c:	e768      	b.n	8008240 <_vfiprintf_r+0x78>
 800836e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008372:	460c      	mov	r4, r1
 8008374:	2001      	movs	r0, #1
 8008376:	e7a6      	b.n	80082c6 <_vfiprintf_r+0xfe>
 8008378:	2300      	movs	r3, #0
 800837a:	3401      	adds	r4, #1
 800837c:	9305      	str	r3, [sp, #20]
 800837e:	4619      	mov	r1, r3
 8008380:	f04f 0c0a 	mov.w	ip, #10
 8008384:	4620      	mov	r0, r4
 8008386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800838a:	3a30      	subs	r2, #48	; 0x30
 800838c:	2a09      	cmp	r2, #9
 800838e:	d903      	bls.n	8008398 <_vfiprintf_r+0x1d0>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0c6      	beq.n	8008322 <_vfiprintf_r+0x15a>
 8008394:	9105      	str	r1, [sp, #20]
 8008396:	e7c4      	b.n	8008322 <_vfiprintf_r+0x15a>
 8008398:	fb0c 2101 	mla	r1, ip, r1, r2
 800839c:	4604      	mov	r4, r0
 800839e:	2301      	movs	r3, #1
 80083a0:	e7f0      	b.n	8008384 <_vfiprintf_r+0x1bc>
 80083a2:	ab03      	add	r3, sp, #12
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	462a      	mov	r2, r5
 80083a8:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <_vfiprintf_r+0x22c>)
 80083aa:	a904      	add	r1, sp, #16
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7fc fdfd 	bl	8004fac <_printf_float>
 80083b2:	4607      	mov	r7, r0
 80083b4:	1c78      	adds	r0, r7, #1
 80083b6:	d1d6      	bne.n	8008366 <_vfiprintf_r+0x19e>
 80083b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ba:	07d9      	lsls	r1, r3, #31
 80083bc:	d405      	bmi.n	80083ca <_vfiprintf_r+0x202>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	059a      	lsls	r2, r3, #22
 80083c2:	d402      	bmi.n	80083ca <_vfiprintf_r+0x202>
 80083c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083c6:	f7fe fb8a 	bl	8006ade <__retarget_lock_release_recursive>
 80083ca:	89ab      	ldrh	r3, [r5, #12]
 80083cc:	065b      	lsls	r3, r3, #25
 80083ce:	f53f af1d 	bmi.w	800820c <_vfiprintf_r+0x44>
 80083d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083d4:	e71c      	b.n	8008210 <_vfiprintf_r+0x48>
 80083d6:	ab03      	add	r3, sp, #12
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	462a      	mov	r2, r5
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <_vfiprintf_r+0x22c>)
 80083de:	a904      	add	r1, sp, #16
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7fd f887 	bl	80054f4 <_printf_i>
 80083e6:	e7e4      	b.n	80083b2 <_vfiprintf_r+0x1ea>
 80083e8:	0800996e 	.word	0x0800996e
 80083ec:	08009978 	.word	0x08009978
 80083f0:	08004fad 	.word	0x08004fad
 80083f4:	080081a3 	.word	0x080081a3
 80083f8:	08009974 	.word	0x08009974

080083fc <malloc>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <malloc+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b823 	b.w	800844c <_malloc_r>
 8008406:	bf00      	nop
 8008408:	200001d0 	.word	0x200001d0

0800840c <sbrk_aligned>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4e0e      	ldr	r6, [pc, #56]	; (8008448 <sbrk_aligned+0x3c>)
 8008410:	460c      	mov	r4, r1
 8008412:	6831      	ldr	r1, [r6, #0]
 8008414:	4605      	mov	r5, r0
 8008416:	b911      	cbnz	r1, 800841e <sbrk_aligned+0x12>
 8008418:	f000 fff8 	bl	800940c <_sbrk_r>
 800841c:	6030      	str	r0, [r6, #0]
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 fff3 	bl	800940c <_sbrk_r>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d00a      	beq.n	8008440 <sbrk_aligned+0x34>
 800842a:	1cc4      	adds	r4, r0, #3
 800842c:	f024 0403 	bic.w	r4, r4, #3
 8008430:	42a0      	cmp	r0, r4
 8008432:	d007      	beq.n	8008444 <sbrk_aligned+0x38>
 8008434:	1a21      	subs	r1, r4, r0
 8008436:	4628      	mov	r0, r5
 8008438:	f000 ffe8 	bl	800940c <_sbrk_r>
 800843c:	3001      	adds	r0, #1
 800843e:	d101      	bne.n	8008444 <sbrk_aligned+0x38>
 8008440:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008444:	4620      	mov	r0, r4
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	200004a0 	.word	0x200004a0

0800844c <_malloc_r>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	1ccd      	adds	r5, r1, #3
 8008452:	f025 0503 	bic.w	r5, r5, #3
 8008456:	3508      	adds	r5, #8
 8008458:	2d0c      	cmp	r5, #12
 800845a:	bf38      	it	cc
 800845c:	250c      	movcc	r5, #12
 800845e:	2d00      	cmp	r5, #0
 8008460:	4607      	mov	r7, r0
 8008462:	db01      	blt.n	8008468 <_malloc_r+0x1c>
 8008464:	42a9      	cmp	r1, r5
 8008466:	d905      	bls.n	8008474 <_malloc_r+0x28>
 8008468:	230c      	movs	r3, #12
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	2600      	movs	r6, #0
 800846e:	4630      	mov	r0, r6
 8008470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008548 <_malloc_r+0xfc>
 8008478:	f000 f928 	bl	80086cc <__malloc_lock>
 800847c:	f8d8 3000 	ldr.w	r3, [r8]
 8008480:	461c      	mov	r4, r3
 8008482:	bb5c      	cbnz	r4, 80084dc <_malloc_r+0x90>
 8008484:	4629      	mov	r1, r5
 8008486:	4638      	mov	r0, r7
 8008488:	f7ff ffc0 	bl	800840c <sbrk_aligned>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	4604      	mov	r4, r0
 8008490:	d155      	bne.n	800853e <_malloc_r+0xf2>
 8008492:	f8d8 4000 	ldr.w	r4, [r8]
 8008496:	4626      	mov	r6, r4
 8008498:	2e00      	cmp	r6, #0
 800849a:	d145      	bne.n	8008528 <_malloc_r+0xdc>
 800849c:	2c00      	cmp	r4, #0
 800849e:	d048      	beq.n	8008532 <_malloc_r+0xe6>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	4631      	mov	r1, r6
 80084a4:	4638      	mov	r0, r7
 80084a6:	eb04 0903 	add.w	r9, r4, r3
 80084aa:	f000 ffaf 	bl	800940c <_sbrk_r>
 80084ae:	4581      	cmp	r9, r0
 80084b0:	d13f      	bne.n	8008532 <_malloc_r+0xe6>
 80084b2:	6821      	ldr	r1, [r4, #0]
 80084b4:	1a6d      	subs	r5, r5, r1
 80084b6:	4629      	mov	r1, r5
 80084b8:	4638      	mov	r0, r7
 80084ba:	f7ff ffa7 	bl	800840c <sbrk_aligned>
 80084be:	3001      	adds	r0, #1
 80084c0:	d037      	beq.n	8008532 <_malloc_r+0xe6>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	442b      	add	r3, r5
 80084c6:	6023      	str	r3, [r4, #0]
 80084c8:	f8d8 3000 	ldr.w	r3, [r8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d038      	beq.n	8008542 <_malloc_r+0xf6>
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	42a2      	cmp	r2, r4
 80084d4:	d12b      	bne.n	800852e <_malloc_r+0xe2>
 80084d6:	2200      	movs	r2, #0
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	e00f      	b.n	80084fc <_malloc_r+0xb0>
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	1b52      	subs	r2, r2, r5
 80084e0:	d41f      	bmi.n	8008522 <_malloc_r+0xd6>
 80084e2:	2a0b      	cmp	r2, #11
 80084e4:	d917      	bls.n	8008516 <_malloc_r+0xca>
 80084e6:	1961      	adds	r1, r4, r5
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	6025      	str	r5, [r4, #0]
 80084ec:	bf18      	it	ne
 80084ee:	6059      	strne	r1, [r3, #4]
 80084f0:	6863      	ldr	r3, [r4, #4]
 80084f2:	bf08      	it	eq
 80084f4:	f8c8 1000 	streq.w	r1, [r8]
 80084f8:	5162      	str	r2, [r4, r5]
 80084fa:	604b      	str	r3, [r1, #4]
 80084fc:	4638      	mov	r0, r7
 80084fe:	f104 060b 	add.w	r6, r4, #11
 8008502:	f000 f8e9 	bl	80086d8 <__malloc_unlock>
 8008506:	f026 0607 	bic.w	r6, r6, #7
 800850a:	1d23      	adds	r3, r4, #4
 800850c:	1af2      	subs	r2, r6, r3
 800850e:	d0ae      	beq.n	800846e <_malloc_r+0x22>
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	50a3      	str	r3, [r4, r2]
 8008514:	e7ab      	b.n	800846e <_malloc_r+0x22>
 8008516:	42a3      	cmp	r3, r4
 8008518:	6862      	ldr	r2, [r4, #4]
 800851a:	d1dd      	bne.n	80084d8 <_malloc_r+0x8c>
 800851c:	f8c8 2000 	str.w	r2, [r8]
 8008520:	e7ec      	b.n	80084fc <_malloc_r+0xb0>
 8008522:	4623      	mov	r3, r4
 8008524:	6864      	ldr	r4, [r4, #4]
 8008526:	e7ac      	b.n	8008482 <_malloc_r+0x36>
 8008528:	4634      	mov	r4, r6
 800852a:	6876      	ldr	r6, [r6, #4]
 800852c:	e7b4      	b.n	8008498 <_malloc_r+0x4c>
 800852e:	4613      	mov	r3, r2
 8008530:	e7cc      	b.n	80084cc <_malloc_r+0x80>
 8008532:	230c      	movs	r3, #12
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	4638      	mov	r0, r7
 8008538:	f000 f8ce 	bl	80086d8 <__malloc_unlock>
 800853c:	e797      	b.n	800846e <_malloc_r+0x22>
 800853e:	6025      	str	r5, [r4, #0]
 8008540:	e7dc      	b.n	80084fc <_malloc_r+0xb0>
 8008542:	605b      	str	r3, [r3, #4]
 8008544:	deff      	udf	#255	; 0xff
 8008546:	bf00      	nop
 8008548:	2000049c 	.word	0x2000049c

0800854c <__ascii_mbtowc>:
 800854c:	b082      	sub	sp, #8
 800854e:	b901      	cbnz	r1, 8008552 <__ascii_mbtowc+0x6>
 8008550:	a901      	add	r1, sp, #4
 8008552:	b142      	cbz	r2, 8008566 <__ascii_mbtowc+0x1a>
 8008554:	b14b      	cbz	r3, 800856a <__ascii_mbtowc+0x1e>
 8008556:	7813      	ldrb	r3, [r2, #0]
 8008558:	600b      	str	r3, [r1, #0]
 800855a:	7812      	ldrb	r2, [r2, #0]
 800855c:	1e10      	subs	r0, r2, #0
 800855e:	bf18      	it	ne
 8008560:	2001      	movne	r0, #1
 8008562:	b002      	add	sp, #8
 8008564:	4770      	bx	lr
 8008566:	4610      	mov	r0, r2
 8008568:	e7fb      	b.n	8008562 <__ascii_mbtowc+0x16>
 800856a:	f06f 0001 	mvn.w	r0, #1
 800856e:	e7f8      	b.n	8008562 <__ascii_mbtowc+0x16>

08008570 <__sflush_r>:
 8008570:	898a      	ldrh	r2, [r1, #12]
 8008572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008576:	4605      	mov	r5, r0
 8008578:	0710      	lsls	r0, r2, #28
 800857a:	460c      	mov	r4, r1
 800857c:	d458      	bmi.n	8008630 <__sflush_r+0xc0>
 800857e:	684b      	ldr	r3, [r1, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	dc05      	bgt.n	8008590 <__sflush_r+0x20>
 8008584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008586:	2b00      	cmp	r3, #0
 8008588:	dc02      	bgt.n	8008590 <__sflush_r+0x20>
 800858a:	2000      	movs	r0, #0
 800858c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008592:	2e00      	cmp	r6, #0
 8008594:	d0f9      	beq.n	800858a <__sflush_r+0x1a>
 8008596:	2300      	movs	r3, #0
 8008598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800859c:	682f      	ldr	r7, [r5, #0]
 800859e:	6a21      	ldr	r1, [r4, #32]
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	d032      	beq.n	800860a <__sflush_r+0x9a>
 80085a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	075a      	lsls	r2, r3, #29
 80085aa:	d505      	bpl.n	80085b8 <__sflush_r+0x48>
 80085ac:	6863      	ldr	r3, [r4, #4]
 80085ae:	1ac0      	subs	r0, r0, r3
 80085b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085b2:	b10b      	cbz	r3, 80085b8 <__sflush_r+0x48>
 80085b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085b6:	1ac0      	subs	r0, r0, r3
 80085b8:	2300      	movs	r3, #0
 80085ba:	4602      	mov	r2, r0
 80085bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085be:	6a21      	ldr	r1, [r4, #32]
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b0      	blx	r6
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	d106      	bne.n	80085d8 <__sflush_r+0x68>
 80085ca:	6829      	ldr	r1, [r5, #0]
 80085cc:	291d      	cmp	r1, #29
 80085ce:	d82b      	bhi.n	8008628 <__sflush_r+0xb8>
 80085d0:	4a29      	ldr	r2, [pc, #164]	; (8008678 <__sflush_r+0x108>)
 80085d2:	410a      	asrs	r2, r1
 80085d4:	07d6      	lsls	r6, r2, #31
 80085d6:	d427      	bmi.n	8008628 <__sflush_r+0xb8>
 80085d8:	2200      	movs	r2, #0
 80085da:	6062      	str	r2, [r4, #4]
 80085dc:	04d9      	lsls	r1, r3, #19
 80085de:	6922      	ldr	r2, [r4, #16]
 80085e0:	6022      	str	r2, [r4, #0]
 80085e2:	d504      	bpl.n	80085ee <__sflush_r+0x7e>
 80085e4:	1c42      	adds	r2, r0, #1
 80085e6:	d101      	bne.n	80085ec <__sflush_r+0x7c>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b903      	cbnz	r3, 80085ee <__sflush_r+0x7e>
 80085ec:	6560      	str	r0, [r4, #84]	; 0x54
 80085ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085f0:	602f      	str	r7, [r5, #0]
 80085f2:	2900      	cmp	r1, #0
 80085f4:	d0c9      	beq.n	800858a <__sflush_r+0x1a>
 80085f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085fa:	4299      	cmp	r1, r3
 80085fc:	d002      	beq.n	8008604 <__sflush_r+0x94>
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 ff5a 	bl	80094b8 <_free_r>
 8008604:	2000      	movs	r0, #0
 8008606:	6360      	str	r0, [r4, #52]	; 0x34
 8008608:	e7c0      	b.n	800858c <__sflush_r+0x1c>
 800860a:	2301      	movs	r3, #1
 800860c:	4628      	mov	r0, r5
 800860e:	47b0      	blx	r6
 8008610:	1c41      	adds	r1, r0, #1
 8008612:	d1c8      	bne.n	80085a6 <__sflush_r+0x36>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0c5      	beq.n	80085a6 <__sflush_r+0x36>
 800861a:	2b1d      	cmp	r3, #29
 800861c:	d001      	beq.n	8008622 <__sflush_r+0xb2>
 800861e:	2b16      	cmp	r3, #22
 8008620:	d101      	bne.n	8008626 <__sflush_r+0xb6>
 8008622:	602f      	str	r7, [r5, #0]
 8008624:	e7b1      	b.n	800858a <__sflush_r+0x1a>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	e7ad      	b.n	800858c <__sflush_r+0x1c>
 8008630:	690f      	ldr	r7, [r1, #16]
 8008632:	2f00      	cmp	r7, #0
 8008634:	d0a9      	beq.n	800858a <__sflush_r+0x1a>
 8008636:	0793      	lsls	r3, r2, #30
 8008638:	680e      	ldr	r6, [r1, #0]
 800863a:	bf08      	it	eq
 800863c:	694b      	ldreq	r3, [r1, #20]
 800863e:	600f      	str	r7, [r1, #0]
 8008640:	bf18      	it	ne
 8008642:	2300      	movne	r3, #0
 8008644:	eba6 0807 	sub.w	r8, r6, r7
 8008648:	608b      	str	r3, [r1, #8]
 800864a:	f1b8 0f00 	cmp.w	r8, #0
 800864e:	dd9c      	ble.n	800858a <__sflush_r+0x1a>
 8008650:	6a21      	ldr	r1, [r4, #32]
 8008652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008654:	4643      	mov	r3, r8
 8008656:	463a      	mov	r2, r7
 8008658:	4628      	mov	r0, r5
 800865a:	47b0      	blx	r6
 800865c:	2800      	cmp	r0, #0
 800865e:	dc06      	bgt.n	800866e <__sflush_r+0xfe>
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800866c:	e78e      	b.n	800858c <__sflush_r+0x1c>
 800866e:	4407      	add	r7, r0
 8008670:	eba8 0800 	sub.w	r8, r8, r0
 8008674:	e7e9      	b.n	800864a <__sflush_r+0xda>
 8008676:	bf00      	nop
 8008678:	dfbffffe 	.word	0xdfbffffe

0800867c <_fflush_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	690b      	ldr	r3, [r1, #16]
 8008680:	4605      	mov	r5, r0
 8008682:	460c      	mov	r4, r1
 8008684:	b913      	cbnz	r3, 800868c <_fflush_r+0x10>
 8008686:	2500      	movs	r5, #0
 8008688:	4628      	mov	r0, r5
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	b118      	cbz	r0, 8008696 <_fflush_r+0x1a>
 800868e:	6a03      	ldr	r3, [r0, #32]
 8008690:	b90b      	cbnz	r3, 8008696 <_fflush_r+0x1a>
 8008692:	f7fd fafb 	bl	8005c8c <__sinit>
 8008696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0f3      	beq.n	8008686 <_fflush_r+0xa>
 800869e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086a0:	07d0      	lsls	r0, r2, #31
 80086a2:	d404      	bmi.n	80086ae <_fflush_r+0x32>
 80086a4:	0599      	lsls	r1, r3, #22
 80086a6:	d402      	bmi.n	80086ae <_fflush_r+0x32>
 80086a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086aa:	f7fe fa17 	bl	8006adc <__retarget_lock_acquire_recursive>
 80086ae:	4628      	mov	r0, r5
 80086b0:	4621      	mov	r1, r4
 80086b2:	f7ff ff5d 	bl	8008570 <__sflush_r>
 80086b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086b8:	07da      	lsls	r2, r3, #31
 80086ba:	4605      	mov	r5, r0
 80086bc:	d4e4      	bmi.n	8008688 <_fflush_r+0xc>
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	059b      	lsls	r3, r3, #22
 80086c2:	d4e1      	bmi.n	8008688 <_fflush_r+0xc>
 80086c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086c6:	f7fe fa0a 	bl	8006ade <__retarget_lock_release_recursive>
 80086ca:	e7dd      	b.n	8008688 <_fflush_r+0xc>

080086cc <__malloc_lock>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__malloc_lock+0x8>)
 80086ce:	f7fe ba05 	b.w	8006adc <__retarget_lock_acquire_recursive>
 80086d2:	bf00      	nop
 80086d4:	20000498 	.word	0x20000498

080086d8 <__malloc_unlock>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__malloc_unlock+0x8>)
 80086da:	f7fe ba00 	b.w	8006ade <__retarget_lock_release_recursive>
 80086de:	bf00      	nop
 80086e0:	20000498 	.word	0x20000498

080086e4 <_Balloc>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	69c6      	ldr	r6, [r0, #28]
 80086e8:	4604      	mov	r4, r0
 80086ea:	460d      	mov	r5, r1
 80086ec:	b976      	cbnz	r6, 800870c <_Balloc+0x28>
 80086ee:	2010      	movs	r0, #16
 80086f0:	f7ff fe84 	bl	80083fc <malloc>
 80086f4:	4602      	mov	r2, r0
 80086f6:	61e0      	str	r0, [r4, #28]
 80086f8:	b920      	cbnz	r0, 8008704 <_Balloc+0x20>
 80086fa:	4b18      	ldr	r3, [pc, #96]	; (800875c <_Balloc+0x78>)
 80086fc:	4818      	ldr	r0, [pc, #96]	; (8008760 <_Balloc+0x7c>)
 80086fe:	216b      	movs	r1, #107	; 0x6b
 8008700:	f000 fea6 	bl	8009450 <__assert_func>
 8008704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008708:	6006      	str	r6, [r0, #0]
 800870a:	60c6      	str	r6, [r0, #12]
 800870c:	69e6      	ldr	r6, [r4, #28]
 800870e:	68f3      	ldr	r3, [r6, #12]
 8008710:	b183      	cbz	r3, 8008734 <_Balloc+0x50>
 8008712:	69e3      	ldr	r3, [r4, #28]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800871a:	b9b8      	cbnz	r0, 800874c <_Balloc+0x68>
 800871c:	2101      	movs	r1, #1
 800871e:	fa01 f605 	lsl.w	r6, r1, r5
 8008722:	1d72      	adds	r2, r6, #5
 8008724:	0092      	lsls	r2, r2, #2
 8008726:	4620      	mov	r0, r4
 8008728:	f000 feb0 	bl	800948c <_calloc_r>
 800872c:	b160      	cbz	r0, 8008748 <_Balloc+0x64>
 800872e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008732:	e00e      	b.n	8008752 <_Balloc+0x6e>
 8008734:	2221      	movs	r2, #33	; 0x21
 8008736:	2104      	movs	r1, #4
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fea7 	bl	800948c <_calloc_r>
 800873e:	69e3      	ldr	r3, [r4, #28]
 8008740:	60f0      	str	r0, [r6, #12]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e4      	bne.n	8008712 <_Balloc+0x2e>
 8008748:	2000      	movs	r0, #0
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	6802      	ldr	r2, [r0, #0]
 800874e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008752:	2300      	movs	r3, #0
 8008754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008758:	e7f7      	b.n	800874a <_Balloc+0x66>
 800875a:	bf00      	nop
 800875c:	0800988e 	.word	0x0800988e
 8008760:	0800997f 	.word	0x0800997f

08008764 <_Bfree>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	69c6      	ldr	r6, [r0, #28]
 8008768:	4605      	mov	r5, r0
 800876a:	460c      	mov	r4, r1
 800876c:	b976      	cbnz	r6, 800878c <_Bfree+0x28>
 800876e:	2010      	movs	r0, #16
 8008770:	f7ff fe44 	bl	80083fc <malloc>
 8008774:	4602      	mov	r2, r0
 8008776:	61e8      	str	r0, [r5, #28]
 8008778:	b920      	cbnz	r0, 8008784 <_Bfree+0x20>
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <_Bfree+0x3c>)
 800877c:	4809      	ldr	r0, [pc, #36]	; (80087a4 <_Bfree+0x40>)
 800877e:	218f      	movs	r1, #143	; 0x8f
 8008780:	f000 fe66 	bl	8009450 <__assert_func>
 8008784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008788:	6006      	str	r6, [r0, #0]
 800878a:	60c6      	str	r6, [r0, #12]
 800878c:	b13c      	cbz	r4, 800879e <_Bfree+0x3a>
 800878e:	69eb      	ldr	r3, [r5, #28]
 8008790:	6862      	ldr	r2, [r4, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008798:	6021      	str	r1, [r4, #0]
 800879a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	0800988e 	.word	0x0800988e
 80087a4:	0800997f 	.word	0x0800997f

080087a8 <__multadd>:
 80087a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ac:	690d      	ldr	r5, [r1, #16]
 80087ae:	4607      	mov	r7, r0
 80087b0:	460c      	mov	r4, r1
 80087b2:	461e      	mov	r6, r3
 80087b4:	f101 0c14 	add.w	ip, r1, #20
 80087b8:	2000      	movs	r0, #0
 80087ba:	f8dc 3000 	ldr.w	r3, [ip]
 80087be:	b299      	uxth	r1, r3
 80087c0:	fb02 6101 	mla	r1, r2, r1, r6
 80087c4:	0c1e      	lsrs	r6, r3, #16
 80087c6:	0c0b      	lsrs	r3, r1, #16
 80087c8:	fb02 3306 	mla	r3, r2, r6, r3
 80087cc:	b289      	uxth	r1, r1
 80087ce:	3001      	adds	r0, #1
 80087d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087d4:	4285      	cmp	r5, r0
 80087d6:	f84c 1b04 	str.w	r1, [ip], #4
 80087da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087de:	dcec      	bgt.n	80087ba <__multadd+0x12>
 80087e0:	b30e      	cbz	r6, 8008826 <__multadd+0x7e>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	dc19      	bgt.n	800881c <__multadd+0x74>
 80087e8:	6861      	ldr	r1, [r4, #4]
 80087ea:	4638      	mov	r0, r7
 80087ec:	3101      	adds	r1, #1
 80087ee:	f7ff ff79 	bl	80086e4 <_Balloc>
 80087f2:	4680      	mov	r8, r0
 80087f4:	b928      	cbnz	r0, 8008802 <__multadd+0x5a>
 80087f6:	4602      	mov	r2, r0
 80087f8:	4b0c      	ldr	r3, [pc, #48]	; (800882c <__multadd+0x84>)
 80087fa:	480d      	ldr	r0, [pc, #52]	; (8008830 <__multadd+0x88>)
 80087fc:	21ba      	movs	r1, #186	; 0xba
 80087fe:	f000 fe27 	bl	8009450 <__assert_func>
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	3202      	adds	r2, #2
 8008806:	f104 010c 	add.w	r1, r4, #12
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	300c      	adds	r0, #12
 800880e:	f7fe f967 	bl	8006ae0 <memcpy>
 8008812:	4621      	mov	r1, r4
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ffa5 	bl	8008764 <_Bfree>
 800881a:	4644      	mov	r4, r8
 800881c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008820:	3501      	adds	r5, #1
 8008822:	615e      	str	r6, [r3, #20]
 8008824:	6125      	str	r5, [r4, #16]
 8008826:	4620      	mov	r0, r4
 8008828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882c:	080098fd 	.word	0x080098fd
 8008830:	0800997f 	.word	0x0800997f

08008834 <__s2b>:
 8008834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008838:	460c      	mov	r4, r1
 800883a:	4615      	mov	r5, r2
 800883c:	461f      	mov	r7, r3
 800883e:	2209      	movs	r2, #9
 8008840:	3308      	adds	r3, #8
 8008842:	4606      	mov	r6, r0
 8008844:	fb93 f3f2 	sdiv	r3, r3, r2
 8008848:	2100      	movs	r1, #0
 800884a:	2201      	movs	r2, #1
 800884c:	429a      	cmp	r2, r3
 800884e:	db09      	blt.n	8008864 <__s2b+0x30>
 8008850:	4630      	mov	r0, r6
 8008852:	f7ff ff47 	bl	80086e4 <_Balloc>
 8008856:	b940      	cbnz	r0, 800886a <__s2b+0x36>
 8008858:	4602      	mov	r2, r0
 800885a:	4b19      	ldr	r3, [pc, #100]	; (80088c0 <__s2b+0x8c>)
 800885c:	4819      	ldr	r0, [pc, #100]	; (80088c4 <__s2b+0x90>)
 800885e:	21d3      	movs	r1, #211	; 0xd3
 8008860:	f000 fdf6 	bl	8009450 <__assert_func>
 8008864:	0052      	lsls	r2, r2, #1
 8008866:	3101      	adds	r1, #1
 8008868:	e7f0      	b.n	800884c <__s2b+0x18>
 800886a:	9b08      	ldr	r3, [sp, #32]
 800886c:	6143      	str	r3, [r0, #20]
 800886e:	2d09      	cmp	r5, #9
 8008870:	f04f 0301 	mov.w	r3, #1
 8008874:	6103      	str	r3, [r0, #16]
 8008876:	dd16      	ble.n	80088a6 <__s2b+0x72>
 8008878:	f104 0909 	add.w	r9, r4, #9
 800887c:	46c8      	mov	r8, r9
 800887e:	442c      	add	r4, r5
 8008880:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008884:	4601      	mov	r1, r0
 8008886:	3b30      	subs	r3, #48	; 0x30
 8008888:	220a      	movs	r2, #10
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ff8c 	bl	80087a8 <__multadd>
 8008890:	45a0      	cmp	r8, r4
 8008892:	d1f5      	bne.n	8008880 <__s2b+0x4c>
 8008894:	f1a5 0408 	sub.w	r4, r5, #8
 8008898:	444c      	add	r4, r9
 800889a:	1b2d      	subs	r5, r5, r4
 800889c:	1963      	adds	r3, r4, r5
 800889e:	42bb      	cmp	r3, r7
 80088a0:	db04      	blt.n	80088ac <__s2b+0x78>
 80088a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a6:	340a      	adds	r4, #10
 80088a8:	2509      	movs	r5, #9
 80088aa:	e7f6      	b.n	800889a <__s2b+0x66>
 80088ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088b0:	4601      	mov	r1, r0
 80088b2:	3b30      	subs	r3, #48	; 0x30
 80088b4:	220a      	movs	r2, #10
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ff76 	bl	80087a8 <__multadd>
 80088bc:	e7ee      	b.n	800889c <__s2b+0x68>
 80088be:	bf00      	nop
 80088c0:	080098fd 	.word	0x080098fd
 80088c4:	0800997f 	.word	0x0800997f

080088c8 <__hi0bits>:
 80088c8:	0c03      	lsrs	r3, r0, #16
 80088ca:	041b      	lsls	r3, r3, #16
 80088cc:	b9d3      	cbnz	r3, 8008904 <__hi0bits+0x3c>
 80088ce:	0400      	lsls	r0, r0, #16
 80088d0:	2310      	movs	r3, #16
 80088d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088d6:	bf04      	itt	eq
 80088d8:	0200      	lsleq	r0, r0, #8
 80088da:	3308      	addeq	r3, #8
 80088dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088e0:	bf04      	itt	eq
 80088e2:	0100      	lsleq	r0, r0, #4
 80088e4:	3304      	addeq	r3, #4
 80088e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088ea:	bf04      	itt	eq
 80088ec:	0080      	lsleq	r0, r0, #2
 80088ee:	3302      	addeq	r3, #2
 80088f0:	2800      	cmp	r0, #0
 80088f2:	db05      	blt.n	8008900 <__hi0bits+0x38>
 80088f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088f8:	f103 0301 	add.w	r3, r3, #1
 80088fc:	bf08      	it	eq
 80088fe:	2320      	moveq	r3, #32
 8008900:	4618      	mov	r0, r3
 8008902:	4770      	bx	lr
 8008904:	2300      	movs	r3, #0
 8008906:	e7e4      	b.n	80088d2 <__hi0bits+0xa>

08008908 <__lo0bits>:
 8008908:	6803      	ldr	r3, [r0, #0]
 800890a:	f013 0207 	ands.w	r2, r3, #7
 800890e:	d00c      	beq.n	800892a <__lo0bits+0x22>
 8008910:	07d9      	lsls	r1, r3, #31
 8008912:	d422      	bmi.n	800895a <__lo0bits+0x52>
 8008914:	079a      	lsls	r2, r3, #30
 8008916:	bf49      	itett	mi
 8008918:	085b      	lsrmi	r3, r3, #1
 800891a:	089b      	lsrpl	r3, r3, #2
 800891c:	6003      	strmi	r3, [r0, #0]
 800891e:	2201      	movmi	r2, #1
 8008920:	bf5c      	itt	pl
 8008922:	6003      	strpl	r3, [r0, #0]
 8008924:	2202      	movpl	r2, #2
 8008926:	4610      	mov	r0, r2
 8008928:	4770      	bx	lr
 800892a:	b299      	uxth	r1, r3
 800892c:	b909      	cbnz	r1, 8008932 <__lo0bits+0x2a>
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	2210      	movs	r2, #16
 8008932:	b2d9      	uxtb	r1, r3
 8008934:	b909      	cbnz	r1, 800893a <__lo0bits+0x32>
 8008936:	3208      	adds	r2, #8
 8008938:	0a1b      	lsrs	r3, r3, #8
 800893a:	0719      	lsls	r1, r3, #28
 800893c:	bf04      	itt	eq
 800893e:	091b      	lsreq	r3, r3, #4
 8008940:	3204      	addeq	r2, #4
 8008942:	0799      	lsls	r1, r3, #30
 8008944:	bf04      	itt	eq
 8008946:	089b      	lsreq	r3, r3, #2
 8008948:	3202      	addeq	r2, #2
 800894a:	07d9      	lsls	r1, r3, #31
 800894c:	d403      	bmi.n	8008956 <__lo0bits+0x4e>
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	f102 0201 	add.w	r2, r2, #1
 8008954:	d003      	beq.n	800895e <__lo0bits+0x56>
 8008956:	6003      	str	r3, [r0, #0]
 8008958:	e7e5      	b.n	8008926 <__lo0bits+0x1e>
 800895a:	2200      	movs	r2, #0
 800895c:	e7e3      	b.n	8008926 <__lo0bits+0x1e>
 800895e:	2220      	movs	r2, #32
 8008960:	e7e1      	b.n	8008926 <__lo0bits+0x1e>
	...

08008964 <__i2b>:
 8008964:	b510      	push	{r4, lr}
 8008966:	460c      	mov	r4, r1
 8008968:	2101      	movs	r1, #1
 800896a:	f7ff febb 	bl	80086e4 <_Balloc>
 800896e:	4602      	mov	r2, r0
 8008970:	b928      	cbnz	r0, 800897e <__i2b+0x1a>
 8008972:	4b05      	ldr	r3, [pc, #20]	; (8008988 <__i2b+0x24>)
 8008974:	4805      	ldr	r0, [pc, #20]	; (800898c <__i2b+0x28>)
 8008976:	f240 1145 	movw	r1, #325	; 0x145
 800897a:	f000 fd69 	bl	8009450 <__assert_func>
 800897e:	2301      	movs	r3, #1
 8008980:	6144      	str	r4, [r0, #20]
 8008982:	6103      	str	r3, [r0, #16]
 8008984:	bd10      	pop	{r4, pc}
 8008986:	bf00      	nop
 8008988:	080098fd 	.word	0x080098fd
 800898c:	0800997f 	.word	0x0800997f

08008990 <__multiply>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	4691      	mov	r9, r2
 8008996:	690a      	ldr	r2, [r1, #16]
 8008998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	bfb8      	it	lt
 80089a0:	460b      	movlt	r3, r1
 80089a2:	460c      	mov	r4, r1
 80089a4:	bfbc      	itt	lt
 80089a6:	464c      	movlt	r4, r9
 80089a8:	4699      	movlt	r9, r3
 80089aa:	6927      	ldr	r7, [r4, #16]
 80089ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089b0:	68a3      	ldr	r3, [r4, #8]
 80089b2:	6861      	ldr	r1, [r4, #4]
 80089b4:	eb07 060a 	add.w	r6, r7, sl
 80089b8:	42b3      	cmp	r3, r6
 80089ba:	b085      	sub	sp, #20
 80089bc:	bfb8      	it	lt
 80089be:	3101      	addlt	r1, #1
 80089c0:	f7ff fe90 	bl	80086e4 <_Balloc>
 80089c4:	b930      	cbnz	r0, 80089d4 <__multiply+0x44>
 80089c6:	4602      	mov	r2, r0
 80089c8:	4b44      	ldr	r3, [pc, #272]	; (8008adc <__multiply+0x14c>)
 80089ca:	4845      	ldr	r0, [pc, #276]	; (8008ae0 <__multiply+0x150>)
 80089cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80089d0:	f000 fd3e 	bl	8009450 <__assert_func>
 80089d4:	f100 0514 	add.w	r5, r0, #20
 80089d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089dc:	462b      	mov	r3, r5
 80089de:	2200      	movs	r2, #0
 80089e0:	4543      	cmp	r3, r8
 80089e2:	d321      	bcc.n	8008a28 <__multiply+0x98>
 80089e4:	f104 0314 	add.w	r3, r4, #20
 80089e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089ec:	f109 0314 	add.w	r3, r9, #20
 80089f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089f4:	9202      	str	r2, [sp, #8]
 80089f6:	1b3a      	subs	r2, r7, r4
 80089f8:	3a15      	subs	r2, #21
 80089fa:	f022 0203 	bic.w	r2, r2, #3
 80089fe:	3204      	adds	r2, #4
 8008a00:	f104 0115 	add.w	r1, r4, #21
 8008a04:	428f      	cmp	r7, r1
 8008a06:	bf38      	it	cc
 8008a08:	2204      	movcc	r2, #4
 8008a0a:	9201      	str	r2, [sp, #4]
 8008a0c:	9a02      	ldr	r2, [sp, #8]
 8008a0e:	9303      	str	r3, [sp, #12]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d80c      	bhi.n	8008a2e <__multiply+0x9e>
 8008a14:	2e00      	cmp	r6, #0
 8008a16:	dd03      	ble.n	8008a20 <__multiply+0x90>
 8008a18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d05b      	beq.n	8008ad8 <__multiply+0x148>
 8008a20:	6106      	str	r6, [r0, #16]
 8008a22:	b005      	add	sp, #20
 8008a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a28:	f843 2b04 	str.w	r2, [r3], #4
 8008a2c:	e7d8      	b.n	80089e0 <__multiply+0x50>
 8008a2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a32:	f1ba 0f00 	cmp.w	sl, #0
 8008a36:	d024      	beq.n	8008a82 <__multiply+0xf2>
 8008a38:	f104 0e14 	add.w	lr, r4, #20
 8008a3c:	46a9      	mov	r9, r5
 8008a3e:	f04f 0c00 	mov.w	ip, #0
 8008a42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a46:	f8d9 1000 	ldr.w	r1, [r9]
 8008a4a:	fa1f fb82 	uxth.w	fp, r2
 8008a4e:	b289      	uxth	r1, r1
 8008a50:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a58:	f8d9 2000 	ldr.w	r2, [r9]
 8008a5c:	4461      	add	r1, ip
 8008a5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a62:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a6a:	b289      	uxth	r1, r1
 8008a6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a70:	4577      	cmp	r7, lr
 8008a72:	f849 1b04 	str.w	r1, [r9], #4
 8008a76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a7a:	d8e2      	bhi.n	8008a42 <__multiply+0xb2>
 8008a7c:	9a01      	ldr	r2, [sp, #4]
 8008a7e:	f845 c002 	str.w	ip, [r5, r2]
 8008a82:	9a03      	ldr	r2, [sp, #12]
 8008a84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	f1b9 0f00 	cmp.w	r9, #0
 8008a8e:	d021      	beq.n	8008ad4 <__multiply+0x144>
 8008a90:	6829      	ldr	r1, [r5, #0]
 8008a92:	f104 0c14 	add.w	ip, r4, #20
 8008a96:	46ae      	mov	lr, r5
 8008a98:	f04f 0a00 	mov.w	sl, #0
 8008a9c:	f8bc b000 	ldrh.w	fp, [ip]
 8008aa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008aa4:	fb09 220b 	mla	r2, r9, fp, r2
 8008aa8:	4452      	add	r2, sl
 8008aaa:	b289      	uxth	r1, r1
 8008aac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ab0:	f84e 1b04 	str.w	r1, [lr], #4
 8008ab4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ab8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008abc:	f8be 1000 	ldrh.w	r1, [lr]
 8008ac0:	fb09 110a 	mla	r1, r9, sl, r1
 8008ac4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ac8:	4567      	cmp	r7, ip
 8008aca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ace:	d8e5      	bhi.n	8008a9c <__multiply+0x10c>
 8008ad0:	9a01      	ldr	r2, [sp, #4]
 8008ad2:	50a9      	str	r1, [r5, r2]
 8008ad4:	3504      	adds	r5, #4
 8008ad6:	e799      	b.n	8008a0c <__multiply+0x7c>
 8008ad8:	3e01      	subs	r6, #1
 8008ada:	e79b      	b.n	8008a14 <__multiply+0x84>
 8008adc:	080098fd 	.word	0x080098fd
 8008ae0:	0800997f 	.word	0x0800997f

08008ae4 <__pow5mult>:
 8008ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae8:	4615      	mov	r5, r2
 8008aea:	f012 0203 	ands.w	r2, r2, #3
 8008aee:	4606      	mov	r6, r0
 8008af0:	460f      	mov	r7, r1
 8008af2:	d007      	beq.n	8008b04 <__pow5mult+0x20>
 8008af4:	4c25      	ldr	r4, [pc, #148]	; (8008b8c <__pow5mult+0xa8>)
 8008af6:	3a01      	subs	r2, #1
 8008af8:	2300      	movs	r3, #0
 8008afa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008afe:	f7ff fe53 	bl	80087a8 <__multadd>
 8008b02:	4607      	mov	r7, r0
 8008b04:	10ad      	asrs	r5, r5, #2
 8008b06:	d03d      	beq.n	8008b84 <__pow5mult+0xa0>
 8008b08:	69f4      	ldr	r4, [r6, #28]
 8008b0a:	b97c      	cbnz	r4, 8008b2c <__pow5mult+0x48>
 8008b0c:	2010      	movs	r0, #16
 8008b0e:	f7ff fc75 	bl	80083fc <malloc>
 8008b12:	4602      	mov	r2, r0
 8008b14:	61f0      	str	r0, [r6, #28]
 8008b16:	b928      	cbnz	r0, 8008b24 <__pow5mult+0x40>
 8008b18:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <__pow5mult+0xac>)
 8008b1a:	481e      	ldr	r0, [pc, #120]	; (8008b94 <__pow5mult+0xb0>)
 8008b1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b20:	f000 fc96 	bl	8009450 <__assert_func>
 8008b24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b28:	6004      	str	r4, [r0, #0]
 8008b2a:	60c4      	str	r4, [r0, #12]
 8008b2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b34:	b94c      	cbnz	r4, 8008b4a <__pow5mult+0x66>
 8008b36:	f240 2171 	movw	r1, #625	; 0x271
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7ff ff12 	bl	8008964 <__i2b>
 8008b40:	2300      	movs	r3, #0
 8008b42:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b46:	4604      	mov	r4, r0
 8008b48:	6003      	str	r3, [r0, #0]
 8008b4a:	f04f 0900 	mov.w	r9, #0
 8008b4e:	07eb      	lsls	r3, r5, #31
 8008b50:	d50a      	bpl.n	8008b68 <__pow5mult+0x84>
 8008b52:	4639      	mov	r1, r7
 8008b54:	4622      	mov	r2, r4
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ff1a 	bl	8008990 <__multiply>
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	4680      	mov	r8, r0
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff fdff 	bl	8008764 <_Bfree>
 8008b66:	4647      	mov	r7, r8
 8008b68:	106d      	asrs	r5, r5, #1
 8008b6a:	d00b      	beq.n	8008b84 <__pow5mult+0xa0>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	b938      	cbnz	r0, 8008b80 <__pow5mult+0x9c>
 8008b70:	4622      	mov	r2, r4
 8008b72:	4621      	mov	r1, r4
 8008b74:	4630      	mov	r0, r6
 8008b76:	f7ff ff0b 	bl	8008990 <__multiply>
 8008b7a:	6020      	str	r0, [r4, #0]
 8008b7c:	f8c0 9000 	str.w	r9, [r0]
 8008b80:	4604      	mov	r4, r0
 8008b82:	e7e4      	b.n	8008b4e <__pow5mult+0x6a>
 8008b84:	4638      	mov	r0, r7
 8008b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8a:	bf00      	nop
 8008b8c:	08009ac8 	.word	0x08009ac8
 8008b90:	0800988e 	.word	0x0800988e
 8008b94:	0800997f 	.word	0x0800997f

08008b98 <__lshift>:
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	6849      	ldr	r1, [r1, #4]
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ba6:	68a3      	ldr	r3, [r4, #8]
 8008ba8:	4607      	mov	r7, r0
 8008baa:	4691      	mov	r9, r2
 8008bac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bb0:	f108 0601 	add.w	r6, r8, #1
 8008bb4:	42b3      	cmp	r3, r6
 8008bb6:	db0b      	blt.n	8008bd0 <__lshift+0x38>
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff fd93 	bl	80086e4 <_Balloc>
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	b948      	cbnz	r0, 8008bd6 <__lshift+0x3e>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4b28      	ldr	r3, [pc, #160]	; (8008c68 <__lshift+0xd0>)
 8008bc6:	4829      	ldr	r0, [pc, #164]	; (8008c6c <__lshift+0xd4>)
 8008bc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008bcc:	f000 fc40 	bl	8009450 <__assert_func>
 8008bd0:	3101      	adds	r1, #1
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	e7ee      	b.n	8008bb4 <__lshift+0x1c>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f100 0114 	add.w	r1, r0, #20
 8008bdc:	f100 0210 	add.w	r2, r0, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	4553      	cmp	r3, sl
 8008be4:	db33      	blt.n	8008c4e <__lshift+0xb6>
 8008be6:	6920      	ldr	r0, [r4, #16]
 8008be8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bec:	f104 0314 	add.w	r3, r4, #20
 8008bf0:	f019 091f 	ands.w	r9, r9, #31
 8008bf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bfc:	d02b      	beq.n	8008c56 <__lshift+0xbe>
 8008bfe:	f1c9 0e20 	rsb	lr, r9, #32
 8008c02:	468a      	mov	sl, r1
 8008c04:	2200      	movs	r2, #0
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	fa00 f009 	lsl.w	r0, r0, r9
 8008c0c:	4310      	orrs	r0, r2
 8008c0e:	f84a 0b04 	str.w	r0, [sl], #4
 8008c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c16:	459c      	cmp	ip, r3
 8008c18:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c1c:	d8f3      	bhi.n	8008c06 <__lshift+0x6e>
 8008c1e:	ebac 0304 	sub.w	r3, ip, r4
 8008c22:	3b15      	subs	r3, #21
 8008c24:	f023 0303 	bic.w	r3, r3, #3
 8008c28:	3304      	adds	r3, #4
 8008c2a:	f104 0015 	add.w	r0, r4, #21
 8008c2e:	4584      	cmp	ip, r0
 8008c30:	bf38      	it	cc
 8008c32:	2304      	movcc	r3, #4
 8008c34:	50ca      	str	r2, [r1, r3]
 8008c36:	b10a      	cbz	r2, 8008c3c <__lshift+0xa4>
 8008c38:	f108 0602 	add.w	r6, r8, #2
 8008c3c:	3e01      	subs	r6, #1
 8008c3e:	4638      	mov	r0, r7
 8008c40:	612e      	str	r6, [r5, #16]
 8008c42:	4621      	mov	r1, r4
 8008c44:	f7ff fd8e 	bl	8008764 <_Bfree>
 8008c48:	4628      	mov	r0, r5
 8008c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c52:	3301      	adds	r3, #1
 8008c54:	e7c5      	b.n	8008be2 <__lshift+0x4a>
 8008c56:	3904      	subs	r1, #4
 8008c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c60:	459c      	cmp	ip, r3
 8008c62:	d8f9      	bhi.n	8008c58 <__lshift+0xc0>
 8008c64:	e7ea      	b.n	8008c3c <__lshift+0xa4>
 8008c66:	bf00      	nop
 8008c68:	080098fd 	.word	0x080098fd
 8008c6c:	0800997f 	.word	0x0800997f

08008c70 <__mcmp>:
 8008c70:	b530      	push	{r4, r5, lr}
 8008c72:	6902      	ldr	r2, [r0, #16]
 8008c74:	690c      	ldr	r4, [r1, #16]
 8008c76:	1b12      	subs	r2, r2, r4
 8008c78:	d10e      	bne.n	8008c98 <__mcmp+0x28>
 8008c7a:	f100 0314 	add.w	r3, r0, #20
 8008c7e:	3114      	adds	r1, #20
 8008c80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c90:	42a5      	cmp	r5, r4
 8008c92:	d003      	beq.n	8008c9c <__mcmp+0x2c>
 8008c94:	d305      	bcc.n	8008ca2 <__mcmp+0x32>
 8008c96:	2201      	movs	r2, #1
 8008c98:	4610      	mov	r0, r2
 8008c9a:	bd30      	pop	{r4, r5, pc}
 8008c9c:	4283      	cmp	r3, r0
 8008c9e:	d3f3      	bcc.n	8008c88 <__mcmp+0x18>
 8008ca0:	e7fa      	b.n	8008c98 <__mcmp+0x28>
 8008ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ca6:	e7f7      	b.n	8008c98 <__mcmp+0x28>

08008ca8 <__mdiff>:
 8008ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	460c      	mov	r4, r1
 8008cae:	4606      	mov	r6, r0
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	4690      	mov	r8, r2
 8008cb6:	f7ff ffdb 	bl	8008c70 <__mcmp>
 8008cba:	1e05      	subs	r5, r0, #0
 8008cbc:	d110      	bne.n	8008ce0 <__mdiff+0x38>
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7ff fd0f 	bl	80086e4 <_Balloc>
 8008cc6:	b930      	cbnz	r0, 8008cd6 <__mdiff+0x2e>
 8008cc8:	4b3a      	ldr	r3, [pc, #232]	; (8008db4 <__mdiff+0x10c>)
 8008cca:	4602      	mov	r2, r0
 8008ccc:	f240 2137 	movw	r1, #567	; 0x237
 8008cd0:	4839      	ldr	r0, [pc, #228]	; (8008db8 <__mdiff+0x110>)
 8008cd2:	f000 fbbd 	bl	8009450 <__assert_func>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	bfa4      	itt	ge
 8008ce2:	4643      	movge	r3, r8
 8008ce4:	46a0      	movge	r8, r4
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cec:	bfa6      	itte	ge
 8008cee:	461c      	movge	r4, r3
 8008cf0:	2500      	movge	r5, #0
 8008cf2:	2501      	movlt	r5, #1
 8008cf4:	f7ff fcf6 	bl	80086e4 <_Balloc>
 8008cf8:	b920      	cbnz	r0, 8008d04 <__mdiff+0x5c>
 8008cfa:	4b2e      	ldr	r3, [pc, #184]	; (8008db4 <__mdiff+0x10c>)
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	f240 2145 	movw	r1, #581	; 0x245
 8008d02:	e7e5      	b.n	8008cd0 <__mdiff+0x28>
 8008d04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d08:	6926      	ldr	r6, [r4, #16]
 8008d0a:	60c5      	str	r5, [r0, #12]
 8008d0c:	f104 0914 	add.w	r9, r4, #20
 8008d10:	f108 0514 	add.w	r5, r8, #20
 8008d14:	f100 0e14 	add.w	lr, r0, #20
 8008d18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d20:	f108 0210 	add.w	r2, r8, #16
 8008d24:	46f2      	mov	sl, lr
 8008d26:	2100      	movs	r1, #0
 8008d28:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d30:	fa11 f88b 	uxtah	r8, r1, fp
 8008d34:	b299      	uxth	r1, r3
 8008d36:	0c1b      	lsrs	r3, r3, #16
 8008d38:	eba8 0801 	sub.w	r8, r8, r1
 8008d3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d44:	fa1f f888 	uxth.w	r8, r8
 8008d48:	1419      	asrs	r1, r3, #16
 8008d4a:	454e      	cmp	r6, r9
 8008d4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d50:	f84a 3b04 	str.w	r3, [sl], #4
 8008d54:	d8e8      	bhi.n	8008d28 <__mdiff+0x80>
 8008d56:	1b33      	subs	r3, r6, r4
 8008d58:	3b15      	subs	r3, #21
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	3304      	adds	r3, #4
 8008d60:	3415      	adds	r4, #21
 8008d62:	42a6      	cmp	r6, r4
 8008d64:	bf38      	it	cc
 8008d66:	2304      	movcc	r3, #4
 8008d68:	441d      	add	r5, r3
 8008d6a:	4473      	add	r3, lr
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	462e      	mov	r6, r5
 8008d70:	4566      	cmp	r6, ip
 8008d72:	d30e      	bcc.n	8008d92 <__mdiff+0xea>
 8008d74:	f10c 0203 	add.w	r2, ip, #3
 8008d78:	1b52      	subs	r2, r2, r5
 8008d7a:	f022 0203 	bic.w	r2, r2, #3
 8008d7e:	3d03      	subs	r5, #3
 8008d80:	45ac      	cmp	ip, r5
 8008d82:	bf38      	it	cc
 8008d84:	2200      	movcc	r2, #0
 8008d86:	4413      	add	r3, r2
 8008d88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d8c:	b17a      	cbz	r2, 8008dae <__mdiff+0x106>
 8008d8e:	6107      	str	r7, [r0, #16]
 8008d90:	e7a4      	b.n	8008cdc <__mdiff+0x34>
 8008d92:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d96:	fa11 f288 	uxtah	r2, r1, r8
 8008d9a:	1414      	asrs	r4, r2, #16
 8008d9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008da0:	b292      	uxth	r2, r2
 8008da2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008da6:	f84e 2b04 	str.w	r2, [lr], #4
 8008daa:	1421      	asrs	r1, r4, #16
 8008dac:	e7e0      	b.n	8008d70 <__mdiff+0xc8>
 8008dae:	3f01      	subs	r7, #1
 8008db0:	e7ea      	b.n	8008d88 <__mdiff+0xe0>
 8008db2:	bf00      	nop
 8008db4:	080098fd 	.word	0x080098fd
 8008db8:	0800997f 	.word	0x0800997f

08008dbc <__ulp>:
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	ed8d 0b00 	vstr	d0, [sp]
 8008dc2:	9a01      	ldr	r2, [sp, #4]
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <__ulp+0x48>)
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dc08      	bgt.n	8008de2 <__ulp+0x26>
 8008dd0:	425b      	negs	r3, r3
 8008dd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008dd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008dda:	da04      	bge.n	8008de6 <__ulp+0x2a>
 8008ddc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008de0:	4113      	asrs	r3, r2
 8008de2:	2200      	movs	r2, #0
 8008de4:	e008      	b.n	8008df8 <__ulp+0x3c>
 8008de6:	f1a2 0314 	sub.w	r3, r2, #20
 8008dea:	2b1e      	cmp	r3, #30
 8008dec:	bfda      	itte	le
 8008dee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008df2:	40da      	lsrle	r2, r3
 8008df4:	2201      	movgt	r2, #1
 8008df6:	2300      	movs	r3, #0
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	ec41 0b10 	vmov	d0, r0, r1
 8008e00:	b002      	add	sp, #8
 8008e02:	4770      	bx	lr
 8008e04:	7ff00000 	.word	0x7ff00000

08008e08 <__b2d>:
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	6906      	ldr	r6, [r0, #16]
 8008e0e:	f100 0814 	add.w	r8, r0, #20
 8008e12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008e16:	1f37      	subs	r7, r6, #4
 8008e18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f7ff fd53 	bl	80088c8 <__hi0bits>
 8008e22:	f1c0 0320 	rsb	r3, r0, #32
 8008e26:	280a      	cmp	r0, #10
 8008e28:	600b      	str	r3, [r1, #0]
 8008e2a:	491b      	ldr	r1, [pc, #108]	; (8008e98 <__b2d+0x90>)
 8008e2c:	dc15      	bgt.n	8008e5a <__b2d+0x52>
 8008e2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e32:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e36:	45b8      	cmp	r8, r7
 8008e38:	ea43 0501 	orr.w	r5, r3, r1
 8008e3c:	bf34      	ite	cc
 8008e3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e42:	2300      	movcs	r3, #0
 8008e44:	3015      	adds	r0, #21
 8008e46:	fa02 f000 	lsl.w	r0, r2, r0
 8008e4a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e4e:	4303      	orrs	r3, r0
 8008e50:	461c      	mov	r4, r3
 8008e52:	ec45 4b10 	vmov	d0, r4, r5
 8008e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5a:	45b8      	cmp	r8, r7
 8008e5c:	bf3a      	itte	cc
 8008e5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e62:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e66:	2300      	movcs	r3, #0
 8008e68:	380b      	subs	r0, #11
 8008e6a:	d012      	beq.n	8008e92 <__b2d+0x8a>
 8008e6c:	f1c0 0120 	rsb	r1, r0, #32
 8008e70:	fa23 f401 	lsr.w	r4, r3, r1
 8008e74:	4082      	lsls	r2, r0
 8008e76:	4322      	orrs	r2, r4
 8008e78:	4547      	cmp	r7, r8
 8008e7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008e7e:	bf8c      	ite	hi
 8008e80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e84:	2200      	movls	r2, #0
 8008e86:	4083      	lsls	r3, r0
 8008e88:	40ca      	lsrs	r2, r1
 8008e8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	e7de      	b.n	8008e50 <__b2d+0x48>
 8008e92:	ea42 0501 	orr.w	r5, r2, r1
 8008e96:	e7db      	b.n	8008e50 <__b2d+0x48>
 8008e98:	3ff00000 	.word	0x3ff00000

08008e9c <__d2b>:
 8008e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	460f      	mov	r7, r1
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	ec59 8b10 	vmov	r8, r9, d0
 8008ea8:	4616      	mov	r6, r2
 8008eaa:	f7ff fc1b 	bl	80086e4 <_Balloc>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	b930      	cbnz	r0, 8008ec0 <__d2b+0x24>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b24      	ldr	r3, [pc, #144]	; (8008f48 <__d2b+0xac>)
 8008eb6:	4825      	ldr	r0, [pc, #148]	; (8008f4c <__d2b+0xb0>)
 8008eb8:	f240 310f 	movw	r1, #783	; 0x30f
 8008ebc:	f000 fac8 	bl	8009450 <__assert_func>
 8008ec0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ec4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ec8:	bb2d      	cbnz	r5, 8008f16 <__d2b+0x7a>
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	f1b8 0300 	subs.w	r3, r8, #0
 8008ed0:	d026      	beq.n	8008f20 <__d2b+0x84>
 8008ed2:	4668      	mov	r0, sp
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	f7ff fd17 	bl	8008908 <__lo0bits>
 8008eda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ede:	b1e8      	cbz	r0, 8008f1c <__d2b+0x80>
 8008ee0:	f1c0 0320 	rsb	r3, r0, #32
 8008ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	40c2      	lsrs	r2, r0
 8008eec:	6163      	str	r3, [r4, #20]
 8008eee:	9201      	str	r2, [sp, #4]
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	61a3      	str	r3, [r4, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bf14      	ite	ne
 8008ef8:	2202      	movne	r2, #2
 8008efa:	2201      	moveq	r2, #1
 8008efc:	6122      	str	r2, [r4, #16]
 8008efe:	b1bd      	cbz	r5, 8008f30 <__d2b+0x94>
 8008f00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f04:	4405      	add	r5, r0
 8008f06:	603d      	str	r5, [r7, #0]
 8008f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f0c:	6030      	str	r0, [r6, #0]
 8008f0e:	4620      	mov	r0, r4
 8008f10:	b003      	add	sp, #12
 8008f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f1a:	e7d6      	b.n	8008eca <__d2b+0x2e>
 8008f1c:	6161      	str	r1, [r4, #20]
 8008f1e:	e7e7      	b.n	8008ef0 <__d2b+0x54>
 8008f20:	a801      	add	r0, sp, #4
 8008f22:	f7ff fcf1 	bl	8008908 <__lo0bits>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	6163      	str	r3, [r4, #20]
 8008f2a:	3020      	adds	r0, #32
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	e7e5      	b.n	8008efc <__d2b+0x60>
 8008f30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f38:	6038      	str	r0, [r7, #0]
 8008f3a:	6918      	ldr	r0, [r3, #16]
 8008f3c:	f7ff fcc4 	bl	80088c8 <__hi0bits>
 8008f40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f44:	e7e2      	b.n	8008f0c <__d2b+0x70>
 8008f46:	bf00      	nop
 8008f48:	080098fd 	.word	0x080098fd
 8008f4c:	0800997f 	.word	0x0800997f

08008f50 <__ratio>:
 8008f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	4688      	mov	r8, r1
 8008f56:	4669      	mov	r1, sp
 8008f58:	4681      	mov	r9, r0
 8008f5a:	f7ff ff55 	bl	8008e08 <__b2d>
 8008f5e:	a901      	add	r1, sp, #4
 8008f60:	4640      	mov	r0, r8
 8008f62:	ec55 4b10 	vmov	r4, r5, d0
 8008f66:	f7ff ff4f 	bl	8008e08 <__b2d>
 8008f6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f72:	eba3 0c02 	sub.w	ip, r3, r2
 8008f76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f80:	ec51 0b10 	vmov	r0, r1, d0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bfd6      	itet	le
 8008f88:	460a      	movle	r2, r1
 8008f8a:	462a      	movgt	r2, r5
 8008f8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f90:	468b      	mov	fp, r1
 8008f92:	462f      	mov	r7, r5
 8008f94:	bfd4      	ite	le
 8008f96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	ee10 2a10 	vmov	r2, s0
 8008fa4:	465b      	mov	r3, fp
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 fc50 	bl	800084c <__aeabi_ddiv>
 8008fac:	ec41 0b10 	vmov	d0, r0, r1
 8008fb0:	b003      	add	sp, #12
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fb6 <__copybits>:
 8008fb6:	3901      	subs	r1, #1
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	1149      	asrs	r1, r1, #5
 8008fbc:	6914      	ldr	r4, [r2, #16]
 8008fbe:	3101      	adds	r1, #1
 8008fc0:	f102 0314 	add.w	r3, r2, #20
 8008fc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fcc:	1f05      	subs	r5, r0, #4
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	d30c      	bcc.n	8008fec <__copybits+0x36>
 8008fd2:	1aa3      	subs	r3, r4, r2
 8008fd4:	3b11      	subs	r3, #17
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	3211      	adds	r2, #17
 8008fdc:	42a2      	cmp	r2, r4
 8008fde:	bf88      	it	hi
 8008fe0:	2300      	movhi	r3, #0
 8008fe2:	4418      	add	r0, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4288      	cmp	r0, r1
 8008fe8:	d305      	bcc.n	8008ff6 <__copybits+0x40>
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ff0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ff4:	e7eb      	b.n	8008fce <__copybits+0x18>
 8008ff6:	f840 3b04 	str.w	r3, [r0], #4
 8008ffa:	e7f4      	b.n	8008fe6 <__copybits+0x30>

08008ffc <__any_on>:
 8008ffc:	f100 0214 	add.w	r2, r0, #20
 8009000:	6900      	ldr	r0, [r0, #16]
 8009002:	114b      	asrs	r3, r1, #5
 8009004:	4298      	cmp	r0, r3
 8009006:	b510      	push	{r4, lr}
 8009008:	db11      	blt.n	800902e <__any_on+0x32>
 800900a:	dd0a      	ble.n	8009022 <__any_on+0x26>
 800900c:	f011 011f 	ands.w	r1, r1, #31
 8009010:	d007      	beq.n	8009022 <__any_on+0x26>
 8009012:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009016:	fa24 f001 	lsr.w	r0, r4, r1
 800901a:	fa00 f101 	lsl.w	r1, r0, r1
 800901e:	428c      	cmp	r4, r1
 8009020:	d10b      	bne.n	800903a <__any_on+0x3e>
 8009022:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009026:	4293      	cmp	r3, r2
 8009028:	d803      	bhi.n	8009032 <__any_on+0x36>
 800902a:	2000      	movs	r0, #0
 800902c:	bd10      	pop	{r4, pc}
 800902e:	4603      	mov	r3, r0
 8009030:	e7f7      	b.n	8009022 <__any_on+0x26>
 8009032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009036:	2900      	cmp	r1, #0
 8009038:	d0f5      	beq.n	8009026 <__any_on+0x2a>
 800903a:	2001      	movs	r0, #1
 800903c:	e7f6      	b.n	800902c <__any_on+0x30>

0800903e <__sread>:
 800903e:	b510      	push	{r4, lr}
 8009040:	460c      	mov	r4, r1
 8009042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009046:	f000 f9cf 	bl	80093e8 <_read_r>
 800904a:	2800      	cmp	r0, #0
 800904c:	bfab      	itete	ge
 800904e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009050:	89a3      	ldrhlt	r3, [r4, #12]
 8009052:	181b      	addge	r3, r3, r0
 8009054:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009058:	bfac      	ite	ge
 800905a:	6563      	strge	r3, [r4, #84]	; 0x54
 800905c:	81a3      	strhlt	r3, [r4, #12]
 800905e:	bd10      	pop	{r4, pc}

08009060 <__swrite>:
 8009060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009064:	461f      	mov	r7, r3
 8009066:	898b      	ldrh	r3, [r1, #12]
 8009068:	05db      	lsls	r3, r3, #23
 800906a:	4605      	mov	r5, r0
 800906c:	460c      	mov	r4, r1
 800906e:	4616      	mov	r6, r2
 8009070:	d505      	bpl.n	800907e <__swrite+0x1e>
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	2302      	movs	r3, #2
 8009078:	2200      	movs	r2, #0
 800907a:	f000 f9a3 	bl	80093c4 <_lseek_r>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	4632      	mov	r2, r6
 800908c:	463b      	mov	r3, r7
 800908e:	4628      	mov	r0, r5
 8009090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	f000 b9ca 	b.w	800942c <_write_r>

08009098 <__sseek>:
 8009098:	b510      	push	{r4, lr}
 800909a:	460c      	mov	r4, r1
 800909c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a0:	f000 f990 	bl	80093c4 <_lseek_r>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	bf15      	itete	ne
 80090aa:	6560      	strne	r0, [r4, #84]	; 0x54
 80090ac:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090b0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090b4:	81a3      	strheq	r3, [r4, #12]
 80090b6:	bf18      	it	ne
 80090b8:	81a3      	strhne	r3, [r4, #12]
 80090ba:	bd10      	pop	{r4, pc}

080090bc <__sclose>:
 80090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c0:	f000 b94e 	b.w	8009360 <_close_r>

080090c4 <_realloc_r>:
 80090c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c8:	4680      	mov	r8, r0
 80090ca:	4614      	mov	r4, r2
 80090cc:	460e      	mov	r6, r1
 80090ce:	b921      	cbnz	r1, 80090da <_realloc_r+0x16>
 80090d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d4:	4611      	mov	r1, r2
 80090d6:	f7ff b9b9 	b.w	800844c <_malloc_r>
 80090da:	b92a      	cbnz	r2, 80090e8 <_realloc_r+0x24>
 80090dc:	f000 f9ec 	bl	80094b8 <_free_r>
 80090e0:	4625      	mov	r5, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e8:	f000 fa32 	bl	8009550 <_malloc_usable_size_r>
 80090ec:	4284      	cmp	r4, r0
 80090ee:	4607      	mov	r7, r0
 80090f0:	d802      	bhi.n	80090f8 <_realloc_r+0x34>
 80090f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090f6:	d812      	bhi.n	800911e <_realloc_r+0x5a>
 80090f8:	4621      	mov	r1, r4
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7ff f9a6 	bl	800844c <_malloc_r>
 8009100:	4605      	mov	r5, r0
 8009102:	2800      	cmp	r0, #0
 8009104:	d0ed      	beq.n	80090e2 <_realloc_r+0x1e>
 8009106:	42bc      	cmp	r4, r7
 8009108:	4622      	mov	r2, r4
 800910a:	4631      	mov	r1, r6
 800910c:	bf28      	it	cs
 800910e:	463a      	movcs	r2, r7
 8009110:	f7fd fce6 	bl	8006ae0 <memcpy>
 8009114:	4631      	mov	r1, r6
 8009116:	4640      	mov	r0, r8
 8009118:	f000 f9ce 	bl	80094b8 <_free_r>
 800911c:	e7e1      	b.n	80090e2 <_realloc_r+0x1e>
 800911e:	4635      	mov	r5, r6
 8009120:	e7df      	b.n	80090e2 <_realloc_r+0x1e>

08009122 <__swbuf_r>:
 8009122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009124:	460e      	mov	r6, r1
 8009126:	4614      	mov	r4, r2
 8009128:	4605      	mov	r5, r0
 800912a:	b118      	cbz	r0, 8009134 <__swbuf_r+0x12>
 800912c:	6a03      	ldr	r3, [r0, #32]
 800912e:	b90b      	cbnz	r3, 8009134 <__swbuf_r+0x12>
 8009130:	f7fc fdac 	bl	8005c8c <__sinit>
 8009134:	69a3      	ldr	r3, [r4, #24]
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	071a      	lsls	r2, r3, #28
 800913c:	d525      	bpl.n	800918a <__swbuf_r+0x68>
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	b31b      	cbz	r3, 800918a <__swbuf_r+0x68>
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	6922      	ldr	r2, [r4, #16]
 8009146:	1a98      	subs	r0, r3, r2
 8009148:	6963      	ldr	r3, [r4, #20]
 800914a:	b2f6      	uxtb	r6, r6
 800914c:	4283      	cmp	r3, r0
 800914e:	4637      	mov	r7, r6
 8009150:	dc04      	bgt.n	800915c <__swbuf_r+0x3a>
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f7ff fa91 	bl	800867c <_fflush_r>
 800915a:	b9e0      	cbnz	r0, 8009196 <__swbuf_r+0x74>
 800915c:	68a3      	ldr	r3, [r4, #8]
 800915e:	3b01      	subs	r3, #1
 8009160:	60a3      	str	r3, [r4, #8]
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	6022      	str	r2, [r4, #0]
 8009168:	701e      	strb	r6, [r3, #0]
 800916a:	6962      	ldr	r2, [r4, #20]
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	429a      	cmp	r2, r3
 8009170:	d004      	beq.n	800917c <__swbuf_r+0x5a>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	07db      	lsls	r3, r3, #31
 8009176:	d506      	bpl.n	8009186 <__swbuf_r+0x64>
 8009178:	2e0a      	cmp	r6, #10
 800917a:	d104      	bne.n	8009186 <__swbuf_r+0x64>
 800917c:	4621      	mov	r1, r4
 800917e:	4628      	mov	r0, r5
 8009180:	f7ff fa7c 	bl	800867c <_fflush_r>
 8009184:	b938      	cbnz	r0, 8009196 <__swbuf_r+0x74>
 8009186:	4638      	mov	r0, r7
 8009188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918a:	4621      	mov	r1, r4
 800918c:	4628      	mov	r0, r5
 800918e:	f000 f805 	bl	800919c <__swsetup_r>
 8009192:	2800      	cmp	r0, #0
 8009194:	d0d5      	beq.n	8009142 <__swbuf_r+0x20>
 8009196:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800919a:	e7f4      	b.n	8009186 <__swbuf_r+0x64>

0800919c <__swsetup_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4b2a      	ldr	r3, [pc, #168]	; (8009248 <__swsetup_r+0xac>)
 80091a0:	4605      	mov	r5, r0
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	460c      	mov	r4, r1
 80091a6:	b118      	cbz	r0, 80091b0 <__swsetup_r+0x14>
 80091a8:	6a03      	ldr	r3, [r0, #32]
 80091aa:	b90b      	cbnz	r3, 80091b0 <__swsetup_r+0x14>
 80091ac:	f7fc fd6e 	bl	8005c8c <__sinit>
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091b6:	0718      	lsls	r0, r3, #28
 80091b8:	d422      	bmi.n	8009200 <__swsetup_r+0x64>
 80091ba:	06d9      	lsls	r1, r3, #27
 80091bc:	d407      	bmi.n	80091ce <__swsetup_r+0x32>
 80091be:	2309      	movs	r3, #9
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091cc:	e034      	b.n	8009238 <__swsetup_r+0x9c>
 80091ce:	0758      	lsls	r0, r3, #29
 80091d0:	d512      	bpl.n	80091f8 <__swsetup_r+0x5c>
 80091d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091d4:	b141      	cbz	r1, 80091e8 <__swsetup_r+0x4c>
 80091d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091da:	4299      	cmp	r1, r3
 80091dc:	d002      	beq.n	80091e4 <__swsetup_r+0x48>
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 f96a 	bl	80094b8 <_free_r>
 80091e4:	2300      	movs	r3, #0
 80091e6:	6363      	str	r3, [r4, #52]	; 0x34
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	2300      	movs	r3, #0
 80091f2:	6063      	str	r3, [r4, #4]
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f043 0308 	orr.w	r3, r3, #8
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	6923      	ldr	r3, [r4, #16]
 8009202:	b94b      	cbnz	r3, 8009218 <__swsetup_r+0x7c>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800920a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800920e:	d003      	beq.n	8009218 <__swsetup_r+0x7c>
 8009210:	4621      	mov	r1, r4
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f84d 	bl	80092b2 <__smakebuf_r>
 8009218:	89a0      	ldrh	r0, [r4, #12]
 800921a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800921e:	f010 0301 	ands.w	r3, r0, #1
 8009222:	d00a      	beq.n	800923a <__swsetup_r+0x9e>
 8009224:	2300      	movs	r3, #0
 8009226:	60a3      	str	r3, [r4, #8]
 8009228:	6963      	ldr	r3, [r4, #20]
 800922a:	425b      	negs	r3, r3
 800922c:	61a3      	str	r3, [r4, #24]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	b943      	cbnz	r3, 8009244 <__swsetup_r+0xa8>
 8009232:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009236:	d1c4      	bne.n	80091c2 <__swsetup_r+0x26>
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	0781      	lsls	r1, r0, #30
 800923c:	bf58      	it	pl
 800923e:	6963      	ldrpl	r3, [r4, #20]
 8009240:	60a3      	str	r3, [r4, #8]
 8009242:	e7f4      	b.n	800922e <__swsetup_r+0x92>
 8009244:	2000      	movs	r0, #0
 8009246:	e7f7      	b.n	8009238 <__swsetup_r+0x9c>
 8009248:	200001d0 	.word	0x200001d0

0800924c <__ascii_wctomb>:
 800924c:	b149      	cbz	r1, 8009262 <__ascii_wctomb+0x16>
 800924e:	2aff      	cmp	r2, #255	; 0xff
 8009250:	bf85      	ittet	hi
 8009252:	238a      	movhi	r3, #138	; 0x8a
 8009254:	6003      	strhi	r3, [r0, #0]
 8009256:	700a      	strbls	r2, [r1, #0]
 8009258:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800925c:	bf98      	it	ls
 800925e:	2001      	movls	r0, #1
 8009260:	4770      	bx	lr
 8009262:	4608      	mov	r0, r1
 8009264:	4770      	bx	lr

08009266 <__swhatbuf_r>:
 8009266:	b570      	push	{r4, r5, r6, lr}
 8009268:	460c      	mov	r4, r1
 800926a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926e:	2900      	cmp	r1, #0
 8009270:	b096      	sub	sp, #88	; 0x58
 8009272:	4615      	mov	r5, r2
 8009274:	461e      	mov	r6, r3
 8009276:	da0d      	bge.n	8009294 <__swhatbuf_r+0x2e>
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800927e:	f04f 0100 	mov.w	r1, #0
 8009282:	bf0c      	ite	eq
 8009284:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009288:	2340      	movne	r3, #64	; 0x40
 800928a:	2000      	movs	r0, #0
 800928c:	6031      	str	r1, [r6, #0]
 800928e:	602b      	str	r3, [r5, #0]
 8009290:	b016      	add	sp, #88	; 0x58
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	466a      	mov	r2, sp
 8009296:	f000 f873 	bl	8009380 <_fstat_r>
 800929a:	2800      	cmp	r0, #0
 800929c:	dbec      	blt.n	8009278 <__swhatbuf_r+0x12>
 800929e:	9901      	ldr	r1, [sp, #4]
 80092a0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092a4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092a8:	4259      	negs	r1, r3
 80092aa:	4159      	adcs	r1, r3
 80092ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b0:	e7eb      	b.n	800928a <__swhatbuf_r+0x24>

080092b2 <__smakebuf_r>:
 80092b2:	898b      	ldrh	r3, [r1, #12]
 80092b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092b6:	079d      	lsls	r5, r3, #30
 80092b8:	4606      	mov	r6, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	d507      	bpl.n	80092ce <__smakebuf_r+0x1c>
 80092be:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	6123      	str	r3, [r4, #16]
 80092c6:	2301      	movs	r3, #1
 80092c8:	6163      	str	r3, [r4, #20]
 80092ca:	b002      	add	sp, #8
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
 80092ce:	ab01      	add	r3, sp, #4
 80092d0:	466a      	mov	r2, sp
 80092d2:	f7ff ffc8 	bl	8009266 <__swhatbuf_r>
 80092d6:	9900      	ldr	r1, [sp, #0]
 80092d8:	4605      	mov	r5, r0
 80092da:	4630      	mov	r0, r6
 80092dc:	f7ff f8b6 	bl	800844c <_malloc_r>
 80092e0:	b948      	cbnz	r0, 80092f6 <__smakebuf_r+0x44>
 80092e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e6:	059a      	lsls	r2, r3, #22
 80092e8:	d4ef      	bmi.n	80092ca <__smakebuf_r+0x18>
 80092ea:	f023 0303 	bic.w	r3, r3, #3
 80092ee:	f043 0302 	orr.w	r3, r3, #2
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	e7e3      	b.n	80092be <__smakebuf_r+0xc>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	6020      	str	r0, [r4, #0]
 80092fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	9b00      	ldr	r3, [sp, #0]
 8009302:	6163      	str	r3, [r4, #20]
 8009304:	9b01      	ldr	r3, [sp, #4]
 8009306:	6120      	str	r0, [r4, #16]
 8009308:	b15b      	cbz	r3, 8009322 <__smakebuf_r+0x70>
 800930a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800930e:	4630      	mov	r0, r6
 8009310:	f000 f848 	bl	80093a4 <_isatty_r>
 8009314:	b128      	cbz	r0, 8009322 <__smakebuf_r+0x70>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f023 0303 	bic.w	r3, r3, #3
 800931c:	f043 0301 	orr.w	r3, r3, #1
 8009320:	81a3      	strh	r3, [r4, #12]
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	431d      	orrs	r5, r3
 8009326:	81a5      	strh	r5, [r4, #12]
 8009328:	e7cf      	b.n	80092ca <__smakebuf_r+0x18>

0800932a <memmove>:
 800932a:	4288      	cmp	r0, r1
 800932c:	b510      	push	{r4, lr}
 800932e:	eb01 0402 	add.w	r4, r1, r2
 8009332:	d902      	bls.n	800933a <memmove+0x10>
 8009334:	4284      	cmp	r4, r0
 8009336:	4623      	mov	r3, r4
 8009338:	d807      	bhi.n	800934a <memmove+0x20>
 800933a:	1e43      	subs	r3, r0, #1
 800933c:	42a1      	cmp	r1, r4
 800933e:	d008      	beq.n	8009352 <memmove+0x28>
 8009340:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009344:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009348:	e7f8      	b.n	800933c <memmove+0x12>
 800934a:	4402      	add	r2, r0
 800934c:	4601      	mov	r1, r0
 800934e:	428a      	cmp	r2, r1
 8009350:	d100      	bne.n	8009354 <memmove+0x2a>
 8009352:	bd10      	pop	{r4, pc}
 8009354:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009358:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800935c:	e7f7      	b.n	800934e <memmove+0x24>
	...

08009360 <_close_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	; (800937c <_close_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7f8 fbc3 	bl	8001af6 <_close>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_close_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_close_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	200004a4 	.word	0x200004a4

08009380 <_fstat_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d07      	ldr	r5, [pc, #28]	; (80093a0 <_fstat_r+0x20>)
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	4611      	mov	r1, r2
 800938c:	602b      	str	r3, [r5, #0]
 800938e:	f7f8 fbbe 	bl	8001b0e <_fstat>
 8009392:	1c43      	adds	r3, r0, #1
 8009394:	d102      	bne.n	800939c <_fstat_r+0x1c>
 8009396:	682b      	ldr	r3, [r5, #0]
 8009398:	b103      	cbz	r3, 800939c <_fstat_r+0x1c>
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	bd38      	pop	{r3, r4, r5, pc}
 800939e:	bf00      	nop
 80093a0:	200004a4 	.word	0x200004a4

080093a4 <_isatty_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d06      	ldr	r5, [pc, #24]	; (80093c0 <_isatty_r+0x1c>)
 80093a8:	2300      	movs	r3, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f7f8 fbbd 	bl	8001b2e <_isatty>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_isatty_r+0x1a>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_isatty_r+0x1a>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	200004a4 	.word	0x200004a4

080093c4 <_lseek_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d07      	ldr	r5, [pc, #28]	; (80093e4 <_lseek_r+0x20>)
 80093c8:	4604      	mov	r4, r0
 80093ca:	4608      	mov	r0, r1
 80093cc:	4611      	mov	r1, r2
 80093ce:	2200      	movs	r2, #0
 80093d0:	602a      	str	r2, [r5, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f7f8 fbb6 	bl	8001b44 <_lseek>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_lseek_r+0x1e>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_lseek_r+0x1e>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	200004a4 	.word	0x200004a4

080093e8 <_read_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d07      	ldr	r5, [pc, #28]	; (8009408 <_read_r+0x20>)
 80093ec:	4604      	mov	r4, r0
 80093ee:	4608      	mov	r0, r1
 80093f0:	4611      	mov	r1, r2
 80093f2:	2200      	movs	r2, #0
 80093f4:	602a      	str	r2, [r5, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	f7f8 fb60 	bl	8001abc <_read>
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	d102      	bne.n	8009406 <_read_r+0x1e>
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	b103      	cbz	r3, 8009406 <_read_r+0x1e>
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	200004a4 	.word	0x200004a4

0800940c <_sbrk_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4d06      	ldr	r5, [pc, #24]	; (8009428 <_sbrk_r+0x1c>)
 8009410:	2300      	movs	r3, #0
 8009412:	4604      	mov	r4, r0
 8009414:	4608      	mov	r0, r1
 8009416:	602b      	str	r3, [r5, #0]
 8009418:	f7f8 fba2 	bl	8001b60 <_sbrk>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_sbrk_r+0x1a>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_sbrk_r+0x1a>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	200004a4 	.word	0x200004a4

0800942c <_write_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	; (800944c <_write_r+0x20>)
 8009430:	4604      	mov	r4, r0
 8009432:	4608      	mov	r0, r1
 8009434:	4611      	mov	r1, r2
 8009436:	2200      	movs	r2, #0
 8009438:	602a      	str	r2, [r5, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f7f8 f8e2 	bl	8001604 <_write>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_write_r+0x1e>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_write_r+0x1e>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	200004a4 	.word	0x200004a4

08009450 <__assert_func>:
 8009450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009452:	4614      	mov	r4, r2
 8009454:	461a      	mov	r2, r3
 8009456:	4b09      	ldr	r3, [pc, #36]	; (800947c <__assert_func+0x2c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4605      	mov	r5, r0
 800945c:	68d8      	ldr	r0, [r3, #12]
 800945e:	b14c      	cbz	r4, 8009474 <__assert_func+0x24>
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <__assert_func+0x30>)
 8009462:	9100      	str	r1, [sp, #0]
 8009464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009468:	4906      	ldr	r1, [pc, #24]	; (8009484 <__assert_func+0x34>)
 800946a:	462b      	mov	r3, r5
 800946c:	f000 f878 	bl	8009560 <fiprintf>
 8009470:	f000 f888 	bl	8009584 <abort>
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <__assert_func+0x38>)
 8009476:	461c      	mov	r4, r3
 8009478:	e7f3      	b.n	8009462 <__assert_func+0x12>
 800947a:	bf00      	nop
 800947c:	200001d0 	.word	0x200001d0
 8009480:	08009ad4 	.word	0x08009ad4
 8009484:	08009ae1 	.word	0x08009ae1
 8009488:	08009b0f 	.word	0x08009b0f

0800948c <_calloc_r>:
 800948c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800948e:	fba1 2402 	umull	r2, r4, r1, r2
 8009492:	b94c      	cbnz	r4, 80094a8 <_calloc_r+0x1c>
 8009494:	4611      	mov	r1, r2
 8009496:	9201      	str	r2, [sp, #4]
 8009498:	f7fe ffd8 	bl	800844c <_malloc_r>
 800949c:	9a01      	ldr	r2, [sp, #4]
 800949e:	4605      	mov	r5, r0
 80094a0:	b930      	cbnz	r0, 80094b0 <_calloc_r+0x24>
 80094a2:	4628      	mov	r0, r5
 80094a4:	b003      	add	sp, #12
 80094a6:	bd30      	pop	{r4, r5, pc}
 80094a8:	220c      	movs	r2, #12
 80094aa:	6002      	str	r2, [r0, #0]
 80094ac:	2500      	movs	r5, #0
 80094ae:	e7f8      	b.n	80094a2 <_calloc_r+0x16>
 80094b0:	4621      	mov	r1, r4
 80094b2:	f7fd fadd 	bl	8006a70 <memset>
 80094b6:	e7f4      	b.n	80094a2 <_calloc_r+0x16>

080094b8 <_free_r>:
 80094b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ba:	2900      	cmp	r1, #0
 80094bc:	d044      	beq.n	8009548 <_free_r+0x90>
 80094be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c2:	9001      	str	r0, [sp, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f1a1 0404 	sub.w	r4, r1, #4
 80094ca:	bfb8      	it	lt
 80094cc:	18e4      	addlt	r4, r4, r3
 80094ce:	f7ff f8fd 	bl	80086cc <__malloc_lock>
 80094d2:	4a1e      	ldr	r2, [pc, #120]	; (800954c <_free_r+0x94>)
 80094d4:	9801      	ldr	r0, [sp, #4]
 80094d6:	6813      	ldr	r3, [r2, #0]
 80094d8:	b933      	cbnz	r3, 80094e8 <_free_r+0x30>
 80094da:	6063      	str	r3, [r4, #4]
 80094dc:	6014      	str	r4, [r2, #0]
 80094de:	b003      	add	sp, #12
 80094e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094e4:	f7ff b8f8 	b.w	80086d8 <__malloc_unlock>
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	d908      	bls.n	80094fe <_free_r+0x46>
 80094ec:	6825      	ldr	r5, [r4, #0]
 80094ee:	1961      	adds	r1, r4, r5
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf01      	itttt	eq
 80094f4:	6819      	ldreq	r1, [r3, #0]
 80094f6:	685b      	ldreq	r3, [r3, #4]
 80094f8:	1949      	addeq	r1, r1, r5
 80094fa:	6021      	streq	r1, [r4, #0]
 80094fc:	e7ed      	b.n	80094da <_free_r+0x22>
 80094fe:	461a      	mov	r2, r3
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	b10b      	cbz	r3, 8009508 <_free_r+0x50>
 8009504:	42a3      	cmp	r3, r4
 8009506:	d9fa      	bls.n	80094fe <_free_r+0x46>
 8009508:	6811      	ldr	r1, [r2, #0]
 800950a:	1855      	adds	r5, r2, r1
 800950c:	42a5      	cmp	r5, r4
 800950e:	d10b      	bne.n	8009528 <_free_r+0x70>
 8009510:	6824      	ldr	r4, [r4, #0]
 8009512:	4421      	add	r1, r4
 8009514:	1854      	adds	r4, r2, r1
 8009516:	42a3      	cmp	r3, r4
 8009518:	6011      	str	r1, [r2, #0]
 800951a:	d1e0      	bne.n	80094de <_free_r+0x26>
 800951c:	681c      	ldr	r4, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	6053      	str	r3, [r2, #4]
 8009522:	440c      	add	r4, r1
 8009524:	6014      	str	r4, [r2, #0]
 8009526:	e7da      	b.n	80094de <_free_r+0x26>
 8009528:	d902      	bls.n	8009530 <_free_r+0x78>
 800952a:	230c      	movs	r3, #12
 800952c:	6003      	str	r3, [r0, #0]
 800952e:	e7d6      	b.n	80094de <_free_r+0x26>
 8009530:	6825      	ldr	r5, [r4, #0]
 8009532:	1961      	adds	r1, r4, r5
 8009534:	428b      	cmp	r3, r1
 8009536:	bf04      	itt	eq
 8009538:	6819      	ldreq	r1, [r3, #0]
 800953a:	685b      	ldreq	r3, [r3, #4]
 800953c:	6063      	str	r3, [r4, #4]
 800953e:	bf04      	itt	eq
 8009540:	1949      	addeq	r1, r1, r5
 8009542:	6021      	streq	r1, [r4, #0]
 8009544:	6054      	str	r4, [r2, #4]
 8009546:	e7ca      	b.n	80094de <_free_r+0x26>
 8009548:	b003      	add	sp, #12
 800954a:	bd30      	pop	{r4, r5, pc}
 800954c:	2000049c 	.word	0x2000049c

08009550 <_malloc_usable_size_r>:
 8009550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009554:	1f18      	subs	r0, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfbc      	itt	lt
 800955a:	580b      	ldrlt	r3, [r1, r0]
 800955c:	18c0      	addlt	r0, r0, r3
 800955e:	4770      	bx	lr

08009560 <fiprintf>:
 8009560:	b40e      	push	{r1, r2, r3}
 8009562:	b503      	push	{r0, r1, lr}
 8009564:	4601      	mov	r1, r0
 8009566:	ab03      	add	r3, sp, #12
 8009568:	4805      	ldr	r0, [pc, #20]	; (8009580 <fiprintf+0x20>)
 800956a:	f853 2b04 	ldr.w	r2, [r3], #4
 800956e:	6800      	ldr	r0, [r0, #0]
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	f7fe fe29 	bl	80081c8 <_vfiprintf_r>
 8009576:	b002      	add	sp, #8
 8009578:	f85d eb04 	ldr.w	lr, [sp], #4
 800957c:	b003      	add	sp, #12
 800957e:	4770      	bx	lr
 8009580:	200001d0 	.word	0x200001d0

08009584 <abort>:
 8009584:	b508      	push	{r3, lr}
 8009586:	2006      	movs	r0, #6
 8009588:	f000 f82c 	bl	80095e4 <raise>
 800958c:	2001      	movs	r0, #1
 800958e:	f7f8 fa8b 	bl	8001aa8 <_exit>

08009592 <_raise_r>:
 8009592:	291f      	cmp	r1, #31
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4604      	mov	r4, r0
 8009598:	460d      	mov	r5, r1
 800959a:	d904      	bls.n	80095a6 <_raise_r+0x14>
 800959c:	2316      	movs	r3, #22
 800959e:	6003      	str	r3, [r0, #0]
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095a8:	b112      	cbz	r2, 80095b0 <_raise_r+0x1e>
 80095aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095ae:	b94b      	cbnz	r3, 80095c4 <_raise_r+0x32>
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 f831 	bl	8009618 <_getpid_r>
 80095b6:	462a      	mov	r2, r5
 80095b8:	4601      	mov	r1, r0
 80095ba:	4620      	mov	r0, r4
 80095bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095c0:	f000 b818 	b.w	80095f4 <_kill_r>
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d00a      	beq.n	80095de <_raise_r+0x4c>
 80095c8:	1c59      	adds	r1, r3, #1
 80095ca:	d103      	bne.n	80095d4 <_raise_r+0x42>
 80095cc:	2316      	movs	r3, #22
 80095ce:	6003      	str	r3, [r0, #0]
 80095d0:	2001      	movs	r0, #1
 80095d2:	e7e7      	b.n	80095a4 <_raise_r+0x12>
 80095d4:	2400      	movs	r4, #0
 80095d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095da:	4628      	mov	r0, r5
 80095dc:	4798      	blx	r3
 80095de:	2000      	movs	r0, #0
 80095e0:	e7e0      	b.n	80095a4 <_raise_r+0x12>
	...

080095e4 <raise>:
 80095e4:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <raise+0xc>)
 80095e6:	4601      	mov	r1, r0
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	f7ff bfd2 	b.w	8009592 <_raise_r>
 80095ee:	bf00      	nop
 80095f0:	200001d0 	.word	0x200001d0

080095f4 <_kill_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d07      	ldr	r5, [pc, #28]	; (8009614 <_kill_r+0x20>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4604      	mov	r4, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	4611      	mov	r1, r2
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	f7f8 fa41 	bl	8001a88 <_kill>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d102      	bne.n	8009610 <_kill_r+0x1c>
 800960a:	682b      	ldr	r3, [r5, #0]
 800960c:	b103      	cbz	r3, 8009610 <_kill_r+0x1c>
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	bd38      	pop	{r3, r4, r5, pc}
 8009612:	bf00      	nop
 8009614:	200004a4 	.word	0x200004a4

08009618 <_getpid_r>:
 8009618:	f7f8 ba2e 	b.w	8001a78 <_getpid>

0800961c <_init>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr

08009628 <_fini>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr
